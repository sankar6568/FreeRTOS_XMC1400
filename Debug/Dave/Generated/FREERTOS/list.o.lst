   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "list.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.vListInitialise,"ax",%progbits
  18              	 .align 2
  19              	 .global vListInitialise
  20              	 .code 16
  21              	 .thumb_func
  23              	vListInitialise:
  24              	.LFB42:
  25              	 .file 1 "../Dave/Generated/FREERTOS/list.c"
   1:../Dave/Generated/FREERTOS/list.c **** /*
   2:../Dave/Generated/FREERTOS/list.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/list.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/list.c ****  *
   5:../Dave/Generated/FREERTOS/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/list.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/list.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/list.c ****  *
  12:../Dave/Generated/FREERTOS/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/list.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/list.c ****  *
  15:../Dave/Generated/FREERTOS/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/list.c ****  *
  22:../Dave/Generated/FREERTOS/list.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/list.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/list.c ****  *
  25:../Dave/Generated/FREERTOS/list.c ****  */
  26:../Dave/Generated/FREERTOS/list.c **** 
  27:../Dave/Generated/FREERTOS/list.c **** 
  28:../Dave/Generated/FREERTOS/list.c **** #include <stdlib.h>
  29:../Dave/Generated/FREERTOS/list.c **** 
  30:../Dave/Generated/FREERTOS/list.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../Dave/Generated/FREERTOS/list.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../Dave/Generated/FREERTOS/list.c ****  * task.h is included from an application file. */
  33:../Dave/Generated/FREERTOS/list.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../Dave/Generated/FREERTOS/list.c **** 
  35:../Dave/Generated/FREERTOS/list.c **** #include "FreeRTOS.h"
  36:../Dave/Generated/FREERTOS/list.c **** #include "list.h"
  37:../Dave/Generated/FREERTOS/list.c **** 
  38:../Dave/Generated/FREERTOS/list.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  39:../Dave/Generated/FREERTOS/list.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  40:../Dave/Generated/FREERTOS/list.c ****  * defined for the header files above, but not in this file, in order to
  41:../Dave/Generated/FREERTOS/list.c ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  42:../Dave/Generated/FREERTOS/list.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  43:../Dave/Generated/FREERTOS/list.c **** 
  44:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------
  45:../Dave/Generated/FREERTOS/list.c **** * PUBLIC LIST API documented in list.h
  46:../Dave/Generated/FREERTOS/list.c **** *----------------------------------------------------------*/
  47:../Dave/Generated/FREERTOS/list.c **** 
  48:../Dave/Generated/FREERTOS/list.c **** void vListInitialise( List_t * const pxList )
  49:../Dave/Generated/FREERTOS/list.c **** {
  26              	 .loc 1 49 0
  27              	 .cfi_startproc
  28 0000 80B5     	 push {r7,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 8
  31              	 .cfi_offset 7,-8
  32              	 .cfi_offset 14,-4
  33 0002 82B0     	 sub sp,sp,#8
  34              	.LCFI1:
  35              	 .cfi_def_cfa_offset 16
  36 0004 00AF     	 add r7,sp,#0
  37              	.LCFI2:
  38              	 .cfi_def_cfa_register 7
  39 0006 7860     	 str r0,[r7,#4]
  50:../Dave/Generated/FREERTOS/list.c ****     /* The list structure contains a list item which is used to mark the
  51:../Dave/Generated/FREERTOS/list.c ****      * end of the list.  To initialise the list the list end is inserted
  52:../Dave/Generated/FREERTOS/list.c ****      * as the only list entry. */
  53:../Dave/Generated/FREERTOS/list.c ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  40              	 .loc 1 53 0
  41 0008 7B68     	 ldr r3,[r7,#4]
  42 000a 0833     	 add r3,r3,#8
  43 000c 1A1C     	 mov r2,r3
  44 000e 7B68     	 ldr r3,[r7,#4]
  45 0010 5A60     	 str r2,[r3,#4]
  54:../Dave/Generated/FREERTOS/list.c **** 
  55:../Dave/Generated/FREERTOS/list.c ****     /* The list end value is the highest possible value in the list to
  56:../Dave/Generated/FREERTOS/list.c ****      * ensure it remains at the end of the list. */
  57:../Dave/Generated/FREERTOS/list.c ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  46              	 .loc 1 57 0
  47 0012 7B68     	 ldr r3,[r7,#4]
  48 0014 0122     	 mov r2,#1
  49 0016 5242     	 neg r2,r2
  50 0018 9A60     	 str r2,[r3,#8]
  58:../Dave/Generated/FREERTOS/list.c **** 
  59:../Dave/Generated/FREERTOS/list.c ****     /* The list end next and previous pointers point to itself so we know
  60:../Dave/Generated/FREERTOS/list.c ****      * when the list is empty. */
  61:../Dave/Generated/FREERTOS/list.c ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  51              	 .loc 1 61 0
  52 001a 7B68     	 ldr r3,[r7,#4]
  53 001c 0833     	 add r3,r3,#8
  54 001e 1A1C     	 mov r2,r3
  55 0020 7B68     	 ldr r3,[r7,#4]
  56 0022 DA60     	 str r2,[r3,#12]
  62:../Dave/Generated/FREERTOS/list.c ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  57              	 .loc 1 62 0
  58 0024 7B68     	 ldr r3,[r7,#4]
  59 0026 0833     	 add r3,r3,#8
  60 0028 1A1C     	 mov r2,r3
  61 002a 7B68     	 ldr r3,[r7,#4]
  62 002c 1A61     	 str r2,[r3,#16]
  63:../Dave/Generated/FREERTOS/list.c **** 
  64:../Dave/Generated/FREERTOS/list.c ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  63              	 .loc 1 64 0
  64 002e 7B68     	 ldr r3,[r7,#4]
  65 0030 0022     	 mov r2,#0
  66 0032 1A60     	 str r2,[r3]
  65:../Dave/Generated/FREERTOS/list.c **** 
  66:../Dave/Generated/FREERTOS/list.c ****     /* Write known values into the list if
  67:../Dave/Generated/FREERTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  68:../Dave/Generated/FREERTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  69:../Dave/Generated/FREERTOS/list.c ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  70:../Dave/Generated/FREERTOS/list.c **** }
  67              	 .loc 1 70 0
  68 0034 BD46     	 mov sp,r7
  69 0036 02B0     	 add sp,sp,#8
  70              	 
  71 0038 80BD     	 pop {r7,pc}
  72              	 .cfi_endproc
  73              	.LFE42:
  75 003a C046     	 .section .text.vListInitialiseItem,"ax",%progbits
  76              	 .align 2
  77              	 .global vListInitialiseItem
  78              	 .code 16
  79              	 .thumb_func
  81              	vListInitialiseItem:
  82              	.LFB43:
  71:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
  72:../Dave/Generated/FREERTOS/list.c **** 
  73:../Dave/Generated/FREERTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  74:../Dave/Generated/FREERTOS/list.c **** {
  83              	 .loc 1 74 0
  84              	 .cfi_startproc
  85 0000 80B5     	 push {r7,lr}
  86              	.LCFI3:
  87              	 .cfi_def_cfa_offset 8
  88              	 .cfi_offset 7,-8
  89              	 .cfi_offset 14,-4
  90 0002 82B0     	 sub sp,sp,#8
  91              	.LCFI4:
  92              	 .cfi_def_cfa_offset 16
  93 0004 00AF     	 add r7,sp,#0
  94              	.LCFI5:
  95              	 .cfi_def_cfa_register 7
  96 0006 7860     	 str r0,[r7,#4]
  75:../Dave/Generated/FREERTOS/list.c ****     /* Make sure the list item is not recorded as being on a list. */
  76:../Dave/Generated/FREERTOS/list.c ****     pxItem->pxContainer = NULL;
  97              	 .loc 1 76 0
  98 0008 7B68     	 ldr r3,[r7,#4]
  99 000a 0022     	 mov r2,#0
 100 000c 1A61     	 str r2,[r3,#16]
  77:../Dave/Generated/FREERTOS/list.c **** 
  78:../Dave/Generated/FREERTOS/list.c ****     /* Write known values into the list item if
  79:../Dave/Generated/FREERTOS/list.c ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  80:../Dave/Generated/FREERTOS/list.c ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  81:../Dave/Generated/FREERTOS/list.c ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  82:../Dave/Generated/FREERTOS/list.c **** }
 101              	 .loc 1 82 0
 102 000e BD46     	 mov sp,r7
 103 0010 02B0     	 add sp,sp,#8
 104              	 
 105 0012 80BD     	 pop {r7,pc}
 106              	 .cfi_endproc
 107              	.LFE43:
 109              	 .section .text.vListInsertEnd,"ax",%progbits
 110              	 .align 2
 111              	 .global vListInsertEnd
 112              	 .code 16
 113              	 .thumb_func
 115              	vListInsertEnd:
 116              	.LFB44:
  83:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
  84:../Dave/Generated/FREERTOS/list.c **** 
  85:../Dave/Generated/FREERTOS/list.c **** void vListInsertEnd( List_t * const pxList,
  86:../Dave/Generated/FREERTOS/list.c ****                      ListItem_t * const pxNewListItem )
  87:../Dave/Generated/FREERTOS/list.c **** {
 117              	 .loc 1 87 0
 118              	 .cfi_startproc
 119 0000 80B5     	 push {r7,lr}
 120              	.LCFI6:
 121              	 .cfi_def_cfa_offset 8
 122              	 .cfi_offset 7,-8
 123              	 .cfi_offset 14,-4
 124 0002 84B0     	 sub sp,sp,#16
 125              	.LCFI7:
 126              	 .cfi_def_cfa_offset 24
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI8:
 129              	 .cfi_def_cfa_register 7
 130 0006 7860     	 str r0,[r7,#4]
 131 0008 3960     	 str r1,[r7]
  88:../Dave/Generated/FREERTOS/list.c ****     ListItem_t * const pxIndex = pxList->pxIndex;
 132              	 .loc 1 88 0
 133 000a 7B68     	 ldr r3,[r7,#4]
 134 000c 5B68     	 ldr r3,[r3,#4]
 135 000e FB60     	 str r3,[r7,#12]
  89:../Dave/Generated/FREERTOS/list.c **** 
  90:../Dave/Generated/FREERTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
  91:../Dave/Generated/FREERTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
  92:../Dave/Generated/FREERTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  93:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
  94:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  95:../Dave/Generated/FREERTOS/list.c **** 
  96:../Dave/Generated/FREERTOS/list.c ****     /* Insert a new list item into pxList, but rather than sort the list,
  97:../Dave/Generated/FREERTOS/list.c ****      * makes the new list item the last item to be removed by a call to
  98:../Dave/Generated/FREERTOS/list.c ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
  99:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxNext = pxIndex;
 136              	 .loc 1 99 0
 137 0010 3B68     	 ldr r3,[r7]
 138 0012 FA68     	 ldr r2,[r7,#12]
 139 0014 5A60     	 str r2,[r3,#4]
 100:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 140              	 .loc 1 100 0
 141 0016 FB68     	 ldr r3,[r7,#12]
 142 0018 9A68     	 ldr r2,[r3,#8]
 143 001a 3B68     	 ldr r3,[r7]
 144 001c 9A60     	 str r2,[r3,#8]
 101:../Dave/Generated/FREERTOS/list.c **** 
 102:../Dave/Generated/FREERTOS/list.c ****     /* Only used during decision coverage testing. */
 103:../Dave/Generated/FREERTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 104:../Dave/Generated/FREERTOS/list.c **** 
 105:../Dave/Generated/FREERTOS/list.c ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 145              	 .loc 1 105 0
 146 001e FB68     	 ldr r3,[r7,#12]
 147 0020 9B68     	 ldr r3,[r3,#8]
 148 0022 3A68     	 ldr r2,[r7]
 149 0024 5A60     	 str r2,[r3,#4]
 106:../Dave/Generated/FREERTOS/list.c ****     pxIndex->pxPrevious = pxNewListItem;
 150              	 .loc 1 106 0
 151 0026 FB68     	 ldr r3,[r7,#12]
 152 0028 3A68     	 ldr r2,[r7]
 153 002a 9A60     	 str r2,[r3,#8]
 107:../Dave/Generated/FREERTOS/list.c **** 
 108:../Dave/Generated/FREERTOS/list.c ****     /* Remember which list the item is in. */
 109:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 154              	 .loc 1 109 0
 155 002c 3B68     	 ldr r3,[r7]
 156 002e 7A68     	 ldr r2,[r7,#4]
 157 0030 1A61     	 str r2,[r3,#16]
 110:../Dave/Generated/FREERTOS/list.c **** 
 111:../Dave/Generated/FREERTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 158              	 .loc 1 111 0
 159 0032 7B68     	 ldr r3,[r7,#4]
 160 0034 1B68     	 ldr r3,[r3]
 161 0036 5A1C     	 add r2,r3,#1
 162 0038 7B68     	 ldr r3,[r7,#4]
 163 003a 1A60     	 str r2,[r3]
 112:../Dave/Generated/FREERTOS/list.c **** }
 164              	 .loc 1 112 0
 165 003c BD46     	 mov sp,r7
 166 003e 04B0     	 add sp,sp,#16
 167              	 
 168 0040 80BD     	 pop {r7,pc}
 169              	 .cfi_endproc
 170              	.LFE44:
 172 0042 C046     	 .section .text.vListInsert,"ax",%progbits
 173              	 .align 2
 174              	 .global vListInsert
 175              	 .code 16
 176              	 .thumb_func
 178              	vListInsert:
 179              	.LFB45:
 113:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 114:../Dave/Generated/FREERTOS/list.c **** 
 115:../Dave/Generated/FREERTOS/list.c **** void vListInsert( List_t * const pxList,
 116:../Dave/Generated/FREERTOS/list.c ****                   ListItem_t * const pxNewListItem )
 117:../Dave/Generated/FREERTOS/list.c **** {
 180              	 .loc 1 117 0
 181              	 .cfi_startproc
 182 0000 80B5     	 push {r7,lr}
 183              	.LCFI9:
 184              	 .cfi_def_cfa_offset 8
 185              	 .cfi_offset 7,-8
 186              	 .cfi_offset 14,-4
 187 0002 84B0     	 sub sp,sp,#16
 188              	.LCFI10:
 189              	 .cfi_def_cfa_offset 24
 190 0004 00AF     	 add r7,sp,#0
 191              	.LCFI11:
 192              	 .cfi_def_cfa_register 7
 193 0006 7860     	 str r0,[r7,#4]
 194 0008 3960     	 str r1,[r7]
 118:../Dave/Generated/FREERTOS/list.c ****     ListItem_t * pxIterator;
 119:../Dave/Generated/FREERTOS/list.c ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 195              	 .loc 1 119 0
 196 000a 3B68     	 ldr r3,[r7]
 197 000c 1B68     	 ldr r3,[r3]
 198 000e BB60     	 str r3,[r7,#8]
 120:../Dave/Generated/FREERTOS/list.c **** 
 121:../Dave/Generated/FREERTOS/list.c ****     /* Only effective when configASSERT() is also defined, these tests may catch
 122:../Dave/Generated/FREERTOS/list.c ****      * the list data structures being overwritten in memory.  They will not catch
 123:../Dave/Generated/FREERTOS/list.c ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 124:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_INTEGRITY( pxList );
 125:../Dave/Generated/FREERTOS/list.c ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 126:../Dave/Generated/FREERTOS/list.c **** 
 127:../Dave/Generated/FREERTOS/list.c ****     /* Insert the new list item into the list, sorted in xItemValue order.
 128:../Dave/Generated/FREERTOS/list.c ****      *
 129:../Dave/Generated/FREERTOS/list.c ****      * If the list already contains a list item with the same item value then the
 130:../Dave/Generated/FREERTOS/list.c ****      * new list item should be placed after it.  This ensures that TCBs which are
 131:../Dave/Generated/FREERTOS/list.c ****      * stored in ready lists (all of which have the same xItemValue value) get a
 132:../Dave/Generated/FREERTOS/list.c ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 133:../Dave/Generated/FREERTOS/list.c ****      * the iteration loop below will not end.  Therefore the value is checked
 134:../Dave/Generated/FREERTOS/list.c ****      * first, and the algorithm slightly modified if necessary. */
 135:../Dave/Generated/FREERTOS/list.c ****     if( xValueOfInsertion == portMAX_DELAY )
 199              	 .loc 1 135 0
 200 0010 BB68     	 ldr r3,[r7,#8]
 201 0012 0133     	 add r3,r3,#1
 202 0014 03D1     	 bne .L5
 136:../Dave/Generated/FREERTOS/list.c ****     {
 137:../Dave/Generated/FREERTOS/list.c ****         pxIterator = pxList->xListEnd.pxPrevious;
 203              	 .loc 1 137 0
 204 0016 7B68     	 ldr r3,[r7,#4]
 205 0018 1B69     	 ldr r3,[r3,#16]
 206 001a FB60     	 str r3,[r7,#12]
 207 001c 0CE0     	 b .L6
 208              	.L5:
 138:../Dave/Generated/FREERTOS/list.c ****     }
 139:../Dave/Generated/FREERTOS/list.c ****     else
 140:../Dave/Generated/FREERTOS/list.c ****     {
 141:../Dave/Generated/FREERTOS/list.c ****         /* *** NOTE ***********************************************************
 142:../Dave/Generated/FREERTOS/list.c ****         *  If you find your application is crashing here then likely causes are
 143:../Dave/Generated/FREERTOS/list.c ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 144:../Dave/Generated/FREERTOS/list.c ****         *  more tips, and ensure configASSERT() is defined!
 145:../Dave/Generated/FREERTOS/list.c ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 146:../Dave/Generated/FREERTOS/list.c ****         *
 147:../Dave/Generated/FREERTOS/list.c ****         *   1) Stack overflow -
 148:../Dave/Generated/FREERTOS/list.c ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 149:../Dave/Generated/FREERTOS/list.c ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 150:../Dave/Generated/FREERTOS/list.c ****         *      parts where numerically high priority values denote low actual
 151:../Dave/Generated/FREERTOS/list.c ****         *      interrupt priorities, which can seem counter intuitive.  See
 152:../Dave/Generated/FREERTOS/list.c ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 153:../Dave/Generated/FREERTOS/list.c ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 154:../Dave/Generated/FREERTOS/list.c ****         *      https://www.FreeRTOS.org/a00110.html
 155:../Dave/Generated/FREERTOS/list.c ****         *   3) Calling an API function from within a critical section or when
 156:../Dave/Generated/FREERTOS/list.c ****         *      the scheduler is suspended, or calling an API function that does
 157:../Dave/Generated/FREERTOS/list.c ****         *      not end in "FromISR" from an interrupt.
 158:../Dave/Generated/FREERTOS/list.c ****         *   4) Using a queue or semaphore before it has been initialised or
 159:../Dave/Generated/FREERTOS/list.c ****         *      before the scheduler has been started (are interrupts firing
 160:../Dave/Generated/FREERTOS/list.c ****         *      before vTaskStartScheduler() has been called?).
 161:../Dave/Generated/FREERTOS/list.c ****         **********************************************************************/
 162:../Dave/Generated/FREERTOS/list.c **** 
 163:../Dave/Generated/FREERTOS/list.c ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 209              	 .loc 1 163 0
 210 001e 7B68     	 ldr r3,[r7,#4]
 211 0020 0833     	 add r3,r3,#8
 212 0022 FB60     	 str r3,[r7,#12]
 213 0024 02E0     	 b .L7
 214              	.L8:
 215              	 .loc 1 163 0 is_stmt 0 discriminator 3
 216 0026 FB68     	 ldr r3,[r7,#12]
 217 0028 5B68     	 ldr r3,[r3,#4]
 218 002a FB60     	 str r3,[r7,#12]
 219              	.L7:
 220              	 .loc 1 163 0 discriminator 1
 221 002c FB68     	 ldr r3,[r7,#12]
 222 002e 5B68     	 ldr r3,[r3,#4]
 223 0030 1A68     	 ldr r2,[r3]
 224 0032 BB68     	 ldr r3,[r7,#8]
 225 0034 9A42     	 cmp r2,r3
 226 0036 F6D9     	 bls .L8
 227              	.L6:
 164:../Dave/Generated/FREERTOS/list.c ****         {
 165:../Dave/Generated/FREERTOS/list.c ****             /* There is nothing to do here, just iterating to the wanted
 166:../Dave/Generated/FREERTOS/list.c ****              * insertion position. */
 167:../Dave/Generated/FREERTOS/list.c ****         }
 168:../Dave/Generated/FREERTOS/list.c ****     }
 169:../Dave/Generated/FREERTOS/list.c **** 
 170:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxNext = pxIterator->pxNext;
 228              	 .loc 1 170 0 is_stmt 1
 229 0038 FB68     	 ldr r3,[r7,#12]
 230 003a 5A68     	 ldr r2,[r3,#4]
 231 003c 3B68     	 ldr r3,[r7]
 232 003e 5A60     	 str r2,[r3,#4]
 171:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 233              	 .loc 1 171 0
 234 0040 3B68     	 ldr r3,[r7]
 235 0042 5B68     	 ldr r3,[r3,#4]
 236 0044 3A68     	 ldr r2,[r7]
 237 0046 9A60     	 str r2,[r3,#8]
 172:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxPrevious = pxIterator;
 238              	 .loc 1 172 0
 239 0048 3B68     	 ldr r3,[r7]
 240 004a FA68     	 ldr r2,[r7,#12]
 241 004c 9A60     	 str r2,[r3,#8]
 173:../Dave/Generated/FREERTOS/list.c ****     pxIterator->pxNext = pxNewListItem;
 242              	 .loc 1 173 0
 243 004e FB68     	 ldr r3,[r7,#12]
 244 0050 3A68     	 ldr r2,[r7]
 245 0052 5A60     	 str r2,[r3,#4]
 174:../Dave/Generated/FREERTOS/list.c **** 
 175:../Dave/Generated/FREERTOS/list.c ****     /* Remember which list the item is in.  This allows fast removal of the
 176:../Dave/Generated/FREERTOS/list.c ****      * item later. */
 177:../Dave/Generated/FREERTOS/list.c ****     pxNewListItem->pxContainer = pxList;
 246              	 .loc 1 177 0
 247 0054 3B68     	 ldr r3,[r7]
 248 0056 7A68     	 ldr r2,[r7,#4]
 249 0058 1A61     	 str r2,[r3,#16]
 178:../Dave/Generated/FREERTOS/list.c **** 
 179:../Dave/Generated/FREERTOS/list.c ****     ( pxList->uxNumberOfItems )++;
 250              	 .loc 1 179 0
 251 005a 7B68     	 ldr r3,[r7,#4]
 252 005c 1B68     	 ldr r3,[r3]
 253 005e 5A1C     	 add r2,r3,#1
 254 0060 7B68     	 ldr r3,[r7,#4]
 255 0062 1A60     	 str r2,[r3]
 180:../Dave/Generated/FREERTOS/list.c **** }
 256              	 .loc 1 180 0
 257 0064 BD46     	 mov sp,r7
 258 0066 04B0     	 add sp,sp,#16
 259              	 
 260 0068 80BD     	 pop {r7,pc}
 261              	 .cfi_endproc
 262              	.LFE45:
 264 006a C046     	 .section .text.uxListRemove,"ax",%progbits
 265              	 .align 2
 266              	 .global uxListRemove
 267              	 .code 16
 268              	 .thumb_func
 270              	uxListRemove:
 271              	.LFB46:
 181:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 182:../Dave/Generated/FREERTOS/list.c **** 
 183:../Dave/Generated/FREERTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 184:../Dave/Generated/FREERTOS/list.c **** {
 272              	 .loc 1 184 0
 273              	 .cfi_startproc
 274 0000 80B5     	 push {r7,lr}
 275              	.LCFI12:
 276              	 .cfi_def_cfa_offset 8
 277              	 .cfi_offset 7,-8
 278              	 .cfi_offset 14,-4
 279 0002 84B0     	 sub sp,sp,#16
 280              	.LCFI13:
 281              	 .cfi_def_cfa_offset 24
 282 0004 00AF     	 add r7,sp,#0
 283              	.LCFI14:
 284              	 .cfi_def_cfa_register 7
 285 0006 7860     	 str r0,[r7,#4]
 185:../Dave/Generated/FREERTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 186:../Dave/Generated/FREERTOS/list.c ****  * item. */
 187:../Dave/Generated/FREERTOS/list.c ****     List_t * const pxList = pxItemToRemove->pxContainer;
 286              	 .loc 1 187 0
 287 0008 7B68     	 ldr r3,[r7,#4]
 288 000a 1B69     	 ldr r3,[r3,#16]
 289 000c FB60     	 str r3,[r7,#12]
 188:../Dave/Generated/FREERTOS/list.c **** 
 189:../Dave/Generated/FREERTOS/list.c ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 290              	 .loc 1 189 0
 291 000e 7B68     	 ldr r3,[r7,#4]
 292 0010 5B68     	 ldr r3,[r3,#4]
 293 0012 7A68     	 ldr r2,[r7,#4]
 294 0014 9268     	 ldr r2,[r2,#8]
 295 0016 9A60     	 str r2,[r3,#8]
 190:../Dave/Generated/FREERTOS/list.c ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 296              	 .loc 1 190 0
 297 0018 7B68     	 ldr r3,[r7,#4]
 298 001a 9B68     	 ldr r3,[r3,#8]
 299 001c 7A68     	 ldr r2,[r7,#4]
 300 001e 5268     	 ldr r2,[r2,#4]
 301 0020 5A60     	 str r2,[r3,#4]
 191:../Dave/Generated/FREERTOS/list.c **** 
 192:../Dave/Generated/FREERTOS/list.c ****     /* Only used during decision coverage testing. */
 193:../Dave/Generated/FREERTOS/list.c ****     mtCOVERAGE_TEST_DELAY();
 194:../Dave/Generated/FREERTOS/list.c **** 
 195:../Dave/Generated/FREERTOS/list.c ****     /* Make sure the index is left pointing to a valid item. */
 196:../Dave/Generated/FREERTOS/list.c ****     if( pxList->pxIndex == pxItemToRemove )
 302              	 .loc 1 196 0
 303 0022 FB68     	 ldr r3,[r7,#12]
 304 0024 5A68     	 ldr r2,[r3,#4]
 305 0026 7B68     	 ldr r3,[r7,#4]
 306 0028 9A42     	 cmp r2,r3
 307 002a 03D1     	 bne .L10
 197:../Dave/Generated/FREERTOS/list.c ****     {
 198:../Dave/Generated/FREERTOS/list.c ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 308              	 .loc 1 198 0
 309 002c 7B68     	 ldr r3,[r7,#4]
 310 002e 9A68     	 ldr r2,[r3,#8]
 311 0030 FB68     	 ldr r3,[r7,#12]
 312 0032 5A60     	 str r2,[r3,#4]
 313              	.L10:
 199:../Dave/Generated/FREERTOS/list.c ****     }
 200:../Dave/Generated/FREERTOS/list.c ****     else
 201:../Dave/Generated/FREERTOS/list.c ****     {
 202:../Dave/Generated/FREERTOS/list.c ****         mtCOVERAGE_TEST_MARKER();
 203:../Dave/Generated/FREERTOS/list.c ****     }
 204:../Dave/Generated/FREERTOS/list.c **** 
 205:../Dave/Generated/FREERTOS/list.c ****     pxItemToRemove->pxContainer = NULL;
 314              	 .loc 1 205 0
 315 0034 7B68     	 ldr r3,[r7,#4]
 316 0036 0022     	 mov r2,#0
 317 0038 1A61     	 str r2,[r3,#16]
 206:../Dave/Generated/FREERTOS/list.c ****     ( pxList->uxNumberOfItems )--;
 318              	 .loc 1 206 0
 319 003a FB68     	 ldr r3,[r7,#12]
 320 003c 1B68     	 ldr r3,[r3]
 321 003e 5A1E     	 sub r2,r3,#1
 322 0040 FB68     	 ldr r3,[r7,#12]
 323 0042 1A60     	 str r2,[r3]
 207:../Dave/Generated/FREERTOS/list.c **** 
 208:../Dave/Generated/FREERTOS/list.c ****     return pxList->uxNumberOfItems;
 324              	 .loc 1 208 0
 325 0044 FB68     	 ldr r3,[r7,#12]
 326 0046 1B68     	 ldr r3,[r3]
 209:../Dave/Generated/FREERTOS/list.c **** }
 327              	 .loc 1 209 0
 328 0048 181C     	 mov r0,r3
 329 004a BD46     	 mov sp,r7
 330 004c 04B0     	 add sp,sp,#16
 331              	 
 332 004e 80BD     	 pop {r7,pc}
 333              	 .cfi_endproc
 334              	.LFE46:
 336              	 .text
 337              	.Letext0:
 338              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 339              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 340              	 .file 4 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
 341              	 .file 5 "../Dave/Generated/FREERTOS/list.h"
 342              	 .file 6 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
    {standard input}:18     .text.vListInitialise:00000000 $t
    {standard input}:23     .text.vListInitialise:00000000 vListInitialise
    {standard input}:76     .text.vListInitialiseItem:00000000 $t
    {standard input}:81     .text.vListInitialiseItem:00000000 vListInitialiseItem
    {standard input}:110    .text.vListInsertEnd:00000000 $t
    {standard input}:115    .text.vListInsertEnd:00000000 vListInsertEnd
    {standard input}:173    .text.vListInsert:00000000 $t
    {standard input}:178    .text.vListInsert:00000000 vListInsert
    {standard input}:265    .text.uxListRemove:00000000 $t
    {standard input}:270    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
