   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "timers.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .bss.xActiveTimerList1,"aw",%nobits
  18              	 .align 2
  21              	xActiveTimerList1:
  22 0000 00000000 	 .space 20
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              	 .section .bss.xActiveTimerList2,"aw",%nobits
  24              	 .align 2
  27              	xActiveTimerList2:
  28 0000 00000000 	 .space 20
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              	 .section .bss.pxCurrentTimerList,"aw",%nobits
  30              	 .align 2
  33              	pxCurrentTimerList:
  34 0000 00000000 	 .space 4
  35              	 .section .bss.pxOverflowTimerList,"aw",%nobits
  36              	 .align 2
  39              	pxOverflowTimerList:
  40 0000 00000000 	 .space 4
  41              	 .section .bss.xTimerQueue,"aw",%nobits
  42              	 .align 2
  45              	xTimerQueue:
  46 0000 00000000 	 .space 4
  47              	 .section .bss.xTimerTaskHandle,"aw",%nobits
  48              	 .align 2
  51              	xTimerTaskHandle:
  52 0000 00000000 	 .space 4
  53              	 .section .rodata
  54              	 .align 2
  55              	.LC2:
  56 0000 546D7220 	 .ascii "Tmr Svc\000"
  56      53766300 
  57              	 .section .text.xTimerCreateTimerTask,"ax",%progbits
  58              	 .align 2
  59              	 .global xTimerCreateTimerTask
  60              	 .code 16
  61              	 .thumb_func
  63              	xTimerCreateTimerTask:
  64              	.LFB42:
  65              	 .file 1 "../Dave/Generated/FREERTOS/timers.c"
   1:../Dave/Generated/FREERTOS/timers.c **** /*
   2:../Dave/Generated/FREERTOS/timers.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/timers.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/timers.c ****  *
   5:../Dave/Generated/FREERTOS/timers.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/timers.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/timers.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/timers.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/timers.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/timers.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/timers.c ****  *
  12:../Dave/Generated/FREERTOS/timers.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/timers.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/timers.c ****  *
  15:../Dave/Generated/FREERTOS/timers.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/timers.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/timers.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/timers.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/timers.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/timers.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/timers.c ****  *
  22:../Dave/Generated/FREERTOS/timers.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/timers.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/timers.c ****  *
  25:../Dave/Generated/FREERTOS/timers.c ****  */
  26:../Dave/Generated/FREERTOS/timers.c **** 
  27:../Dave/Generated/FREERTOS/timers.c **** /* Standard includes. */
  28:../Dave/Generated/FREERTOS/timers.c **** #include <stdlib.h>
  29:../Dave/Generated/FREERTOS/timers.c **** 
  30:../Dave/Generated/FREERTOS/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../Dave/Generated/FREERTOS/timers.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../Dave/Generated/FREERTOS/timers.c ****  * task.h is included from an application file. */
  33:../Dave/Generated/FREERTOS/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../Dave/Generated/FREERTOS/timers.c **** 
  35:../Dave/Generated/FREERTOS/timers.c **** #include "FreeRTOS.h"
  36:../Dave/Generated/FREERTOS/timers.c **** #include "task.h"
  37:../Dave/Generated/FREERTOS/timers.c **** #include "queue.h"
  38:../Dave/Generated/FREERTOS/timers.c **** #include "timers.h"
  39:../Dave/Generated/FREERTOS/timers.c **** 
  40:../Dave/Generated/FREERTOS/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  41:../Dave/Generated/FREERTOS/timers.c ****     #error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function availabl
  42:../Dave/Generated/FREERTOS/timers.c **** #endif
  43:../Dave/Generated/FREERTOS/timers.c **** 
  44:../Dave/Generated/FREERTOS/timers.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:../Dave/Generated/FREERTOS/timers.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:../Dave/Generated/FREERTOS/timers.c ****  * for the header files above, but not in this file, in order to generate the
  47:../Dave/Generated/FREERTOS/timers.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:../Dave/Generated/FREERTOS/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e9021 !e961 !e750. */
  49:../Dave/Generated/FREERTOS/timers.c **** 
  50:../Dave/Generated/FREERTOS/timers.c **** 
  51:../Dave/Generated/FREERTOS/timers.c **** /* This entire source file will be skipped if the application is not configured
  52:../Dave/Generated/FREERTOS/timers.c ****  * to include software timer functionality.  This #if is closed at the very bottom
  53:../Dave/Generated/FREERTOS/timers.c ****  * of this file.  If you want to include software timer functionality then ensure
  54:../Dave/Generated/FREERTOS/timers.c ****  * configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  55:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TIMERS == 1 )
  56:../Dave/Generated/FREERTOS/timers.c **** 
  57:../Dave/Generated/FREERTOS/timers.c **** /* Misc definitions. */
  58:../Dave/Generated/FREERTOS/timers.c ****     #define tmrNO_DELAY    ( TickType_t ) 0U
  59:../Dave/Generated/FREERTOS/timers.c **** 
  60:../Dave/Generated/FREERTOS/timers.c **** /* The name assigned to the timer service task.  This can be overridden by
  61:../Dave/Generated/FREERTOS/timers.c ****  * defining trmTIMER_SERVICE_TASK_NAME in FreeRTOSConfig.h. */
  62:../Dave/Generated/FREERTOS/timers.c ****     #ifndef configTIMER_SERVICE_TASK_NAME
  63:../Dave/Generated/FREERTOS/timers.c ****         #define configTIMER_SERVICE_TASK_NAME    "Tmr Svc"
  64:../Dave/Generated/FREERTOS/timers.c ****     #endif
  65:../Dave/Generated/FREERTOS/timers.c **** 
  66:../Dave/Generated/FREERTOS/timers.c **** /* Bit definitions used in the ucStatus member of a timer structure. */
  67:../Dave/Generated/FREERTOS/timers.c ****     #define tmrSTATUS_IS_ACTIVE                  ( ( uint8_t ) 0x01 )
  68:../Dave/Generated/FREERTOS/timers.c ****     #define tmrSTATUS_IS_STATICALLY_ALLOCATED    ( ( uint8_t ) 0x02 )
  69:../Dave/Generated/FREERTOS/timers.c ****     #define tmrSTATUS_IS_AUTORELOAD              ( ( uint8_t ) 0x04 )
  70:../Dave/Generated/FREERTOS/timers.c **** 
  71:../Dave/Generated/FREERTOS/timers.c **** /* The definition of the timers themselves. */
  72:../Dave/Generated/FREERTOS/timers.c ****     typedef struct tmrTimerControl                  /* The old naming convention is used to prevent
  73:../Dave/Generated/FREERTOS/timers.c ****     {
  74:../Dave/Generated/FREERTOS/timers.c ****         const char * pcTimerName;                   /*<< Text name.  This is not used by the kernel
  75:../Dave/Generated/FREERTOS/timers.c ****         ListItem_t xTimerListItem;                  /*<< Standard linked list item as used by all k
  76:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xTimerPeriodInTicks;             /*<< How quickly and often the timer expires. *
  77:../Dave/Generated/FREERTOS/timers.c ****         void * pvTimerID;                           /*<< An ID to identify the timer.  This allows 
  78:../Dave/Generated/FREERTOS/timers.c ****         TimerCallbackFunction_t pxCallbackFunction; /*<< The function that will be called when the 
  79:../Dave/Generated/FREERTOS/timers.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
  80:../Dave/Generated/FREERTOS/timers.c ****             UBaseType_t uxTimerNumber;              /*<< An ID assigned by trace tools such as Free
  81:../Dave/Generated/FREERTOS/timers.c ****         #endif
  82:../Dave/Generated/FREERTOS/timers.c ****         uint8_t ucStatus;                           /*<< Holds bits to say if the timer was statica
  83:../Dave/Generated/FREERTOS/timers.c ****     } xTIMER;
  84:../Dave/Generated/FREERTOS/timers.c **** 
  85:../Dave/Generated/FREERTOS/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
  86:../Dave/Generated/FREERTOS/timers.c ****  * name below to enable the use of older kernel aware debuggers. */
  87:../Dave/Generated/FREERTOS/timers.c ****     typedef xTIMER Timer_t;
  88:../Dave/Generated/FREERTOS/timers.c **** 
  89:../Dave/Generated/FREERTOS/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
  90:../Dave/Generated/FREERTOS/timers.c ****  * Two types of message can be queued - messages that manipulate a software timer,
  91:../Dave/Generated/FREERTOS/timers.c ****  * and messages that request the execution of a non-timer related callback.  The
  92:../Dave/Generated/FREERTOS/timers.c ****  * two message types are defined in two separate structures, xTimerParametersType
  93:../Dave/Generated/FREERTOS/timers.c ****  * and xCallbackParametersType respectively. */
  94:../Dave/Generated/FREERTOS/timers.c ****     typedef struct tmrTimerParameters
  95:../Dave/Generated/FREERTOS/timers.c ****     {
  96:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xMessageValue; /*<< An optional value used by a subset of commands, for example,
  97:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer;        /*<< The timer to which the command will be applied. */
  98:../Dave/Generated/FREERTOS/timers.c ****     } TimerParameter_t;
  99:../Dave/Generated/FREERTOS/timers.c **** 
 100:../Dave/Generated/FREERTOS/timers.c **** 
 101:../Dave/Generated/FREERTOS/timers.c ****     typedef struct tmrCallbackParameters
 102:../Dave/Generated/FREERTOS/timers.c ****     {
 103:../Dave/Generated/FREERTOS/timers.c ****         PendedFunction_t pxCallbackFunction; /* << The callback function to execute. */
 104:../Dave/Generated/FREERTOS/timers.c ****         void * pvParameter1;                 /* << The value that will be used as the callback func
 105:../Dave/Generated/FREERTOS/timers.c ****         uint32_t ulParameter2;               /* << The value that will be used as the callback func
 106:../Dave/Generated/FREERTOS/timers.c ****     } CallbackParameters_t;
 107:../Dave/Generated/FREERTOS/timers.c **** 
 108:../Dave/Generated/FREERTOS/timers.c **** /* The structure that contains the two message types, along with an identifier
 109:../Dave/Generated/FREERTOS/timers.c ****  * that is used to determine which message type is valid. */
 110:../Dave/Generated/FREERTOS/timers.c ****     typedef struct tmrTimerQueueMessage
 111:../Dave/Generated/FREERTOS/timers.c ****     {
 112:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xMessageID; /*<< The command being sent to the timer service task. */
 113:../Dave/Generated/FREERTOS/timers.c ****         union
 114:../Dave/Generated/FREERTOS/timers.c ****         {
 115:../Dave/Generated/FREERTOS/timers.c ****             TimerParameter_t xTimerParameters;
 116:../Dave/Generated/FREERTOS/timers.c **** 
 117:../Dave/Generated/FREERTOS/timers.c ****             /* Don't include xCallbackParameters if it is not going to be used as
 118:../Dave/Generated/FREERTOS/timers.c ****              * it makes the structure (and therefore the timer queue) larger. */
 119:../Dave/Generated/FREERTOS/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 120:../Dave/Generated/FREERTOS/timers.c ****                 CallbackParameters_t xCallbackParameters;
 121:../Dave/Generated/FREERTOS/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 122:../Dave/Generated/FREERTOS/timers.c ****         } u;
 123:../Dave/Generated/FREERTOS/timers.c ****     } DaemonTaskMessage_t;
 124:../Dave/Generated/FREERTOS/timers.c **** 
 125:../Dave/Generated/FREERTOS/timers.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 126:../Dave/Generated/FREERTOS/timers.c ****  * which static variables must be declared volatile. */
 127:../Dave/Generated/FREERTOS/timers.c **** 
 128:../Dave/Generated/FREERTOS/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 129:../Dave/Generated/FREERTOS/timers.c ****  * time order, with the nearest expiry time at the front of the list.  Only the
 130:../Dave/Generated/FREERTOS/timers.c ****  * timer service task is allowed to access these lists.
 131:../Dave/Generated/FREERTOS/timers.c ****  * xActiveTimerList1 and xActiveTimerList2 could be at function scope but that
 132:../Dave/Generated/FREERTOS/timers.c ****  * breaks some kernel aware debuggers, and debuggers that reply on removing the
 133:../Dave/Generated/FREERTOS/timers.c ****  * static qualifier. */
 134:../Dave/Generated/FREERTOS/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList1;
 135:../Dave/Generated/FREERTOS/timers.c ****     PRIVILEGED_DATA static List_t xActiveTimerList2;
 136:../Dave/Generated/FREERTOS/timers.c ****     PRIVILEGED_DATA static List_t * pxCurrentTimerList;
 137:../Dave/Generated/FREERTOS/timers.c ****     PRIVILEGED_DATA static List_t * pxOverflowTimerList;
 138:../Dave/Generated/FREERTOS/timers.c **** 
 139:../Dave/Generated/FREERTOS/timers.c **** /* A queue that is used to send commands to the timer service task. */
 140:../Dave/Generated/FREERTOS/timers.c ****     PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 141:../Dave/Generated/FREERTOS/timers.c ****     PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 142:../Dave/Generated/FREERTOS/timers.c **** 
 143:../Dave/Generated/FREERTOS/timers.c **** /*lint -restore */
 144:../Dave/Generated/FREERTOS/timers.c **** 
 145:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 146:../Dave/Generated/FREERTOS/timers.c **** 
 147:../Dave/Generated/FREERTOS/timers.c **** /*
 148:../Dave/Generated/FREERTOS/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 149:../Dave/Generated/FREERTOS/timers.c ****  * been initialised already.
 150:../Dave/Generated/FREERTOS/timers.c ****  */
 151:../Dave/Generated/FREERTOS/timers.c ****     static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 152:../Dave/Generated/FREERTOS/timers.c **** 
 153:../Dave/Generated/FREERTOS/timers.c **** /*
 154:../Dave/Generated/FREERTOS/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 155:../Dave/Generated/FREERTOS/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 156:../Dave/Generated/FREERTOS/timers.c ****  * xTimerQueue queue.
 157:../Dave/Generated/FREERTOS/timers.c ****  */
 158:../Dave/Generated/FREERTOS/timers.c ****     static portTASK_FUNCTION_PROTO( prvTimerTask, pvParameters ) PRIVILEGED_FUNCTION;
 159:../Dave/Generated/FREERTOS/timers.c **** 
 160:../Dave/Generated/FREERTOS/timers.c **** /*
 161:../Dave/Generated/FREERTOS/timers.c ****  * Called by the timer service task to interpret and process a command it
 162:../Dave/Generated/FREERTOS/timers.c ****  * received on the timer queue.
 163:../Dave/Generated/FREERTOS/timers.c ****  */
 164:../Dave/Generated/FREERTOS/timers.c ****     static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 165:../Dave/Generated/FREERTOS/timers.c **** 
 166:../Dave/Generated/FREERTOS/timers.c **** /*
 167:../Dave/Generated/FREERTOS/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 168:../Dave/Generated/FREERTOS/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 169:../Dave/Generated/FREERTOS/timers.c ****  */
 170:../Dave/Generated/FREERTOS/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 171:../Dave/Generated/FREERTOS/timers.c ****                                                   const TickType_t xNextExpiryTime,
 172:../Dave/Generated/FREERTOS/timers.c ****                                                   const TickType_t xTimeNow,
 173:../Dave/Generated/FREERTOS/timers.c ****                                                   const TickType_t xCommandTime ) PRIVILEGED_FUNCTI
 174:../Dave/Generated/FREERTOS/timers.c **** 
 175:../Dave/Generated/FREERTOS/timers.c **** /*
 176:../Dave/Generated/FREERTOS/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 177:../Dave/Generated/FREERTOS/timers.c ****  * auto-reload timer, then call its callback.
 178:../Dave/Generated/FREERTOS/timers.c ****  */
 179:../Dave/Generated/FREERTOS/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 180:../Dave/Generated/FREERTOS/timers.c ****                                         const TickType_t xTimeNow ) PRIVILEGED_FUNCTION;
 181:../Dave/Generated/FREERTOS/timers.c **** 
 182:../Dave/Generated/FREERTOS/timers.c **** /*
 183:../Dave/Generated/FREERTOS/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 184:../Dave/Generated/FREERTOS/timers.c ****  * current timer list does not still reference some timers.
 185:../Dave/Generated/FREERTOS/timers.c ****  */
 186:../Dave/Generated/FREERTOS/timers.c ****     static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 187:../Dave/Generated/FREERTOS/timers.c **** 
 188:../Dave/Generated/FREERTOS/timers.c **** /*
 189:../Dave/Generated/FREERTOS/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 190:../Dave/Generated/FREERTOS/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 191:../Dave/Generated/FREERTOS/timers.c ****  */
 192:../Dave/Generated/FREERTOS/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FU
 193:../Dave/Generated/FREERTOS/timers.c **** 
 194:../Dave/Generated/FREERTOS/timers.c **** /*
 195:../Dave/Generated/FREERTOS/timers.c ****  * If the timer list contains any active timers then return the expire time of
 196:../Dave/Generated/FREERTOS/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 197:../Dave/Generated/FREERTOS/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 198:../Dave/Generated/FREERTOS/timers.c ****  * to pdTRUE.
 199:../Dave/Generated/FREERTOS/timers.c ****  */
 200:../Dave/Generated/FREERTOS/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION
 201:../Dave/Generated/FREERTOS/timers.c **** 
 202:../Dave/Generated/FREERTOS/timers.c **** /*
 203:../Dave/Generated/FREERTOS/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 204:../Dave/Generated/FREERTOS/timers.c ****  * until either a timer does expire or a command is received.
 205:../Dave/Generated/FREERTOS/timers.c ****  */
 206:../Dave/Generated/FREERTOS/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 207:../Dave/Generated/FREERTOS/timers.c ****                                             BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;
 208:../Dave/Generated/FREERTOS/timers.c **** 
 209:../Dave/Generated/FREERTOS/timers.c **** /*
 210:../Dave/Generated/FREERTOS/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 211:../Dave/Generated/FREERTOS/timers.c ****  * dynamically to fill in the structure's members.
 212:../Dave/Generated/FREERTOS/timers.c ****  */
 213:../Dave/Generated/FREERTOS/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 214:../Dave/Generated/FREERTOS/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 215:../Dave/Generated/FREERTOS/timers.c ****                                        const UBaseType_t uxAutoReload,
 216:../Dave/Generated/FREERTOS/timers.c ****                                        void * const pvTimerID,
 217:../Dave/Generated/FREERTOS/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 218:../Dave/Generated/FREERTOS/timers.c ****                                        Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
 219:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 220:../Dave/Generated/FREERTOS/timers.c **** 
 221:../Dave/Generated/FREERTOS/timers.c ****     BaseType_t xTimerCreateTimerTask( void )
 222:../Dave/Generated/FREERTOS/timers.c ****     {
  66              	 .loc 1 222 0
  67              	 .cfi_startproc
  68 0000 80B5     	 push {r7,lr}
  69              	.LCFI0:
  70              	 .cfi_def_cfa_offset 8
  71              	 .cfi_offset 7,-8
  72              	 .cfi_offset 14,-4
  73 0002 84B0     	 sub sp,sp,#16
  74              	.LCFI1:
  75              	 .cfi_def_cfa_offset 24
  76 0004 02AF     	 add r7,sp,#8
  77              	.LCFI2:
  78              	 .cfi_def_cfa 7,16
 223:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
  79              	 .loc 1 223 0
  80 0006 0023     	 mov r3,#0
  81 0008 7B60     	 str r3,[r7,#4]
 224:../Dave/Generated/FREERTOS/timers.c **** 
 225:../Dave/Generated/FREERTOS/timers.c ****         /* This function is called when the scheduler is started if
 226:../Dave/Generated/FREERTOS/timers.c ****          * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 227:../Dave/Generated/FREERTOS/timers.c ****          * timer service task has been created/initialised.  If timers have already
 228:../Dave/Generated/FREERTOS/timers.c ****          * been created then the initialisation will already have been performed. */
 229:../Dave/Generated/FREERTOS/timers.c ****         prvCheckForValidListAndQueue();
  82              	 .loc 1 229 0
  83 000a FFF7FEFF 	 bl prvCheckForValidListAndQueue
 230:../Dave/Generated/FREERTOS/timers.c **** 
 231:../Dave/Generated/FREERTOS/timers.c ****         if( xTimerQueue != NULL )
  84              	 .loc 1 231 0
  85 000e 0E4B     	 ldr r3,.L6
  86 0010 1B68     	 ldr r3,[r3]
  87 0012 002B     	 cmp r3,#0
  88 0014 0DD0     	 beq .L2
 232:../Dave/Generated/FREERTOS/timers.c ****         {
 233:../Dave/Generated/FREERTOS/timers.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 234:../Dave/Generated/FREERTOS/timers.c ****                 {
 235:../Dave/Generated/FREERTOS/timers.c ****                     StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 236:../Dave/Generated/FREERTOS/timers.c ****                     StackType_t * pxTimerTaskStackBuffer = NULL;
 237:../Dave/Generated/FREERTOS/timers.c ****                     uint32_t ulTimerTaskStackSize;
 238:../Dave/Generated/FREERTOS/timers.c **** 
 239:../Dave/Generated/FREERTOS/timers.c ****                     vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer,
 240:../Dave/Generated/FREERTOS/timers.c ****                     xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 241:../Dave/Generated/FREERTOS/timers.c ****                                                           configTIMER_SERVICE_TASK_NAME,
 242:../Dave/Generated/FREERTOS/timers.c ****                                                           ulTimerTaskStackSize,
 243:../Dave/Generated/FREERTOS/timers.c ****                                                           NULL,
 244:../Dave/Generated/FREERTOS/timers.c ****                                                           ( ( UBaseType_t ) configTIMER_TASK_PRIORI
 245:../Dave/Generated/FREERTOS/timers.c ****                                                           pxTimerTaskStackBuffer,
 246:../Dave/Generated/FREERTOS/timers.c ****                                                           pxTimerTaskTCBBuffer );
 247:../Dave/Generated/FREERTOS/timers.c **** 
 248:../Dave/Generated/FREERTOS/timers.c ****                     if( xTimerTaskHandle != NULL )
 249:../Dave/Generated/FREERTOS/timers.c ****                     {
 250:../Dave/Generated/FREERTOS/timers.c ****                         xReturn = pdPASS;
 251:../Dave/Generated/FREERTOS/timers.c ****                     }
 252:../Dave/Generated/FREERTOS/timers.c ****                 }
 253:../Dave/Generated/FREERTOS/timers.c ****             #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 254:../Dave/Generated/FREERTOS/timers.c ****                 {
 255:../Dave/Generated/FREERTOS/timers.c ****                     xReturn = xTaskCreate( prvTimerTask,
  89              	 .loc 1 255 0
  90 0016 0D49     	 ldr r1,.L6+4
  91 0018 0D4A     	 ldr r2,.L6+8
  92 001a 0223     	 mov r3,#2
  93 001c 0093     	 str r3,[sp]
  94 001e 0D4B     	 ldr r3,.L6+12
  95 0020 0193     	 str r3,[sp,#4]
  96 0022 081C     	 mov r0,r1
  97 0024 111C     	 mov r1,r2
  98 0026 7822     	 mov r2,#120
  99 0028 0023     	 mov r3,#0
 100 002a FFF7FEFF 	 bl xTaskCreate
 101 002e 031C     	 mov r3,r0
 102 0030 7B60     	 str r3,[r7,#4]
 103              	.L2:
 256:../Dave/Generated/FREERTOS/timers.c ****                                            configTIMER_SERVICE_TASK_NAME,
 257:../Dave/Generated/FREERTOS/timers.c ****                                            configTIMER_TASK_STACK_DEPTH,
 258:../Dave/Generated/FREERTOS/timers.c ****                                            NULL,
 259:../Dave/Generated/FREERTOS/timers.c ****                                            ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIV
 260:../Dave/Generated/FREERTOS/timers.c ****                                            &xTimerTaskHandle );
 261:../Dave/Generated/FREERTOS/timers.c ****                 }
 262:../Dave/Generated/FREERTOS/timers.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 263:../Dave/Generated/FREERTOS/timers.c ****         }
 264:../Dave/Generated/FREERTOS/timers.c ****         else
 265:../Dave/Generated/FREERTOS/timers.c ****         {
 266:../Dave/Generated/FREERTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 267:../Dave/Generated/FREERTOS/timers.c ****         }
 268:../Dave/Generated/FREERTOS/timers.c **** 
 269:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xReturn );
 104              	 .loc 1 269 0
 105 0032 7B68     	 ldr r3,[r7,#4]
 106 0034 002B     	 cmp r3,#0
 107 0036 01D1     	 bne .L3
 108              	 .loc 1 269 0 is_stmt 0 discriminator 1
 109              	
 110 0038 72B6     	 cpsid i
 111              	
 112              	 .code 16
 113              	.L4:
 114 003a FEE7     	 b .L4
 115              	.L3:
 270:../Dave/Generated/FREERTOS/timers.c ****         return xReturn;
 116              	 .loc 1 270 0 is_stmt 1
 117 003c 7B68     	 ldr r3,[r7,#4]
 271:../Dave/Generated/FREERTOS/timers.c ****     }
 118              	 .loc 1 271 0
 119 003e 181C     	 mov r0,r3
 120 0040 BD46     	 mov sp,r7
 121 0042 02B0     	 add sp,sp,#8
 122              	 
 123 0044 80BD     	 pop {r7,pc}
 124              	.L7:
 125 0046 C046     	 .align 2
 126              	.L6:
 127 0048 00000000 	 .word xTimerQueue
 128 004c 00000000 	 .word prvTimerTask
 129 0050 00000000 	 .word .LC2
 130 0054 00000000 	 .word xTimerTaskHandle
 131              	 .cfi_endproc
 132              	.LFE42:
 134              	 .section .text.xTimerCreate,"ax",%progbits
 135              	 .align 2
 136              	 .global xTimerCreate
 137              	 .code 16
 138              	 .thumb_func
 140              	xTimerCreate:
 141              	.LFB43:
 272:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 273:../Dave/Generated/FREERTOS/timers.c **** 
 274:../Dave/Generated/FREERTOS/timers.c ****     #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 275:../Dave/Generated/FREERTOS/timers.c **** 
 276:../Dave/Generated/FREERTOS/timers.c ****         TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char t
 277:../Dave/Generated/FREERTOS/timers.c ****                                     const TickType_t xTimerPeriodInTicks,
 278:../Dave/Generated/FREERTOS/timers.c ****                                     const UBaseType_t uxAutoReload,
 279:../Dave/Generated/FREERTOS/timers.c ****                                     void * const pvTimerID,
 280:../Dave/Generated/FREERTOS/timers.c ****                                     TimerCallbackFunction_t pxCallbackFunction )
 281:../Dave/Generated/FREERTOS/timers.c ****         {
 142              	 .loc 1 281 0
 143              	 .cfi_startproc
 144 0000 90B5     	 push {r4,r7,lr}
 145              	.LCFI3:
 146              	 .cfi_def_cfa_offset 12
 147              	 .cfi_offset 4,-12
 148              	 .cfi_offset 7,-8
 149              	 .cfi_offset 14,-4
 150 0002 89B0     	 sub sp,sp,#36
 151              	.LCFI4:
 152              	 .cfi_def_cfa_offset 48
 153 0004 02AF     	 add r7,sp,#8
 154              	.LCFI5:
 155              	 .cfi_def_cfa 7,40
 156 0006 F860     	 str r0,[r7,#12]
 157 0008 B960     	 str r1,[r7,#8]
 158 000a 7A60     	 str r2,[r7,#4]
 159 000c 3B60     	 str r3,[r7]
 282:../Dave/Generated/FREERTOS/timers.c ****             Timer_t * pxNewTimer;
 283:../Dave/Generated/FREERTOS/timers.c **** 
 284:../Dave/Generated/FREERTOS/timers.c ****             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All 
 160              	 .loc 1 284 0
 161 000e 2C20     	 mov r0,#44
 162 0010 FFF7FEFF 	 bl pvPortMalloc
 163 0014 031C     	 mov r3,r0
 164 0016 7B61     	 str r3,[r7,#20]
 285:../Dave/Generated/FREERTOS/timers.c **** 
 286:../Dave/Generated/FREERTOS/timers.c ****             if( pxNewTimer != NULL )
 165              	 .loc 1 286 0
 166 0018 7B69     	 ldr r3,[r7,#20]
 167 001a 002B     	 cmp r3,#0
 168 001c 0ED0     	 beq .L9
 287:../Dave/Generated/FREERTOS/timers.c ****             {
 288:../Dave/Generated/FREERTOS/timers.c ****                 /* Status is thus far zero as the timer is not created statically
 289:../Dave/Generated/FREERTOS/timers.c ****                  * and has not been started.  The auto-reload bit may get set in
 290:../Dave/Generated/FREERTOS/timers.c ****                  * prvInitialiseNewTimer. */
 291:../Dave/Generated/FREERTOS/timers.c ****                 pxNewTimer->ucStatus = 0x00;
 169              	 .loc 1 291 0
 170 001e 7B69     	 ldr r3,[r7,#20]
 171 0020 2822     	 mov r2,#40
 172 0022 0021     	 mov r1,#0
 173 0024 9954     	 strb r1,[r3,r2]
 292:../Dave/Generated/FREERTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, p
 174              	 .loc 1 292 0
 175 0026 F868     	 ldr r0,[r7,#12]
 176 0028 B968     	 ldr r1,[r7,#8]
 177 002a 7A68     	 ldr r2,[r7,#4]
 178 002c 3C68     	 ldr r4,[r7]
 179 002e BB6A     	 ldr r3,[r7,#40]
 180 0030 0093     	 str r3,[sp]
 181 0032 7B69     	 ldr r3,[r7,#20]
 182 0034 0193     	 str r3,[sp,#4]
 183 0036 231C     	 mov r3,r4
 184 0038 FFF7FEFF 	 bl prvInitialiseNewTimer
 185              	.L9:
 293:../Dave/Generated/FREERTOS/timers.c ****             }
 294:../Dave/Generated/FREERTOS/timers.c **** 
 295:../Dave/Generated/FREERTOS/timers.c ****             return pxNewTimer;
 186              	 .loc 1 295 0
 187 003c 7B69     	 ldr r3,[r7,#20]
 296:../Dave/Generated/FREERTOS/timers.c ****         }
 188              	 .loc 1 296 0
 189 003e 181C     	 mov r0,r3
 190 0040 BD46     	 mov sp,r7
 191 0042 07B0     	 add sp,sp,#28
 192              	 
 193 0044 90BD     	 pop {r4,r7,pc}
 194              	 .cfi_endproc
 195              	.LFE43:
 197 0046 C046     	 .section .text.prvInitialiseNewTimer,"ax",%progbits
 198              	 .align 2
 199              	 .code 16
 200              	 .thumb_func
 202              	prvInitialiseNewTimer:
 203              	.LFB44:
 297:../Dave/Generated/FREERTOS/timers.c **** 
 298:../Dave/Generated/FREERTOS/timers.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 299:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 300:../Dave/Generated/FREERTOS/timers.c **** 
 301:../Dave/Generated/FREERTOS/timers.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 302:../Dave/Generated/FREERTOS/timers.c **** 
 303:../Dave/Generated/FREERTOS/timers.c ****         TimerHandle_t xTimerCreateStatic( const char * const pcTimerName, /*lint !e971 Unqualified 
 304:../Dave/Generated/FREERTOS/timers.c ****                                           const TickType_t xTimerPeriodInTicks,
 305:../Dave/Generated/FREERTOS/timers.c ****                                           const UBaseType_t uxAutoReload,
 306:../Dave/Generated/FREERTOS/timers.c ****                                           void * const pvTimerID,
 307:../Dave/Generated/FREERTOS/timers.c ****                                           TimerCallbackFunction_t pxCallbackFunction,
 308:../Dave/Generated/FREERTOS/timers.c ****                                           StaticTimer_t * pxTimerBuffer )
 309:../Dave/Generated/FREERTOS/timers.c ****         {
 310:../Dave/Generated/FREERTOS/timers.c ****             Timer_t * pxNewTimer;
 311:../Dave/Generated/FREERTOS/timers.c **** 
 312:../Dave/Generated/FREERTOS/timers.c ****             #if ( configASSERT_DEFINED == 1 )
 313:../Dave/Generated/FREERTOS/timers.c ****                 {
 314:../Dave/Generated/FREERTOS/timers.c ****                     /* Sanity check that the size of the structure used to declare a
 315:../Dave/Generated/FREERTOS/timers.c ****                      * variable of type StaticTimer_t equals the size of the real timer
 316:../Dave/Generated/FREERTOS/timers.c ****                      * structure. */
 317:../Dave/Generated/FREERTOS/timers.c ****                     volatile size_t xSize = sizeof( StaticTimer_t );
 318:../Dave/Generated/FREERTOS/timers.c ****                     configASSERT( xSize == sizeof( Timer_t ) );
 319:../Dave/Generated/FREERTOS/timers.c ****                     ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 320:../Dave/Generated/FREERTOS/timers.c ****                 }
 321:../Dave/Generated/FREERTOS/timers.c ****             #endif /* configASSERT_DEFINED */
 322:../Dave/Generated/FREERTOS/timers.c **** 
 323:../Dave/Generated/FREERTOS/timers.c ****             /* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 324:../Dave/Generated/FREERTOS/timers.c ****             configASSERT( pxTimerBuffer );
 325:../Dave/Generated/FREERTOS/timers.c ****             pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointe
 326:../Dave/Generated/FREERTOS/timers.c **** 
 327:../Dave/Generated/FREERTOS/timers.c ****             if( pxNewTimer != NULL )
 328:../Dave/Generated/FREERTOS/timers.c ****             {
 329:../Dave/Generated/FREERTOS/timers.c ****                 /* Timers can be created statically or dynamically so note this
 330:../Dave/Generated/FREERTOS/timers.c ****                  * timer was created statically in case it is later deleted.  The
 331:../Dave/Generated/FREERTOS/timers.c ****                  * auto-reload bit may get set in prvInitialiseNewTimer(). */
 332:../Dave/Generated/FREERTOS/timers.c ****                 pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 333:../Dave/Generated/FREERTOS/timers.c **** 
 334:../Dave/Generated/FREERTOS/timers.c ****                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, p
 335:../Dave/Generated/FREERTOS/timers.c ****             }
 336:../Dave/Generated/FREERTOS/timers.c **** 
 337:../Dave/Generated/FREERTOS/timers.c ****             return pxNewTimer;
 338:../Dave/Generated/FREERTOS/timers.c ****         }
 339:../Dave/Generated/FREERTOS/timers.c **** 
 340:../Dave/Generated/FREERTOS/timers.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
 341:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 342:../Dave/Generated/FREERTOS/timers.c **** 
 343:../Dave/Generated/FREERTOS/timers.c ****     static void prvInitialiseNewTimer( const char * const pcTimerName, /*lint !e971 Unqualified cha
 344:../Dave/Generated/FREERTOS/timers.c ****                                        const TickType_t xTimerPeriodInTicks,
 345:../Dave/Generated/FREERTOS/timers.c ****                                        const UBaseType_t uxAutoReload,
 346:../Dave/Generated/FREERTOS/timers.c ****                                        void * const pvTimerID,
 347:../Dave/Generated/FREERTOS/timers.c ****                                        TimerCallbackFunction_t pxCallbackFunction,
 348:../Dave/Generated/FREERTOS/timers.c ****                                        Timer_t * pxNewTimer )
 349:../Dave/Generated/FREERTOS/timers.c ****     {
 204              	 .loc 1 349 0
 205              	 .cfi_startproc
 206 0000 80B5     	 push {r7,lr}
 207              	.LCFI6:
 208              	 .cfi_def_cfa_offset 8
 209              	 .cfi_offset 7,-8
 210              	 .cfi_offset 14,-4
 211 0002 84B0     	 sub sp,sp,#16
 212              	.LCFI7:
 213              	 .cfi_def_cfa_offset 24
 214 0004 00AF     	 add r7,sp,#0
 215              	.LCFI8:
 216              	 .cfi_def_cfa_register 7
 217 0006 F860     	 str r0,[r7,#12]
 218 0008 B960     	 str r1,[r7,#8]
 219 000a 7A60     	 str r2,[r7,#4]
 220 000c 3B60     	 str r3,[r7]
 350:../Dave/Generated/FREERTOS/timers.c ****         /* 0 is not a valid value for xTimerPeriodInTicks. */
 351:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 221              	 .loc 1 351 0
 222 000e BB68     	 ldr r3,[r7,#8]
 223 0010 002B     	 cmp r3,#0
 224 0012 01D1     	 bne .L12
 225              	 .loc 1 351 0 is_stmt 0 discriminator 1
 226              	
 227 0014 72B6     	 cpsid i
 228              	
 229              	 .code 16
 230              	.L13:
 231 0016 FEE7     	 b .L13
 232              	.L12:
 352:../Dave/Generated/FREERTOS/timers.c **** 
 353:../Dave/Generated/FREERTOS/timers.c ****         if( pxNewTimer != NULL )
 233              	 .loc 1 353 0 is_stmt 1
 234 0018 FB69     	 ldr r3,[r7,#28]
 235 001a 002B     	 cmp r3,#0
 236 001c 1ED0     	 beq .L11
 354:../Dave/Generated/FREERTOS/timers.c ****         {
 355:../Dave/Generated/FREERTOS/timers.c ****             /* Ensure the infrastructure used by the timer service task has been
 356:../Dave/Generated/FREERTOS/timers.c ****              * created/initialised. */
 357:../Dave/Generated/FREERTOS/timers.c ****             prvCheckForValidListAndQueue();
 237              	 .loc 1 357 0
 238 001e FFF7FEFF 	 bl prvCheckForValidListAndQueue
 358:../Dave/Generated/FREERTOS/timers.c **** 
 359:../Dave/Generated/FREERTOS/timers.c ****             /* Initialise the timer structure members using the function
 360:../Dave/Generated/FREERTOS/timers.c ****              * parameters. */
 361:../Dave/Generated/FREERTOS/timers.c ****             pxNewTimer->pcTimerName = pcTimerName;
 239              	 .loc 1 361 0
 240 0022 FB69     	 ldr r3,[r7,#28]
 241 0024 FA68     	 ldr r2,[r7,#12]
 242 0026 1A60     	 str r2,[r3]
 362:../Dave/Generated/FREERTOS/timers.c ****             pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 243              	 .loc 1 362 0
 244 0028 FB69     	 ldr r3,[r7,#28]
 245 002a BA68     	 ldr r2,[r7,#8]
 246 002c 9A61     	 str r2,[r3,#24]
 363:../Dave/Generated/FREERTOS/timers.c ****             pxNewTimer->pvTimerID = pvTimerID;
 247              	 .loc 1 363 0
 248 002e FB69     	 ldr r3,[r7,#28]
 249 0030 3A68     	 ldr r2,[r7]
 250 0032 DA61     	 str r2,[r3,#28]
 364:../Dave/Generated/FREERTOS/timers.c ****             pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 251              	 .loc 1 364 0
 252 0034 FB69     	 ldr r3,[r7,#28]
 253 0036 BA69     	 ldr r2,[r7,#24]
 254 0038 1A62     	 str r2,[r3,#32]
 365:../Dave/Generated/FREERTOS/timers.c ****             vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 255              	 .loc 1 365 0
 256 003a FB69     	 ldr r3,[r7,#28]
 257 003c 0433     	 add r3,r3,#4
 258 003e 181C     	 mov r0,r3
 259 0040 FFF7FEFF 	 bl vListInitialiseItem
 366:../Dave/Generated/FREERTOS/timers.c **** 
 367:../Dave/Generated/FREERTOS/timers.c ****             if( uxAutoReload != pdFALSE )
 260              	 .loc 1 367 0
 261 0044 7B68     	 ldr r3,[r7,#4]
 262 0046 002B     	 cmp r3,#0
 263 0048 08D0     	 beq .L11
 368:../Dave/Generated/FREERTOS/timers.c ****             {
 369:../Dave/Generated/FREERTOS/timers.c ****                 pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 264              	 .loc 1 369 0
 265 004a FB69     	 ldr r3,[r7,#28]
 266 004c 2822     	 mov r2,#40
 267 004e 9B5C     	 ldrb r3,[r3,r2]
 268 0050 0422     	 mov r2,#4
 269 0052 1343     	 orr r3,r2
 270 0054 D9B2     	 uxtb r1,r3
 271 0056 FB69     	 ldr r3,[r7,#28]
 272 0058 2822     	 mov r2,#40
 273 005a 9954     	 strb r1,[r3,r2]
 274              	.L11:
 370:../Dave/Generated/FREERTOS/timers.c ****             }
 371:../Dave/Generated/FREERTOS/timers.c **** 
 372:../Dave/Generated/FREERTOS/timers.c ****             traceTIMER_CREATE( pxNewTimer );
 373:../Dave/Generated/FREERTOS/timers.c ****         }
 374:../Dave/Generated/FREERTOS/timers.c ****     }
 275              	 .loc 1 374 0
 276 005c BD46     	 mov sp,r7
 277 005e 04B0     	 add sp,sp,#16
 278              	 
 279 0060 80BD     	 pop {r7,pc}
 280              	 .cfi_endproc
 281              	.LFE44:
 283 0062 C046     	 .section .text.xTimerGenericCommand,"ax",%progbits
 284              	 .align 2
 285              	 .global xTimerGenericCommand
 286              	 .code 16
 287              	 .thumb_func
 289              	xTimerGenericCommand:
 290              	.LFB45:
 375:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 376:../Dave/Generated/FREERTOS/timers.c **** 
 377:../Dave/Generated/FREERTOS/timers.c ****     BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
 378:../Dave/Generated/FREERTOS/timers.c ****                                      const BaseType_t xCommandID,
 379:../Dave/Generated/FREERTOS/timers.c ****                                      const TickType_t xOptionalValue,
 380:../Dave/Generated/FREERTOS/timers.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 381:../Dave/Generated/FREERTOS/timers.c ****                                      const TickType_t xTicksToWait )
 382:../Dave/Generated/FREERTOS/timers.c ****     {
 291              	 .loc 1 382 0
 292              	 .cfi_startproc
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI9:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 8AB0     	 sub sp,sp,#40
 299              	.LCFI10:
 300              	 .cfi_def_cfa_offset 48
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI11:
 303              	 .cfi_def_cfa_register 7
 304 0006 F860     	 str r0,[r7,#12]
 305 0008 B960     	 str r1,[r7,#8]
 306 000a 7A60     	 str r2,[r7,#4]
 307 000c 3B60     	 str r3,[r7]
 383:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xReturn = pdFAIL;
 308              	 .loc 1 383 0
 309 000e 0023     	 mov r3,#0
 310 0010 7B62     	 str r3,[r7,#36]
 384:../Dave/Generated/FREERTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 385:../Dave/Generated/FREERTOS/timers.c **** 
 386:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 311              	 .loc 1 386 0
 312 0012 FB68     	 ldr r3,[r7,#12]
 313 0014 002B     	 cmp r3,#0
 314 0016 01D1     	 bne .L16
 315              	 .loc 1 386 0 is_stmt 0 discriminator 1
 316              	
 317 0018 72B6     	 cpsid i
 318              	
 319              	 .code 16
 320              	.L17:
 321 001a FEE7     	 b .L17
 322              	.L16:
 387:../Dave/Generated/FREERTOS/timers.c **** 
 388:../Dave/Generated/FREERTOS/timers.c ****         /* Send a message to the timer service task to perform a particular action
 389:../Dave/Generated/FREERTOS/timers.c ****          * on a particular timer definition. */
 390:../Dave/Generated/FREERTOS/timers.c ****         if( xTimerQueue != NULL )
 323              	 .loc 1 390 0 is_stmt 1
 324 001c 224B     	 ldr r3,.L24
 325 001e 1B68     	 ldr r3,[r3]
 326 0020 002B     	 cmp r3,#0
 327 0022 3BD0     	 beq .L18
 391:../Dave/Generated/FREERTOS/timers.c ****         {
 392:../Dave/Generated/FREERTOS/timers.c ****             /* Send a command to the timer service task to start the xTimer timer. */
 393:../Dave/Generated/FREERTOS/timers.c ****             xMessage.xMessageID = xCommandID;
 328              	 .loc 1 393 0
 329 0024 1423     	 mov r3,#20
 330 0026 FB18     	 add r3,r7,r3
 331 0028 BA68     	 ldr r2,[r7,#8]
 332 002a 1A60     	 str r2,[r3]
 394:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 333              	 .loc 1 394 0
 334 002c 1423     	 mov r3,#20
 335 002e FB18     	 add r3,r7,r3
 336 0030 7A68     	 ldr r2,[r7,#4]
 337 0032 5A60     	 str r2,[r3,#4]
 395:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xTimerParameters.pxTimer = xTimer;
 338              	 .loc 1 395 0
 339 0034 1423     	 mov r3,#20
 340 0036 FB18     	 add r3,r7,r3
 341 0038 FA68     	 ldr r2,[r7,#12]
 342 003a 9A60     	 str r2,[r3,#8]
 396:../Dave/Generated/FREERTOS/timers.c **** 
 397:../Dave/Generated/FREERTOS/timers.c ****             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 343              	 .loc 1 397 0
 344 003c BB68     	 ldr r3,[r7,#8]
 345 003e 052B     	 cmp r3,#5
 346 0040 1FDC     	 bgt .L19
 398:../Dave/Generated/FREERTOS/timers.c ****             {
 399:../Dave/Generated/FREERTOS/timers.c ****                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 347              	 .loc 1 399 0
 348 0042 FFF7FEFF 	 bl xTaskGetSchedulerState
 349 0046 031E     	 sub r3,r0,#0
 350 0048 022B     	 cmp r3,#2
 351 004a 0DD1     	 bne .L20
 400:../Dave/Generated/FREERTOS/timers.c ****                 {
 401:../Dave/Generated/FREERTOS/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 352              	 .loc 1 401 0
 353 004c 164B     	 ldr r3,.L24
 354 004e 1968     	 ldr r1,[r3]
 355 0050 1423     	 mov r3,#20
 356 0052 FA18     	 add r2,r7,r3
 357 0054 3B6B     	 ldr r3,[r7,#48]
 358 0056 081C     	 mov r0,r1
 359 0058 111C     	 mov r1,r2
 360 005a 1A1C     	 mov r2,r3
 361 005c 0023     	 mov r3,#0
 362 005e FFF7FEFF 	 bl xQueueGenericSend
 363 0062 031C     	 mov r3,r0
 364 0064 7B62     	 str r3,[r7,#36]
 365 0066 19E0     	 b .L18
 366              	.L20:
 402:../Dave/Generated/FREERTOS/timers.c ****                 }
 403:../Dave/Generated/FREERTOS/timers.c ****                 else
 404:../Dave/Generated/FREERTOS/timers.c ****                 {
 405:../Dave/Generated/FREERTOS/timers.c ****                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 367              	 .loc 1 405 0
 368 0068 0F4B     	 ldr r3,.L24
 369 006a 1A68     	 ldr r2,[r3]
 370 006c 1423     	 mov r3,#20
 371 006e FB18     	 add r3,r7,r3
 372 0070 101C     	 mov r0,r2
 373 0072 191C     	 mov r1,r3
 374 0074 0022     	 mov r2,#0
 375 0076 0023     	 mov r3,#0
 376 0078 FFF7FEFF 	 bl xQueueGenericSend
 377 007c 031C     	 mov r3,r0
 378 007e 7B62     	 str r3,[r7,#36]
 379 0080 0CE0     	 b .L18
 380              	.L19:
 406:../Dave/Generated/FREERTOS/timers.c ****                 }
 407:../Dave/Generated/FREERTOS/timers.c ****             }
 408:../Dave/Generated/FREERTOS/timers.c ****             else
 409:../Dave/Generated/FREERTOS/timers.c ****             {
 410:../Dave/Generated/FREERTOS/timers.c ****                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoke
 381              	 .loc 1 410 0
 382 0082 094B     	 ldr r3,.L24
 383 0084 1968     	 ldr r1,[r3]
 384 0086 1423     	 mov r3,#20
 385 0088 FA18     	 add r2,r7,r3
 386 008a 3B68     	 ldr r3,[r7]
 387 008c 081C     	 mov r0,r1
 388 008e 111C     	 mov r1,r2
 389 0090 1A1C     	 mov r2,r3
 390 0092 0023     	 mov r3,#0
 391 0094 FFF7FEFF 	 bl xQueueGenericSendFromISR
 392 0098 031C     	 mov r3,r0
 393 009a 7B62     	 str r3,[r7,#36]
 394              	.L18:
 411:../Dave/Generated/FREERTOS/timers.c ****             }
 412:../Dave/Generated/FREERTOS/timers.c **** 
 413:../Dave/Generated/FREERTOS/timers.c ****             traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 414:../Dave/Generated/FREERTOS/timers.c ****         }
 415:../Dave/Generated/FREERTOS/timers.c ****         else
 416:../Dave/Generated/FREERTOS/timers.c ****         {
 417:../Dave/Generated/FREERTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 418:../Dave/Generated/FREERTOS/timers.c ****         }
 419:../Dave/Generated/FREERTOS/timers.c **** 
 420:../Dave/Generated/FREERTOS/timers.c ****         return xReturn;
 395              	 .loc 1 420 0
 396 009c 7B6A     	 ldr r3,[r7,#36]
 421:../Dave/Generated/FREERTOS/timers.c ****     }
 397              	 .loc 1 421 0
 398 009e 181C     	 mov r0,r3
 399 00a0 BD46     	 mov sp,r7
 400 00a2 0AB0     	 add sp,sp,#40
 401              	 
 402 00a4 80BD     	 pop {r7,pc}
 403              	.L25:
 404 00a6 C046     	 .align 2
 405              	.L24:
 406 00a8 00000000 	 .word xTimerQueue
 407              	 .cfi_endproc
 408              	.LFE45:
 410              	 .section .text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 411              	 .align 2
 412              	 .global xTimerGetTimerDaemonTaskHandle
 413              	 .code 16
 414              	 .thumb_func
 416              	xTimerGetTimerDaemonTaskHandle:
 417              	.LFB46:
 422:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 423:../Dave/Generated/FREERTOS/timers.c **** 
 424:../Dave/Generated/FREERTOS/timers.c ****     TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 425:../Dave/Generated/FREERTOS/timers.c ****     {
 418              	 .loc 1 425 0
 419              	 .cfi_startproc
 420 0000 80B5     	 push {r7,lr}
 421              	.LCFI12:
 422              	 .cfi_def_cfa_offset 8
 423              	 .cfi_offset 7,-8
 424              	 .cfi_offset 14,-4
 425 0002 00AF     	 add r7,sp,#0
 426              	.LCFI13:
 427              	 .cfi_def_cfa_register 7
 426:../Dave/Generated/FREERTOS/timers.c ****         /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 427:../Dave/Generated/FREERTOS/timers.c ****          * started, then xTimerTaskHandle will be NULL. */
 428:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( ( xTimerTaskHandle != NULL ) );
 428              	 .loc 1 428 0
 429 0004 054B     	 ldr r3,.L30
 430 0006 1B68     	 ldr r3,[r3]
 431 0008 002B     	 cmp r3,#0
 432 000a 01D1     	 bne .L27
 433              	 .loc 1 428 0 is_stmt 0 discriminator 1
 434              	
 435 000c 72B6     	 cpsid i
 436              	
 437              	 .code 16
 438              	.L28:
 439 000e FEE7     	 b .L28
 440              	.L27:
 429:../Dave/Generated/FREERTOS/timers.c ****         return xTimerTaskHandle;
 441              	 .loc 1 429 0 is_stmt 1
 442 0010 024B     	 ldr r3,.L30
 443 0012 1B68     	 ldr r3,[r3]
 430:../Dave/Generated/FREERTOS/timers.c ****     }
 444              	 .loc 1 430 0
 445 0014 181C     	 mov r0,r3
 446 0016 BD46     	 mov sp,r7
 447              	 
 448 0018 80BD     	 pop {r7,pc}
 449              	.L31:
 450 001a C046     	 .align 2
 451              	.L30:
 452 001c 00000000 	 .word xTimerTaskHandle
 453              	 .cfi_endproc
 454              	.LFE46:
 456              	 .section .text.xTimerGetPeriod,"ax",%progbits
 457              	 .align 2
 458              	 .global xTimerGetPeriod
 459              	 .code 16
 460              	 .thumb_func
 462              	xTimerGetPeriod:
 463              	.LFB47:
 431:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 432:../Dave/Generated/FREERTOS/timers.c **** 
 433:../Dave/Generated/FREERTOS/timers.c ****     TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 434:../Dave/Generated/FREERTOS/timers.c ****     {
 464              	 .loc 1 434 0
 465              	 .cfi_startproc
 466 0000 80B5     	 push {r7,lr}
 467              	.LCFI14:
 468              	 .cfi_def_cfa_offset 8
 469              	 .cfi_offset 7,-8
 470              	 .cfi_offset 14,-4
 471 0002 84B0     	 sub sp,sp,#16
 472              	.LCFI15:
 473              	 .cfi_def_cfa_offset 24
 474 0004 00AF     	 add r7,sp,#0
 475              	.LCFI16:
 476              	 .cfi_def_cfa_register 7
 477 0006 7860     	 str r0,[r7,#4]
 435:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 478              	 .loc 1 435 0
 479 0008 7B68     	 ldr r3,[r7,#4]
 480 000a FB60     	 str r3,[r7,#12]
 436:../Dave/Generated/FREERTOS/timers.c **** 
 437:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 481              	 .loc 1 437 0
 482 000c 7B68     	 ldr r3,[r7,#4]
 483 000e 002B     	 cmp r3,#0
 484 0010 01D1     	 bne .L33
 485              	 .loc 1 437 0 is_stmt 0 discriminator 1
 486              	
 487 0012 72B6     	 cpsid i
 488              	
 489              	 .code 16
 490              	.L34:
 491 0014 FEE7     	 b .L34
 492              	.L33:
 438:../Dave/Generated/FREERTOS/timers.c ****         return pxTimer->xTimerPeriodInTicks;
 493              	 .loc 1 438 0 is_stmt 1
 494 0016 FB68     	 ldr r3,[r7,#12]
 495 0018 9B69     	 ldr r3,[r3,#24]
 439:../Dave/Generated/FREERTOS/timers.c ****     }
 496              	 .loc 1 439 0
 497 001a 181C     	 mov r0,r3
 498 001c BD46     	 mov sp,r7
 499 001e 04B0     	 add sp,sp,#16
 500              	 
 501 0020 80BD     	 pop {r7,pc}
 502              	 .cfi_endproc
 503              	.LFE47:
 505 0022 C046     	 .section .text.vTimerSetReloadMode,"ax",%progbits
 506              	 .align 2
 507              	 .global vTimerSetReloadMode
 508              	 .code 16
 509              	 .thumb_func
 511              	vTimerSetReloadMode:
 512              	.LFB48:
 440:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 441:../Dave/Generated/FREERTOS/timers.c **** 
 442:../Dave/Generated/FREERTOS/timers.c ****     void vTimerSetReloadMode( TimerHandle_t xTimer,
 443:../Dave/Generated/FREERTOS/timers.c ****                               const UBaseType_t uxAutoReload )
 444:../Dave/Generated/FREERTOS/timers.c ****     {
 513              	 .loc 1 444 0
 514              	 .cfi_startproc
 515 0000 80B5     	 push {r7,lr}
 516              	.LCFI17:
 517              	 .cfi_def_cfa_offset 8
 518              	 .cfi_offset 7,-8
 519              	 .cfi_offset 14,-4
 520 0002 84B0     	 sub sp,sp,#16
 521              	.LCFI18:
 522              	 .cfi_def_cfa_offset 24
 523 0004 00AF     	 add r7,sp,#0
 524              	.LCFI19:
 525              	 .cfi_def_cfa_register 7
 526 0006 7860     	 str r0,[r7,#4]
 527 0008 3960     	 str r1,[r7]
 445:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 528              	 .loc 1 445 0
 529 000a 7B68     	 ldr r3,[r7,#4]
 530 000c FB60     	 str r3,[r7,#12]
 446:../Dave/Generated/FREERTOS/timers.c **** 
 447:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 531              	 .loc 1 447 0
 532 000e 7B68     	 ldr r3,[r7,#4]
 533 0010 002B     	 cmp r3,#0
 534 0012 01D1     	 bne .L37
 535              	 .loc 1 447 0 is_stmt 0 discriminator 1
 536              	
 537 0014 72B6     	 cpsid i
 538              	
 539              	 .code 16
 540              	.L38:
 541 0016 FEE7     	 b .L38
 542              	.L37:
 448:../Dave/Generated/FREERTOS/timers.c ****         taskENTER_CRITICAL();
 543              	 .loc 1 448 0 is_stmt 1
 544 0018 FFF7FEFF 	 bl vPortEnterCritical
 449:../Dave/Generated/FREERTOS/timers.c ****         {
 450:../Dave/Generated/FREERTOS/timers.c ****             if( uxAutoReload != pdFALSE )
 545              	 .loc 1 450 0
 546 001c 3B68     	 ldr r3,[r7]
 547 001e 002B     	 cmp r3,#0
 548 0020 09D0     	 beq .L39
 451:../Dave/Generated/FREERTOS/timers.c ****             {
 452:../Dave/Generated/FREERTOS/timers.c ****                 pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 549              	 .loc 1 452 0
 550 0022 FB68     	 ldr r3,[r7,#12]
 551 0024 2822     	 mov r2,#40
 552 0026 9B5C     	 ldrb r3,[r3,r2]
 553 0028 0422     	 mov r2,#4
 554 002a 1343     	 orr r3,r2
 555 002c D9B2     	 uxtb r1,r3
 556 002e FB68     	 ldr r3,[r7,#12]
 557 0030 2822     	 mov r2,#40
 558 0032 9954     	 strb r1,[r3,r2]
 559 0034 08E0     	 b .L40
 560              	.L39:
 453:../Dave/Generated/FREERTOS/timers.c ****             }
 454:../Dave/Generated/FREERTOS/timers.c ****             else
 455:../Dave/Generated/FREERTOS/timers.c ****             {
 456:../Dave/Generated/FREERTOS/timers.c ****                 pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 561              	 .loc 1 456 0
 562 0036 FB68     	 ldr r3,[r7,#12]
 563 0038 2822     	 mov r2,#40
 564 003a 9B5C     	 ldrb r3,[r3,r2]
 565 003c 0422     	 mov r2,#4
 566 003e 9343     	 bic r3,r2
 567 0040 D9B2     	 uxtb r1,r3
 568 0042 FB68     	 ldr r3,[r7,#12]
 569 0044 2822     	 mov r2,#40
 570 0046 9954     	 strb r1,[r3,r2]
 571              	.L40:
 457:../Dave/Generated/FREERTOS/timers.c ****             }
 458:../Dave/Generated/FREERTOS/timers.c ****         }
 459:../Dave/Generated/FREERTOS/timers.c ****         taskEXIT_CRITICAL();
 572              	 .loc 1 459 0
 573 0048 FFF7FEFF 	 bl vPortExitCritical
 460:../Dave/Generated/FREERTOS/timers.c ****     }
 574              	 .loc 1 460 0
 575 004c BD46     	 mov sp,r7
 576 004e 04B0     	 add sp,sp,#16
 577              	 
 578 0050 80BD     	 pop {r7,pc}
 579              	 .cfi_endproc
 580              	.LFE48:
 582 0052 C046     	 .section .text.uxTimerGetReloadMode,"ax",%progbits
 583              	 .align 2
 584              	 .global uxTimerGetReloadMode
 585              	 .code 16
 586              	 .thumb_func
 588              	uxTimerGetReloadMode:
 589              	.LFB49:
 461:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 462:../Dave/Generated/FREERTOS/timers.c **** 
 463:../Dave/Generated/FREERTOS/timers.c ****     UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
 464:../Dave/Generated/FREERTOS/timers.c ****     {
 590              	 .loc 1 464 0
 591              	 .cfi_startproc
 592 0000 80B5     	 push {r7,lr}
 593              	.LCFI20:
 594              	 .cfi_def_cfa_offset 8
 595              	 .cfi_offset 7,-8
 596              	 .cfi_offset 14,-4
 597 0002 84B0     	 sub sp,sp,#16
 598              	.LCFI21:
 599              	 .cfi_def_cfa_offset 24
 600 0004 00AF     	 add r7,sp,#0
 601              	.LCFI22:
 602              	 .cfi_def_cfa_register 7
 603 0006 7860     	 str r0,[r7,#4]
 465:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 604              	 .loc 1 465 0
 605 0008 7B68     	 ldr r3,[r7,#4]
 606 000a BB60     	 str r3,[r7,#8]
 466:../Dave/Generated/FREERTOS/timers.c ****         UBaseType_t uxReturn;
 467:../Dave/Generated/FREERTOS/timers.c **** 
 468:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 607              	 .loc 1 468 0
 608 000c 7B68     	 ldr r3,[r7,#4]
 609 000e 002B     	 cmp r3,#0
 610 0010 01D1     	 bne .L42
 611              	 .loc 1 468 0 is_stmt 0 discriminator 1
 612              	
 613 0012 72B6     	 cpsid i
 614              	
 615              	 .code 16
 616              	.L43:
 617 0014 FEE7     	 b .L43
 618              	.L42:
 469:../Dave/Generated/FREERTOS/timers.c ****         taskENTER_CRITICAL();
 619              	 .loc 1 469 0 is_stmt 1
 620 0016 FFF7FEFF 	 bl vPortEnterCritical
 470:../Dave/Generated/FREERTOS/timers.c ****         {
 471:../Dave/Generated/FREERTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 621              	 .loc 1 471 0
 622 001a BB68     	 ldr r3,[r7,#8]
 623 001c 2822     	 mov r2,#40
 624 001e 9B5C     	 ldrb r3,[r3,r2]
 625 0020 1A1C     	 mov r2,r3
 626 0022 0423     	 mov r3,#4
 627 0024 1340     	 and r3,r2
 628 0026 02D1     	 bne .L44
 472:../Dave/Generated/FREERTOS/timers.c ****             {
 473:../Dave/Generated/FREERTOS/timers.c ****                 /* Not an auto-reload timer. */
 474:../Dave/Generated/FREERTOS/timers.c ****                 uxReturn = ( UBaseType_t ) pdFALSE;
 629              	 .loc 1 474 0
 630 0028 0023     	 mov r3,#0
 631 002a FB60     	 str r3,[r7,#12]
 632 002c 01E0     	 b .L45
 633              	.L44:
 475:../Dave/Generated/FREERTOS/timers.c ****             }
 476:../Dave/Generated/FREERTOS/timers.c ****             else
 477:../Dave/Generated/FREERTOS/timers.c ****             {
 478:../Dave/Generated/FREERTOS/timers.c ****                 /* Is an auto-reload timer. */
 479:../Dave/Generated/FREERTOS/timers.c ****                 uxReturn = ( UBaseType_t ) pdTRUE;
 634              	 .loc 1 479 0
 635 002e 0123     	 mov r3,#1
 636 0030 FB60     	 str r3,[r7,#12]
 637              	.L45:
 480:../Dave/Generated/FREERTOS/timers.c ****             }
 481:../Dave/Generated/FREERTOS/timers.c ****         }
 482:../Dave/Generated/FREERTOS/timers.c ****         taskEXIT_CRITICAL();
 638              	 .loc 1 482 0
 639 0032 FFF7FEFF 	 bl vPortExitCritical
 483:../Dave/Generated/FREERTOS/timers.c **** 
 484:../Dave/Generated/FREERTOS/timers.c ****         return uxReturn;
 640              	 .loc 1 484 0
 641 0036 FB68     	 ldr r3,[r7,#12]
 485:../Dave/Generated/FREERTOS/timers.c ****     }
 642              	 .loc 1 485 0
 643 0038 181C     	 mov r0,r3
 644 003a BD46     	 mov sp,r7
 645 003c 04B0     	 add sp,sp,#16
 646              	 
 647 003e 80BD     	 pop {r7,pc}
 648              	 .cfi_endproc
 649              	.LFE49:
 651              	 .section .text.xTimerGetExpiryTime,"ax",%progbits
 652              	 .align 2
 653              	 .global xTimerGetExpiryTime
 654              	 .code 16
 655              	 .thumb_func
 657              	xTimerGetExpiryTime:
 658              	.LFB50:
 486:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 487:../Dave/Generated/FREERTOS/timers.c **** 
 488:../Dave/Generated/FREERTOS/timers.c ****     TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 489:../Dave/Generated/FREERTOS/timers.c ****     {
 659              	 .loc 1 489 0
 660              	 .cfi_startproc
 661 0000 80B5     	 push {r7,lr}
 662              	.LCFI23:
 663              	 .cfi_def_cfa_offset 8
 664              	 .cfi_offset 7,-8
 665              	 .cfi_offset 14,-4
 666 0002 84B0     	 sub sp,sp,#16
 667              	.LCFI24:
 668              	 .cfi_def_cfa_offset 24
 669 0004 00AF     	 add r7,sp,#0
 670              	.LCFI25:
 671              	 .cfi_def_cfa_register 7
 672 0006 7860     	 str r0,[r7,#4]
 490:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 673              	 .loc 1 490 0
 674 0008 7B68     	 ldr r3,[r7,#4]
 675 000a FB60     	 str r3,[r7,#12]
 491:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xReturn;
 492:../Dave/Generated/FREERTOS/timers.c **** 
 493:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 676              	 .loc 1 493 0
 677 000c 7B68     	 ldr r3,[r7,#4]
 678 000e 002B     	 cmp r3,#0
 679 0010 01D1     	 bne .L48
 680              	 .loc 1 493 0 is_stmt 0 discriminator 1
 681              	
 682 0012 72B6     	 cpsid i
 683              	
 684              	 .code 16
 685              	.L49:
 686 0014 FEE7     	 b .L49
 687              	.L48:
 494:../Dave/Generated/FREERTOS/timers.c ****         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 688              	 .loc 1 494 0 is_stmt 1
 689 0016 FB68     	 ldr r3,[r7,#12]
 690 0018 5B68     	 ldr r3,[r3,#4]
 691 001a BB60     	 str r3,[r7,#8]
 495:../Dave/Generated/FREERTOS/timers.c ****         return xReturn;
 692              	 .loc 1 495 0
 693 001c BB68     	 ldr r3,[r7,#8]
 496:../Dave/Generated/FREERTOS/timers.c ****     }
 694              	 .loc 1 496 0
 695 001e 181C     	 mov r0,r3
 696 0020 BD46     	 mov sp,r7
 697 0022 04B0     	 add sp,sp,#16
 698              	 
 699 0024 80BD     	 pop {r7,pc}
 700              	 .cfi_endproc
 701              	.LFE50:
 703 0026 C046     	 .section .text.pcTimerGetName,"ax",%progbits
 704              	 .align 2
 705              	 .global pcTimerGetName
 706              	 .code 16
 707              	 .thumb_func
 709              	pcTimerGetName:
 710              	.LFB51:
 497:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 498:../Dave/Generated/FREERTOS/timers.c **** 
 499:../Dave/Generated/FREERTOS/timers.c ****     const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are all
 500:../Dave/Generated/FREERTOS/timers.c ****     {
 711              	 .loc 1 500 0
 712              	 .cfi_startproc
 713 0000 80B5     	 push {r7,lr}
 714              	.LCFI26:
 715              	 .cfi_def_cfa_offset 8
 716              	 .cfi_offset 7,-8
 717              	 .cfi_offset 14,-4
 718 0002 84B0     	 sub sp,sp,#16
 719              	.LCFI27:
 720              	 .cfi_def_cfa_offset 24
 721 0004 00AF     	 add r7,sp,#0
 722              	.LCFI28:
 723              	 .cfi_def_cfa_register 7
 724 0006 7860     	 str r0,[r7,#4]
 501:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 725              	 .loc 1 501 0
 726 0008 7B68     	 ldr r3,[r7,#4]
 727 000a FB60     	 str r3,[r7,#12]
 502:../Dave/Generated/FREERTOS/timers.c **** 
 503:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 728              	 .loc 1 503 0
 729 000c 7B68     	 ldr r3,[r7,#4]
 730 000e 002B     	 cmp r3,#0
 731 0010 01D1     	 bne .L52
 732              	 .loc 1 503 0 is_stmt 0 discriminator 1
 733              	
 734 0012 72B6     	 cpsid i
 735              	
 736              	 .code 16
 737              	.L53:
 738 0014 FEE7     	 b .L53
 739              	.L52:
 504:../Dave/Generated/FREERTOS/timers.c ****         return pxTimer->pcTimerName;
 740              	 .loc 1 504 0 is_stmt 1
 741 0016 FB68     	 ldr r3,[r7,#12]
 742 0018 1B68     	 ldr r3,[r3]
 505:../Dave/Generated/FREERTOS/timers.c ****     }
 743              	 .loc 1 505 0
 744 001a 181C     	 mov r0,r3
 745 001c BD46     	 mov sp,r7
 746 001e 04B0     	 add sp,sp,#16
 747              	 
 748 0020 80BD     	 pop {r7,pc}
 749              	 .cfi_endproc
 750              	.LFE51:
 752 0022 C046     	 .section .text.prvProcessExpiredTimer,"ax",%progbits
 753              	 .align 2
 754              	 .code 16
 755              	 .thumb_func
 757              	prvProcessExpiredTimer:
 758              	.LFB52:
 506:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 507:../Dave/Generated/FREERTOS/timers.c **** 
 508:../Dave/Generated/FREERTOS/timers.c ****     static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
 509:../Dave/Generated/FREERTOS/timers.c ****                                         const TickType_t xTimeNow )
 510:../Dave/Generated/FREERTOS/timers.c ****     {
 759              	 .loc 1 510 0
 760              	 .cfi_startproc
 761 0000 80B5     	 push {r7,lr}
 762              	.LCFI29:
 763              	 .cfi_def_cfa_offset 8
 764              	 .cfi_offset 7,-8
 765              	 .cfi_offset 14,-4
 766 0002 86B0     	 sub sp,sp,#24
 767              	.LCFI30:
 768              	 .cfi_def_cfa_offset 32
 769 0004 02AF     	 add r7,sp,#8
 770              	.LCFI31:
 771              	 .cfi_def_cfa 7,24
 772 0006 7860     	 str r0,[r7,#4]
 773 0008 3960     	 str r1,[r7]
 511:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xResult;
 512:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); 
 774              	 .loc 1 512 0
 775 000a 1E4B     	 ldr r3,.L59
 776 000c 1B68     	 ldr r3,[r3]
 777 000e DB68     	 ldr r3,[r3,#12]
 778 0010 DB68     	 ldr r3,[r3,#12]
 779 0012 FB60     	 str r3,[r7,#12]
 513:../Dave/Generated/FREERTOS/timers.c **** 
 514:../Dave/Generated/FREERTOS/timers.c ****         /* Remove the timer from the list of active timers.  A check has already
 515:../Dave/Generated/FREERTOS/timers.c ****          * been performed to ensure the list is not empty. */
 516:../Dave/Generated/FREERTOS/timers.c **** 
 517:../Dave/Generated/FREERTOS/timers.c ****         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 780              	 .loc 1 517 0
 781 0014 FB68     	 ldr r3,[r7,#12]
 782 0016 0433     	 add r3,r3,#4
 783 0018 181C     	 mov r0,r3
 784 001a FFF7FEFF 	 bl uxListRemove
 518:../Dave/Generated/FREERTOS/timers.c ****         traceTIMER_EXPIRED( pxTimer );
 519:../Dave/Generated/FREERTOS/timers.c **** 
 520:../Dave/Generated/FREERTOS/timers.c ****         /* If the timer is an auto-reload timer then calculate the next
 521:../Dave/Generated/FREERTOS/timers.c ****          * expiry time and re-insert the timer in the list of active timers. */
 522:../Dave/Generated/FREERTOS/timers.c ****         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 785              	 .loc 1 522 0
 786 001e FB68     	 ldr r3,[r7,#12]
 787 0020 2822     	 mov r2,#40
 788 0022 9B5C     	 ldrb r3,[r3,r2]
 789 0024 1A1C     	 mov r2,r3
 790 0026 0423     	 mov r3,#4
 791 0028 1340     	 and r3,r2
 792 002a 1AD0     	 beq .L56
 523:../Dave/Generated/FREERTOS/timers.c ****         {
 524:../Dave/Generated/FREERTOS/timers.c ****             /* The timer is inserted into a list using a time relative to anything
 525:../Dave/Generated/FREERTOS/timers.c ****              * other than the current time.  It will therefore be inserted into the
 526:../Dave/Generated/FREERTOS/timers.c ****              * correct list relative to the time this task thinks it is now. */
 527:../Dave/Generated/FREERTOS/timers.c ****             if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTic
 793              	 .loc 1 527 0
 794 002c FB68     	 ldr r3,[r7,#12]
 795 002e 9A69     	 ldr r2,[r3,#24]
 796 0030 7B68     	 ldr r3,[r7,#4]
 797 0032 D118     	 add r1,r2,r3
 798 0034 F868     	 ldr r0,[r7,#12]
 799 0036 3A68     	 ldr r2,[r7]
 800 0038 7B68     	 ldr r3,[r7,#4]
 801 003a FFF7FEFF 	 bl prvInsertTimerInActiveList
 802 003e 031E     	 sub r3,r0,#0
 803 0040 18D0     	 beq .L57
 528:../Dave/Generated/FREERTOS/timers.c ****             {
 529:../Dave/Generated/FREERTOS/timers.c ****                 /* The timer expired before it was added to the active timer
 530:../Dave/Generated/FREERTOS/timers.c ****                  * list.  Reload it now.  */
 531:../Dave/Generated/FREERTOS/timers.c ****                 xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTi
 804              	 .loc 1 531 0
 805 0042 F968     	 ldr r1,[r7,#12]
 806 0044 7A68     	 ldr r2,[r7,#4]
 807 0046 0023     	 mov r3,#0
 808 0048 0093     	 str r3,[sp]
 809 004a 081C     	 mov r0,r1
 810 004c 0021     	 mov r1,#0
 811 004e 0023     	 mov r3,#0
 812 0050 FFF7FEFF 	 bl xTimerGenericCommand
 813 0054 031C     	 mov r3,r0
 814 0056 BB60     	 str r3,[r7,#8]
 532:../Dave/Generated/FREERTOS/timers.c ****                 configASSERT( xResult );
 815              	 .loc 1 532 0
 816 0058 BB68     	 ldr r3,[r7,#8]
 817 005a 002B     	 cmp r3,#0
 818 005c 0AD1     	 bne .L57
 819              	 .loc 1 532 0 is_stmt 0 discriminator 1
 820              	
 821 005e 72B6     	 cpsid i
 822              	
 823              	 .code 16
 824              	.L58:
 825 0060 FEE7     	 b .L58
 826              	.L56:
 533:../Dave/Generated/FREERTOS/timers.c ****                 ( void ) xResult;
 534:../Dave/Generated/FREERTOS/timers.c ****             }
 535:../Dave/Generated/FREERTOS/timers.c ****             else
 536:../Dave/Generated/FREERTOS/timers.c ****             {
 537:../Dave/Generated/FREERTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 538:../Dave/Generated/FREERTOS/timers.c ****             }
 539:../Dave/Generated/FREERTOS/timers.c ****         }
 540:../Dave/Generated/FREERTOS/timers.c ****         else
 541:../Dave/Generated/FREERTOS/timers.c ****         {
 542:../Dave/Generated/FREERTOS/timers.c ****             pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 827              	 .loc 1 542 0 is_stmt 1
 828 0062 FB68     	 ldr r3,[r7,#12]
 829 0064 2822     	 mov r2,#40
 830 0066 9B5C     	 ldrb r3,[r3,r2]
 831 0068 0122     	 mov r2,#1
 832 006a 9343     	 bic r3,r2
 833 006c D9B2     	 uxtb r1,r3
 834 006e FB68     	 ldr r3,[r7,#12]
 835 0070 2822     	 mov r2,#40
 836 0072 9954     	 strb r1,[r3,r2]
 837              	.L57:
 543:../Dave/Generated/FREERTOS/timers.c ****             mtCOVERAGE_TEST_MARKER();
 544:../Dave/Generated/FREERTOS/timers.c ****         }
 545:../Dave/Generated/FREERTOS/timers.c **** 
 546:../Dave/Generated/FREERTOS/timers.c ****         /* Call the timer callback. */
 547:../Dave/Generated/FREERTOS/timers.c ****         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 838              	 .loc 1 547 0
 839 0074 FB68     	 ldr r3,[r7,#12]
 840 0076 1B6A     	 ldr r3,[r3,#32]
 841 0078 FA68     	 ldr r2,[r7,#12]
 842 007a 101C     	 mov r0,r2
 843 007c 9847     	 blx r3
 548:../Dave/Generated/FREERTOS/timers.c ****     }
 844              	 .loc 1 548 0
 845 007e BD46     	 mov sp,r7
 846 0080 04B0     	 add sp,sp,#16
 847              	 
 848 0082 80BD     	 pop {r7,pc}
 849              	.L60:
 850              	 .align 2
 851              	.L59:
 852 0084 00000000 	 .word pxCurrentTimerList
 853              	 .cfi_endproc
 854              	.LFE52:
 856              	 .section .text.prvTimerTask,"ax",%progbits
 857              	 .align 2
 858              	 .code 16
 859              	 .thumb_func
 861              	prvTimerTask:
 862              	.LFB53:
 549:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 550:../Dave/Generated/FREERTOS/timers.c **** 
 551:../Dave/Generated/FREERTOS/timers.c ****     static portTASK_FUNCTION( prvTimerTask, pvParameters )
 552:../Dave/Generated/FREERTOS/timers.c ****     {
 863              	 .loc 1 552 0
 864              	 .cfi_startproc
 865 0000 80B5     	 push {r7,lr}
 866              	.LCFI32:
 867              	 .cfi_def_cfa_offset 8
 868              	 .cfi_offset 7,-8
 869              	 .cfi_offset 14,-4
 870 0002 84B0     	 sub sp,sp,#16
 871              	.LCFI33:
 872              	 .cfi_def_cfa_offset 24
 873 0004 00AF     	 add r7,sp,#0
 874              	.LCFI34:
 875              	 .cfi_def_cfa_register 7
 876 0006 7860     	 str r0,[r7,#4]
 877              	.L62:
 553:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xNextExpireTime;
 554:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xListWasEmpty;
 555:../Dave/Generated/FREERTOS/timers.c **** 
 556:../Dave/Generated/FREERTOS/timers.c ****         /* Just to avoid compiler warnings. */
 557:../Dave/Generated/FREERTOS/timers.c ****         ( void ) pvParameters;
 558:../Dave/Generated/FREERTOS/timers.c **** 
 559:../Dave/Generated/FREERTOS/timers.c ****         #if ( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 560:../Dave/Generated/FREERTOS/timers.c ****             {
 561:../Dave/Generated/FREERTOS/timers.c ****                 extern void vApplicationDaemonTaskStartupHook( void );
 562:../Dave/Generated/FREERTOS/timers.c **** 
 563:../Dave/Generated/FREERTOS/timers.c ****                 /* Allow the application writer to execute some code in the context of
 564:../Dave/Generated/FREERTOS/timers.c ****                  * this task at the point the task starts executing.  This is useful if the
 565:../Dave/Generated/FREERTOS/timers.c ****                  * application includes initialisation code that would benefit from
 566:../Dave/Generated/FREERTOS/timers.c ****                  * executing after the scheduler has been started. */
 567:../Dave/Generated/FREERTOS/timers.c ****                 vApplicationDaemonTaskStartupHook();
 568:../Dave/Generated/FREERTOS/timers.c ****             }
 569:../Dave/Generated/FREERTOS/timers.c ****         #endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 570:../Dave/Generated/FREERTOS/timers.c **** 
 571:../Dave/Generated/FREERTOS/timers.c ****         for( ; ; )
 572:../Dave/Generated/FREERTOS/timers.c ****         {
 573:../Dave/Generated/FREERTOS/timers.c ****             /* Query the timers list to see if it contains any timers, and if so,
 574:../Dave/Generated/FREERTOS/timers.c ****              * obtain the time at which the next timer will expire. */
 575:../Dave/Generated/FREERTOS/timers.c ****             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 878              	 .loc 1 575 0 discriminator 1
 879 0008 0823     	 mov r3,#8
 880 000a FB18     	 add r3,r7,r3
 881 000c 181C     	 mov r0,r3
 882 000e FFF7FEFF 	 bl prvGetNextExpireTime
 883 0012 031C     	 mov r3,r0
 884 0014 FB60     	 str r3,[r7,#12]
 576:../Dave/Generated/FREERTOS/timers.c **** 
 577:../Dave/Generated/FREERTOS/timers.c ****             /* If a timer has expired, process it.  Otherwise, block this task
 578:../Dave/Generated/FREERTOS/timers.c ****              * until either a timer does expire, or a command is received. */
 579:../Dave/Generated/FREERTOS/timers.c ****             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 885              	 .loc 1 579 0 discriminator 1
 886 0016 BB68     	 ldr r3,[r7,#8]
 887 0018 FA68     	 ldr r2,[r7,#12]
 888 001a 101C     	 mov r0,r2
 889 001c 191C     	 mov r1,r3
 890 001e FFF7FEFF 	 bl prvProcessTimerOrBlockTask
 580:../Dave/Generated/FREERTOS/timers.c **** 
 581:../Dave/Generated/FREERTOS/timers.c ****             /* Empty the command queue. */
 582:../Dave/Generated/FREERTOS/timers.c ****             prvProcessReceivedCommands();
 891              	 .loc 1 582 0 discriminator 1
 892 0022 FFF7FEFF 	 bl prvProcessReceivedCommands
 583:../Dave/Generated/FREERTOS/timers.c ****         }
 893              	 .loc 1 583 0 discriminator 1
 894 0026 EFE7     	 b .L62
 895              	 .cfi_endproc
 896              	.LFE53:
 898              	 .section .text.prvProcessTimerOrBlockTask,"ax",%progbits
 899              	 .align 2
 900              	 .code 16
 901              	 .thumb_func
 903              	prvProcessTimerOrBlockTask:
 904              	.LFB54:
 584:../Dave/Generated/FREERTOS/timers.c ****     }
 585:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 586:../Dave/Generated/FREERTOS/timers.c **** 
 587:../Dave/Generated/FREERTOS/timers.c ****     static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
 588:../Dave/Generated/FREERTOS/timers.c ****                                             BaseType_t xListWasEmpty )
 589:../Dave/Generated/FREERTOS/timers.c ****     {
 905              	 .loc 1 589 0
 906              	 .cfi_startproc
 907 0000 80B5     	 push {r7,lr}
 908              	.LCFI35:
 909              	 .cfi_def_cfa_offset 8
 910              	 .cfi_offset 7,-8
 911              	 .cfi_offset 14,-4
 912 0002 84B0     	 sub sp,sp,#16
 913              	.LCFI36:
 914              	 .cfi_def_cfa_offset 24
 915 0004 00AF     	 add r7,sp,#0
 916              	.LCFI37:
 917              	 .cfi_def_cfa_register 7
 918 0006 7860     	 str r0,[r7,#4]
 919 0008 3960     	 str r1,[r7]
 590:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xTimeNow;
 591:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xTimerListsWereSwitched;
 592:../Dave/Generated/FREERTOS/timers.c **** 
 593:../Dave/Generated/FREERTOS/timers.c ****         vTaskSuspendAll();
 920              	 .loc 1 593 0
 921 000a FFF7FEFF 	 bl vTaskSuspendAll
 594:../Dave/Generated/FREERTOS/timers.c ****         {
 595:../Dave/Generated/FREERTOS/timers.c ****             /* Obtain the time now to make an assessment as to whether the timer
 596:../Dave/Generated/FREERTOS/timers.c ****              * has expired or not.  If obtaining the time causes the lists to switch
 597:../Dave/Generated/FREERTOS/timers.c ****              * then don't process this timer as any timers that remained in the list
 598:../Dave/Generated/FREERTOS/timers.c ****              * when the lists were switched will have been processed within the
 599:../Dave/Generated/FREERTOS/timers.c ****              * prvSampleTimeNow() function. */
 600:../Dave/Generated/FREERTOS/timers.c ****             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 922              	 .loc 1 600 0
 923 000e 0823     	 mov r3,#8
 924 0010 FB18     	 add r3,r7,r3
 925 0012 181C     	 mov r0,r3
 926 0014 FFF7FEFF 	 bl prvSampleTimeNow
 927 0018 031C     	 mov r3,r0
 928 001a FB60     	 str r3,[r7,#12]
 601:../Dave/Generated/FREERTOS/timers.c **** 
 602:../Dave/Generated/FREERTOS/timers.c ****             if( xTimerListsWereSwitched == pdFALSE )
 929              	 .loc 1 602 0
 930 001c BB68     	 ldr r3,[r7,#8]
 931 001e 002B     	 cmp r3,#0
 932 0020 2DD1     	 bne .L64
 603:../Dave/Generated/FREERTOS/timers.c ****             {
 604:../Dave/Generated/FREERTOS/timers.c ****                 /* The tick count has not overflowed, has the timer expired? */
 605:../Dave/Generated/FREERTOS/timers.c ****                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 933              	 .loc 1 605 0
 934 0022 3B68     	 ldr r3,[r7]
 935 0024 002B     	 cmp r3,#0
 936 0026 0CD1     	 bne .L65
 937              	 .loc 1 605 0 is_stmt 0 discriminator 1
 938 0028 7A68     	 ldr r2,[r7,#4]
 939 002a FB68     	 ldr r3,[r7,#12]
 940 002c 9A42     	 cmp r2,r3
 941 002e 08D8     	 bhi .L65
 606:../Dave/Generated/FREERTOS/timers.c ****                 {
 607:../Dave/Generated/FREERTOS/timers.c ****                     ( void ) xTaskResumeAll();
 942              	 .loc 1 607 0 is_stmt 1
 943 0030 FFF7FEFF 	 bl xTaskResumeAll
 608:../Dave/Generated/FREERTOS/timers.c ****                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 944              	 .loc 1 608 0
 945 0034 7A68     	 ldr r2,[r7,#4]
 946 0036 FB68     	 ldr r3,[r7,#12]
 947 0038 101C     	 mov r0,r2
 948 003a 191C     	 mov r1,r3
 949 003c FFF7FEFF 	 bl prvProcessExpiredTimer
 950 0040 1FE0     	 b .L63
 951              	.L65:
 609:../Dave/Generated/FREERTOS/timers.c ****                 }
 610:../Dave/Generated/FREERTOS/timers.c ****                 else
 611:../Dave/Generated/FREERTOS/timers.c ****                 {
 612:../Dave/Generated/FREERTOS/timers.c ****                     /* The tick count has not overflowed, and the next expire
 613:../Dave/Generated/FREERTOS/timers.c ****                      * time has not been reached yet.  This task should therefore
 614:../Dave/Generated/FREERTOS/timers.c ****                      * block to wait for the next expire time or a command to be
 615:../Dave/Generated/FREERTOS/timers.c ****                      * received - whichever comes first.  The following line cannot
 616:../Dave/Generated/FREERTOS/timers.c ****                      * be reached unless xNextExpireTime > xTimeNow, except in the
 617:../Dave/Generated/FREERTOS/timers.c ****                      * case when the current timer list is empty. */
 618:../Dave/Generated/FREERTOS/timers.c ****                     if( xListWasEmpty != pdFALSE )
 952              	 .loc 1 618 0
 953 0042 3B68     	 ldr r3,[r7]
 954 0044 002B     	 cmp r3,#0
 955 0046 08D0     	 beq .L67
 619:../Dave/Generated/FREERTOS/timers.c ****                     {
 620:../Dave/Generated/FREERTOS/timers.c ****                         /* The current timer list is empty - is the overflow list
 621:../Dave/Generated/FREERTOS/timers.c ****                          * also empty? */
 622:../Dave/Generated/FREERTOS/timers.c ****                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 956              	 .loc 1 622 0
 957 0048 0F4B     	 ldr r3,.L71
 958 004a 1B68     	 ldr r3,[r3]
 959 004c 1B68     	 ldr r3,[r3]
 960 004e 002B     	 cmp r3,#0
 961 0050 01D1     	 bne .L68
 962              	 .loc 1 622 0 is_stmt 0 discriminator 1
 963 0052 0123     	 mov r3,#1
 964 0054 00E0     	 b .L69
 965              	.L68:
 966              	 .loc 1 622 0 discriminator 2
 967 0056 0023     	 mov r3,#0
 968              	.L69:
 969              	 .loc 1 622 0 discriminator 4
 970 0058 3B60     	 str r3,[r7]
 971              	.L67:
 623:../Dave/Generated/FREERTOS/timers.c ****                     }
 624:../Dave/Generated/FREERTOS/timers.c **** 
 625:../Dave/Generated/FREERTOS/timers.c ****                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xL
 972              	 .loc 1 625 0 is_stmt 1
 973 005a 0C4B     	 ldr r3,.L71+4
 974 005c 1968     	 ldr r1,[r3]
 975 005e 7A68     	 ldr r2,[r7,#4]
 976 0060 FB68     	 ldr r3,[r7,#12]
 977 0062 D21A     	 sub r2,r2,r3
 978 0064 3B68     	 ldr r3,[r7]
 979 0066 081C     	 mov r0,r1
 980 0068 111C     	 mov r1,r2
 981 006a 1A1C     	 mov r2,r3
 982 006c FFF7FEFF 	 bl vQueueWaitForMessageRestricted
 626:../Dave/Generated/FREERTOS/timers.c **** 
 627:../Dave/Generated/FREERTOS/timers.c ****                     if( xTaskResumeAll() == pdFALSE )
 983              	 .loc 1 627 0
 984 0070 FFF7FEFF 	 bl xTaskResumeAll
 985 0074 031E     	 sub r3,r0,#0
 986 0076 04D1     	 bne .L63
 628:../Dave/Generated/FREERTOS/timers.c ****                     {
 629:../Dave/Generated/FREERTOS/timers.c ****                         /* Yield to wait for either a command to arrive, or the
 630:../Dave/Generated/FREERTOS/timers.c ****                          * block time to expire.  If a command arrived between the
 631:../Dave/Generated/FREERTOS/timers.c ****                          * critical section being exited and this yield then the yield
 632:../Dave/Generated/FREERTOS/timers.c ****                          * will not cause the task to block. */
 633:../Dave/Generated/FREERTOS/timers.c ****                         portYIELD_WITHIN_API();
 987              	 .loc 1 633 0
 988 0078 FFF7FEFF 	 bl vPortYield
 989 007c 01E0     	 b .L63
 990              	.L64:
 634:../Dave/Generated/FREERTOS/timers.c ****                     }
 635:../Dave/Generated/FREERTOS/timers.c ****                     else
 636:../Dave/Generated/FREERTOS/timers.c ****                     {
 637:../Dave/Generated/FREERTOS/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 638:../Dave/Generated/FREERTOS/timers.c ****                     }
 639:../Dave/Generated/FREERTOS/timers.c ****                 }
 640:../Dave/Generated/FREERTOS/timers.c ****             }
 641:../Dave/Generated/FREERTOS/timers.c ****             else
 642:../Dave/Generated/FREERTOS/timers.c ****             {
 643:../Dave/Generated/FREERTOS/timers.c ****                 ( void ) xTaskResumeAll();
 991              	 .loc 1 643 0
 992 007e FFF7FEFF 	 bl xTaskResumeAll
 993              	.L63:
 644:../Dave/Generated/FREERTOS/timers.c ****             }
 645:../Dave/Generated/FREERTOS/timers.c ****         }
 646:../Dave/Generated/FREERTOS/timers.c ****     }
 994              	 .loc 1 646 0
 995 0082 BD46     	 mov sp,r7
 996 0084 04B0     	 add sp,sp,#16
 997              	 
 998 0086 80BD     	 pop {r7,pc}
 999              	.L72:
 1000              	 .align 2
 1001              	.L71:
 1002 0088 00000000 	 .word pxOverflowTimerList
 1003 008c 00000000 	 .word xTimerQueue
 1004              	 .cfi_endproc
 1005              	.LFE54:
 1007              	 .section .text.prvGetNextExpireTime,"ax",%progbits
 1008              	 .align 2
 1009              	 .code 16
 1010              	 .thumb_func
 1012              	prvGetNextExpireTime:
 1013              	.LFB55:
 647:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 648:../Dave/Generated/FREERTOS/timers.c **** 
 649:../Dave/Generated/FREERTOS/timers.c ****     static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 650:../Dave/Generated/FREERTOS/timers.c ****     {
 1014              	 .loc 1 650 0
 1015              	 .cfi_startproc
 1016 0000 80B5     	 push {r7,lr}
 1017              	.LCFI38:
 1018              	 .cfi_def_cfa_offset 8
 1019              	 .cfi_offset 7,-8
 1020              	 .cfi_offset 14,-4
 1021 0002 84B0     	 sub sp,sp,#16
 1022              	.LCFI39:
 1023              	 .cfi_def_cfa_offset 24
 1024 0004 00AF     	 add r7,sp,#0
 1025              	.LCFI40:
 1026              	 .cfi_def_cfa_register 7
 1027 0006 7860     	 str r0,[r7,#4]
 651:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xNextExpireTime;
 652:../Dave/Generated/FREERTOS/timers.c **** 
 653:../Dave/Generated/FREERTOS/timers.c ****         /* Timers are listed in expiry time order, with the head of the list
 654:../Dave/Generated/FREERTOS/timers.c ****          * referencing the task that will expire first.  Obtain the time at which
 655:../Dave/Generated/FREERTOS/timers.c ****          * the timer with the nearest expiry time will expire.  If there are no
 656:../Dave/Generated/FREERTOS/timers.c ****          * active timers then just set the next expire time to 0.  That will cause
 657:../Dave/Generated/FREERTOS/timers.c ****          * this task to unblock when the tick count overflows, at which point the
 658:../Dave/Generated/FREERTOS/timers.c ****          * timer lists will be switched and the next expiry time can be
 659:../Dave/Generated/FREERTOS/timers.c ****          * re-assessed.  */
 660:../Dave/Generated/FREERTOS/timers.c ****         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1028              	 .loc 1 660 0
 1029 0008 0D4B     	 ldr r3,.L79
 1030 000a 1B68     	 ldr r3,[r3]
 1031 000c 1B68     	 ldr r3,[r3]
 1032 000e 002B     	 cmp r3,#0
 1033 0010 01D1     	 bne .L74
 1034              	 .loc 1 660 0 is_stmt 0 discriminator 1
 1035 0012 0122     	 mov r2,#1
 1036 0014 00E0     	 b .L75
 1037              	.L74:
 1038              	 .loc 1 660 0 discriminator 2
 1039 0016 0022     	 mov r2,#0
 1040              	.L75:
 1041              	 .loc 1 660 0 discriminator 4
 1042 0018 7B68     	 ldr r3,[r7,#4]
 1043 001a 1A60     	 str r2,[r3]
 661:../Dave/Generated/FREERTOS/timers.c **** 
 662:../Dave/Generated/FREERTOS/timers.c ****         if( *pxListWasEmpty == pdFALSE )
 1044              	 .loc 1 662 0 is_stmt 1 discriminator 4
 1045 001c 7B68     	 ldr r3,[r7,#4]
 1046 001e 1B68     	 ldr r3,[r3]
 1047 0020 002B     	 cmp r3,#0
 1048 0022 05D1     	 bne .L76
 663:../Dave/Generated/FREERTOS/timers.c ****         {
 664:../Dave/Generated/FREERTOS/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1049              	 .loc 1 664 0
 1050 0024 064B     	 ldr r3,.L79
 1051 0026 1B68     	 ldr r3,[r3]
 1052 0028 DB68     	 ldr r3,[r3,#12]
 1053 002a 1B68     	 ldr r3,[r3]
 1054 002c FB60     	 str r3,[r7,#12]
 1055 002e 01E0     	 b .L77
 1056              	.L76:
 665:../Dave/Generated/FREERTOS/timers.c ****         }
 666:../Dave/Generated/FREERTOS/timers.c ****         else
 667:../Dave/Generated/FREERTOS/timers.c ****         {
 668:../Dave/Generated/FREERTOS/timers.c ****             /* Ensure the task unblocks when the tick count rolls over. */
 669:../Dave/Generated/FREERTOS/timers.c ****             xNextExpireTime = ( TickType_t ) 0U;
 1057              	 .loc 1 669 0
 1058 0030 0023     	 mov r3,#0
 1059 0032 FB60     	 str r3,[r7,#12]
 1060              	.L77:
 670:../Dave/Generated/FREERTOS/timers.c ****         }
 671:../Dave/Generated/FREERTOS/timers.c **** 
 672:../Dave/Generated/FREERTOS/timers.c ****         return xNextExpireTime;
 1061              	 .loc 1 672 0
 1062 0034 FB68     	 ldr r3,[r7,#12]
 673:../Dave/Generated/FREERTOS/timers.c ****     }
 1063              	 .loc 1 673 0
 1064 0036 181C     	 mov r0,r3
 1065 0038 BD46     	 mov sp,r7
 1066 003a 04B0     	 add sp,sp,#16
 1067              	 
 1068 003c 80BD     	 pop {r7,pc}
 1069              	.L80:
 1070 003e C046     	 .align 2
 1071              	.L79:
 1072 0040 00000000 	 .word pxCurrentTimerList
 1073              	 .cfi_endproc
 1074              	.LFE55:
 1076              	 .section .text.prvSampleTimeNow,"ax",%progbits
 1077              	 .align 2
 1078              	 .code 16
 1079              	 .thumb_func
 1081              	prvSampleTimeNow:
 1082              	.LFB56:
 674:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 675:../Dave/Generated/FREERTOS/timers.c **** 
 676:../Dave/Generated/FREERTOS/timers.c ****     static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 677:../Dave/Generated/FREERTOS/timers.c ****     {
 1083              	 .loc 1 677 0
 1084              	 .cfi_startproc
 1085 0000 80B5     	 push {r7,lr}
 1086              	.LCFI41:
 1087              	 .cfi_def_cfa_offset 8
 1088              	 .cfi_offset 7,-8
 1089              	 .cfi_offset 14,-4
 1090 0002 84B0     	 sub sp,sp,#16
 1091              	.LCFI42:
 1092              	 .cfi_def_cfa_offset 24
 1093 0004 00AF     	 add r7,sp,#0
 1094              	.LCFI43:
 1095              	 .cfi_def_cfa_register 7
 1096 0006 7860     	 str r0,[r7,#4]
 678:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xTimeNow;
 679:../Dave/Generated/FREERTOS/timers.c ****         PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is o
 680:../Dave/Generated/FREERTOS/timers.c **** 
 681:../Dave/Generated/FREERTOS/timers.c ****         xTimeNow = xTaskGetTickCount();
 1097              	 .loc 1 681 0
 1098 0008 FFF7FEFF 	 bl xTaskGetTickCount
 1099 000c 031C     	 mov r3,r0
 1100 000e FB60     	 str r3,[r7,#12]
 682:../Dave/Generated/FREERTOS/timers.c **** 
 683:../Dave/Generated/FREERTOS/timers.c ****         if( xTimeNow < xLastTime )
 1101              	 .loc 1 683 0
 1102 0010 0A4B     	 ldr r3,.L85
 1103 0012 1B68     	 ldr r3,[r3]
 1104 0014 FA68     	 ldr r2,[r7,#12]
 1105 0016 9A42     	 cmp r2,r3
 1106 0018 05D2     	 bcs .L82
 684:../Dave/Generated/FREERTOS/timers.c ****         {
 685:../Dave/Generated/FREERTOS/timers.c ****             prvSwitchTimerLists();
 1107              	 .loc 1 685 0
 1108 001a FFF7FEFF 	 bl prvSwitchTimerLists
 686:../Dave/Generated/FREERTOS/timers.c ****             *pxTimerListsWereSwitched = pdTRUE;
 1109              	 .loc 1 686 0
 1110 001e 7B68     	 ldr r3,[r7,#4]
 1111 0020 0122     	 mov r2,#1
 1112 0022 1A60     	 str r2,[r3]
 1113 0024 02E0     	 b .L83
 1114              	.L82:
 687:../Dave/Generated/FREERTOS/timers.c ****         }
 688:../Dave/Generated/FREERTOS/timers.c ****         else
 689:../Dave/Generated/FREERTOS/timers.c ****         {
 690:../Dave/Generated/FREERTOS/timers.c ****             *pxTimerListsWereSwitched = pdFALSE;
 1115              	 .loc 1 690 0
 1116 0026 7B68     	 ldr r3,[r7,#4]
 1117 0028 0022     	 mov r2,#0
 1118 002a 1A60     	 str r2,[r3]
 1119              	.L83:
 691:../Dave/Generated/FREERTOS/timers.c ****         }
 692:../Dave/Generated/FREERTOS/timers.c **** 
 693:../Dave/Generated/FREERTOS/timers.c ****         xLastTime = xTimeNow;
 1120              	 .loc 1 693 0
 1121 002c 034B     	 ldr r3,.L85
 1122 002e FA68     	 ldr r2,[r7,#12]
 1123 0030 1A60     	 str r2,[r3]
 694:../Dave/Generated/FREERTOS/timers.c **** 
 695:../Dave/Generated/FREERTOS/timers.c ****         return xTimeNow;
 1124              	 .loc 1 695 0
 1125 0032 FB68     	 ldr r3,[r7,#12]
 696:../Dave/Generated/FREERTOS/timers.c ****     }
 1126              	 .loc 1 696 0
 1127 0034 181C     	 mov r0,r3
 1128 0036 BD46     	 mov sp,r7
 1129 0038 04B0     	 add sp,sp,#16
 1130              	 
 1131 003a 80BD     	 pop {r7,pc}
 1132              	.L86:
 1133              	 .align 2
 1134              	.L85:
 1135 003c 00000000 	 .word xLastTime.6385
 1136              	 .cfi_endproc
 1137              	.LFE56:
 1139              	 .section .text.prvInsertTimerInActiveList,"ax",%progbits
 1140              	 .align 2
 1141              	 .code 16
 1142              	 .thumb_func
 1144              	prvInsertTimerInActiveList:
 1145              	.LFB57:
 697:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 698:../Dave/Generated/FREERTOS/timers.c **** 
 699:../Dave/Generated/FREERTOS/timers.c ****     static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
 700:../Dave/Generated/FREERTOS/timers.c ****                                                   const TickType_t xNextExpiryTime,
 701:../Dave/Generated/FREERTOS/timers.c ****                                                   const TickType_t xTimeNow,
 702:../Dave/Generated/FREERTOS/timers.c ****                                                   const TickType_t xCommandTime )
 703:../Dave/Generated/FREERTOS/timers.c ****     {
 1146              	 .loc 1 703 0
 1147              	 .cfi_startproc
 1148 0000 80B5     	 push {r7,lr}
 1149              	.LCFI44:
 1150              	 .cfi_def_cfa_offset 8
 1151              	 .cfi_offset 7,-8
 1152              	 .cfi_offset 14,-4
 1153 0002 86B0     	 sub sp,sp,#24
 1154              	.LCFI45:
 1155              	 .cfi_def_cfa_offset 32
 1156 0004 00AF     	 add r7,sp,#0
 1157              	.LCFI46:
 1158              	 .cfi_def_cfa_register 7
 1159 0006 F860     	 str r0,[r7,#12]
 1160 0008 B960     	 str r1,[r7,#8]
 1161 000a 7A60     	 str r2,[r7,#4]
 1162 000c 3B60     	 str r3,[r7]
 704:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xProcessTimerNow = pdFALSE;
 1163              	 .loc 1 704 0
 1164 000e 0023     	 mov r3,#0
 1165 0010 7B61     	 str r3,[r7,#20]
 705:../Dave/Generated/FREERTOS/timers.c **** 
 706:../Dave/Generated/FREERTOS/timers.c ****         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1166              	 .loc 1 706 0
 1167 0012 FB68     	 ldr r3,[r7,#12]
 1168 0014 BA68     	 ldr r2,[r7,#8]
 1169 0016 5A60     	 str r2,[r3,#4]
 707:../Dave/Generated/FREERTOS/timers.c ****         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1170              	 .loc 1 707 0
 1171 0018 FB68     	 ldr r3,[r7,#12]
 1172 001a FA68     	 ldr r2,[r7,#12]
 1173 001c 1A61     	 str r2,[r3,#16]
 708:../Dave/Generated/FREERTOS/timers.c **** 
 709:../Dave/Generated/FREERTOS/timers.c ****         if( xNextExpiryTime <= xTimeNow )
 1174              	 .loc 1 709 0
 1175 001e BA68     	 ldr r2,[r7,#8]
 1176 0020 7B68     	 ldr r3,[r7,#4]
 1177 0022 9A42     	 cmp r2,r3
 1178 0024 12D8     	 bhi .L88
 710:../Dave/Generated/FREERTOS/timers.c ****         {
 711:../Dave/Generated/FREERTOS/timers.c ****             /* Has the expiry time elapsed between the command to start/reset a
 712:../Dave/Generated/FREERTOS/timers.c ****              * timer was issued, and the time the command was processed? */
 713:../Dave/Generated/FREERTOS/timers.c ****             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*
 1179              	 .loc 1 713 0
 1180 0026 7A68     	 ldr r2,[r7,#4]
 1181 0028 3B68     	 ldr r3,[r7]
 1182 002a D21A     	 sub r2,r2,r3
 1183 002c FB68     	 ldr r3,[r7,#12]
 1184 002e 9B69     	 ldr r3,[r3,#24]
 1185 0030 9A42     	 cmp r2,r3
 1186 0032 02D3     	 bcc .L89
 714:../Dave/Generated/FREERTOS/timers.c ****             {
 715:../Dave/Generated/FREERTOS/timers.c ****                 /* The time between a command being issued and the command being
 716:../Dave/Generated/FREERTOS/timers.c ****                  * processed actually exceeds the timers period.  */
 717:../Dave/Generated/FREERTOS/timers.c ****                 xProcessTimerNow = pdTRUE;
 1187              	 .loc 1 717 0
 1188 0034 0123     	 mov r3,#1
 1189 0036 7B61     	 str r3,[r7,#20]
 1190 0038 1BE0     	 b .L91
 1191              	.L89:
 718:../Dave/Generated/FREERTOS/timers.c ****             }
 719:../Dave/Generated/FREERTOS/timers.c ****             else
 720:../Dave/Generated/FREERTOS/timers.c ****             {
 721:../Dave/Generated/FREERTOS/timers.c ****                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1192              	 .loc 1 721 0
 1193 003a 104B     	 ldr r3,.L94
 1194 003c 1A68     	 ldr r2,[r3]
 1195 003e FB68     	 ldr r3,[r7,#12]
 1196 0040 0433     	 add r3,r3,#4
 1197 0042 101C     	 mov r0,r2
 1198 0044 191C     	 mov r1,r3
 1199 0046 FFF7FEFF 	 bl vListInsert
 1200 004a 12E0     	 b .L91
 1201              	.L88:
 722:../Dave/Generated/FREERTOS/timers.c ****             }
 723:../Dave/Generated/FREERTOS/timers.c ****         }
 724:../Dave/Generated/FREERTOS/timers.c ****         else
 725:../Dave/Generated/FREERTOS/timers.c ****         {
 726:../Dave/Generated/FREERTOS/timers.c ****             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1202              	 .loc 1 726 0
 1203 004c 7A68     	 ldr r2,[r7,#4]
 1204 004e 3B68     	 ldr r3,[r7]
 1205 0050 9A42     	 cmp r2,r3
 1206 0052 06D2     	 bcs .L92
 1207              	 .loc 1 726 0 is_stmt 0 discriminator 1
 1208 0054 BA68     	 ldr r2,[r7,#8]
 1209 0056 3B68     	 ldr r3,[r7]
 1210 0058 9A42     	 cmp r2,r3
 1211 005a 02D3     	 bcc .L92
 727:../Dave/Generated/FREERTOS/timers.c ****             {
 728:../Dave/Generated/FREERTOS/timers.c ****                 /* If, since the command was issued, the tick count has overflowed
 729:../Dave/Generated/FREERTOS/timers.c ****                  * but the expiry time has not, then the timer must have already passed
 730:../Dave/Generated/FREERTOS/timers.c ****                  * its expiry time and should be processed immediately. */
 731:../Dave/Generated/FREERTOS/timers.c ****                 xProcessTimerNow = pdTRUE;
 1212              	 .loc 1 731 0 is_stmt 1
 1213 005c 0123     	 mov r3,#1
 1214 005e 7B61     	 str r3,[r7,#20]
 1215 0060 07E0     	 b .L91
 1216              	.L92:
 732:../Dave/Generated/FREERTOS/timers.c ****             }
 733:../Dave/Generated/FREERTOS/timers.c ****             else
 734:../Dave/Generated/FREERTOS/timers.c ****             {
 735:../Dave/Generated/FREERTOS/timers.c ****                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1217              	 .loc 1 735 0
 1218 0062 074B     	 ldr r3,.L94+4
 1219 0064 1A68     	 ldr r2,[r3]
 1220 0066 FB68     	 ldr r3,[r7,#12]
 1221 0068 0433     	 add r3,r3,#4
 1222 006a 101C     	 mov r0,r2
 1223 006c 191C     	 mov r1,r3
 1224 006e FFF7FEFF 	 bl vListInsert
 1225              	.L91:
 736:../Dave/Generated/FREERTOS/timers.c ****             }
 737:../Dave/Generated/FREERTOS/timers.c ****         }
 738:../Dave/Generated/FREERTOS/timers.c **** 
 739:../Dave/Generated/FREERTOS/timers.c ****         return xProcessTimerNow;
 1226              	 .loc 1 739 0
 1227 0072 7B69     	 ldr r3,[r7,#20]
 740:../Dave/Generated/FREERTOS/timers.c ****     }
 1228              	 .loc 1 740 0
 1229 0074 181C     	 mov r0,r3
 1230 0076 BD46     	 mov sp,r7
 1231 0078 06B0     	 add sp,sp,#24
 1232              	 
 1233 007a 80BD     	 pop {r7,pc}
 1234              	.L95:
 1235              	 .align 2
 1236              	.L94:
 1237 007c 00000000 	 .word pxOverflowTimerList
 1238 0080 00000000 	 .word pxCurrentTimerList
 1239              	 .cfi_endproc
 1240              	.LFE57:
 1242              	 .section .text.prvProcessReceivedCommands,"ax",%progbits
 1243              	 .align 2
 1244              	 .code 16
 1245              	 .thumb_func
 1247              	prvProcessReceivedCommands:
 1248              	.LFB58:
 741:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 742:../Dave/Generated/FREERTOS/timers.c **** 
 743:../Dave/Generated/FREERTOS/timers.c ****     static void prvProcessReceivedCommands( void )
 744:../Dave/Generated/FREERTOS/timers.c ****     {
 1249              	 .loc 1 744 0
 1250              	 .cfi_startproc
 1251 0000 80B5     	 push {r7,lr}
 1252              	.LCFI47:
 1253              	 .cfi_def_cfa_offset 8
 1254              	 .cfi_offset 7,-8
 1255              	 .cfi_offset 14,-4
 1256 0002 8CB0     	 sub sp,sp,#48
 1257              	.LCFI48:
 1258              	 .cfi_def_cfa_offset 56
 1259 0004 02AF     	 add r7,sp,#8
 1260              	.LCFI49:
 1261              	 .cfi_def_cfa 7,48
 745:../Dave/Generated/FREERTOS/timers.c ****         DaemonTaskMessage_t xMessage;
 746:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer;
 747:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xTimerListsWereSwitched, xResult;
 748:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xTimeNow;
 749:../Dave/Generated/FREERTOS/timers.c **** 
 750:../Dave/Generated/FREERTOS/timers.c ****         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessa
 1262              	 .loc 1 750 0
 1263 0006 B3E0     	 b .L97
 1264              	.L114:
 751:../Dave/Generated/FREERTOS/timers.c ****         {
 752:../Dave/Generated/FREERTOS/timers.c ****             #if ( INCLUDE_xTimerPendFunctionCall == 1 )
 753:../Dave/Generated/FREERTOS/timers.c ****                 {
 754:../Dave/Generated/FREERTOS/timers.c ****                     /* Negative commands are pended function calls rather than timer
 755:../Dave/Generated/FREERTOS/timers.c ****                      * commands. */
 756:../Dave/Generated/FREERTOS/timers.c ****                     if( xMessage.xMessageID < ( BaseType_t ) 0 )
 1265              	 .loc 1 756 0
 1266 0008 0823     	 mov r3,#8
 1267 000a FB18     	 add r3,r7,r3
 1268 000c 1B68     	 ldr r3,[r3]
 1269 000e 002B     	 cmp r3,#0
 1270 0010 11DA     	 bge .L98
 1271              	.LBB2:
 757:../Dave/Generated/FREERTOS/timers.c ****                     {
 758:../Dave/Generated/FREERTOS/timers.c ****                         const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackPara
 1272              	 .loc 1 758 0
 1273 0012 0823     	 mov r3,#8
 1274 0014 FB18     	 add r3,r7,r3
 1275 0016 0433     	 add r3,r3,#4
 1276 0018 7B62     	 str r3,[r7,#36]
 759:../Dave/Generated/FREERTOS/timers.c **** 
 760:../Dave/Generated/FREERTOS/timers.c ****                         /* The timer uses the xCallbackParameters member to request a
 761:../Dave/Generated/FREERTOS/timers.c ****                          * callback be executed.  Check the callback is not NULL. */
 762:../Dave/Generated/FREERTOS/timers.c ****                         configASSERT( pxCallback );
 1277              	 .loc 1 762 0
 1278 001a 7B6A     	 ldr r3,[r7,#36]
 1279 001c 002B     	 cmp r3,#0
 1280 001e 01D1     	 bne .L99
 1281              	 .loc 1 762 0 is_stmt 0 discriminator 1
 1282              	
 1283 0020 72B6     	 cpsid i
 1284              	
 1285              	 .code 16
 1286              	.L100:
 1287 0022 FEE7     	 b .L100
 1288              	.L99:
 763:../Dave/Generated/FREERTOS/timers.c **** 
 764:../Dave/Generated/FREERTOS/timers.c ****                         /* Call the function. */
 765:../Dave/Generated/FREERTOS/timers.c ****                         pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulPar
 1289              	 .loc 1 765 0 is_stmt 1
 1290 0024 7B6A     	 ldr r3,[r7,#36]
 1291 0026 1A68     	 ldr r2,[r3]
 1292 0028 7B6A     	 ldr r3,[r7,#36]
 1293 002a 5968     	 ldr r1,[r3,#4]
 1294 002c 7B6A     	 ldr r3,[r7,#36]
 1295 002e 9B68     	 ldr r3,[r3,#8]
 1296 0030 081C     	 mov r0,r1
 1297 0032 191C     	 mov r1,r3
 1298 0034 9047     	 blx r2
 1299              	.L98:
 1300              	.LBE2:
 766:../Dave/Generated/FREERTOS/timers.c ****                     }
 767:../Dave/Generated/FREERTOS/timers.c ****                     else
 768:../Dave/Generated/FREERTOS/timers.c ****                     {
 769:../Dave/Generated/FREERTOS/timers.c ****                         mtCOVERAGE_TEST_MARKER();
 770:../Dave/Generated/FREERTOS/timers.c ****                     }
 771:../Dave/Generated/FREERTOS/timers.c ****                 }
 772:../Dave/Generated/FREERTOS/timers.c ****             #endif /* INCLUDE_xTimerPendFunctionCall */
 773:../Dave/Generated/FREERTOS/timers.c **** 
 774:../Dave/Generated/FREERTOS/timers.c ****             /* Commands that are positive are timer commands rather than pended
 775:../Dave/Generated/FREERTOS/timers.c ****              * function calls. */
 776:../Dave/Generated/FREERTOS/timers.c ****             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1301              	 .loc 1 776 0
 1302 0036 0823     	 mov r3,#8
 1303 0038 FB18     	 add r3,r7,r3
 1304 003a 1B68     	 ldr r3,[r3]
 1305 003c 002B     	 cmp r3,#0
 1306 003e 00DA     	 bge .LCB1116
 1307 0040 96E0     	 b .L97
 1308              	.LCB1116:
 777:../Dave/Generated/FREERTOS/timers.c ****             {
 778:../Dave/Generated/FREERTOS/timers.c ****                 /* The messages uses the xTimerParameters member to work on a
 779:../Dave/Generated/FREERTOS/timers.c ****                  * software timer. */
 780:../Dave/Generated/FREERTOS/timers.c ****                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1309              	 .loc 1 780 0
 1310 0042 0823     	 mov r3,#8
 1311 0044 FB18     	 add r3,r7,r3
 1312 0046 9B68     	 ldr r3,[r3,#8]
 1313 0048 3B62     	 str r3,[r7,#32]
 781:../Dave/Generated/FREERTOS/timers.c **** 
 782:../Dave/Generated/FREERTOS/timers.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*li
 1314              	 .loc 1 782 0
 1315 004a 3B6A     	 ldr r3,[r7,#32]
 1316 004c 5B69     	 ldr r3,[r3,#20]
 1317 004e 002B     	 cmp r3,#0
 1318 0050 04D0     	 beq .L101
 783:../Dave/Generated/FREERTOS/timers.c ****                 {
 784:../Dave/Generated/FREERTOS/timers.c ****                     /* The timer is in a list, remove it. */
 785:../Dave/Generated/FREERTOS/timers.c ****                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1319              	 .loc 1 785 0
 1320 0052 3B6A     	 ldr r3,[r7,#32]
 1321 0054 0433     	 add r3,r3,#4
 1322 0056 181C     	 mov r0,r3
 1323 0058 FFF7FEFF 	 bl uxListRemove
 1324              	.L101:
 786:../Dave/Generated/FREERTOS/timers.c ****                 }
 787:../Dave/Generated/FREERTOS/timers.c ****                 else
 788:../Dave/Generated/FREERTOS/timers.c ****                 {
 789:../Dave/Generated/FREERTOS/timers.c ****                     mtCOVERAGE_TEST_MARKER();
 790:../Dave/Generated/FREERTOS/timers.c ****                 }
 791:../Dave/Generated/FREERTOS/timers.c **** 
 792:../Dave/Generated/FREERTOS/timers.c ****                 traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParamet
 793:../Dave/Generated/FREERTOS/timers.c **** 
 794:../Dave/Generated/FREERTOS/timers.c ****                 /* In this case the xTimerListsWereSwitched parameter is not used, but
 795:../Dave/Generated/FREERTOS/timers.c ****                  *  it must be present in the function call.  prvSampleTimeNow() must be
 796:../Dave/Generated/FREERTOS/timers.c ****                  *  called after the message is received from xTimerQueue so there is no
 797:../Dave/Generated/FREERTOS/timers.c ****                  *  possibility of a higher priority task adding a message to the message
 798:../Dave/Generated/FREERTOS/timers.c ****                  *  queue with a time that is ahead of the timer daemon task (because it
 799:../Dave/Generated/FREERTOS/timers.c ****                  *  pre-empted the timer daemon task after the xTimeNow value was set). */
 800:../Dave/Generated/FREERTOS/timers.c ****                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1325              	 .loc 1 800 0
 1326 005c 3B1D     	 add r3,r7,#4
 1327 005e 181C     	 mov r0,r3
 1328 0060 FFF7FEFF 	 bl prvSampleTimeNow
 1329 0064 031C     	 mov r3,r0
 1330 0066 FB61     	 str r3,[r7,#28]
 801:../Dave/Generated/FREERTOS/timers.c **** 
 802:../Dave/Generated/FREERTOS/timers.c ****                 switch( xMessage.xMessageID )
 1331              	 .loc 1 802 0
 1332 0068 0823     	 mov r3,#8
 1333 006a FB18     	 add r3,r7,r3
 1334 006c 1B68     	 ldr r3,[r3]
 1335 006e 092B     	 cmp r3,#9
 1336 0070 00D9     	 bls .LCB1140
 1337 0072 7CE0     	 b .L115
 1338              	.LCB1140:
 1339 0074 9A00     	 lsl r2,r3,#2
 1340 0076 464B     	 ldr r3,.L116
 1341 0078 D318     	 add r3,r2,r3
 1342 007a 1B68     	 ldr r3,[r3]
 1343 007c 9F46     	 mov pc,r3
 1344              	 .section .rodata.prvProcessReceivedCommands,"a",%progbits
 1345              	 .align 2
 1346              	.L104:
 1347 0000 7E000000 	 .word .L103
 1348 0004 7E000000 	 .word .L103
 1349 0008 7E000000 	 .word .L103
 1350 000c F2000000 	 .word .L105
 1351 0010 06010000 	 .word .L106
 1352 0014 42010000 	 .word .L107
 1353 0018 7E000000 	 .word .L103
 1354 001c 7E000000 	 .word .L103
 1355 0020 F2000000 	 .word .L105
 1356 0024 06010000 	 .word .L106
 1357              	 .section .text.prvProcessReceivedCommands
 1358              	.L103:
 803:../Dave/Generated/FREERTOS/timers.c ****                 {
 804:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_START:
 805:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_START_FROM_ISR:
 806:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_RESET:
 807:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_RESET_FROM_ISR:
 808:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_START_DONT_TRACE:
 809:../Dave/Generated/FREERTOS/timers.c ****                         /* Start or restart a timer. */
 810:../Dave/Generated/FREERTOS/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1359              	 .loc 1 810 0
 1360 007e 3B6A     	 ldr r3,[r7,#32]
 1361 0080 2822     	 mov r2,#40
 1362 0082 9B5C     	 ldrb r3,[r3,r2]
 1363 0084 0122     	 mov r2,#1
 1364 0086 1343     	 orr r3,r2
 1365 0088 D9B2     	 uxtb r1,r3
 1366 008a 3B6A     	 ldr r3,[r7,#32]
 1367 008c 2822     	 mov r2,#40
 1368 008e 9954     	 strb r1,[r3,r2]
 811:../Dave/Generated/FREERTOS/timers.c **** 
 812:../Dave/Generated/FREERTOS/timers.c ****                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessa
 1369              	 .loc 1 812 0
 1370 0090 0823     	 mov r3,#8
 1371 0092 FB18     	 add r3,r7,r3
 1372 0094 5A68     	 ldr r2,[r3,#4]
 1373 0096 3B6A     	 ldr r3,[r7,#32]
 1374 0098 9B69     	 ldr r3,[r3,#24]
 1375 009a D118     	 add r1,r2,r3
 1376 009c 0823     	 mov r3,#8
 1377 009e FB18     	 add r3,r7,r3
 1378 00a0 5B68     	 ldr r3,[r3,#4]
 1379 00a2 386A     	 ldr r0,[r7,#32]
 1380 00a4 FA69     	 ldr r2,[r7,#28]
 1381 00a6 FFF7FEFF 	 bl prvInsertTimerInActiveList
 1382 00aa 031E     	 sub r3,r0,#0
 1383 00ac 20D0     	 beq .L108
 813:../Dave/Generated/FREERTOS/timers.c ****                         {
 814:../Dave/Generated/FREERTOS/timers.c ****                             /* The timer expired before it was added to the active
 815:../Dave/Generated/FREERTOS/timers.c ****                              * timer list.  Process it now. */
 816:../Dave/Generated/FREERTOS/timers.c ****                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1384              	 .loc 1 816 0
 1385 00ae 3B6A     	 ldr r3,[r7,#32]
 1386 00b0 1B6A     	 ldr r3,[r3,#32]
 1387 00b2 3A6A     	 ldr r2,[r7,#32]
 1388 00b4 101C     	 mov r0,r2
 1389 00b6 9847     	 blx r3
 817:../Dave/Generated/FREERTOS/timers.c ****                             traceTIMER_EXPIRED( pxTimer );
 818:../Dave/Generated/FREERTOS/timers.c **** 
 819:../Dave/Generated/FREERTOS/timers.c ****                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1390              	 .loc 1 819 0
 1391 00b8 3B6A     	 ldr r3,[r7,#32]
 1392 00ba 2822     	 mov r2,#40
 1393 00bc 9B5C     	 ldrb r3,[r3,r2]
 1394 00be 1A1C     	 mov r2,r3
 1395 00c0 0423     	 mov r3,#4
 1396 00c2 1340     	 and r3,r2
 1397 00c4 14D0     	 beq .L108
 820:../Dave/Generated/FREERTOS/timers.c ****                             {
 821:../Dave/Generated/FREERTOS/timers.c ****                                 xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRAC
 1398              	 .loc 1 821 0
 1399 00c6 0823     	 mov r3,#8
 1400 00c8 FB18     	 add r3,r7,r3
 1401 00ca 5A68     	 ldr r2,[r3,#4]
 1402 00cc 3B6A     	 ldr r3,[r7,#32]
 1403 00ce 9B69     	 ldr r3,[r3,#24]
 1404 00d0 D218     	 add r2,r2,r3
 1405 00d2 396A     	 ldr r1,[r7,#32]
 1406 00d4 0023     	 mov r3,#0
 1407 00d6 0093     	 str r3,[sp]
 1408 00d8 081C     	 mov r0,r1
 1409 00da 0021     	 mov r1,#0
 1410 00dc 0023     	 mov r3,#0
 1411 00de FFF7FEFF 	 bl xTimerGenericCommand
 1412 00e2 031C     	 mov r3,r0
 1413 00e4 BB61     	 str r3,[r7,#24]
 822:../Dave/Generated/FREERTOS/timers.c ****                                 configASSERT( xResult );
 1414              	 .loc 1 822 0
 1415 00e6 BB69     	 ldr r3,[r7,#24]
 1416 00e8 002B     	 cmp r3,#0
 1417 00ea 01D1     	 bne .L108
 1418              	 .loc 1 822 0 is_stmt 0 discriminator 1
 1419              	
 1420 00ec 72B6     	 cpsid i
 1421              	
 1422              	 .code 16
 1423              	.L109:
 1424              	 .loc 1 822 0 discriminator 2
 1425 00ee FEE7     	 b .L109
 1426              	.L108:
 823:../Dave/Generated/FREERTOS/timers.c ****                                 ( void ) xResult;
 824:../Dave/Generated/FREERTOS/timers.c ****                             }
 825:../Dave/Generated/FREERTOS/timers.c ****                             else
 826:../Dave/Generated/FREERTOS/timers.c ****                             {
 827:../Dave/Generated/FREERTOS/timers.c ****                                 mtCOVERAGE_TEST_MARKER();
 828:../Dave/Generated/FREERTOS/timers.c ****                             }
 829:../Dave/Generated/FREERTOS/timers.c ****                         }
 830:../Dave/Generated/FREERTOS/timers.c ****                         else
 831:../Dave/Generated/FREERTOS/timers.c ****                         {
 832:../Dave/Generated/FREERTOS/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 833:../Dave/Generated/FREERTOS/timers.c ****                         }
 834:../Dave/Generated/FREERTOS/timers.c **** 
 835:../Dave/Generated/FREERTOS/timers.c ****                         break;
 1427              	 .loc 1 835 0 is_stmt 1 discriminator 4
 1428 00f0 3EE0     	 b .L97
 1429              	.L105:
 836:../Dave/Generated/FREERTOS/timers.c **** 
 837:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_STOP:
 838:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_STOP_FROM_ISR:
 839:../Dave/Generated/FREERTOS/timers.c ****                         /* The timer has already been removed from the active list. */
 840:../Dave/Generated/FREERTOS/timers.c ****                         pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1430              	 .loc 1 840 0
 1431 00f2 3B6A     	 ldr r3,[r7,#32]
 1432 00f4 2822     	 mov r2,#40
 1433 00f6 9B5C     	 ldrb r3,[r3,r2]
 1434 00f8 0122     	 mov r2,#1
 1435 00fa 9343     	 bic r3,r2
 1436 00fc D9B2     	 uxtb r1,r3
 1437 00fe 3B6A     	 ldr r3,[r7,#32]
 1438 0100 2822     	 mov r2,#40
 1439 0102 9954     	 strb r1,[r3,r2]
 841:../Dave/Generated/FREERTOS/timers.c ****                         break;
 1440              	 .loc 1 841 0
 1441 0104 34E0     	 b .L97
 1442              	.L106:
 842:../Dave/Generated/FREERTOS/timers.c **** 
 843:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD:
 844:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
 845:../Dave/Generated/FREERTOS/timers.c ****                         pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1443              	 .loc 1 845 0
 1444 0106 3B6A     	 ldr r3,[r7,#32]
 1445 0108 2822     	 mov r2,#40
 1446 010a 9B5C     	 ldrb r3,[r3,r2]
 1447 010c 0122     	 mov r2,#1
 1448 010e 1343     	 orr r3,r2
 1449 0110 D9B2     	 uxtb r1,r3
 1450 0112 3B6A     	 ldr r3,[r7,#32]
 1451 0114 2822     	 mov r2,#40
 1452 0116 9954     	 strb r1,[r3,r2]
 846:../Dave/Generated/FREERTOS/timers.c ****                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1453              	 .loc 1 846 0
 1454 0118 0823     	 mov r3,#8
 1455 011a FB18     	 add r3,r7,r3
 1456 011c 5A68     	 ldr r2,[r3,#4]
 1457 011e 3B6A     	 ldr r3,[r7,#32]
 1458 0120 9A61     	 str r2,[r3,#24]
 847:../Dave/Generated/FREERTOS/timers.c ****                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1459              	 .loc 1 847 0
 1460 0122 3B6A     	 ldr r3,[r7,#32]
 1461 0124 9B69     	 ldr r3,[r3,#24]
 1462 0126 002B     	 cmp r3,#0
 1463 0128 01D1     	 bne .L110
 1464              	 .loc 1 847 0 is_stmt 0 discriminator 1
 1465              	
 1466 012a 72B6     	 cpsid i
 1467              	
 1468              	 .code 16
 1469              	.L111:
 1470              	 .loc 1 847 0 discriminator 5
 1471 012c FEE7     	 b .L111
 1472              	.L110:
 848:../Dave/Generated/FREERTOS/timers.c **** 
 849:../Dave/Generated/FREERTOS/timers.c ****                         /* The new period does not really have a reference, and can
 850:../Dave/Generated/FREERTOS/timers.c ****                          * be longer or shorter than the old one.  The command time is
 851:../Dave/Generated/FREERTOS/timers.c ****                          * therefore set to the current time, and as the period cannot
 852:../Dave/Generated/FREERTOS/timers.c ****                          * be zero the next expiry time can only be in the future,
 853:../Dave/Generated/FREERTOS/timers.c ****                          * meaning (unlike for the xTimerStart() case above) there is
 854:../Dave/Generated/FREERTOS/timers.c ****                          * no fail case that needs to be handled here. */
 855:../Dave/Generated/FREERTOS/timers.c ****                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerP
 1473              	 .loc 1 855 0 is_stmt 1
 1474 012e 3B6A     	 ldr r3,[r7,#32]
 1475 0130 9A69     	 ldr r2,[r3,#24]
 1476 0132 FB69     	 ldr r3,[r7,#28]
 1477 0134 D118     	 add r1,r2,r3
 1478 0136 386A     	 ldr r0,[r7,#32]
 1479 0138 FA69     	 ldr r2,[r7,#28]
 1480 013a FB69     	 ldr r3,[r7,#28]
 1481 013c FFF7FEFF 	 bl prvInsertTimerInActiveList
 856:../Dave/Generated/FREERTOS/timers.c ****                         break;
 1482              	 .loc 1 856 0
 1483 0140 16E0     	 b .L97
 1484              	.L107:
 857:../Dave/Generated/FREERTOS/timers.c **** 
 858:../Dave/Generated/FREERTOS/timers.c ****                     case tmrCOMMAND_DELETE:
 859:../Dave/Generated/FREERTOS/timers.c ****                         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 860:../Dave/Generated/FREERTOS/timers.c ****                             {
 861:../Dave/Generated/FREERTOS/timers.c ****                                 /* The timer has already been removed from the active list,
 862:../Dave/Generated/FREERTOS/timers.c ****                                  * just free up the memory if the memory was dynamically
 863:../Dave/Generated/FREERTOS/timers.c ****                                  * allocated. */
 864:../Dave/Generated/FREERTOS/timers.c ****                                 if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( 
 1485              	 .loc 1 864 0
 1486 0142 3B6A     	 ldr r3,[r7,#32]
 1487 0144 2822     	 mov r2,#40
 1488 0146 9B5C     	 ldrb r3,[r3,r2]
 1489 0148 1A1C     	 mov r2,r3
 1490 014a 0223     	 mov r3,#2
 1491 014c 1340     	 and r3,r2
 1492 014e 04D1     	 bne .L112
 865:../Dave/Generated/FREERTOS/timers.c ****                                 {
 866:../Dave/Generated/FREERTOS/timers.c ****                                     vPortFree( pxTimer );
 1493              	 .loc 1 866 0
 1494 0150 3B6A     	 ldr r3,[r7,#32]
 1495 0152 181C     	 mov r0,r3
 1496 0154 FFF7FEFF 	 bl vPortFree
 1497 0158 08E0     	 b .L113
 1498              	.L112:
 867:../Dave/Generated/FREERTOS/timers.c ****                                 }
 868:../Dave/Generated/FREERTOS/timers.c ****                                 else
 869:../Dave/Generated/FREERTOS/timers.c ****                                 {
 870:../Dave/Generated/FREERTOS/timers.c ****                                     pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1499              	 .loc 1 870 0
 1500 015a 3B6A     	 ldr r3,[r7,#32]
 1501 015c 2822     	 mov r2,#40
 1502 015e 9B5C     	 ldrb r3,[r3,r2]
 1503 0160 0122     	 mov r2,#1
 1504 0162 9343     	 bic r3,r2
 1505 0164 D9B2     	 uxtb r1,r3
 1506 0166 3B6A     	 ldr r3,[r7,#32]
 1507 0168 2822     	 mov r2,#40
 1508 016a 9954     	 strb r1,[r3,r2]
 1509              	.L113:
 871:../Dave/Generated/FREERTOS/timers.c ****                                 }
 872:../Dave/Generated/FREERTOS/timers.c ****                             }
 873:../Dave/Generated/FREERTOS/timers.c ****                         #else /* if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) */
 874:../Dave/Generated/FREERTOS/timers.c ****                             {
 875:../Dave/Generated/FREERTOS/timers.c ****                                 /* If dynamic allocation is not enabled, the memory
 876:../Dave/Generated/FREERTOS/timers.c ****                                  * could not have been dynamically allocated. So there is
 877:../Dave/Generated/FREERTOS/timers.c ****                                  * no need to free the memory - just mark the timer as
 878:../Dave/Generated/FREERTOS/timers.c ****                                  * "not active". */
 879:../Dave/Generated/FREERTOS/timers.c ****                                 pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 880:../Dave/Generated/FREERTOS/timers.c ****                             }
 881:../Dave/Generated/FREERTOS/timers.c ****                         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 882:../Dave/Generated/FREERTOS/timers.c ****                         break;
 1510              	 .loc 1 882 0
 1511 016c 00E0     	 b .L97
 1512              	.L115:
 883:../Dave/Generated/FREERTOS/timers.c **** 
 884:../Dave/Generated/FREERTOS/timers.c ****                     default:
 885:../Dave/Generated/FREERTOS/timers.c ****                         /* Don't expect to get here. */
 886:../Dave/Generated/FREERTOS/timers.c ****                         break;
 1513              	 .loc 1 886 0
 1514 016e C046     	 mov r8,r8
 1515              	.L97:
 750:../Dave/Generated/FREERTOS/timers.c ****         {
 1516              	 .loc 1 750 0
 1517 0170 084B     	 ldr r3,.L116+4
 1518 0172 1A68     	 ldr r2,[r3]
 1519 0174 0823     	 mov r3,#8
 1520 0176 FB18     	 add r3,r7,r3
 1521 0178 101C     	 mov r0,r2
 1522 017a 191C     	 mov r1,r3
 1523 017c 0022     	 mov r2,#0
 1524 017e FFF7FEFF 	 bl xQueueReceive
 1525 0182 031E     	 sub r3,r0,#0
 1526 0184 00D0     	 beq .LCB1311
 1527 0186 3FE7     	 b .L114
 1528              	.LCB1311:
 887:../Dave/Generated/FREERTOS/timers.c ****                 }
 888:../Dave/Generated/FREERTOS/timers.c ****             }
 889:../Dave/Generated/FREERTOS/timers.c ****         }
 890:../Dave/Generated/FREERTOS/timers.c ****     }
 1529              	 .loc 1 890 0
 1530 0188 BD46     	 mov sp,r7
 1531 018a 0AB0     	 add sp,sp,#40
 1532              	 
 1533 018c 80BD     	 pop {r7,pc}
 1534              	.L117:
 1535 018e C046     	 .align 2
 1536              	.L116:
 1537 0190 00000000 	 .word .L104
 1538 0194 00000000 	 .word xTimerQueue
 1539              	 .cfi_endproc
 1540              	.LFE58:
 1542              	 .section .text.prvSwitchTimerLists,"ax",%progbits
 1543              	 .align 2
 1544              	 .code 16
 1545              	 .thumb_func
 1547              	prvSwitchTimerLists:
 1548              	.LFB59:
 891:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 892:../Dave/Generated/FREERTOS/timers.c **** 
 893:../Dave/Generated/FREERTOS/timers.c ****     static void prvSwitchTimerLists( void )
 894:../Dave/Generated/FREERTOS/timers.c ****     {
 1549              	 .loc 1 894 0
 1550              	 .cfi_startproc
 1551 0000 80B5     	 push {r7,lr}
 1552              	.LCFI50:
 1553              	 .cfi_def_cfa_offset 8
 1554              	 .cfi_offset 7,-8
 1555              	 .cfi_offset 14,-4
 1556 0002 88B0     	 sub sp,sp,#32
 1557              	.LCFI51:
 1558              	 .cfi_def_cfa_offset 40
 1559 0004 02AF     	 add r7,sp,#8
 1560              	.LCFI52:
 1561              	 .cfi_def_cfa 7,32
 895:../Dave/Generated/FREERTOS/timers.c ****         TickType_t xNextExpireTime, xReloadTime;
 896:../Dave/Generated/FREERTOS/timers.c ****         List_t * pxTemp;
 897:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer;
 898:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xResult;
 899:../Dave/Generated/FREERTOS/timers.c **** 
 900:../Dave/Generated/FREERTOS/timers.c ****         /* The tick count has overflowed.  The timer lists must be switched.
 901:../Dave/Generated/FREERTOS/timers.c ****          * If there are any timers still referenced from the current timer list
 902:../Dave/Generated/FREERTOS/timers.c ****          * then they must have expired and should be processed before the lists
 903:../Dave/Generated/FREERTOS/timers.c ****          * are switched. */
 904:../Dave/Generated/FREERTOS/timers.c ****         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1562              	 .loc 1 904 0
 1563 0006 42E0     	 b .L119
 1564              	.L122:
 905:../Dave/Generated/FREERTOS/timers.c ****         {
 906:../Dave/Generated/FREERTOS/timers.c ****             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1565              	 .loc 1 906 0
 1566 0008 2A4B     	 ldr r3,.L123
 1567 000a 1B68     	 ldr r3,[r3]
 1568 000c DB68     	 ldr r3,[r3,#12]
 1569 000e 1B68     	 ldr r3,[r3]
 1570 0010 7B61     	 str r3,[r7,#20]
 907:../Dave/Generated/FREERTOS/timers.c **** 
 908:../Dave/Generated/FREERTOS/timers.c ****             /* Remove the timer from the list. */
 909:../Dave/Generated/FREERTOS/timers.c ****             pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e908
 1571              	 .loc 1 909 0
 1572 0012 284B     	 ldr r3,.L123
 1573 0014 1B68     	 ldr r3,[r3]
 1574 0016 DB68     	 ldr r3,[r3,#12]
 1575 0018 DB68     	 ldr r3,[r3,#12]
 1576 001a 3B61     	 str r3,[r7,#16]
 910:../Dave/Generated/FREERTOS/timers.c ****             ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1577              	 .loc 1 910 0
 1578 001c 3B69     	 ldr r3,[r7,#16]
 1579 001e 0433     	 add r3,r3,#4
 1580 0020 181C     	 mov r0,r3
 1581 0022 FFF7FEFF 	 bl uxListRemove
 911:../Dave/Generated/FREERTOS/timers.c ****             traceTIMER_EXPIRED( pxTimer );
 912:../Dave/Generated/FREERTOS/timers.c **** 
 913:../Dave/Generated/FREERTOS/timers.c ****             /* Execute its callback, then send a command to restart the timer if
 914:../Dave/Generated/FREERTOS/timers.c ****              * it is an auto-reload timer.  It cannot be restarted here as the lists
 915:../Dave/Generated/FREERTOS/timers.c ****              * have not yet been switched. */
 916:../Dave/Generated/FREERTOS/timers.c ****             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1582              	 .loc 1 916 0
 1583 0026 3B69     	 ldr r3,[r7,#16]
 1584 0028 1B6A     	 ldr r3,[r3,#32]
 1585 002a 3A69     	 ldr r2,[r7,#16]
 1586 002c 101C     	 mov r0,r2
 1587 002e 9847     	 blx r3
 917:../Dave/Generated/FREERTOS/timers.c **** 
 918:../Dave/Generated/FREERTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1588              	 .loc 1 918 0
 1589 0030 3B69     	 ldr r3,[r7,#16]
 1590 0032 2822     	 mov r2,#40
 1591 0034 9B5C     	 ldrb r3,[r3,r2]
 1592 0036 1A1C     	 mov r2,r3
 1593 0038 0423     	 mov r3,#4
 1594 003a 1340     	 and r3,r2
 1595 003c 27D0     	 beq .L119
 919:../Dave/Generated/FREERTOS/timers.c ****             {
 920:../Dave/Generated/FREERTOS/timers.c ****                 /* Calculate the reload value, and if the reload value results in
 921:../Dave/Generated/FREERTOS/timers.c ****                  * the timer going into the same timer list then it has already expired
 922:../Dave/Generated/FREERTOS/timers.c ****                  * and the timer should be re-inserted into the current list so it is
 923:../Dave/Generated/FREERTOS/timers.c ****                  * processed again within this loop.  Otherwise a command should be sent
 924:../Dave/Generated/FREERTOS/timers.c ****                  * to restart the timer to ensure it is only inserted into a list after
 925:../Dave/Generated/FREERTOS/timers.c ****                  * the lists have been swapped. */
 926:../Dave/Generated/FREERTOS/timers.c ****                 xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 1596              	 .loc 1 926 0
 1597 003e 3B69     	 ldr r3,[r7,#16]
 1598 0040 9A69     	 ldr r2,[r3,#24]
 1599 0042 7B69     	 ldr r3,[r7,#20]
 1600 0044 D318     	 add r3,r2,r3
 1601 0046 FB60     	 str r3,[r7,#12]
 927:../Dave/Generated/FREERTOS/timers.c **** 
 928:../Dave/Generated/FREERTOS/timers.c ****                 if( xReloadTime > xNextExpireTime )
 1602              	 .loc 1 928 0
 1603 0048 FA68     	 ldr r2,[r7,#12]
 1604 004a 7B69     	 ldr r3,[r7,#20]
 1605 004c 9A42     	 cmp r2,r3
 1606 004e 0ED9     	 bls .L120
 929:../Dave/Generated/FREERTOS/timers.c ****                 {
 930:../Dave/Generated/FREERTOS/timers.c ****                     listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 1607              	 .loc 1 930 0
 1608 0050 3B69     	 ldr r3,[r7,#16]
 1609 0052 FA68     	 ldr r2,[r7,#12]
 1610 0054 5A60     	 str r2,[r3,#4]
 931:../Dave/Generated/FREERTOS/timers.c ****                     listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1611              	 .loc 1 931 0
 1612 0056 3B69     	 ldr r3,[r7,#16]
 1613 0058 3A69     	 ldr r2,[r7,#16]
 1614 005a 1A61     	 str r2,[r3,#16]
 932:../Dave/Generated/FREERTOS/timers.c ****                     vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1615              	 .loc 1 932 0
 1616 005c 154B     	 ldr r3,.L123
 1617 005e 1A68     	 ldr r2,[r3]
 1618 0060 3B69     	 ldr r3,[r7,#16]
 1619 0062 0433     	 add r3,r3,#4
 1620 0064 101C     	 mov r0,r2
 1621 0066 191C     	 mov r1,r3
 1622 0068 FFF7FEFF 	 bl vListInsert
 1623 006c 0FE0     	 b .L119
 1624              	.L120:
 933:../Dave/Generated/FREERTOS/timers.c ****                 }
 934:../Dave/Generated/FREERTOS/timers.c ****                 else
 935:../Dave/Generated/FREERTOS/timers.c ****                 {
 936:../Dave/Generated/FREERTOS/timers.c ****                     xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpi
 1625              	 .loc 1 936 0
 1626 006e 3969     	 ldr r1,[r7,#16]
 1627 0070 7A69     	 ldr r2,[r7,#20]
 1628 0072 0023     	 mov r3,#0
 1629 0074 0093     	 str r3,[sp]
 1630 0076 081C     	 mov r0,r1
 1631 0078 0021     	 mov r1,#0
 1632 007a 0023     	 mov r3,#0
 1633 007c FFF7FEFF 	 bl xTimerGenericCommand
 1634 0080 031C     	 mov r3,r0
 1635 0082 BB60     	 str r3,[r7,#8]
 937:../Dave/Generated/FREERTOS/timers.c ****                     configASSERT( xResult );
 1636              	 .loc 1 937 0
 1637 0084 BB68     	 ldr r3,[r7,#8]
 1638 0086 002B     	 cmp r3,#0
 1639 0088 01D1     	 bne .L119
 1640              	 .loc 1 937 0 is_stmt 0 discriminator 1
 1641              	
 1642 008a 72B6     	 cpsid i
 1643              	
 1644              	 .code 16
 1645              	.L121:
 1646 008c FEE7     	 b .L121
 1647              	.L119:
 904:../Dave/Generated/FREERTOS/timers.c ****         {
 1648              	 .loc 1 904 0 is_stmt 1
 1649 008e 094B     	 ldr r3,.L123
 1650 0090 1B68     	 ldr r3,[r3]
 1651 0092 1B68     	 ldr r3,[r3]
 1652 0094 002B     	 cmp r3,#0
 1653 0096 B7D1     	 bne .L122
 938:../Dave/Generated/FREERTOS/timers.c ****                     ( void ) xResult;
 939:../Dave/Generated/FREERTOS/timers.c ****                 }
 940:../Dave/Generated/FREERTOS/timers.c ****             }
 941:../Dave/Generated/FREERTOS/timers.c ****             else
 942:../Dave/Generated/FREERTOS/timers.c ****             {
 943:../Dave/Generated/FREERTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 944:../Dave/Generated/FREERTOS/timers.c ****             }
 945:../Dave/Generated/FREERTOS/timers.c ****         }
 946:../Dave/Generated/FREERTOS/timers.c **** 
 947:../Dave/Generated/FREERTOS/timers.c ****         pxTemp = pxCurrentTimerList;
 1654              	 .loc 1 947 0
 1655 0098 064B     	 ldr r3,.L123
 1656 009a 1B68     	 ldr r3,[r3]
 1657 009c 7B60     	 str r3,[r7,#4]
 948:../Dave/Generated/FREERTOS/timers.c ****         pxCurrentTimerList = pxOverflowTimerList;
 1658              	 .loc 1 948 0
 1659 009e 064B     	 ldr r3,.L123+4
 1660 00a0 1A68     	 ldr r2,[r3]
 1661 00a2 044B     	 ldr r3,.L123
 1662 00a4 1A60     	 str r2,[r3]
 949:../Dave/Generated/FREERTOS/timers.c ****         pxOverflowTimerList = pxTemp;
 1663              	 .loc 1 949 0
 1664 00a6 044B     	 ldr r3,.L123+4
 1665 00a8 7A68     	 ldr r2,[r7,#4]
 1666 00aa 1A60     	 str r2,[r3]
 950:../Dave/Generated/FREERTOS/timers.c ****     }
 1667              	 .loc 1 950 0
 1668 00ac BD46     	 mov sp,r7
 1669 00ae 06B0     	 add sp,sp,#24
 1670              	 
 1671 00b0 80BD     	 pop {r7,pc}
 1672              	.L124:
 1673 00b2 C046     	 .align 2
 1674              	.L123:
 1675 00b4 00000000 	 .word pxCurrentTimerList
 1676 00b8 00000000 	 .word pxOverflowTimerList
 1677              	 .cfi_endproc
 1678              	.LFE59:
 1680              	 .section .rodata
 1681              	 .align 2
 1682              	.LC23:
 1683 0008 546D7251 	 .ascii "TmrQ\000"
 1683      00
 1684 000d 000000   	 .section .text.prvCheckForValidListAndQueue,"ax",%progbits
 1685              	 .align 2
 1686              	 .code 16
 1687              	 .thumb_func
 1689              	prvCheckForValidListAndQueue:
 1690              	.LFB60:
 951:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 952:../Dave/Generated/FREERTOS/timers.c **** 
 953:../Dave/Generated/FREERTOS/timers.c ****     static void prvCheckForValidListAndQueue( void )
 954:../Dave/Generated/FREERTOS/timers.c ****     {
 1691              	 .loc 1 954 0
 1692              	 .cfi_startproc
 1693 0000 80B5     	 push {r7,lr}
 1694              	.LCFI53:
 1695              	 .cfi_def_cfa_offset 8
 1696              	 .cfi_offset 7,-8
 1697              	 .cfi_offset 14,-4
 1698 0002 00AF     	 add r7,sp,#0
 1699              	.LCFI54:
 1700              	 .cfi_def_cfa_register 7
 955:../Dave/Generated/FREERTOS/timers.c ****         /* Check that the list from which active timers are referenced, and the
 956:../Dave/Generated/FREERTOS/timers.c ****          * queue used to communicate with the timer service, have been
 957:../Dave/Generated/FREERTOS/timers.c ****          * initialised. */
 958:../Dave/Generated/FREERTOS/timers.c ****         taskENTER_CRITICAL();
 1701              	 .loc 1 958 0
 1702 0004 FFF7FEFF 	 bl vPortEnterCritical
 959:../Dave/Generated/FREERTOS/timers.c ****         {
 960:../Dave/Generated/FREERTOS/timers.c ****             if( xTimerQueue == NULL )
 1703              	 .loc 1 960 0
 1704 0008 144B     	 ldr r3,.L127
 1705 000a 1B68     	 ldr r3,[r3]
 1706 000c 002B     	 cmp r3,#0
 1707 000e 20D1     	 bne .L126
 961:../Dave/Generated/FREERTOS/timers.c ****             {
 962:../Dave/Generated/FREERTOS/timers.c ****                 vListInitialise( &xActiveTimerList1 );
 1708              	 .loc 1 962 0
 1709 0010 134B     	 ldr r3,.L127+4
 1710 0012 181C     	 mov r0,r3
 1711 0014 FFF7FEFF 	 bl vListInitialise
 963:../Dave/Generated/FREERTOS/timers.c ****                 vListInitialise( &xActiveTimerList2 );
 1712              	 .loc 1 963 0
 1713 0018 124B     	 ldr r3,.L127+8
 1714 001a 181C     	 mov r0,r3
 1715 001c FFF7FEFF 	 bl vListInitialise
 964:../Dave/Generated/FREERTOS/timers.c ****                 pxCurrentTimerList = &xActiveTimerList1;
 1716              	 .loc 1 964 0
 1717 0020 114B     	 ldr r3,.L127+12
 1718 0022 0F4A     	 ldr r2,.L127+4
 1719 0024 1A60     	 str r2,[r3]
 965:../Dave/Generated/FREERTOS/timers.c ****                 pxOverflowTimerList = &xActiveTimerList2;
 1720              	 .loc 1 965 0
 1721 0026 114B     	 ldr r3,.L127+16
 1722 0028 0E4A     	 ldr r2,.L127+8
 1723 002a 1A60     	 str r2,[r3]
 966:../Dave/Generated/FREERTOS/timers.c **** 
 967:../Dave/Generated/FREERTOS/timers.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 968:../Dave/Generated/FREERTOS/timers.c ****                     {
 969:../Dave/Generated/FREERTOS/timers.c ****                         /* The timer queue is allocated statically in case
 970:../Dave/Generated/FREERTOS/timers.c ****                          * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 971:../Dave/Generated/FREERTOS/timers.c ****                         PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                    
 972:../Dave/Generated/FREERTOS/timers.c ****                         PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) config
 973:../Dave/Generated/FREERTOS/timers.c **** 
 974:../Dave/Generated/FREERTOS/timers.c ****                         xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH,
 975:../Dave/Generated/FREERTOS/timers.c ****                     }
 976:../Dave/Generated/FREERTOS/timers.c ****                 #else
 977:../Dave/Generated/FREERTOS/timers.c ****                     {
 978:../Dave/Generated/FREERTOS/timers.c ****                         xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeo
 1724              	 .loc 1 978 0
 1725 002c 0520     	 mov r0,#5
 1726 002e 1021     	 mov r1,#16
 1727 0030 0022     	 mov r2,#0
 1728 0032 FFF7FEFF 	 bl xQueueGenericCreate
 1729 0036 021C     	 mov r2,r0
 1730 0038 084B     	 ldr r3,.L127
 1731 003a 1A60     	 str r2,[r3]
 979:../Dave/Generated/FREERTOS/timers.c ****                     }
 980:../Dave/Generated/FREERTOS/timers.c ****                 #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 981:../Dave/Generated/FREERTOS/timers.c **** 
 982:../Dave/Generated/FREERTOS/timers.c ****                 #if ( configQUEUE_REGISTRY_SIZE > 0 )
 983:../Dave/Generated/FREERTOS/timers.c ****                     {
 984:../Dave/Generated/FREERTOS/timers.c ****                         if( xTimerQueue != NULL )
 1732              	 .loc 1 984 0
 1733 003c 074B     	 ldr r3,.L127
 1734 003e 1B68     	 ldr r3,[r3]
 1735 0040 002B     	 cmp r3,#0
 1736 0042 06D0     	 beq .L126
 985:../Dave/Generated/FREERTOS/timers.c ****                         {
 986:../Dave/Generated/FREERTOS/timers.c ****                             vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 1737              	 .loc 1 986 0
 1738 0044 054B     	 ldr r3,.L127
 1739 0046 1A68     	 ldr r2,[r3]
 1740 0048 094B     	 ldr r3,.L127+20
 1741 004a 101C     	 mov r0,r2
 1742 004c 191C     	 mov r1,r3
 1743 004e FFF7FEFF 	 bl vQueueAddToRegistry
 1744              	.L126:
 987:../Dave/Generated/FREERTOS/timers.c ****                         }
 988:../Dave/Generated/FREERTOS/timers.c ****                         else
 989:../Dave/Generated/FREERTOS/timers.c ****                         {
 990:../Dave/Generated/FREERTOS/timers.c ****                             mtCOVERAGE_TEST_MARKER();
 991:../Dave/Generated/FREERTOS/timers.c ****                         }
 992:../Dave/Generated/FREERTOS/timers.c ****                     }
 993:../Dave/Generated/FREERTOS/timers.c ****                 #endif /* configQUEUE_REGISTRY_SIZE */
 994:../Dave/Generated/FREERTOS/timers.c ****             }
 995:../Dave/Generated/FREERTOS/timers.c ****             else
 996:../Dave/Generated/FREERTOS/timers.c ****             {
 997:../Dave/Generated/FREERTOS/timers.c ****                 mtCOVERAGE_TEST_MARKER();
 998:../Dave/Generated/FREERTOS/timers.c ****             }
 999:../Dave/Generated/FREERTOS/timers.c ****         }
1000:../Dave/Generated/FREERTOS/timers.c ****         taskEXIT_CRITICAL();
 1745              	 .loc 1 1000 0
 1746 0052 FFF7FEFF 	 bl vPortExitCritical
1001:../Dave/Generated/FREERTOS/timers.c ****     }
 1747              	 .loc 1 1001 0
 1748 0056 BD46     	 mov sp,r7
 1749              	 
 1750 0058 80BD     	 pop {r7,pc}
 1751              	.L128:
 1752 005a C046     	 .align 2
 1753              	.L127:
 1754 005c 00000000 	 .word xTimerQueue
 1755 0060 00000000 	 .word xActiveTimerList1
 1756 0064 00000000 	 .word xActiveTimerList2
 1757 0068 00000000 	 .word pxCurrentTimerList
 1758 006c 00000000 	 .word pxOverflowTimerList
 1759 0070 08000000 	 .word .LC23
 1760              	 .cfi_endproc
 1761              	.LFE60:
 1763              	 .section .text.xTimerIsTimerActive,"ax",%progbits
 1764              	 .align 2
 1765              	 .global xTimerIsTimerActive
 1766              	 .code 16
 1767              	 .thumb_func
 1769              	xTimerIsTimerActive:
 1770              	.LFB61:
1002:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1003:../Dave/Generated/FREERTOS/timers.c **** 
1004:../Dave/Generated/FREERTOS/timers.c ****     BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
1005:../Dave/Generated/FREERTOS/timers.c ****     {
 1771              	 .loc 1 1005 0
 1772              	 .cfi_startproc
 1773 0000 80B5     	 push {r7,lr}
 1774              	.LCFI55:
 1775              	 .cfi_def_cfa_offset 8
 1776              	 .cfi_offset 7,-8
 1777              	 .cfi_offset 14,-4
 1778 0002 84B0     	 sub sp,sp,#16
 1779              	.LCFI56:
 1780              	 .cfi_def_cfa_offset 24
 1781 0004 00AF     	 add r7,sp,#0
 1782              	.LCFI57:
 1783              	 .cfi_def_cfa_register 7
 1784 0006 7860     	 str r0,[r7,#4]
1006:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xReturn;
1007:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * pxTimer = xTimer;
 1785              	 .loc 1 1007 0
 1786 0008 7B68     	 ldr r3,[r7,#4]
 1787 000a BB60     	 str r3,[r7,#8]
1008:../Dave/Generated/FREERTOS/timers.c **** 
1009:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 1788              	 .loc 1 1009 0
 1789 000c 7B68     	 ldr r3,[r7,#4]
 1790 000e 002B     	 cmp r3,#0
 1791 0010 01D1     	 bne .L130
 1792              	 .loc 1 1009 0 is_stmt 0 discriminator 1
 1793              	
 1794 0012 72B6     	 cpsid i
 1795              	
 1796              	 .code 16
 1797              	.L131:
 1798 0014 FEE7     	 b .L131
 1799              	.L130:
1010:../Dave/Generated/FREERTOS/timers.c **** 
1011:../Dave/Generated/FREERTOS/timers.c ****         /* Is the timer in the list of active timers? */
1012:../Dave/Generated/FREERTOS/timers.c ****         taskENTER_CRITICAL();
 1800              	 .loc 1 1012 0 is_stmt 1
 1801 0016 FFF7FEFF 	 bl vPortEnterCritical
1013:../Dave/Generated/FREERTOS/timers.c ****         {
1014:../Dave/Generated/FREERTOS/timers.c ****             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1802              	 .loc 1 1014 0
 1803 001a BB68     	 ldr r3,[r7,#8]
 1804 001c 2822     	 mov r2,#40
 1805 001e 9B5C     	 ldrb r3,[r3,r2]
 1806 0020 1A1C     	 mov r2,r3
 1807 0022 0123     	 mov r3,#1
 1808 0024 1340     	 and r3,r2
 1809 0026 02D1     	 bne .L132
1015:../Dave/Generated/FREERTOS/timers.c ****             {
1016:../Dave/Generated/FREERTOS/timers.c ****                 xReturn = pdFALSE;
 1810              	 .loc 1 1016 0
 1811 0028 0023     	 mov r3,#0
 1812 002a FB60     	 str r3,[r7,#12]
 1813 002c 01E0     	 b .L133
 1814              	.L132:
1017:../Dave/Generated/FREERTOS/timers.c ****             }
1018:../Dave/Generated/FREERTOS/timers.c ****             else
1019:../Dave/Generated/FREERTOS/timers.c ****             {
1020:../Dave/Generated/FREERTOS/timers.c ****                 xReturn = pdTRUE;
 1815              	 .loc 1 1020 0
 1816 002e 0123     	 mov r3,#1
 1817 0030 FB60     	 str r3,[r7,#12]
 1818              	.L133:
1021:../Dave/Generated/FREERTOS/timers.c ****             }
1022:../Dave/Generated/FREERTOS/timers.c ****         }
1023:../Dave/Generated/FREERTOS/timers.c ****         taskEXIT_CRITICAL();
 1819              	 .loc 1 1023 0
 1820 0032 FFF7FEFF 	 bl vPortExitCritical
1024:../Dave/Generated/FREERTOS/timers.c **** 
1025:../Dave/Generated/FREERTOS/timers.c ****         return xReturn;
 1821              	 .loc 1 1025 0
 1822 0036 FB68     	 ldr r3,[r7,#12]
1026:../Dave/Generated/FREERTOS/timers.c ****     } /*lint !e818 Can't be pointer to const due to the typedef. */
 1823              	 .loc 1 1026 0
 1824 0038 181C     	 mov r0,r3
 1825 003a BD46     	 mov sp,r7
 1826 003c 04B0     	 add sp,sp,#16
 1827              	 
 1828 003e 80BD     	 pop {r7,pc}
 1829              	 .cfi_endproc
 1830              	.LFE61:
 1832              	 .section .text.pvTimerGetTimerID,"ax",%progbits
 1833              	 .align 2
 1834              	 .global pvTimerGetTimerID
 1835              	 .code 16
 1836              	 .thumb_func
 1838              	pvTimerGetTimerID:
 1839              	.LFB62:
1027:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1028:../Dave/Generated/FREERTOS/timers.c **** 
1029:../Dave/Generated/FREERTOS/timers.c ****     void * pvTimerGetTimerID( const TimerHandle_t xTimer )
1030:../Dave/Generated/FREERTOS/timers.c ****     {
 1840              	 .loc 1 1030 0
 1841              	 .cfi_startproc
 1842 0000 80B5     	 push {r7,lr}
 1843              	.LCFI58:
 1844              	 .cfi_def_cfa_offset 8
 1845              	 .cfi_offset 7,-8
 1846              	 .cfi_offset 14,-4
 1847 0002 84B0     	 sub sp,sp,#16
 1848              	.LCFI59:
 1849              	 .cfi_def_cfa_offset 24
 1850 0004 00AF     	 add r7,sp,#0
 1851              	.LCFI60:
 1852              	 .cfi_def_cfa_register 7
 1853 0006 7860     	 str r0,[r7,#4]
1031:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * const pxTimer = xTimer;
 1854              	 .loc 1 1031 0
 1855 0008 7B68     	 ldr r3,[r7,#4]
 1856 000a FB60     	 str r3,[r7,#12]
1032:../Dave/Generated/FREERTOS/timers.c ****         void * pvReturn;
1033:../Dave/Generated/FREERTOS/timers.c **** 
1034:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 1857              	 .loc 1 1034 0
 1858 000c 7B68     	 ldr r3,[r7,#4]
 1859 000e 002B     	 cmp r3,#0
 1860 0010 01D1     	 bne .L136
 1861              	 .loc 1 1034 0 is_stmt 0 discriminator 1
 1862              	
 1863 0012 72B6     	 cpsid i
 1864              	
 1865              	 .code 16
 1866              	.L137:
 1867 0014 FEE7     	 b .L137
 1868              	.L136:
1035:../Dave/Generated/FREERTOS/timers.c **** 
1036:../Dave/Generated/FREERTOS/timers.c ****         taskENTER_CRITICAL();
 1869              	 .loc 1 1036 0 is_stmt 1
 1870 0016 FFF7FEFF 	 bl vPortEnterCritical
1037:../Dave/Generated/FREERTOS/timers.c ****         {
1038:../Dave/Generated/FREERTOS/timers.c ****             pvReturn = pxTimer->pvTimerID;
 1871              	 .loc 1 1038 0
 1872 001a FB68     	 ldr r3,[r7,#12]
 1873 001c DB69     	 ldr r3,[r3,#28]
 1874 001e BB60     	 str r3,[r7,#8]
1039:../Dave/Generated/FREERTOS/timers.c ****         }
1040:../Dave/Generated/FREERTOS/timers.c ****         taskEXIT_CRITICAL();
 1875              	 .loc 1 1040 0
 1876 0020 FFF7FEFF 	 bl vPortExitCritical
1041:../Dave/Generated/FREERTOS/timers.c **** 
1042:../Dave/Generated/FREERTOS/timers.c ****         return pvReturn;
 1877              	 .loc 1 1042 0
 1878 0024 BB68     	 ldr r3,[r7,#8]
1043:../Dave/Generated/FREERTOS/timers.c ****     }
 1879              	 .loc 1 1043 0
 1880 0026 181C     	 mov r0,r3
 1881 0028 BD46     	 mov sp,r7
 1882 002a 04B0     	 add sp,sp,#16
 1883              	 
 1884 002c 80BD     	 pop {r7,pc}
 1885              	 .cfi_endproc
 1886              	.LFE62:
 1888 002e C046     	 .section .text.vTimerSetTimerID,"ax",%progbits
 1889              	 .align 2
 1890              	 .global vTimerSetTimerID
 1891              	 .code 16
 1892              	 .thumb_func
 1894              	vTimerSetTimerID:
 1895              	.LFB63:
1044:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1045:../Dave/Generated/FREERTOS/timers.c **** 
1046:../Dave/Generated/FREERTOS/timers.c ****     void vTimerSetTimerID( TimerHandle_t xTimer,
1047:../Dave/Generated/FREERTOS/timers.c ****                            void * pvNewID )
1048:../Dave/Generated/FREERTOS/timers.c ****     {
 1896              	 .loc 1 1048 0
 1897              	 .cfi_startproc
 1898 0000 80B5     	 push {r7,lr}
 1899              	.LCFI61:
 1900              	 .cfi_def_cfa_offset 8
 1901              	 .cfi_offset 7,-8
 1902              	 .cfi_offset 14,-4
 1903 0002 84B0     	 sub sp,sp,#16
 1904              	.LCFI62:
 1905              	 .cfi_def_cfa_offset 24
 1906 0004 00AF     	 add r7,sp,#0
 1907              	.LCFI63:
 1908              	 .cfi_def_cfa_register 7
 1909 0006 7860     	 str r0,[r7,#4]
 1910 0008 3960     	 str r1,[r7]
1049:../Dave/Generated/FREERTOS/timers.c ****         Timer_t * const pxTimer = xTimer;
 1911              	 .loc 1 1049 0
 1912 000a 7B68     	 ldr r3,[r7,#4]
 1913 000c FB60     	 str r3,[r7,#12]
1050:../Dave/Generated/FREERTOS/timers.c **** 
1051:../Dave/Generated/FREERTOS/timers.c ****         configASSERT( xTimer );
 1914              	 .loc 1 1051 0
 1915 000e 7B68     	 ldr r3,[r7,#4]
 1916 0010 002B     	 cmp r3,#0
 1917 0012 01D1     	 bne .L140
 1918              	 .loc 1 1051 0 is_stmt 0 discriminator 1
 1919              	
 1920 0014 72B6     	 cpsid i
 1921              	
 1922              	 .code 16
 1923              	.L141:
 1924 0016 FEE7     	 b .L141
 1925              	.L140:
1052:../Dave/Generated/FREERTOS/timers.c **** 
1053:../Dave/Generated/FREERTOS/timers.c ****         taskENTER_CRITICAL();
 1926              	 .loc 1 1053 0 is_stmt 1
 1927 0018 FFF7FEFF 	 bl vPortEnterCritical
1054:../Dave/Generated/FREERTOS/timers.c ****         {
1055:../Dave/Generated/FREERTOS/timers.c ****             pxTimer->pvTimerID = pvNewID;
 1928              	 .loc 1 1055 0
 1929 001c FB68     	 ldr r3,[r7,#12]
 1930 001e 3A68     	 ldr r2,[r7]
 1931 0020 DA61     	 str r2,[r3,#28]
1056:../Dave/Generated/FREERTOS/timers.c ****         }
1057:../Dave/Generated/FREERTOS/timers.c ****         taskEXIT_CRITICAL();
 1932              	 .loc 1 1057 0
 1933 0022 FFF7FEFF 	 bl vPortExitCritical
1058:../Dave/Generated/FREERTOS/timers.c ****     }
 1934              	 .loc 1 1058 0
 1935 0026 BD46     	 mov sp,r7
 1936 0028 04B0     	 add sp,sp,#16
 1937              	 
 1938 002a 80BD     	 pop {r7,pc}
 1939              	 .cfi_endproc
 1940              	.LFE63:
 1942              	 .section .text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1943              	 .align 2
 1944              	 .global xTimerPendFunctionCallFromISR
 1945              	 .code 16
 1946              	 .thumb_func
 1948              	xTimerPendFunctionCallFromISR:
 1949              	.LFB64:
1059:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1060:../Dave/Generated/FREERTOS/timers.c **** 
1061:../Dave/Generated/FREERTOS/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1062:../Dave/Generated/FREERTOS/timers.c **** 
1063:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
1064:../Dave/Generated/FREERTOS/timers.c ****                                                   void * pvParameter1,
1065:../Dave/Generated/FREERTOS/timers.c ****                                                   uint32_t ulParameter2,
1066:../Dave/Generated/FREERTOS/timers.c ****                                                   BaseType_t * pxHigherPriorityTaskWoken )
1067:../Dave/Generated/FREERTOS/timers.c ****         {
 1950              	 .loc 1 1067 0
 1951              	 .cfi_startproc
 1952 0000 80B5     	 push {r7,lr}
 1953              	.LCFI64:
 1954              	 .cfi_def_cfa_offset 8
 1955              	 .cfi_offset 7,-8
 1956              	 .cfi_offset 14,-4
 1957 0002 8AB0     	 sub sp,sp,#40
 1958              	.LCFI65:
 1959              	 .cfi_def_cfa_offset 48
 1960 0004 00AF     	 add r7,sp,#0
 1961              	.LCFI66:
 1962              	 .cfi_def_cfa_register 7
 1963 0006 F860     	 str r0,[r7,#12]
 1964 0008 B960     	 str r1,[r7,#8]
 1965 000a 7A60     	 str r2,[r7,#4]
 1966 000c 3B60     	 str r3,[r7]
1068:../Dave/Generated/FREERTOS/timers.c ****             DaemonTaskMessage_t xMessage;
1069:../Dave/Generated/FREERTOS/timers.c ****             BaseType_t xReturn;
1070:../Dave/Generated/FREERTOS/timers.c **** 
1071:../Dave/Generated/FREERTOS/timers.c ****             /* Complete the message with the function parameters and post it to the
1072:../Dave/Generated/FREERTOS/timers.c ****              * daemon task. */
1073:../Dave/Generated/FREERTOS/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1967              	 .loc 1 1073 0
 1968 000e 1423     	 mov r3,#20
 1969 0010 FB18     	 add r3,r7,r3
 1970 0012 0222     	 mov r2,#2
 1971 0014 5242     	 neg r2,r2
 1972 0016 1A60     	 str r2,[r3]
1074:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1973              	 .loc 1 1074 0
 1974 0018 1423     	 mov r3,#20
 1975 001a FB18     	 add r3,r7,r3
 1976 001c FA68     	 ldr r2,[r7,#12]
 1977 001e 5A60     	 str r2,[r3,#4]
1075:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1978              	 .loc 1 1075 0
 1979 0020 1423     	 mov r3,#20
 1980 0022 FB18     	 add r3,r7,r3
 1981 0024 BA68     	 ldr r2,[r7,#8]
 1982 0026 9A60     	 str r2,[r3,#8]
1076:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1983              	 .loc 1 1076 0
 1984 0028 1423     	 mov r3,#20
 1985 002a FB18     	 add r3,r7,r3
 1986 002c 7A68     	 ldr r2,[r7,#4]
 1987 002e DA60     	 str r2,[r3,#12]
1077:../Dave/Generated/FREERTOS/timers.c **** 
1078:../Dave/Generated/FREERTOS/timers.c ****             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1988              	 .loc 1 1078 0
 1989 0030 084B     	 ldr r3,.L144
 1990 0032 1968     	 ldr r1,[r3]
 1991 0034 1423     	 mov r3,#20
 1992 0036 FA18     	 add r2,r7,r3
 1993 0038 3B68     	 ldr r3,[r7]
 1994 003a 081C     	 mov r0,r1
 1995 003c 111C     	 mov r1,r2
 1996 003e 1A1C     	 mov r2,r3
 1997 0040 0023     	 mov r3,#0
 1998 0042 FFF7FEFF 	 bl xQueueGenericSendFromISR
 1999 0046 031C     	 mov r3,r0
 2000 0048 7B62     	 str r3,[r7,#36]
1079:../Dave/Generated/FREERTOS/timers.c **** 
1080:../Dave/Generated/FREERTOS/timers.c ****             tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1081:../Dave/Generated/FREERTOS/timers.c **** 
1082:../Dave/Generated/FREERTOS/timers.c ****             return xReturn;
 2001              	 .loc 1 1082 0
 2002 004a 7B6A     	 ldr r3,[r7,#36]
1083:../Dave/Generated/FREERTOS/timers.c ****         }
 2003              	 .loc 1 1083 0
 2004 004c 181C     	 mov r0,r3
 2005 004e BD46     	 mov sp,r7
 2006 0050 0AB0     	 add sp,sp,#40
 2007              	 
 2008 0052 80BD     	 pop {r7,pc}
 2009              	.L145:
 2010              	 .align 2
 2011              	.L144:
 2012 0054 00000000 	 .word xTimerQueue
 2013              	 .cfi_endproc
 2014              	.LFE64:
 2016              	 .section .text.xTimerPendFunctionCall,"ax",%progbits
 2017              	 .align 2
 2018              	 .global xTimerPendFunctionCall
 2019              	 .code 16
 2020              	 .thumb_func
 2022              	xTimerPendFunctionCall:
 2023              	.LFB65:
1084:../Dave/Generated/FREERTOS/timers.c **** 
1085:../Dave/Generated/FREERTOS/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1086:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1087:../Dave/Generated/FREERTOS/timers.c **** 
1088:../Dave/Generated/FREERTOS/timers.c ****     #if ( INCLUDE_xTimerPendFunctionCall == 1 )
1089:../Dave/Generated/FREERTOS/timers.c **** 
1090:../Dave/Generated/FREERTOS/timers.c ****         BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
1091:../Dave/Generated/FREERTOS/timers.c ****                                            void * pvParameter1,
1092:../Dave/Generated/FREERTOS/timers.c ****                                            uint32_t ulParameter2,
1093:../Dave/Generated/FREERTOS/timers.c ****                                            TickType_t xTicksToWait )
1094:../Dave/Generated/FREERTOS/timers.c ****         {
 2024              	 .loc 1 1094 0
 2025              	 .cfi_startproc
 2026 0000 80B5     	 push {r7,lr}
 2027              	.LCFI67:
 2028              	 .cfi_def_cfa_offset 8
 2029              	 .cfi_offset 7,-8
 2030              	 .cfi_offset 14,-4
 2031 0002 8AB0     	 sub sp,sp,#40
 2032              	.LCFI68:
 2033              	 .cfi_def_cfa_offset 48
 2034 0004 00AF     	 add r7,sp,#0
 2035              	.LCFI69:
 2036              	 .cfi_def_cfa_register 7
 2037 0006 F860     	 str r0,[r7,#12]
 2038 0008 B960     	 str r1,[r7,#8]
 2039 000a 7A60     	 str r2,[r7,#4]
 2040 000c 3B60     	 str r3,[r7]
1095:../Dave/Generated/FREERTOS/timers.c ****             DaemonTaskMessage_t xMessage;
1096:../Dave/Generated/FREERTOS/timers.c ****             BaseType_t xReturn;
1097:../Dave/Generated/FREERTOS/timers.c **** 
1098:../Dave/Generated/FREERTOS/timers.c ****             /* This function can only be called after a timer has been created or
1099:../Dave/Generated/FREERTOS/timers.c ****              * after the scheduler has been started because, until then, the timer
1100:../Dave/Generated/FREERTOS/timers.c ****              * queue does not exist. */
1101:../Dave/Generated/FREERTOS/timers.c ****             configASSERT( xTimerQueue );
 2041              	 .loc 1 1101 0
 2042 000e 144B     	 ldr r3,.L150
 2043 0010 1B68     	 ldr r3,[r3]
 2044 0012 002B     	 cmp r3,#0
 2045 0014 01D1     	 bne .L147
 2046              	 .loc 1 1101 0 is_stmt 0 discriminator 1
 2047              	
 2048 0016 72B6     	 cpsid i
 2049              	
 2050              	 .code 16
 2051              	.L148:
 2052 0018 FEE7     	 b .L148
 2053              	.L147:
1102:../Dave/Generated/FREERTOS/timers.c **** 
1103:../Dave/Generated/FREERTOS/timers.c ****             /* Complete the message with the function parameters and post it to the
1104:../Dave/Generated/FREERTOS/timers.c ****              * daemon task. */
1105:../Dave/Generated/FREERTOS/timers.c ****             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 2054              	 .loc 1 1105 0 is_stmt 1
 2055 001a 1423     	 mov r3,#20
 2056 001c FB18     	 add r3,r7,r3
 2057 001e 0122     	 mov r2,#1
 2058 0020 5242     	 neg r2,r2
 2059 0022 1A60     	 str r2,[r3]
1106:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 2060              	 .loc 1 1106 0
 2061 0024 1423     	 mov r3,#20
 2062 0026 FB18     	 add r3,r7,r3
 2063 0028 FA68     	 ldr r2,[r7,#12]
 2064 002a 5A60     	 str r2,[r3,#4]
1107:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 2065              	 .loc 1 1107 0
 2066 002c 1423     	 mov r3,#20
 2067 002e FB18     	 add r3,r7,r3
 2068 0030 BA68     	 ldr r2,[r7,#8]
 2069 0032 9A60     	 str r2,[r3,#8]
1108:../Dave/Generated/FREERTOS/timers.c ****             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 2070              	 .loc 1 1108 0
 2071 0034 1423     	 mov r3,#20
 2072 0036 FB18     	 add r3,r7,r3
 2073 0038 7A68     	 ldr r2,[r7,#4]
 2074 003a DA60     	 str r2,[r3,#12]
1109:../Dave/Generated/FREERTOS/timers.c **** 
1110:../Dave/Generated/FREERTOS/timers.c ****             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2075              	 .loc 1 1110 0
 2076 003c 084B     	 ldr r3,.L150
 2077 003e 1968     	 ldr r1,[r3]
 2078 0040 1423     	 mov r3,#20
 2079 0042 FA18     	 add r2,r7,r3
 2080 0044 3B68     	 ldr r3,[r7]
 2081 0046 081C     	 mov r0,r1
 2082 0048 111C     	 mov r1,r2
 2083 004a 1A1C     	 mov r2,r3
 2084 004c 0023     	 mov r3,#0
 2085 004e FFF7FEFF 	 bl xQueueGenericSend
 2086 0052 031C     	 mov r3,r0
 2087 0054 7B62     	 str r3,[r7,#36]
1111:../Dave/Generated/FREERTOS/timers.c **** 
1112:../Dave/Generated/FREERTOS/timers.c ****             tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1113:../Dave/Generated/FREERTOS/timers.c **** 
1114:../Dave/Generated/FREERTOS/timers.c ****             return xReturn;
 2088              	 .loc 1 1114 0
 2089 0056 7B6A     	 ldr r3,[r7,#36]
1115:../Dave/Generated/FREERTOS/timers.c ****         }
 2090              	 .loc 1 1115 0
 2091 0058 181C     	 mov r0,r3
 2092 005a BD46     	 mov sp,r7
 2093 005c 0AB0     	 add sp,sp,#40
 2094              	 
 2095 005e 80BD     	 pop {r7,pc}
 2096              	.L151:
 2097              	 .align 2
 2098              	.L150:
 2099 0060 00000000 	 .word xTimerQueue
 2100              	 .cfi_endproc
 2101              	.LFE65:
 2103              	 .section .text.uxTimerGetTimerNumber,"ax",%progbits
 2104              	 .align 2
 2105              	 .global uxTimerGetTimerNumber
 2106              	 .code 16
 2107              	 .thumb_func
 2109              	uxTimerGetTimerNumber:
 2110              	.LFB66:
1116:../Dave/Generated/FREERTOS/timers.c **** 
1117:../Dave/Generated/FREERTOS/timers.c ****     #endif /* INCLUDE_xTimerPendFunctionCall */
1118:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1119:../Dave/Generated/FREERTOS/timers.c **** 
1120:../Dave/Generated/FREERTOS/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1121:../Dave/Generated/FREERTOS/timers.c **** 
1122:../Dave/Generated/FREERTOS/timers.c ****         UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
1123:../Dave/Generated/FREERTOS/timers.c ****         {
 2111              	 .loc 1 1123 0
 2112              	 .cfi_startproc
 2113 0000 80B5     	 push {r7,lr}
 2114              	.LCFI70:
 2115              	 .cfi_def_cfa_offset 8
 2116              	 .cfi_offset 7,-8
 2117              	 .cfi_offset 14,-4
 2118 0002 82B0     	 sub sp,sp,#8
 2119              	.LCFI71:
 2120              	 .cfi_def_cfa_offset 16
 2121 0004 00AF     	 add r7,sp,#0
 2122              	.LCFI72:
 2123              	 .cfi_def_cfa_register 7
 2124 0006 7860     	 str r0,[r7,#4]
1124:../Dave/Generated/FREERTOS/timers.c ****             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 2125              	 .loc 1 1124 0
 2126 0008 7B68     	 ldr r3,[r7,#4]
 2127 000a 5B6A     	 ldr r3,[r3,#36]
1125:../Dave/Generated/FREERTOS/timers.c ****         }
 2128              	 .loc 1 1125 0
 2129 000c 181C     	 mov r0,r3
 2130 000e BD46     	 mov sp,r7
 2131 0010 02B0     	 add sp,sp,#8
 2132              	 
 2133 0012 80BD     	 pop {r7,pc}
 2134              	 .cfi_endproc
 2135              	.LFE66:
 2137              	 .section .text.vTimerSetTimerNumber,"ax",%progbits
 2138              	 .align 2
 2139              	 .global vTimerSetTimerNumber
 2140              	 .code 16
 2141              	 .thumb_func
 2143              	vTimerSetTimerNumber:
 2144              	.LFB67:
1126:../Dave/Generated/FREERTOS/timers.c **** 
1127:../Dave/Generated/FREERTOS/timers.c ****     #endif /* configUSE_TRACE_FACILITY */
1128:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1129:../Dave/Generated/FREERTOS/timers.c **** 
1130:../Dave/Generated/FREERTOS/timers.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
1131:../Dave/Generated/FREERTOS/timers.c **** 
1132:../Dave/Generated/FREERTOS/timers.c ****         void vTimerSetTimerNumber( TimerHandle_t xTimer,
1133:../Dave/Generated/FREERTOS/timers.c ****                                    UBaseType_t uxTimerNumber )
1134:../Dave/Generated/FREERTOS/timers.c ****         {
 2145              	 .loc 1 1134 0
 2146              	 .cfi_startproc
 2147 0000 80B5     	 push {r7,lr}
 2148              	.LCFI73:
 2149              	 .cfi_def_cfa_offset 8
 2150              	 .cfi_offset 7,-8
 2151              	 .cfi_offset 14,-4
 2152 0002 82B0     	 sub sp,sp,#8
 2153              	.LCFI74:
 2154              	 .cfi_def_cfa_offset 16
 2155 0004 00AF     	 add r7,sp,#0
 2156              	.LCFI75:
 2157              	 .cfi_def_cfa_register 7
 2158 0006 7860     	 str r0,[r7,#4]
 2159 0008 3960     	 str r1,[r7]
1135:../Dave/Generated/FREERTOS/timers.c ****             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2160              	 .loc 1 1135 0
 2161 000a 7B68     	 ldr r3,[r7,#4]
 2162 000c 3A68     	 ldr r2,[r7]
 2163 000e 5A62     	 str r2,[r3,#36]
1136:../Dave/Generated/FREERTOS/timers.c ****         }
 2164              	 .loc 1 1136 0
 2165 0010 BD46     	 mov sp,r7
 2166 0012 02B0     	 add sp,sp,#8
 2167              	 
 2168 0014 80BD     	 pop {r7,pc}
 2169              	 .cfi_endproc
 2170              	.LFE67:
 2172 0016 C046     	 .section .bss.xLastTime.6385,"aw",%nobits
 2173              	 .align 2
 2176              	xLastTime.6385:
 2177 0000 00000000 	 .space 4
 2178              	 .text
 2179              	.Letext0:
 2180              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2181              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2182              	 .file 4 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
 2183              	 .file 5 "../Dave/Generated/FREERTOS/list.h"
 2184              	 .file 6 "../Dave/Generated/FREERTOS/task.h"
 2185              	 .file 7 "../Dave/Generated/FREERTOS/queue.h"
 2186              	 .file 8 "../Dave/Generated/FREERTOS/timers.h"
 2187              	 .file 9 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
    {standard input}:18     .bss.xActiveTimerList1:00000000 $d
    {standard input}:21     .bss.xActiveTimerList1:00000000 xActiveTimerList1
    {standard input}:24     .bss.xActiveTimerList2:00000000 $d
    {standard input}:27     .bss.xActiveTimerList2:00000000 xActiveTimerList2
    {standard input}:30     .bss.pxCurrentTimerList:00000000 $d
    {standard input}:33     .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
    {standard input}:36     .bss.pxOverflowTimerList:00000000 $d
    {standard input}:39     .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
    {standard input}:42     .bss.xTimerQueue:00000000 $d
    {standard input}:45     .bss.xTimerQueue:00000000 xTimerQueue
    {standard input}:48     .bss.xTimerTaskHandle:00000000 $d
    {standard input}:51     .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
    {standard input}:54     .rodata:00000000 $d
    {standard input}:58     .text.xTimerCreateTimerTask:00000000 $t
    {standard input}:63     .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
    {standard input}:1689   .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
    {standard input}:127    .text.xTimerCreateTimerTask:00000048 $d
    {standard input}:861    .text.prvTimerTask:00000000 prvTimerTask
    {standard input}:135    .text.xTimerCreate:00000000 $t
    {standard input}:140    .text.xTimerCreate:00000000 xTimerCreate
    {standard input}:202    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
    {standard input}:198    .text.prvInitialiseNewTimer:00000000 $t
    {standard input}:284    .text.xTimerGenericCommand:00000000 $t
    {standard input}:289    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
    {standard input}:406    .text.xTimerGenericCommand:000000a8 $d
    {standard input}:411    .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
    {standard input}:416    .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
    {standard input}:452    .text.xTimerGetTimerDaemonTaskHandle:0000001c $d
    {standard input}:457    .text.xTimerGetPeriod:00000000 $t
    {standard input}:462    .text.xTimerGetPeriod:00000000 xTimerGetPeriod
    {standard input}:506    .text.vTimerSetReloadMode:00000000 $t
    {standard input}:511    .text.vTimerSetReloadMode:00000000 vTimerSetReloadMode
    {standard input}:583    .text.uxTimerGetReloadMode:00000000 $t
    {standard input}:588    .text.uxTimerGetReloadMode:00000000 uxTimerGetReloadMode
    {standard input}:652    .text.xTimerGetExpiryTime:00000000 $t
    {standard input}:657    .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
    {standard input}:704    .text.pcTimerGetName:00000000 $t
    {standard input}:709    .text.pcTimerGetName:00000000 pcTimerGetName
    {standard input}:753    .text.prvProcessExpiredTimer:00000000 $t
    {standard input}:757    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
    {standard input}:1144   .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
    {standard input}:852    .text.prvProcessExpiredTimer:00000084 $d
    {standard input}:857    .text.prvTimerTask:00000000 $t
    {standard input}:1012   .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
    {standard input}:903    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
    {standard input}:1247   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
    {standard input}:899    .text.prvProcessTimerOrBlockTask:00000000 $t
    {standard input}:1081   .text.prvSampleTimeNow:00000000 prvSampleTimeNow
    {standard input}:1002   .text.prvProcessTimerOrBlockTask:00000088 $d
    {standard input}:1008   .text.prvGetNextExpireTime:00000000 $t
    {standard input}:1072   .text.prvGetNextExpireTime:00000040 $d
    {standard input}:1077   .text.prvSampleTimeNow:00000000 $t
    {standard input}:1547   .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
    {standard input}:1135   .text.prvSampleTimeNow:0000003c $d
    {standard input}:2176   .bss.xLastTime.6385:00000000 xLastTime.6385
    {standard input}:1140   .text.prvInsertTimerInActiveList:00000000 $t
    {standard input}:1237   .text.prvInsertTimerInActiveList:0000007c $d
    {standard input}:1243   .text.prvProcessReceivedCommands:00000000 $t
    {standard input}:1345   .rodata.prvProcessReceivedCommands:00000000 $d
    {standard input}:1537   .text.prvProcessReceivedCommands:00000190 $d
    {standard input}:1543   .text.prvSwitchTimerLists:00000000 $t
    {standard input}:1675   .text.prvSwitchTimerLists:000000b4 $d
    {standard input}:1685   .text.prvCheckForValidListAndQueue:00000000 $t
    {standard input}:1754   .text.prvCheckForValidListAndQueue:0000005c $d
    {standard input}:1764   .text.xTimerIsTimerActive:00000000 $t
    {standard input}:1769   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
    {standard input}:1833   .text.pvTimerGetTimerID:00000000 $t
    {standard input}:1838   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
    {standard input}:1889   .text.vTimerSetTimerID:00000000 $t
    {standard input}:1894   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
    {standard input}:1943   .text.xTimerPendFunctionCallFromISR:00000000 $t
    {standard input}:1948   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
    {standard input}:2012   .text.xTimerPendFunctionCallFromISR:00000054 $d
    {standard input}:2017   .text.xTimerPendFunctionCall:00000000 $t
    {standard input}:2022   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
    {standard input}:2099   .text.xTimerPendFunctionCall:00000060 $d
    {standard input}:2104   .text.uxTimerGetTimerNumber:00000000 $t
    {standard input}:2109   .text.uxTimerGetTimerNumber:00000000 uxTimerGetTimerNumber
    {standard input}:2138   .text.vTimerSetTimerNumber:00000000 $t
    {standard input}:2143   .text.vTimerSetTimerNumber:00000000 vTimerSetTimerNumber
    {standard input}:2173   .bss.xLastTime.6385:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskCreate
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
vPortEnterCritical
vPortExitCritical
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
vPortYield
xTaskGetTickCount
vListInsert
vPortFree
xQueueReceive
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
