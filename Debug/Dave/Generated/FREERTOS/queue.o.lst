   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "queue.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .comm xQueueRegistry,64,4
  18              	 .section .text.xQueueGenericReset,"ax",%progbits
  19              	 .align 2
  20              	 .global xQueueGenericReset
  21              	 .code 16
  22              	 .thumb_func
  24              	xQueueGenericReset:
  25              	.LFB42:
  26              	 .file 1 "../Dave/Generated/FREERTOS/queue.c"
   1:../Dave/Generated/FREERTOS/queue.c **** /*
   2:../Dave/Generated/FREERTOS/queue.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/queue.c ****  *
   5:../Dave/Generated/FREERTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/queue.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/queue.c ****  *
  12:../Dave/Generated/FREERTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/queue.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/queue.c ****  *
  15:../Dave/Generated/FREERTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/queue.c ****  *
  22:../Dave/Generated/FREERTOS/queue.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/queue.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/queue.c ****  *
  25:../Dave/Generated/FREERTOS/queue.c ****  */
  26:../Dave/Generated/FREERTOS/queue.c **** 
  27:../Dave/Generated/FREERTOS/queue.c **** #include <stdlib.h>
  28:../Dave/Generated/FREERTOS/queue.c **** #include <string.h>
  29:../Dave/Generated/FREERTOS/queue.c **** 
  30:../Dave/Generated/FREERTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  31:../Dave/Generated/FREERTOS/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:../Dave/Generated/FREERTOS/queue.c ****  * task.h is included from an application file. */
  33:../Dave/Generated/FREERTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:../Dave/Generated/FREERTOS/queue.c **** 
  35:../Dave/Generated/FREERTOS/queue.c **** #include "FreeRTOS.h"
  36:../Dave/Generated/FREERTOS/queue.c **** #include "task.h"
  37:../Dave/Generated/FREERTOS/queue.c **** #include "queue.h"
  38:../Dave/Generated/FREERTOS/queue.c **** 
  39:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  40:../Dave/Generated/FREERTOS/queue.c ****     #include "croutine.h"
  41:../Dave/Generated/FREERTOS/queue.c **** #endif
  42:../Dave/Generated/FREERTOS/queue.c **** 
  43:../Dave/Generated/FREERTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:../Dave/Generated/FREERTOS/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:../Dave/Generated/FREERTOS/queue.c ****  * for the header files above, but not in this file, in order to generate the
  46:../Dave/Generated/FREERTOS/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:../Dave/Generated/FREERTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:../Dave/Generated/FREERTOS/queue.c **** 
  49:../Dave/Generated/FREERTOS/queue.c **** 
  50:../Dave/Generated/FREERTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  51:../Dave/Generated/FREERTOS/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  52:../Dave/Generated/FREERTOS/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  53:../Dave/Generated/FREERTOS/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  54:../Dave/Generated/FREERTOS/queue.c **** 
  55:../Dave/Generated/FREERTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../Dave/Generated/FREERTOS/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  57:../Dave/Generated/FREERTOS/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../Dave/Generated/FREERTOS/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../Dave/Generated/FREERTOS/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:../Dave/Generated/FREERTOS/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  61:../Dave/Generated/FREERTOS/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:../Dave/Generated/FREERTOS/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  63:../Dave/Generated/FREERTOS/queue.c ****  * being used for. */
  64:../Dave/Generated/FREERTOS/queue.c **** #define uxQueueType               pcHead
  65:../Dave/Generated/FREERTOS/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  66:../Dave/Generated/FREERTOS/queue.c **** 
  67:../Dave/Generated/FREERTOS/queue.c **** typedef struct QueuePointers
  68:../Dave/Generated/FREERTOS/queue.c **** {
  69:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  70:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  71:../Dave/Generated/FREERTOS/queue.c **** } QueuePointers_t;
  72:../Dave/Generated/FREERTOS/queue.c **** 
  73:../Dave/Generated/FREERTOS/queue.c **** typedef struct SemaphoreData
  74:../Dave/Generated/FREERTOS/queue.c **** {
  75:../Dave/Generated/FREERTOS/queue.c ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  76:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  77:../Dave/Generated/FREERTOS/queue.c **** } SemaphoreData_t;
  78:../Dave/Generated/FREERTOS/queue.c **** 
  79:../Dave/Generated/FREERTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:../Dave/Generated/FREERTOS/queue.c ****  * zero. */
  81:../Dave/Generated/FREERTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  82:../Dave/Generated/FREERTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  83:../Dave/Generated/FREERTOS/queue.c **** 
  84:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  85:../Dave/Generated/FREERTOS/queue.c **** 
  86:../Dave/Generated/FREERTOS/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
  87:../Dave/Generated/FREERTOS/queue.c ****  * performed just because a higher priority task has been woken. */
  88:../Dave/Generated/FREERTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  89:../Dave/Generated/FREERTOS/queue.c **** #else
  90:../Dave/Generated/FREERTOS/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  91:../Dave/Generated/FREERTOS/queue.c **** #endif
  92:../Dave/Generated/FREERTOS/queue.c **** 
  93:../Dave/Generated/FREERTOS/queue.c **** /*
  94:../Dave/Generated/FREERTOS/queue.c ****  * Definition of the queue used by the scheduler.
  95:../Dave/Generated/FREERTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  96:../Dave/Generated/FREERTOS/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  97:../Dave/Generated/FREERTOS/queue.c ****  */
  98:../Dave/Generated/FREERTOS/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
  99:../Dave/Generated/FREERTOS/queue.c **** {
 100:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 101:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 102:../Dave/Generated/FREERTOS/queue.c **** 
 103:../Dave/Generated/FREERTOS/queue.c ****     union
 104:../Dave/Generated/FREERTOS/queue.c ****     {
 105:../Dave/Generated/FREERTOS/queue.c ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 106:../Dave/Generated/FREERTOS/queue.c ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 107:../Dave/Generated/FREERTOS/queue.c ****     } u;
 108:../Dave/Generated/FREERTOS/queue.c **** 
 109:../Dave/Generated/FREERTOS/queue.c ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 110:../Dave/Generated/FREERTOS/queue.c ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 111:../Dave/Generated/FREERTOS/queue.c **** 
 112:../Dave/Generated/FREERTOS/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 113:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 114:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 115:../Dave/Generated/FREERTOS/queue.c **** 
 116:../Dave/Generated/FREERTOS/queue.c ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 117:../Dave/Generated/FREERTOS/queue.c ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 118:../Dave/Generated/FREERTOS/queue.c **** 
 119:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 120:../Dave/Generated/FREERTOS/queue.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 121:../Dave/Generated/FREERTOS/queue.c ****     #endif
 122:../Dave/Generated/FREERTOS/queue.c **** 
 123:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 124:../Dave/Generated/FREERTOS/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 125:../Dave/Generated/FREERTOS/queue.c ****     #endif
 126:../Dave/Generated/FREERTOS/queue.c **** 
 127:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 128:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t uxQueueNumber;
 129:../Dave/Generated/FREERTOS/queue.c ****         uint8_t ucQueueType;
 130:../Dave/Generated/FREERTOS/queue.c ****     #endif
 131:../Dave/Generated/FREERTOS/queue.c **** } xQUEUE;
 132:../Dave/Generated/FREERTOS/queue.c **** 
 133:../Dave/Generated/FREERTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:../Dave/Generated/FREERTOS/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 135:../Dave/Generated/FREERTOS/queue.c **** typedef xQUEUE Queue_t;
 136:../Dave/Generated/FREERTOS/queue.c **** 
 137:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 138:../Dave/Generated/FREERTOS/queue.c **** 
 139:../Dave/Generated/FREERTOS/queue.c **** /*
 140:../Dave/Generated/FREERTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:../Dave/Generated/FREERTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:../Dave/Generated/FREERTOS/queue.c ****  */
 143:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:../Dave/Generated/FREERTOS/queue.c **** 
 145:../Dave/Generated/FREERTOS/queue.c **** /* The type stored within the queue registry array.  This allows a name
 146:../Dave/Generated/FREERTOS/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 147:../Dave/Generated/FREERTOS/queue.c ****  * more user friendly. */
 148:../Dave/Generated/FREERTOS/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 149:../Dave/Generated/FREERTOS/queue.c ****     {
 150:../Dave/Generated/FREERTOS/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 151:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xHandle;
 152:../Dave/Generated/FREERTOS/queue.c ****     } xQueueRegistryItem;
 153:../Dave/Generated/FREERTOS/queue.c **** 
 154:../Dave/Generated/FREERTOS/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:../Dave/Generated/FREERTOS/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 156:../Dave/Generated/FREERTOS/queue.c ****  * debuggers. */
 157:../Dave/Generated/FREERTOS/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 158:../Dave/Generated/FREERTOS/queue.c **** 
 159:../Dave/Generated/FREERTOS/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:../Dave/Generated/FREERTOS/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 161:../Dave/Generated/FREERTOS/queue.c ****  * array position being vacant. */
 162:../Dave/Generated/FREERTOS/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:../Dave/Generated/FREERTOS/queue.c **** 
 164:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:../Dave/Generated/FREERTOS/queue.c **** 
 166:../Dave/Generated/FREERTOS/queue.c **** /*
 167:../Dave/Generated/FREERTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:../Dave/Generated/FREERTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:../Dave/Generated/FREERTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:../Dave/Generated/FREERTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:../Dave/Generated/FREERTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:../Dave/Generated/FREERTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:../Dave/Generated/FREERTOS/queue.c ****  */
 174:../Dave/Generated/FREERTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:../Dave/Generated/FREERTOS/queue.c **** 
 176:../Dave/Generated/FREERTOS/queue.c **** /*
 177:../Dave/Generated/FREERTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:../Dave/Generated/FREERTOS/queue.c ****  *
 179:../Dave/Generated/FREERTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:../Dave/Generated/FREERTOS/queue.c ****  */
 181:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 182:../Dave/Generated/FREERTOS/queue.c **** 
 183:../Dave/Generated/FREERTOS/queue.c **** /*
 184:../Dave/Generated/FREERTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:../Dave/Generated/FREERTOS/queue.c ****  *
 186:../Dave/Generated/FREERTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:../Dave/Generated/FREERTOS/queue.c ****  */
 188:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 189:../Dave/Generated/FREERTOS/queue.c **** 
 190:../Dave/Generated/FREERTOS/queue.c **** /*
 191:../Dave/Generated/FREERTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:../Dave/Generated/FREERTOS/queue.c ****  * back of the queue.
 193:../Dave/Generated/FREERTOS/queue.c ****  */
 194:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 195:../Dave/Generated/FREERTOS/queue.c ****                                       const void * pvItemToQueue,
 196:../Dave/Generated/FREERTOS/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 197:../Dave/Generated/FREERTOS/queue.c **** 
 198:../Dave/Generated/FREERTOS/queue.c **** /*
 199:../Dave/Generated/FREERTOS/queue.c ****  * Copies an item out of a queue.
 200:../Dave/Generated/FREERTOS/queue.c ****  */
 201:../Dave/Generated/FREERTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 202:../Dave/Generated/FREERTOS/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 203:../Dave/Generated/FREERTOS/queue.c **** 
 204:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 205:../Dave/Generated/FREERTOS/queue.c **** 
 206:../Dave/Generated/FREERTOS/queue.c **** /*
 207:../Dave/Generated/FREERTOS/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 208:../Dave/Generated/FREERTOS/queue.c ****  * the queue set that the queue contains data.
 209:../Dave/Generated/FREERTOS/queue.c ****  */
 210:../Dave/Generated/FREERTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 211:../Dave/Generated/FREERTOS/queue.c **** #endif
 212:../Dave/Generated/FREERTOS/queue.c **** 
 213:../Dave/Generated/FREERTOS/queue.c **** /*
 214:../Dave/Generated/FREERTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 215:../Dave/Generated/FREERTOS/queue.c ****  * dynamically to fill in the structure's members.
 216:../Dave/Generated/FREERTOS/queue.c ****  */
 217:../Dave/Generated/FREERTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 218:../Dave/Generated/FREERTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 219:../Dave/Generated/FREERTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 220:../Dave/Generated/FREERTOS/queue.c ****                                    const uint8_t ucQueueType,
 221:../Dave/Generated/FREERTOS/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 222:../Dave/Generated/FREERTOS/queue.c **** 
 223:../Dave/Generated/FREERTOS/queue.c **** /*
 224:../Dave/Generated/FREERTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 225:../Dave/Generated/FREERTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 226:../Dave/Generated/FREERTOS/queue.c ****  * as a mutex.
 227:../Dave/Generated/FREERTOS/queue.c ****  */
 228:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 229:../Dave/Generated/FREERTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 230:../Dave/Generated/FREERTOS/queue.c **** #endif
 231:../Dave/Generated/FREERTOS/queue.c **** 
 232:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 233:../Dave/Generated/FREERTOS/queue.c **** 
 234:../Dave/Generated/FREERTOS/queue.c **** /*
 235:../Dave/Generated/FREERTOS/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 236:../Dave/Generated/FREERTOS/queue.c ****  * priority, but the waiting task times out, then the holder should
 237:../Dave/Generated/FREERTOS/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 238:../Dave/Generated/FREERTOS/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 239:../Dave/Generated/FREERTOS/queue.c ****  * that priority.
 240:../Dave/Generated/FREERTOS/queue.c ****  */
 241:../Dave/Generated/FREERTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 242:../Dave/Generated/FREERTOS/queue.c **** #endif
 243:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 244:../Dave/Generated/FREERTOS/queue.c **** 
 245:../Dave/Generated/FREERTOS/queue.c **** /*
 246:../Dave/Generated/FREERTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 247:../Dave/Generated/FREERTOS/queue.c ****  * accessing the queue event lists.
 248:../Dave/Generated/FREERTOS/queue.c ****  */
 249:../Dave/Generated/FREERTOS/queue.c **** #define prvLockQueue( pxQueue )                            \
 250:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();                                  \
 251:../Dave/Generated/FREERTOS/queue.c ****     {                                                      \
 252:../Dave/Generated/FREERTOS/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 253:../Dave/Generated/FREERTOS/queue.c ****         {                                                  \
 254:../Dave/Generated/FREERTOS/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 255:../Dave/Generated/FREERTOS/queue.c ****         }                                                  \
 256:../Dave/Generated/FREERTOS/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 257:../Dave/Generated/FREERTOS/queue.c ****         {                                                  \
 258:../Dave/Generated/FREERTOS/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 259:../Dave/Generated/FREERTOS/queue.c ****         }                                                  \
 260:../Dave/Generated/FREERTOS/queue.c ****     }                                                      \
 261:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL()
 262:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 263:../Dave/Generated/FREERTOS/queue.c **** 
 264:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 265:../Dave/Generated/FREERTOS/queue.c ****                                BaseType_t xNewQueue )
 266:../Dave/Generated/FREERTOS/queue.c **** {
  27              	 .loc 1 266 0
  28              	 .cfi_startproc
  29 0000 80B5     	 push {r7,lr}
  30              	.LCFI0:
  31              	 .cfi_def_cfa_offset 8
  32              	 .cfi_offset 7,-8
  33              	 .cfi_offset 14,-4
  34 0002 84B0     	 sub sp,sp,#16
  35              	.LCFI1:
  36              	 .cfi_def_cfa_offset 24
  37 0004 00AF     	 add r7,sp,#0
  38              	.LCFI2:
  39              	 .cfi_def_cfa_register 7
  40 0006 7860     	 str r0,[r7,#4]
  41 0008 3960     	 str r1,[r7]
 267:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
  42              	 .loc 1 267 0
  43 000a 7B68     	 ldr r3,[r7,#4]
  44 000c FB60     	 str r3,[r7,#12]
 268:../Dave/Generated/FREERTOS/queue.c **** 
 269:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
  45              	 .loc 1 269 0
  46 000e FB68     	 ldr r3,[r7,#12]
  47 0010 002B     	 cmp r3,#0
  48 0012 01D1     	 bne .L2
  49              	 .loc 1 269 0 is_stmt 0 discriminator 1
  50              	
  51 0014 72B6     	 cpsid i
  52              	
  53              	 .code 16
  54              	.L3:
  55 0016 FEE7     	 b .L3
  56              	.L2:
 270:../Dave/Generated/FREERTOS/queue.c **** 
 271:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
  57              	 .loc 1 271 0 is_stmt 1
  58 0018 FFF7FEFF 	 bl vPortEnterCritical
 272:../Dave/Generated/FREERTOS/queue.c ****     {
 273:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /
  59              	 .loc 1 273 0
  60 001c FB68     	 ldr r3,[r7,#12]
  61 001e 1A68     	 ldr r2,[r3]
  62 0020 FB68     	 ldr r3,[r7,#12]
  63 0022 D96B     	 ldr r1,[r3,#60]
  64 0024 FB68     	 ldr r3,[r7,#12]
  65 0026 1B6C     	 ldr r3,[r3,#64]
  66 0028 4B43     	 mul r3,r1
  67 002a D218     	 add r2,r2,r3
  68 002c FB68     	 ldr r3,[r7,#12]
  69 002e 9A60     	 str r2,[r3,#8]
 274:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  70              	 .loc 1 274 0
  71 0030 FB68     	 ldr r3,[r7,#12]
  72 0032 0022     	 mov r2,#0
  73 0034 9A63     	 str r2,[r3,#56]
 275:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->pcWriteTo = pxQueue->pcHead;
  74              	 .loc 1 275 0
  75 0036 FB68     	 ldr r3,[r7,#12]
  76 0038 1A68     	 ldr r2,[r3]
  77 003a FB68     	 ldr r3,[r7,#12]
  78 003c 5A60     	 str r2,[r3,#4]
 276:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->ux
  79              	 .loc 1 276 0
  80 003e FB68     	 ldr r3,[r7,#12]
  81 0040 1A68     	 ldr r2,[r3]
  82 0042 FB68     	 ldr r3,[r7,#12]
  83 0044 DB6B     	 ldr r3,[r3,#60]
  84 0046 591E     	 sub r1,r3,#1
  85 0048 FB68     	 ldr r3,[r7,#12]
  86 004a 1B6C     	 ldr r3,[r3,#64]
  87 004c 4B43     	 mul r3,r1
  88 004e D218     	 add r2,r2,r3
  89 0050 FB68     	 ldr r3,[r7,#12]
  90 0052 DA60     	 str r2,[r3,#12]
 277:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
  91              	 .loc 1 277 0
  92 0054 FB68     	 ldr r3,[r7,#12]
  93 0056 4422     	 mov r2,#68
  94 0058 FF21     	 mov r1,#255
  95 005a 9954     	 strb r1,[r3,r2]
 278:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
  96              	 .loc 1 278 0
  97 005c FB68     	 ldr r3,[r7,#12]
  98 005e 4522     	 mov r2,#69
  99 0060 FF21     	 mov r1,#255
 100 0062 9954     	 strb r1,[r3,r2]
 279:../Dave/Generated/FREERTOS/queue.c **** 
 280:../Dave/Generated/FREERTOS/queue.c ****         if( xNewQueue == pdFALSE )
 101              	 .loc 1 280 0
 102 0064 3B68     	 ldr r3,[r7]
 103 0066 002B     	 cmp r3,#0
 104 0068 0DD1     	 bne .L4
 281:../Dave/Generated/FREERTOS/queue.c ****         {
 282:../Dave/Generated/FREERTOS/queue.c ****             /* If there are tasks blocked waiting to read from the queue, then
 283:../Dave/Generated/FREERTOS/queue.c ****              * the tasks will remain blocked as after this function exits the queue
 284:../Dave/Generated/FREERTOS/queue.c ****              * will still be empty.  If there are tasks blocked waiting to write to
 285:../Dave/Generated/FREERTOS/queue.c ****              * the queue, then one should be unblocked as after this function exits
 286:../Dave/Generated/FREERTOS/queue.c ****              * it will be possible to write to it. */
 287:../Dave/Generated/FREERTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 105              	 .loc 1 287 0
 106 006a FB68     	 ldr r3,[r7,#12]
 107 006c 1B69     	 ldr r3,[r3,#16]
 108 006e 002B     	 cmp r3,#0
 109 0070 13D0     	 beq .L5
 288:../Dave/Generated/FREERTOS/queue.c ****             {
 289:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 110              	 .loc 1 289 0
 111 0072 FB68     	 ldr r3,[r7,#12]
 112 0074 1033     	 add r3,r3,#16
 113 0076 181C     	 mov r0,r3
 114 0078 FFF7FEFF 	 bl xTaskRemoveFromEventList
 115 007c 031E     	 sub r3,r0,#0
 116 007e 0CD0     	 beq .L5
 290:../Dave/Generated/FREERTOS/queue.c ****                 {
 291:../Dave/Generated/FREERTOS/queue.c ****                     queueYIELD_IF_USING_PREEMPTION();
 117              	 .loc 1 291 0
 118 0080 FFF7FEFF 	 bl vPortYield
 119 0084 09E0     	 b .L5
 120              	.L4:
 292:../Dave/Generated/FREERTOS/queue.c ****                 }
 293:../Dave/Generated/FREERTOS/queue.c ****                 else
 294:../Dave/Generated/FREERTOS/queue.c ****                 {
 295:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 296:../Dave/Generated/FREERTOS/queue.c ****                 }
 297:../Dave/Generated/FREERTOS/queue.c ****             }
 298:../Dave/Generated/FREERTOS/queue.c ****             else
 299:../Dave/Generated/FREERTOS/queue.c ****             {
 300:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 301:../Dave/Generated/FREERTOS/queue.c ****             }
 302:../Dave/Generated/FREERTOS/queue.c ****         }
 303:../Dave/Generated/FREERTOS/queue.c ****         else
 304:../Dave/Generated/FREERTOS/queue.c ****         {
 305:../Dave/Generated/FREERTOS/queue.c ****             /* Ensure the event queues start in the correct state. */
 306:../Dave/Generated/FREERTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 121              	 .loc 1 306 0
 122 0086 FB68     	 ldr r3,[r7,#12]
 123 0088 1033     	 add r3,r3,#16
 124 008a 181C     	 mov r0,r3
 125 008c FFF7FEFF 	 bl vListInitialise
 307:../Dave/Generated/FREERTOS/queue.c ****             vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 126              	 .loc 1 307 0
 127 0090 FB68     	 ldr r3,[r7,#12]
 128 0092 2433     	 add r3,r3,#36
 129 0094 181C     	 mov r0,r3
 130 0096 FFF7FEFF 	 bl vListInitialise
 131              	.L5:
 308:../Dave/Generated/FREERTOS/queue.c ****         }
 309:../Dave/Generated/FREERTOS/queue.c ****     }
 310:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 132              	 .loc 1 310 0
 133 009a FFF7FEFF 	 bl vPortExitCritical
 311:../Dave/Generated/FREERTOS/queue.c **** 
 312:../Dave/Generated/FREERTOS/queue.c ****     /* A value is returned for calling semantic consistency with previous
 313:../Dave/Generated/FREERTOS/queue.c ****      * versions. */
 314:../Dave/Generated/FREERTOS/queue.c ****     return pdPASS;
 134              	 .loc 1 314 0
 135 009e 0123     	 mov r3,#1
 315:../Dave/Generated/FREERTOS/queue.c **** }
 136              	 .loc 1 315 0
 137 00a0 181C     	 mov r0,r3
 138 00a2 BD46     	 mov sp,r7
 139 00a4 04B0     	 add sp,sp,#16
 140              	 
 141 00a6 80BD     	 pop {r7,pc}
 142              	 .cfi_endproc
 143              	.LFE42:
 145              	 .global __aeabi_uidiv
 146              	 .section .text.xQueueGenericCreate,"ax",%progbits
 147              	 .align 2
 148              	 .global xQueueGenericCreate
 149              	 .code 16
 150              	 .thumb_func
 152              	xQueueGenericCreate:
 153              	.LFB43:
 316:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 317:../Dave/Generated/FREERTOS/queue.c **** 
 318:../Dave/Generated/FREERTOS/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 319:../Dave/Generated/FREERTOS/queue.c **** 
 320:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 321:../Dave/Generated/FREERTOS/queue.c ****                                              const UBaseType_t uxItemSize,
 322:../Dave/Generated/FREERTOS/queue.c ****                                              uint8_t * pucQueueStorage,
 323:../Dave/Generated/FREERTOS/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 324:../Dave/Generated/FREERTOS/queue.c ****                                              const uint8_t ucQueueType )
 325:../Dave/Generated/FREERTOS/queue.c ****     {
 326:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * pxNewQueue;
 327:../Dave/Generated/FREERTOS/queue.c **** 
 328:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 329:../Dave/Generated/FREERTOS/queue.c **** 
 330:../Dave/Generated/FREERTOS/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
 331:../Dave/Generated/FREERTOS/queue.c ****          * supplied. */
 332:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxStaticQueue != NULL );
 333:../Dave/Generated/FREERTOS/queue.c **** 
 334:../Dave/Generated/FREERTOS/queue.c ****         /* A queue storage area should be provided if the item size is not 0, and
 335:../Dave/Generated/FREERTOS/queue.c ****          * should not be provided if the item size is 0. */
 336:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 337:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 338:../Dave/Generated/FREERTOS/queue.c **** 
 339:../Dave/Generated/FREERTOS/queue.c ****         #if ( configASSERT_DEFINED == 1 )
 340:../Dave/Generated/FREERTOS/queue.c ****             {
 341:../Dave/Generated/FREERTOS/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 342:../Dave/Generated/FREERTOS/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 343:../Dave/Generated/FREERTOS/queue.c ****                  * the real queue and semaphore structures. */
 344:../Dave/Generated/FREERTOS/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 345:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) );
 346:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 347:../Dave/Generated/FREERTOS/queue.c ****             }
 348:../Dave/Generated/FREERTOS/queue.c ****         #endif /* configASSERT_DEFINED */
 349:../Dave/Generated/FREERTOS/queue.c **** 
 350:../Dave/Generated/FREERTOS/queue.c ****         /* The address of a statically allocated queue was passed in, use it.
 351:../Dave/Generated/FREERTOS/queue.c ****          * The address of a statically allocated storage area was also passed in
 352:../Dave/Generated/FREERTOS/queue.c ****          * but is already set. */
 353:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the str
 354:../Dave/Generated/FREERTOS/queue.c **** 
 355:../Dave/Generated/FREERTOS/queue.c ****         if( pxNewQueue != NULL )
 356:../Dave/Generated/FREERTOS/queue.c ****         {
 357:../Dave/Generated/FREERTOS/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 358:../Dave/Generated/FREERTOS/queue.c ****                 {
 359:../Dave/Generated/FREERTOS/queue.c ****                     /* Queues can be allocated wither statically or dynamically, so
 360:../Dave/Generated/FREERTOS/queue.c ****                      * note this queue was allocated statically in case the queue is
 361:../Dave/Generated/FREERTOS/queue.c ****                      * later deleted. */
 362:../Dave/Generated/FREERTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 363:../Dave/Generated/FREERTOS/queue.c ****                 }
 364:../Dave/Generated/FREERTOS/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 365:../Dave/Generated/FREERTOS/queue.c **** 
 366:../Dave/Generated/FREERTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 367:../Dave/Generated/FREERTOS/queue.c ****         }
 368:../Dave/Generated/FREERTOS/queue.c ****         else
 369:../Dave/Generated/FREERTOS/queue.c ****         {
 370:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 371:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 372:../Dave/Generated/FREERTOS/queue.c ****         }
 373:../Dave/Generated/FREERTOS/queue.c **** 
 374:../Dave/Generated/FREERTOS/queue.c ****         return pxNewQueue;
 375:../Dave/Generated/FREERTOS/queue.c ****     }
 376:../Dave/Generated/FREERTOS/queue.c **** 
 377:../Dave/Generated/FREERTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 378:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 379:../Dave/Generated/FREERTOS/queue.c **** 
 380:../Dave/Generated/FREERTOS/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 381:../Dave/Generated/FREERTOS/queue.c **** 
 382:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 383:../Dave/Generated/FREERTOS/queue.c ****                                        const UBaseType_t uxItemSize,
 384:../Dave/Generated/FREERTOS/queue.c ****                                        const uint8_t ucQueueType )
 385:../Dave/Generated/FREERTOS/queue.c ****     {
 154              	 .loc 1 385 0
 155              	 .cfi_startproc
 156 0000 90B5     	 push {r4,r7,lr}
 157              	.LCFI3:
 158              	 .cfi_def_cfa_offset 12
 159              	 .cfi_offset 4,-12
 160              	 .cfi_offset 7,-8
 161              	 .cfi_offset 14,-4
 162 0002 8BB0     	 sub sp,sp,#44
 163              	.LCFI4:
 164              	 .cfi_def_cfa_offset 56
 165 0004 02AF     	 add r7,sp,#8
 166              	.LCFI5:
 167              	 .cfi_def_cfa 7,48
 168 0006 F860     	 str r0,[r7,#12]
 169 0008 B960     	 str r1,[r7,#8]
 170 000a FB1D     	 add r3,r7,#7
 171 000c 1A70     	 strb r2,[r3]
 386:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * pxNewQueue;
 387:../Dave/Generated/FREERTOS/queue.c ****         size_t xQueueSizeInBytes;
 388:../Dave/Generated/FREERTOS/queue.c ****         uint8_t * pucQueueStorage;
 389:../Dave/Generated/FREERTOS/queue.c **** 
 390:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 172              	 .loc 1 390 0
 173 000e FB68     	 ldr r3,[r7,#12]
 174 0010 002B     	 cmp r3,#0
 175 0012 01D1     	 bne .L8
 176              	 .loc 1 390 0 is_stmt 0 discriminator 1
 177              	
 178 0014 72B6     	 cpsid i
 179              	
 180              	 .code 16
 181              	.L9:
 182 0016 FEE7     	 b .L9
 183              	.L8:
 391:../Dave/Generated/FREERTOS/queue.c **** 
 392:../Dave/Generated/FREERTOS/queue.c ****         /* Allocate enough space to hold the maximum number of items that
 393:../Dave/Generated/FREERTOS/queue.c ****          * can be in the queue at any time.  It is valid for uxItemSize to be
 394:../Dave/Generated/FREERTOS/queue.c ****          * zero in the case the queue is used as a semaphore. */
 395:../Dave/Generated/FREERTOS/queue.c ****         xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception
 184              	 .loc 1 395 0 is_stmt 1
 185 0018 FB68     	 ldr r3,[r7,#12]
 186 001a BA68     	 ldr r2,[r7,#8]
 187 001c 5343     	 mul r3,r2
 188 001e FB61     	 str r3,[r7,#28]
 396:../Dave/Generated/FREERTOS/queue.c **** 
 397:../Dave/Generated/FREERTOS/queue.c ****         /* Check for multiplication overflow. */
 398:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) 
 189              	 .loc 1 398 0
 190 0020 BB68     	 ldr r3,[r7,#8]
 191 0022 002B     	 cmp r3,#0
 192 0024 08D0     	 beq .L10
 193              	 .loc 1 398 0 is_stmt 0 discriminator 2
 194 0026 F869     	 ldr r0,[r7,#28]
 195 0028 B968     	 ldr r1,[r7,#8]
 196 002a FFF7FEFF 	 bl __aeabi_uidiv
 197 002e 031C     	 mov r3,r0
 198 0030 1A1E     	 sub r2,r3,#0
 199 0032 FB68     	 ldr r3,[r7,#12]
 200 0034 9A42     	 cmp r2,r3
 201 0036 01D1     	 bne .L11
 202              	.L10:
 203              	 .loc 1 398 0 discriminator 3
 204 0038 0123     	 mov r3,#1
 205 003a 00E0     	 b .L12
 206              	.L11:
 207              	 .loc 1 398 0 discriminator 4
 208 003c 0023     	 mov r3,#0
 209              	.L12:
 210              	 .loc 1 398 0 discriminator 6
 211 003e 002B     	 cmp r3,#0
 212 0040 01D1     	 bne .L13
 213              	 .loc 1 398 0 discriminator 7
 214              	
 215 0042 72B6     	 cpsid i
 216              	
 217              	 .code 16
 218              	.L14:
 219              	 .loc 1 398 0 discriminator 2
 220 0044 FEE7     	 b .L14
 221              	.L13:
 399:../Dave/Generated/FREERTOS/queue.c **** 
 400:../Dave/Generated/FREERTOS/queue.c ****         /* Check for addition overflow. */
 401:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 222              	 .loc 1 401 0 is_stmt 1
 223 0046 FB69     	 ldr r3,[r7,#28]
 224 0048 5433     	 add r3,r3,#84
 225 004a 1A1E     	 sub r2,r3,#0
 226 004c FB69     	 ldr r3,[r7,#28]
 227 004e 9A42     	 cmp r2,r3
 228 0050 01D8     	 bhi .L15
 229              	 .loc 1 401 0 is_stmt 0 discriminator 1
 230              	
 231 0052 72B6     	 cpsid i
 232              	
 233              	 .code 16
 234              	.L16:
 235              	 .loc 1 401 0 discriminator 3
 236 0054 FEE7     	 b .L16
 237              	.L15:
 402:../Dave/Generated/FREERTOS/queue.c **** 
 403:../Dave/Generated/FREERTOS/queue.c ****         /* Allocate the queue and storage area.  Justification for MISRA
 404:../Dave/Generated/FREERTOS/queue.c ****          * deviation as follows:  pvPortMalloc() always ensures returned memory
 405:../Dave/Generated/FREERTOS/queue.c ****          * blocks are aligned per the requirements of the MCU stack.  In this case
 406:../Dave/Generated/FREERTOS/queue.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 407:../Dave/Generated/FREERTOS/queue.c ****          * alignment requirements of the Queue_t structure - which in this case
 408:../Dave/Generated/FREERTOS/queue.c ****          * is an int8_t *.  Therefore, whenever the stack alignment requirements
 409:../Dave/Generated/FREERTOS/queue.c ****          * are greater than or equal to the pointer to char requirements the cast
 410:../Dave/Generated/FREERTOS/queue.c ****          * is safe.  In other cases alignment requirements are not strict (one or
 411:../Dave/Generated/FREERTOS/queue.c ****          * two bytes). */
 412:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e
 238              	 .loc 1 412 0 is_stmt 1
 239 0056 FB69     	 ldr r3,[r7,#28]
 240 0058 5433     	 add r3,r3,#84
 241 005a 181C     	 mov r0,r3
 242 005c FFF7FEFF 	 bl pvPortMalloc
 243 0060 031C     	 mov r3,r0
 244 0062 BB61     	 str r3,[r7,#24]
 413:../Dave/Generated/FREERTOS/queue.c **** 
 414:../Dave/Generated/FREERTOS/queue.c ****         if( pxNewQueue != NULL )
 245              	 .loc 1 414 0
 246 0064 BB69     	 ldr r3,[r7,#24]
 247 0066 002B     	 cmp r3,#0
 248 0068 0ED0     	 beq .L17
 415:../Dave/Generated/FREERTOS/queue.c ****         {
 416:../Dave/Generated/FREERTOS/queue.c ****             /* Jump past the queue structure to find the location of the queue
 417:../Dave/Generated/FREERTOS/queue.c ****              * storage area. */
 418:../Dave/Generated/FREERTOS/queue.c ****             pucQueueStorage = ( uint8_t * ) pxNewQueue;
 249              	 .loc 1 418 0
 250 006a BB69     	 ldr r3,[r7,#24]
 251 006c 7B61     	 str r3,[r7,#20]
 419:../Dave/Generated/FREERTOS/queue.c ****             pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char 
 252              	 .loc 1 419 0
 253 006e 7B69     	 ldr r3,[r7,#20]
 254 0070 5433     	 add r3,r3,#84
 255 0072 7B61     	 str r3,[r7,#20]
 420:../Dave/Generated/FREERTOS/queue.c **** 
 421:../Dave/Generated/FREERTOS/queue.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 422:../Dave/Generated/FREERTOS/queue.c ****                 {
 423:../Dave/Generated/FREERTOS/queue.c ****                     /* Queues can be created either statically or dynamically, so
 424:../Dave/Generated/FREERTOS/queue.c ****                      * note this task was created dynamically in case it is later
 425:../Dave/Generated/FREERTOS/queue.c ****                      * deleted. */
 426:../Dave/Generated/FREERTOS/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 427:../Dave/Generated/FREERTOS/queue.c ****                 }
 428:../Dave/Generated/FREERTOS/queue.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 429:../Dave/Generated/FREERTOS/queue.c **** 
 430:../Dave/Generated/FREERTOS/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 256              	 .loc 1 430 0
 257 0074 F868     	 ldr r0,[r7,#12]
 258 0076 B968     	 ldr r1,[r7,#8]
 259 0078 7A69     	 ldr r2,[r7,#20]
 260 007a FB1D     	 add r3,r7,#7
 261 007c 1C78     	 ldrb r4,[r3]
 262 007e BB69     	 ldr r3,[r7,#24]
 263 0080 0093     	 str r3,[sp]
 264 0082 231C     	 mov r3,r4
 265 0084 FFF7FEFF 	 bl prvInitialiseNewQueue
 266              	.L17:
 431:../Dave/Generated/FREERTOS/queue.c ****         }
 432:../Dave/Generated/FREERTOS/queue.c ****         else
 433:../Dave/Generated/FREERTOS/queue.c ****         {
 434:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_CREATE_FAILED( ucQueueType );
 435:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
 436:../Dave/Generated/FREERTOS/queue.c ****         }
 437:../Dave/Generated/FREERTOS/queue.c **** 
 438:../Dave/Generated/FREERTOS/queue.c ****         return pxNewQueue;
 267              	 .loc 1 438 0
 268 0088 BB69     	 ldr r3,[r7,#24]
 439:../Dave/Generated/FREERTOS/queue.c ****     }
 269              	 .loc 1 439 0
 270 008a 181C     	 mov r0,r3
 271 008c BD46     	 mov sp,r7
 272 008e 09B0     	 add sp,sp,#36
 273              	 
 274 0090 90BD     	 pop {r4,r7,pc}
 275              	 .cfi_endproc
 276              	.LFE43:
 278 0092 C046     	 .section .text.prvInitialiseNewQueue,"ax",%progbits
 279              	 .align 2
 280              	 .code 16
 281              	 .thumb_func
 283              	prvInitialiseNewQueue:
 284              	.LFB44:
 440:../Dave/Generated/FREERTOS/queue.c **** 
 441:../Dave/Generated/FREERTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 442:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 443:../Dave/Generated/FREERTOS/queue.c **** 
 444:../Dave/Generated/FREERTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 445:../Dave/Generated/FREERTOS/queue.c ****                                    const UBaseType_t uxItemSize,
 446:../Dave/Generated/FREERTOS/queue.c ****                                    uint8_t * pucQueueStorage,
 447:../Dave/Generated/FREERTOS/queue.c ****                                    const uint8_t ucQueueType,
 448:../Dave/Generated/FREERTOS/queue.c ****                                    Queue_t * pxNewQueue )
 449:../Dave/Generated/FREERTOS/queue.c **** {
 285              	 .loc 1 449 0
 286              	 .cfi_startproc
 287 0000 80B5     	 push {r7,lr}
 288              	.LCFI6:
 289              	 .cfi_def_cfa_offset 8
 290              	 .cfi_offset 7,-8
 291              	 .cfi_offset 14,-4
 292 0002 84B0     	 sub sp,sp,#16
 293              	.LCFI7:
 294              	 .cfi_def_cfa_offset 24
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI8:
 297              	 .cfi_def_cfa_register 7
 298 0006 F860     	 str r0,[r7,#12]
 299 0008 B960     	 str r1,[r7,#8]
 300 000a 7A60     	 str r2,[r7,#4]
 301 000c 1A1C     	 mov r2,r3
 302 000e FB1C     	 add r3,r7,#3
 303 0010 1A70     	 strb r2,[r3]
 450:../Dave/Generated/FREERTOS/queue.c ****     /* Remove compiler warnings about unused parameters should
 451:../Dave/Generated/FREERTOS/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 452:../Dave/Generated/FREERTOS/queue.c ****     ( void ) ucQueueType;
 453:../Dave/Generated/FREERTOS/queue.c **** 
 454:../Dave/Generated/FREERTOS/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 304              	 .loc 1 454 0
 305 0012 BB68     	 ldr r3,[r7,#8]
 306 0014 002B     	 cmp r3,#0
 307 0016 03D1     	 bne .L20
 455:../Dave/Generated/FREERTOS/queue.c ****     {
 456:../Dave/Generated/FREERTOS/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 457:../Dave/Generated/FREERTOS/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 458:../Dave/Generated/FREERTOS/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 459:../Dave/Generated/FREERTOS/queue.c ****          * value that is known to be within the memory map. */
 460:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 308              	 .loc 1 460 0
 309 0018 BB69     	 ldr r3,[r7,#24]
 310 001a BA69     	 ldr r2,[r7,#24]
 311 001c 1A60     	 str r2,[r3]
 312 001e 02E0     	 b .L21
 313              	.L20:
 461:../Dave/Generated/FREERTOS/queue.c ****     }
 462:../Dave/Generated/FREERTOS/queue.c ****     else
 463:../Dave/Generated/FREERTOS/queue.c ****     {
 464:../Dave/Generated/FREERTOS/queue.c ****         /* Set the head to the start of the queue storage area. */
 465:../Dave/Generated/FREERTOS/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 314              	 .loc 1 465 0
 315 0020 BB69     	 ldr r3,[r7,#24]
 316 0022 7A68     	 ldr r2,[r7,#4]
 317 0024 1A60     	 str r2,[r3]
 318              	.L21:
 466:../Dave/Generated/FREERTOS/queue.c ****     }
 467:../Dave/Generated/FREERTOS/queue.c **** 
 468:../Dave/Generated/FREERTOS/queue.c ****     /* Initialise the queue members as described where the queue type is
 469:../Dave/Generated/FREERTOS/queue.c ****      * defined. */
 470:../Dave/Generated/FREERTOS/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 319              	 .loc 1 470 0
 320 0026 BB69     	 ldr r3,[r7,#24]
 321 0028 FA68     	 ldr r2,[r7,#12]
 322 002a DA63     	 str r2,[r3,#60]
 471:../Dave/Generated/FREERTOS/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 323              	 .loc 1 471 0
 324 002c BB69     	 ldr r3,[r7,#24]
 325 002e BA68     	 ldr r2,[r7,#8]
 326 0030 1A64     	 str r2,[r3,#64]
 472:../Dave/Generated/FREERTOS/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 327              	 .loc 1 472 0
 328 0032 BB69     	 ldr r3,[r7,#24]
 329 0034 181C     	 mov r0,r3
 330 0036 0121     	 mov r1,#1
 331 0038 FFF7FEFF 	 bl xQueueGenericReset
 473:../Dave/Generated/FREERTOS/queue.c **** 
 474:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 475:../Dave/Generated/FREERTOS/queue.c ****         {
 476:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->ucQueueType = ucQueueType;
 332              	 .loc 1 476 0
 333 003c BB69     	 ldr r3,[r7,#24]
 334 003e FA1C     	 add r2,r7,#3
 335 0040 5021     	 mov r1,#80
 336 0042 1278     	 ldrb r2,[r2]
 337 0044 5A54     	 strb r2,[r3,r1]
 477:../Dave/Generated/FREERTOS/queue.c ****         }
 478:../Dave/Generated/FREERTOS/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 479:../Dave/Generated/FREERTOS/queue.c **** 
 480:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 481:../Dave/Generated/FREERTOS/queue.c ****         {
 482:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->pxQueueSetContainer = NULL;
 338              	 .loc 1 482 0
 339 0046 BB69     	 ldr r3,[r7,#24]
 340 0048 0022     	 mov r2,#0
 341 004a 9A64     	 str r2,[r3,#72]
 483:../Dave/Generated/FREERTOS/queue.c ****         }
 484:../Dave/Generated/FREERTOS/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 485:../Dave/Generated/FREERTOS/queue.c **** 
 486:../Dave/Generated/FREERTOS/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 487:../Dave/Generated/FREERTOS/queue.c **** }
 342              	 .loc 1 487 0
 343 004c BD46     	 mov sp,r7
 344 004e 04B0     	 add sp,sp,#16
 345              	 
 346 0050 80BD     	 pop {r7,pc}
 347              	 .cfi_endproc
 348              	.LFE44:
 350 0052 C046     	 .section .text.prvInitialiseMutex,"ax",%progbits
 351              	 .align 2
 352              	 .code 16
 353              	 .thumb_func
 355              	prvInitialiseMutex:
 356              	.LFB45:
 488:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 489:../Dave/Generated/FREERTOS/queue.c **** 
 490:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
 491:../Dave/Generated/FREERTOS/queue.c **** 
 492:../Dave/Generated/FREERTOS/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 493:../Dave/Generated/FREERTOS/queue.c ****     {
 357              	 .loc 1 493 0
 358              	 .cfi_startproc
 359 0000 80B5     	 push {r7,lr}
 360              	.LCFI9:
 361              	 .cfi_def_cfa_offset 8
 362              	 .cfi_offset 7,-8
 363              	 .cfi_offset 14,-4
 364 0002 82B0     	 sub sp,sp,#8
 365              	.LCFI10:
 366              	 .cfi_def_cfa_offset 16
 367 0004 00AF     	 add r7,sp,#0
 368              	.LCFI11:
 369              	 .cfi_def_cfa_register 7
 370 0006 7860     	 str r0,[r7,#4]
 494:../Dave/Generated/FREERTOS/queue.c ****         if( pxNewQueue != NULL )
 371              	 .loc 1 494 0
 372 0008 7B68     	 ldr r3,[r7,#4]
 373 000a 002B     	 cmp r3,#0
 374 000c 0FD0     	 beq .L22
 495:../Dave/Generated/FREERTOS/queue.c ****         {
 496:../Dave/Generated/FREERTOS/queue.c ****             /* The queue create function will set all the queue structure members
 497:../Dave/Generated/FREERTOS/queue.c ****             * correctly for a generic queue, but this function is creating a
 498:../Dave/Generated/FREERTOS/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 499:../Dave/Generated/FREERTOS/queue.c ****             * in particular the information required for priority inheritance. */
 500:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 375              	 .loc 1 500 0
 376 000e 7B68     	 ldr r3,[r7,#4]
 377 0010 0022     	 mov r2,#0
 378 0012 9A60     	 str r2,[r3,#8]
 501:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 379              	 .loc 1 501 0
 380 0014 7B68     	 ldr r3,[r7,#4]
 381 0016 0022     	 mov r2,#0
 382 0018 1A60     	 str r2,[r3]
 502:../Dave/Generated/FREERTOS/queue.c **** 
 503:../Dave/Generated/FREERTOS/queue.c ****             /* In case this is a recursive mutex. */
 504:../Dave/Generated/FREERTOS/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 383              	 .loc 1 504 0
 384 001a 7B68     	 ldr r3,[r7,#4]
 385 001c 0022     	 mov r2,#0
 386 001e DA60     	 str r2,[r3,#12]
 505:../Dave/Generated/FREERTOS/queue.c **** 
 506:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 507:../Dave/Generated/FREERTOS/queue.c **** 
 508:../Dave/Generated/FREERTOS/queue.c ****             /* Start with the semaphore in the expected state. */
 509:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 387              	 .loc 1 509 0
 388 0020 7B68     	 ldr r3,[r7,#4]
 389 0022 181C     	 mov r0,r3
 390 0024 0021     	 mov r1,#0
 391 0026 0022     	 mov r2,#0
 392 0028 0023     	 mov r3,#0
 393 002a FFF7FEFF 	 bl xQueueGenericSend
 394              	.L22:
 510:../Dave/Generated/FREERTOS/queue.c ****         }
 511:../Dave/Generated/FREERTOS/queue.c ****         else
 512:../Dave/Generated/FREERTOS/queue.c ****         {
 513:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_MUTEX_FAILED();
 514:../Dave/Generated/FREERTOS/queue.c ****         }
 515:../Dave/Generated/FREERTOS/queue.c ****     }
 395              	 .loc 1 515 0
 396 002e BD46     	 mov sp,r7
 397 0030 02B0     	 add sp,sp,#8
 398              	 
 399 0032 80BD     	 pop {r7,pc}
 400              	 .cfi_endproc
 401              	.LFE45:
 403              	 .section .text.xQueueCreateMutex,"ax",%progbits
 404              	 .align 2
 405              	 .global xQueueCreateMutex
 406              	 .code 16
 407              	 .thumb_func
 409              	xQueueCreateMutex:
 410              	.LFB46:
 516:../Dave/Generated/FREERTOS/queue.c **** 
 517:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 518:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 519:../Dave/Generated/FREERTOS/queue.c **** 
 520:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 521:../Dave/Generated/FREERTOS/queue.c **** 
 522:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 523:../Dave/Generated/FREERTOS/queue.c ****     {
 411              	 .loc 1 523 0
 412              	 .cfi_startproc
 413 0000 80B5     	 push {r7,lr}
 414              	.LCFI12:
 415              	 .cfi_def_cfa_offset 8
 416              	 .cfi_offset 7,-8
 417              	 .cfi_offset 14,-4
 418 0002 86B0     	 sub sp,sp,#24
 419              	.LCFI13:
 420              	 .cfi_def_cfa_offset 32
 421 0004 00AF     	 add r7,sp,#0
 422              	.LCFI14:
 423              	 .cfi_def_cfa_register 7
 424 0006 021C     	 mov r2,r0
 425 0008 FB1D     	 add r3,r7,#7
 426 000a 1A70     	 strb r2,[r3]
 524:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xNewQueue;
 525:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 427              	 .loc 1 525 0
 428 000c 0123     	 mov r3,#1
 429 000e 7B61     	 str r3,[r7,#20]
 430 0010 0023     	 mov r3,#0
 431 0012 3B61     	 str r3,[r7,#16]
 526:../Dave/Generated/FREERTOS/queue.c **** 
 527:../Dave/Generated/FREERTOS/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 432              	 .loc 1 527 0
 433 0014 7969     	 ldr r1,[r7,#20]
 434 0016 3A69     	 ldr r2,[r7,#16]
 435 0018 FB1D     	 add r3,r7,#7
 436 001a 1B78     	 ldrb r3,[r3]
 437 001c 081C     	 mov r0,r1
 438 001e 111C     	 mov r1,r2
 439 0020 1A1C     	 mov r2,r3
 440 0022 FFF7FEFF 	 bl xQueueGenericCreate
 441 0026 031C     	 mov r3,r0
 442 0028 FB60     	 str r3,[r7,#12]
 528:../Dave/Generated/FREERTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 443              	 .loc 1 528 0
 444 002a FB68     	 ldr r3,[r7,#12]
 445 002c 181C     	 mov r0,r3
 446 002e FFF7FEFF 	 bl prvInitialiseMutex
 529:../Dave/Generated/FREERTOS/queue.c **** 
 530:../Dave/Generated/FREERTOS/queue.c ****         return xNewQueue;
 447              	 .loc 1 530 0
 448 0032 FB68     	 ldr r3,[r7,#12]
 531:../Dave/Generated/FREERTOS/queue.c ****     }
 449              	 .loc 1 531 0
 450 0034 181C     	 mov r0,r3
 451 0036 BD46     	 mov sp,r7
 452 0038 06B0     	 add sp,sp,#24
 453              	 
 454 003a 80BD     	 pop {r7,pc}
 455              	 .cfi_endproc
 456              	.LFE46:
 458              	 .section .text.xQueueGetMutexHolder,"ax",%progbits
 459              	 .align 2
 460              	 .global xQueueGetMutexHolder
 461              	 .code 16
 462              	 .thumb_func
 464              	xQueueGetMutexHolder:
 465              	.LFB47:
 532:../Dave/Generated/FREERTOS/queue.c **** 
 533:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 534:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 535:../Dave/Generated/FREERTOS/queue.c **** 
 536:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 537:../Dave/Generated/FREERTOS/queue.c **** 
 538:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 539:../Dave/Generated/FREERTOS/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 540:../Dave/Generated/FREERTOS/queue.c ****     {
 541:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xNewQueue;
 542:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 543:../Dave/Generated/FREERTOS/queue.c **** 
 544:../Dave/Generated/FREERTOS/queue.c ****         /* Prevent compiler warnings about unused parameters if
 545:../Dave/Generated/FREERTOS/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 546:../Dave/Generated/FREERTOS/queue.c ****         ( void ) ucQueueType;
 547:../Dave/Generated/FREERTOS/queue.c **** 
 548:../Dave/Generated/FREERTOS/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 549:../Dave/Generated/FREERTOS/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 550:../Dave/Generated/FREERTOS/queue.c **** 
 551:../Dave/Generated/FREERTOS/queue.c ****         return xNewQueue;
 552:../Dave/Generated/FREERTOS/queue.c ****     }
 553:../Dave/Generated/FREERTOS/queue.c **** 
 554:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 555:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 556:../Dave/Generated/FREERTOS/queue.c **** 
 557:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 558:../Dave/Generated/FREERTOS/queue.c **** 
 559:../Dave/Generated/FREERTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 560:../Dave/Generated/FREERTOS/queue.c ****     {
 466              	 .loc 1 560 0
 467              	 .cfi_startproc
 468 0000 80B5     	 push {r7,lr}
 469              	.LCFI15:
 470              	 .cfi_def_cfa_offset 8
 471              	 .cfi_offset 7,-8
 472              	 .cfi_offset 14,-4
 473 0002 84B0     	 sub sp,sp,#16
 474              	.LCFI16:
 475              	 .cfi_def_cfa_offset 24
 476 0004 00AF     	 add r7,sp,#0
 477              	.LCFI17:
 478              	 .cfi_def_cfa_register 7
 479 0006 7860     	 str r0,[r7,#4]
 561:../Dave/Generated/FREERTOS/queue.c ****         TaskHandle_t pxReturn;
 562:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 480              	 .loc 1 562 0
 481 0008 7B68     	 ldr r3,[r7,#4]
 482 000a BB60     	 str r3,[r7,#8]
 563:../Dave/Generated/FREERTOS/queue.c **** 
 564:../Dave/Generated/FREERTOS/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 565:../Dave/Generated/FREERTOS/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 566:../Dave/Generated/FREERTOS/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 567:../Dave/Generated/FREERTOS/queue.c ****          * identity of the mutex holder, as the holder may change between the
 568:../Dave/Generated/FREERTOS/queue.c ****          * following critical section exiting and the function returning. */
 569:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 483              	 .loc 1 569 0
 484 000c FFF7FEFF 	 bl vPortEnterCritical
 570:../Dave/Generated/FREERTOS/queue.c ****         {
 571:../Dave/Generated/FREERTOS/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 485              	 .loc 1 571 0
 486 0010 BB68     	 ldr r3,[r7,#8]
 487 0012 1B68     	 ldr r3,[r3]
 488 0014 002B     	 cmp r3,#0
 489 0016 03D1     	 bne .L27
 572:../Dave/Generated/FREERTOS/queue.c ****             {
 573:../Dave/Generated/FREERTOS/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 490              	 .loc 1 573 0
 491 0018 BB68     	 ldr r3,[r7,#8]
 492 001a 9B68     	 ldr r3,[r3,#8]
 493 001c FB60     	 str r3,[r7,#12]
 494 001e 01E0     	 b .L28
 495              	.L27:
 574:../Dave/Generated/FREERTOS/queue.c ****             }
 575:../Dave/Generated/FREERTOS/queue.c ****             else
 576:../Dave/Generated/FREERTOS/queue.c ****             {
 577:../Dave/Generated/FREERTOS/queue.c ****                 pxReturn = NULL;
 496              	 .loc 1 577 0
 497 0020 0023     	 mov r3,#0
 498 0022 FB60     	 str r3,[r7,#12]
 499              	.L28:
 578:../Dave/Generated/FREERTOS/queue.c ****             }
 579:../Dave/Generated/FREERTOS/queue.c ****         }
 580:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 500              	 .loc 1 580 0
 501 0024 FFF7FEFF 	 bl vPortExitCritical
 581:../Dave/Generated/FREERTOS/queue.c **** 
 582:../Dave/Generated/FREERTOS/queue.c ****         return pxReturn;
 502              	 .loc 1 582 0
 503 0028 FB68     	 ldr r3,[r7,#12]
 583:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 504              	 .loc 1 583 0
 505 002a 181C     	 mov r0,r3
 506 002c BD46     	 mov sp,r7
 507 002e 04B0     	 add sp,sp,#16
 508              	 
 509 0030 80BD     	 pop {r7,pc}
 510              	 .cfi_endproc
 511              	.LFE47:
 513 0032 C046     	 .section .text.xQueueGetMutexHolderFromISR,"ax",%progbits
 514              	 .align 2
 515              	 .global xQueueGetMutexHolderFromISR
 516              	 .code 16
 517              	 .thumb_func
 519              	xQueueGetMutexHolderFromISR:
 520              	.LFB48:
 584:../Dave/Generated/FREERTOS/queue.c **** 
 585:../Dave/Generated/FREERTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 586:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 587:../Dave/Generated/FREERTOS/queue.c **** 
 588:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 589:../Dave/Generated/FREERTOS/queue.c **** 
 590:../Dave/Generated/FREERTOS/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 591:../Dave/Generated/FREERTOS/queue.c ****     {
 521              	 .loc 1 591 0
 522              	 .cfi_startproc
 523 0000 80B5     	 push {r7,lr}
 524              	.LCFI18:
 525              	 .cfi_def_cfa_offset 8
 526              	 .cfi_offset 7,-8
 527              	 .cfi_offset 14,-4
 528 0002 84B0     	 sub sp,sp,#16
 529              	.LCFI19:
 530              	 .cfi_def_cfa_offset 24
 531 0004 00AF     	 add r7,sp,#0
 532              	.LCFI20:
 533              	 .cfi_def_cfa_register 7
 534 0006 7860     	 str r0,[r7,#4]
 592:../Dave/Generated/FREERTOS/queue.c ****         TaskHandle_t pxReturn;
 593:../Dave/Generated/FREERTOS/queue.c **** 
 594:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( xSemaphore );
 535              	 .loc 1 594 0
 536 0008 7B68     	 ldr r3,[r7,#4]
 537 000a 002B     	 cmp r3,#0
 538 000c 01D1     	 bne .L31
 539              	 .loc 1 594 0 is_stmt 0 discriminator 1
 540              	
 541 000e 72B6     	 cpsid i
 542              	
 543              	 .code 16
 544              	.L32:
 545 0010 FEE7     	 b .L32
 546              	.L31:
 595:../Dave/Generated/FREERTOS/queue.c **** 
 596:../Dave/Generated/FREERTOS/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 597:../Dave/Generated/FREERTOS/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 598:../Dave/Generated/FREERTOS/queue.c ****          * not required here. */
 599:../Dave/Generated/FREERTOS/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 547              	 .loc 1 599 0 is_stmt 1
 548 0012 7B68     	 ldr r3,[r7,#4]
 549 0014 1B68     	 ldr r3,[r3]
 550 0016 002B     	 cmp r3,#0
 551 0018 03D1     	 bne .L33
 600:../Dave/Generated/FREERTOS/queue.c ****         {
 601:../Dave/Generated/FREERTOS/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 552              	 .loc 1 601 0
 553 001a 7B68     	 ldr r3,[r7,#4]
 554 001c 9B68     	 ldr r3,[r3,#8]
 555 001e FB60     	 str r3,[r7,#12]
 556 0020 01E0     	 b .L34
 557              	.L33:
 602:../Dave/Generated/FREERTOS/queue.c ****         }
 603:../Dave/Generated/FREERTOS/queue.c ****         else
 604:../Dave/Generated/FREERTOS/queue.c ****         {
 605:../Dave/Generated/FREERTOS/queue.c ****             pxReturn = NULL;
 558              	 .loc 1 605 0
 559 0022 0023     	 mov r3,#0
 560 0024 FB60     	 str r3,[r7,#12]
 561              	.L34:
 606:../Dave/Generated/FREERTOS/queue.c ****         }
 607:../Dave/Generated/FREERTOS/queue.c **** 
 608:../Dave/Generated/FREERTOS/queue.c ****         return pxReturn;
 562              	 .loc 1 608 0
 563 0026 FB68     	 ldr r3,[r7,#12]
 609:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564              	 .loc 1 609 0
 565 0028 181C     	 mov r0,r3
 566 002a BD46     	 mov sp,r7
 567 002c 04B0     	 add sp,sp,#16
 568              	 
 569 002e 80BD     	 pop {r7,pc}
 570              	 .cfi_endproc
 571              	.LFE48:
 573              	 .section .text.xQueueGiveMutexRecursive,"ax",%progbits
 574              	 .align 2
 575              	 .global xQueueGiveMutexRecursive
 576              	 .code 16
 577              	 .thumb_func
 579              	xQueueGiveMutexRecursive:
 580              	.LFB49:
 610:../Dave/Generated/FREERTOS/queue.c **** 
 611:../Dave/Generated/FREERTOS/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 612:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 613:../Dave/Generated/FREERTOS/queue.c **** 
 614:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 615:../Dave/Generated/FREERTOS/queue.c **** 
 616:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 617:../Dave/Generated/FREERTOS/queue.c ****     {
 581              	 .loc 1 617 0
 582              	 .cfi_startproc
 583 0000 90B5     	 push {r4,r7,lr}
 584              	.LCFI21:
 585              	 .cfi_def_cfa_offset 12
 586              	 .cfi_offset 4,-12
 587              	 .cfi_offset 7,-8
 588              	 .cfi_offset 14,-4
 589 0002 85B0     	 sub sp,sp,#20
 590              	.LCFI22:
 591              	 .cfi_def_cfa_offset 32
 592 0004 00AF     	 add r7,sp,#0
 593              	.LCFI23:
 594              	 .cfi_def_cfa_register 7
 595 0006 7860     	 str r0,[r7,#4]
 618:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
 619:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 596              	 .loc 1 619 0
 597 0008 7B68     	 ldr r3,[r7,#4]
 598 000a BB60     	 str r3,[r7,#8]
 620:../Dave/Generated/FREERTOS/queue.c **** 
 621:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxMutex );
 599              	 .loc 1 621 0
 600 000c BB68     	 ldr r3,[r7,#8]
 601 000e 002B     	 cmp r3,#0
 602 0010 01D1     	 bne .L37
 603              	 .loc 1 621 0 is_stmt 0 discriminator 1
 604              	
 605 0012 72B6     	 cpsid i
 606              	
 607              	 .code 16
 608              	.L38:
 609 0014 FEE7     	 b .L38
 610              	.L37:
 622:../Dave/Generated/FREERTOS/queue.c **** 
 623:../Dave/Generated/FREERTOS/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 624:../Dave/Generated/FREERTOS/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 625:../Dave/Generated/FREERTOS/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 626:../Dave/Generated/FREERTOS/queue.c ****          * this is the only condition we are interested in it does not matter if
 627:../Dave/Generated/FREERTOS/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 628:../Dave/Generated/FREERTOS/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 629:../Dave/Generated/FREERTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 611              	 .loc 1 629 0 is_stmt 1
 612 0016 BB68     	 ldr r3,[r7,#8]
 613 0018 9C68     	 ldr r4,[r3,#8]
 614 001a FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 615 001e 031C     	 mov r3,r0
 616 0020 9C42     	 cmp r4,r3
 617 0022 12D1     	 bne .L39
 630:../Dave/Generated/FREERTOS/queue.c ****         {
 631:../Dave/Generated/FREERTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 632:../Dave/Generated/FREERTOS/queue.c **** 
 633:../Dave/Generated/FREERTOS/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 634:../Dave/Generated/FREERTOS/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 635:../Dave/Generated/FREERTOS/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 636:../Dave/Generated/FREERTOS/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 637:../Dave/Generated/FREERTOS/queue.c ****              * uxRecursiveCallCount member. */
 638:../Dave/Generated/FREERTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 618              	 .loc 1 638 0
 619 0024 BB68     	 ldr r3,[r7,#8]
 620 0026 DB68     	 ldr r3,[r3,#12]
 621 0028 5A1E     	 sub r2,r3,#1
 622 002a BB68     	 ldr r3,[r7,#8]
 623 002c DA60     	 str r2,[r3,#12]
 639:../Dave/Generated/FREERTOS/queue.c **** 
 640:../Dave/Generated/FREERTOS/queue.c ****             /* Has the recursive call count unwound to 0? */
 641:../Dave/Generated/FREERTOS/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 624              	 .loc 1 641 0
 625 002e BB68     	 ldr r3,[r7,#8]
 626 0030 DB68     	 ldr r3,[r3,#12]
 627 0032 002B     	 cmp r3,#0
 628 0034 06D1     	 bne .L40
 642:../Dave/Generated/FREERTOS/queue.c ****             {
 643:../Dave/Generated/FREERTOS/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 644:../Dave/Generated/FREERTOS/queue.c ****                  * task that might be waiting to access the mutex. */
 645:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 629              	 .loc 1 645 0
 630 0036 BB68     	 ldr r3,[r7,#8]
 631 0038 181C     	 mov r0,r3
 632 003a 0021     	 mov r1,#0
 633 003c 0022     	 mov r2,#0
 634 003e 0023     	 mov r3,#0
 635 0040 FFF7FEFF 	 bl xQueueGenericSend
 636              	.L40:
 646:../Dave/Generated/FREERTOS/queue.c ****             }
 647:../Dave/Generated/FREERTOS/queue.c ****             else
 648:../Dave/Generated/FREERTOS/queue.c ****             {
 649:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 650:../Dave/Generated/FREERTOS/queue.c ****             }
 651:../Dave/Generated/FREERTOS/queue.c **** 
 652:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 637              	 .loc 1 652 0
 638 0044 0123     	 mov r3,#1
 639 0046 FB60     	 str r3,[r7,#12]
 640 0048 01E0     	 b .L41
 641              	.L39:
 653:../Dave/Generated/FREERTOS/queue.c ****         }
 654:../Dave/Generated/FREERTOS/queue.c ****         else
 655:../Dave/Generated/FREERTOS/queue.c ****         {
 656:../Dave/Generated/FREERTOS/queue.c ****             /* The mutex cannot be given because the calling task is not the
 657:../Dave/Generated/FREERTOS/queue.c ****              * holder. */
 658:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 642              	 .loc 1 658 0
 643 004a 0023     	 mov r3,#0
 644 004c FB60     	 str r3,[r7,#12]
 645              	.L41:
 659:../Dave/Generated/FREERTOS/queue.c **** 
 660:../Dave/Generated/FREERTOS/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 661:../Dave/Generated/FREERTOS/queue.c ****         }
 662:../Dave/Generated/FREERTOS/queue.c **** 
 663:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 646              	 .loc 1 663 0
 647 004e FB68     	 ldr r3,[r7,#12]
 664:../Dave/Generated/FREERTOS/queue.c ****     }
 648              	 .loc 1 664 0
 649 0050 181C     	 mov r0,r3
 650 0052 BD46     	 mov sp,r7
 651 0054 05B0     	 add sp,sp,#20
 652              	 
 653 0056 90BD     	 pop {r4,r7,pc}
 654              	 .cfi_endproc
 655              	.LFE49:
 657              	 .section .text.xQueueTakeMutexRecursive,"ax",%progbits
 658              	 .align 2
 659              	 .global xQueueTakeMutexRecursive
 660              	 .code 16
 661              	 .thumb_func
 663              	xQueueTakeMutexRecursive:
 664              	.LFB50:
 665:../Dave/Generated/FREERTOS/queue.c **** 
 666:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 668:../Dave/Generated/FREERTOS/queue.c **** 
 669:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 670:../Dave/Generated/FREERTOS/queue.c **** 
 671:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 672:../Dave/Generated/FREERTOS/queue.c ****                                          TickType_t xTicksToWait )
 673:../Dave/Generated/FREERTOS/queue.c ****     {
 665              	 .loc 1 673 0
 666              	 .cfi_startproc
 667 0000 90B5     	 push {r4,r7,lr}
 668              	.LCFI24:
 669              	 .cfi_def_cfa_offset 12
 670              	 .cfi_offset 4,-12
 671              	 .cfi_offset 7,-8
 672              	 .cfi_offset 14,-4
 673 0002 85B0     	 sub sp,sp,#20
 674              	.LCFI25:
 675              	 .cfi_def_cfa_offset 32
 676 0004 00AF     	 add r7,sp,#0
 677              	.LCFI26:
 678              	 .cfi_def_cfa_register 7
 679 0006 7860     	 str r0,[r7,#4]
 680 0008 3960     	 str r1,[r7]
 674:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
 675:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 681              	 .loc 1 675 0
 682 000a 7B68     	 ldr r3,[r7,#4]
 683 000c BB60     	 str r3,[r7,#8]
 676:../Dave/Generated/FREERTOS/queue.c **** 
 677:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxMutex );
 684              	 .loc 1 677 0
 685 000e BB68     	 ldr r3,[r7,#8]
 686 0010 002B     	 cmp r3,#0
 687 0012 01D1     	 bne .L44
 688              	 .loc 1 677 0 is_stmt 0 discriminator 1
 689              	
 690 0014 72B6     	 cpsid i
 691              	
 692              	 .code 16
 693              	.L45:
 694 0016 FEE7     	 b .L45
 695              	.L44:
 678:../Dave/Generated/FREERTOS/queue.c **** 
 679:../Dave/Generated/FREERTOS/queue.c ****         /* Comments regarding mutual exclusion as per those within
 680:../Dave/Generated/FREERTOS/queue.c ****          * xQueueGiveMutexRecursive(). */
 681:../Dave/Generated/FREERTOS/queue.c **** 
 682:../Dave/Generated/FREERTOS/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 683:../Dave/Generated/FREERTOS/queue.c **** 
 684:../Dave/Generated/FREERTOS/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 696              	 .loc 1 684 0 is_stmt 1
 697 0018 BB68     	 ldr r3,[r7,#8]
 698 001a 9C68     	 ldr r4,[r3,#8]
 699 001c FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 700 0020 031C     	 mov r3,r0
 701 0022 9C42     	 cmp r4,r3
 702 0024 07D1     	 bne .L46
 685:../Dave/Generated/FREERTOS/queue.c ****         {
 686:../Dave/Generated/FREERTOS/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 703              	 .loc 1 686 0
 704 0026 BB68     	 ldr r3,[r7,#8]
 705 0028 DB68     	 ldr r3,[r3,#12]
 706 002a 5A1C     	 add r2,r3,#1
 707 002c BB68     	 ldr r3,[r7,#8]
 708 002e DA60     	 str r2,[r3,#12]
 687:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 709              	 .loc 1 687 0
 710 0030 0123     	 mov r3,#1
 711 0032 FB60     	 str r3,[r7,#12]
 712 0034 0FE0     	 b .L47
 713              	.L46:
 688:../Dave/Generated/FREERTOS/queue.c ****         }
 689:../Dave/Generated/FREERTOS/queue.c ****         else
 690:../Dave/Generated/FREERTOS/queue.c ****         {
 691:../Dave/Generated/FREERTOS/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 714              	 .loc 1 691 0
 715 0036 BA68     	 ldr r2,[r7,#8]
 716 0038 3B68     	 ldr r3,[r7]
 717 003a 101C     	 mov r0,r2
 718 003c 191C     	 mov r1,r3
 719 003e FFF7FEFF 	 bl xQueueSemaphoreTake
 720 0042 031C     	 mov r3,r0
 721 0044 FB60     	 str r3,[r7,#12]
 692:../Dave/Generated/FREERTOS/queue.c **** 
 693:../Dave/Generated/FREERTOS/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 694:../Dave/Generated/FREERTOS/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 695:../Dave/Generated/FREERTOS/queue.c ****              * before reaching here. */
 696:../Dave/Generated/FREERTOS/queue.c ****             if( xReturn != pdFAIL )
 722              	 .loc 1 696 0
 723 0046 FB68     	 ldr r3,[r7,#12]
 724 0048 002B     	 cmp r3,#0
 725 004a 04D0     	 beq .L47
 697:../Dave/Generated/FREERTOS/queue.c ****             {
 698:../Dave/Generated/FREERTOS/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 726              	 .loc 1 698 0
 727 004c BB68     	 ldr r3,[r7,#8]
 728 004e DB68     	 ldr r3,[r3,#12]
 729 0050 5A1C     	 add r2,r3,#1
 730 0052 BB68     	 ldr r3,[r7,#8]
 731 0054 DA60     	 str r2,[r3,#12]
 732              	.L47:
 699:../Dave/Generated/FREERTOS/queue.c ****             }
 700:../Dave/Generated/FREERTOS/queue.c ****             else
 701:../Dave/Generated/FREERTOS/queue.c ****             {
 702:../Dave/Generated/FREERTOS/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 703:../Dave/Generated/FREERTOS/queue.c ****             }
 704:../Dave/Generated/FREERTOS/queue.c ****         }
 705:../Dave/Generated/FREERTOS/queue.c **** 
 706:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 733              	 .loc 1 706 0
 734 0056 FB68     	 ldr r3,[r7,#12]
 707:../Dave/Generated/FREERTOS/queue.c ****     }
 735              	 .loc 1 707 0
 736 0058 181C     	 mov r0,r3
 737 005a BD46     	 mov sp,r7
 738 005c 05B0     	 add sp,sp,#20
 739              	 
 740 005e 90BD     	 pop {r4,r7,pc}
 741              	 .cfi_endproc
 742              	.LFE50:
 744              	 .section .text.xQueueCreateCountingSemaphore,"ax",%progbits
 745              	 .align 2
 746              	 .global xQueueCreateCountingSemaphore
 747              	 .code 16
 748              	 .thumb_func
 750              	xQueueCreateCountingSemaphore:
 751              	.LFB51:
 708:../Dave/Generated/FREERTOS/queue.c **** 
 709:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 710:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 711:../Dave/Generated/FREERTOS/queue.c **** 
 712:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 713:../Dave/Generated/FREERTOS/queue.c **** 
 714:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 715:../Dave/Generated/FREERTOS/queue.c ****                                                        const UBaseType_t uxInitialCount,
 716:../Dave/Generated/FREERTOS/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 717:../Dave/Generated/FREERTOS/queue.c ****     {
 718:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xHandle;
 719:../Dave/Generated/FREERTOS/queue.c **** 
 720:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxMaxCount != 0 );
 721:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 722:../Dave/Generated/FREERTOS/queue.c **** 
 723:../Dave/Generated/FREERTOS/queue.c ****         xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, px
 724:../Dave/Generated/FREERTOS/queue.c **** 
 725:../Dave/Generated/FREERTOS/queue.c ****         if( xHandle != NULL )
 726:../Dave/Generated/FREERTOS/queue.c ****         {
 727:../Dave/Generated/FREERTOS/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 728:../Dave/Generated/FREERTOS/queue.c **** 
 729:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 730:../Dave/Generated/FREERTOS/queue.c ****         }
 731:../Dave/Generated/FREERTOS/queue.c ****         else
 732:../Dave/Generated/FREERTOS/queue.c ****         {
 733:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 734:../Dave/Generated/FREERTOS/queue.c ****         }
 735:../Dave/Generated/FREERTOS/queue.c **** 
 736:../Dave/Generated/FREERTOS/queue.c ****         return xHandle;
 737:../Dave/Generated/FREERTOS/queue.c ****     }
 738:../Dave/Generated/FREERTOS/queue.c **** 
 739:../Dave/Generated/FREERTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 740:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 741:../Dave/Generated/FREERTOS/queue.c **** 
 742:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 743:../Dave/Generated/FREERTOS/queue.c **** 
 744:../Dave/Generated/FREERTOS/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 745:../Dave/Generated/FREERTOS/queue.c ****                                                  const UBaseType_t uxInitialCount )
 746:../Dave/Generated/FREERTOS/queue.c ****     {
 752              	 .loc 1 746 0
 753              	 .cfi_startproc
 754 0000 80B5     	 push {r7,lr}
 755              	.LCFI27:
 756              	 .cfi_def_cfa_offset 8
 757              	 .cfi_offset 7,-8
 758              	 .cfi_offset 14,-4
 759 0002 84B0     	 sub sp,sp,#16
 760              	.LCFI28:
 761              	 .cfi_def_cfa_offset 24
 762 0004 00AF     	 add r7,sp,#0
 763              	.LCFI29:
 764              	 .cfi_def_cfa_register 7
 765 0006 7860     	 str r0,[r7,#4]
 766 0008 3960     	 str r1,[r7]
 747:../Dave/Generated/FREERTOS/queue.c ****         QueueHandle_t xHandle;
 748:../Dave/Generated/FREERTOS/queue.c **** 
 749:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxMaxCount != 0 );
 767              	 .loc 1 749 0
 768 000a 7B68     	 ldr r3,[r7,#4]
 769 000c 002B     	 cmp r3,#0
 770 000e 01D1     	 bne .L50
 771              	 .loc 1 749 0 is_stmt 0 discriminator 1
 772              	
 773 0010 72B6     	 cpsid i
 774              	
 775              	 .code 16
 776              	.L51:
 777 0012 FEE7     	 b .L51
 778              	.L50:
 750:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( uxInitialCount <= uxMaxCount );
 779              	 .loc 1 750 0 is_stmt 1
 780 0014 3A68     	 ldr r2,[r7]
 781 0016 7B68     	 ldr r3,[r7,#4]
 782 0018 9A42     	 cmp r2,r3
 783 001a 01D9     	 bls .L52
 784              	 .loc 1 750 0 is_stmt 0 discriminator 1
 785              	
 786 001c 72B6     	 cpsid i
 787              	
 788              	 .code 16
 789              	.L53:
 790              	 .loc 1 750 0 discriminator 2
 791 001e FEE7     	 b .L53
 792              	.L52:
 751:../Dave/Generated/FREERTOS/queue.c **** 
 752:../Dave/Generated/FREERTOS/queue.c ****         xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYP
 793              	 .loc 1 752 0 is_stmt 1
 794 0020 7B68     	 ldr r3,[r7,#4]
 795 0022 181C     	 mov r0,r3
 796 0024 0021     	 mov r1,#0
 797 0026 0222     	 mov r2,#2
 798 0028 FFF7FEFF 	 bl xQueueGenericCreate
 799 002c 031C     	 mov r3,r0
 800 002e FB60     	 str r3,[r7,#12]
 753:../Dave/Generated/FREERTOS/queue.c **** 
 754:../Dave/Generated/FREERTOS/queue.c ****         if( xHandle != NULL )
 801              	 .loc 1 754 0
 802 0030 FB68     	 ldr r3,[r7,#12]
 803 0032 002B     	 cmp r3,#0
 804 0034 02D0     	 beq .L54
 755:../Dave/Generated/FREERTOS/queue.c ****         {
 756:../Dave/Generated/FREERTOS/queue.c ****             ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 805              	 .loc 1 756 0
 806 0036 FB68     	 ldr r3,[r7,#12]
 807 0038 3A68     	 ldr r2,[r7]
 808 003a 9A63     	 str r2,[r3,#56]
 809              	.L54:
 757:../Dave/Generated/FREERTOS/queue.c **** 
 758:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE();
 759:../Dave/Generated/FREERTOS/queue.c ****         }
 760:../Dave/Generated/FREERTOS/queue.c ****         else
 761:../Dave/Generated/FREERTOS/queue.c ****         {
 762:../Dave/Generated/FREERTOS/queue.c ****             traceCREATE_COUNTING_SEMAPHORE_FAILED();
 763:../Dave/Generated/FREERTOS/queue.c ****         }
 764:../Dave/Generated/FREERTOS/queue.c **** 
 765:../Dave/Generated/FREERTOS/queue.c ****         return xHandle;
 810              	 .loc 1 765 0
 811 003c FB68     	 ldr r3,[r7,#12]
 766:../Dave/Generated/FREERTOS/queue.c ****     }
 812              	 .loc 1 766 0
 813 003e 181C     	 mov r0,r3
 814 0040 BD46     	 mov sp,r7
 815 0042 04B0     	 add sp,sp,#16
 816              	 
 817 0044 80BD     	 pop {r7,pc}
 818              	 .cfi_endproc
 819              	.LFE51:
 821 0046 C046     	 .section .text.xQueueGenericSend,"ax",%progbits
 822              	 .align 2
 823              	 .global xQueueGenericSend
 824              	 .code 16
 825              	 .thumb_func
 827              	xQueueGenericSend:
 828              	.LFB52:
 767:../Dave/Generated/FREERTOS/queue.c **** 
 768:../Dave/Generated/FREERTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 769:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 770:../Dave/Generated/FREERTOS/queue.c **** 
 771:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 772:../Dave/Generated/FREERTOS/queue.c ****                               const void * const pvItemToQueue,
 773:../Dave/Generated/FREERTOS/queue.c ****                               TickType_t xTicksToWait,
 774:../Dave/Generated/FREERTOS/queue.c ****                               const BaseType_t xCopyPosition )
 775:../Dave/Generated/FREERTOS/queue.c **** {
 829              	 .loc 1 775 0
 830              	 .cfi_startproc
 831 0000 80B5     	 push {r7,lr}
 832              	.LCFI30:
 833              	 .cfi_def_cfa_offset 8
 834              	 .cfi_offset 7,-8
 835              	 .cfi_offset 14,-4
 836 0002 8AB0     	 sub sp,sp,#40
 837              	.LCFI31:
 838              	 .cfi_def_cfa_offset 48
 839 0004 00AF     	 add r7,sp,#0
 840              	.LCFI32:
 841              	 .cfi_def_cfa_register 7
 842 0006 F860     	 str r0,[r7,#12]
 843 0008 B960     	 str r1,[r7,#8]
 844 000a 7A60     	 str r2,[r7,#4]
 845 000c 3B60     	 str r3,[r7]
 776:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 846              	 .loc 1 776 0
 847 000e 0023     	 mov r3,#0
 848 0010 7B62     	 str r3,[r7,#36]
 777:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
 778:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 849              	 .loc 1 778 0
 850 0012 FB68     	 ldr r3,[r7,#12]
 851 0014 3B62     	 str r3,[r7,#32]
 779:../Dave/Generated/FREERTOS/queue.c **** 
 780:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 852              	 .loc 1 780 0
 853 0016 3B6A     	 ldr r3,[r7,#32]
 854 0018 002B     	 cmp r3,#0
 855 001a 01D1     	 bne .L57
 856              	 .loc 1 780 0 is_stmt 0 discriminator 1
 857              	
 858 001c 72B6     	 cpsid i
 859              	
 860              	 .code 16
 861              	.L58:
 862 001e FEE7     	 b .L58
 863              	.L57:
 781:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 864              	 .loc 1 781 0 is_stmt 1
 865 0020 BB68     	 ldr r3,[r7,#8]
 866 0022 002B     	 cmp r3,#0
 867 0024 03D1     	 bne .L59
 868              	 .loc 1 781 0 is_stmt 0 discriminator 2
 869 0026 3B6A     	 ldr r3,[r7,#32]
 870 0028 1B6C     	 ldr r3,[r3,#64]
 871 002a 002B     	 cmp r3,#0
 872 002c 01D1     	 bne .L60
 873              	.L59:
 874              	 .loc 1 781 0 discriminator 3
 875 002e 0123     	 mov r3,#1
 876 0030 00E0     	 b .L61
 877              	.L60:
 878              	 .loc 1 781 0 discriminator 4
 879 0032 0023     	 mov r3,#0
 880              	.L61:
 881              	 .loc 1 781 0 discriminator 6
 882 0034 002B     	 cmp r3,#0
 883 0036 01D1     	 bne .L62
 884              	 .loc 1 781 0 discriminator 7
 885              	
 886 0038 72B6     	 cpsid i
 887              	
 888              	 .code 16
 889              	.L63:
 890              	 .loc 1 781 0 discriminator 2
 891 003a FEE7     	 b .L63
 892              	.L62:
 782:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 893              	 .loc 1 782 0 is_stmt 1
 894 003c 3B68     	 ldr r3,[r7]
 895 003e 022B     	 cmp r3,#2
 896 0040 03D1     	 bne .L64
 897              	 .loc 1 782 0 is_stmt 0 discriminator 2
 898 0042 3B6A     	 ldr r3,[r7,#32]
 899 0044 DB6B     	 ldr r3,[r3,#60]
 900 0046 012B     	 cmp r3,#1
 901 0048 01D1     	 bne .L65
 902              	.L64:
 903              	 .loc 1 782 0 discriminator 3
 904 004a 0123     	 mov r3,#1
 905 004c 00E0     	 b .L66
 906              	.L65:
 907              	 .loc 1 782 0 discriminator 4
 908 004e 0023     	 mov r3,#0
 909              	.L66:
 910              	 .loc 1 782 0 discriminator 6
 911 0050 002B     	 cmp r3,#0
 912 0052 01D1     	 bne .L67
 913              	 .loc 1 782 0 discriminator 7
 914              	
 915 0054 72B6     	 cpsid i
 916              	
 917              	 .code 16
 918              	.L68:
 919              	 .loc 1 782 0 discriminator 3
 920 0056 FEE7     	 b .L68
 921              	.L67:
 783:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 784:../Dave/Generated/FREERTOS/queue.c ****         {
 785:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 922              	 .loc 1 785 0 is_stmt 1
 923 0058 FFF7FEFF 	 bl xTaskGetSchedulerState
 924 005c 031E     	 sub r3,r0,#0
 925 005e 02D1     	 bne .L69
 926              	 .loc 1 785 0 is_stmt 0 discriminator 2
 927 0060 7B68     	 ldr r3,[r7,#4]
 928 0062 002B     	 cmp r3,#0
 929 0064 01D1     	 bne .L70
 930              	.L69:
 931              	 .loc 1 785 0 discriminator 3
 932 0066 0123     	 mov r3,#1
 933 0068 00E0     	 b .L71
 934              	.L70:
 935              	 .loc 1 785 0 discriminator 4
 936 006a 0023     	 mov r3,#0
 937              	.L71:
 938              	 .loc 1 785 0 discriminator 6
 939 006c 002B     	 cmp r3,#0
 940 006e 01D1     	 bne .L72
 941              	 .loc 1 785 0 discriminator 7
 942              	
 943 0070 72B6     	 cpsid i
 944              	
 945              	 .code 16
 946              	.L73:
 947              	 .loc 1 785 0 discriminator 4
 948 0072 FEE7     	 b .L73
 949              	.L72:
 786:../Dave/Generated/FREERTOS/queue.c ****         }
 787:../Dave/Generated/FREERTOS/queue.c ****     #endif
 788:../Dave/Generated/FREERTOS/queue.c **** 
 789:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 790:../Dave/Generated/FREERTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
 791:../Dave/Generated/FREERTOS/queue.c ****      * interest of execution time efficiency. */
 792:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
 793:../Dave/Generated/FREERTOS/queue.c ****     {
 794:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 950              	 .loc 1 794 0 is_stmt 1
 951 0074 FFF7FEFF 	 bl vPortEnterCritical
 795:../Dave/Generated/FREERTOS/queue.c ****         {
 796:../Dave/Generated/FREERTOS/queue.c ****             /* Is there room on the queue now?  The running task must be the
 797:../Dave/Generated/FREERTOS/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 798:../Dave/Generated/FREERTOS/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 799:../Dave/Generated/FREERTOS/queue.c ****              * queue is full. */
 800:../Dave/Generated/FREERTOS/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 952              	 .loc 1 800 0
 953 0078 3B6A     	 ldr r3,[r7,#32]
 954 007a 9A6B     	 ldr r2,[r3,#56]
 955 007c 3B6A     	 ldr r3,[r7,#32]
 956 007e DB6B     	 ldr r3,[r3,#60]
 957 0080 9A42     	 cmp r2,r3
 958 0082 02D3     	 bcc .L74
 959              	 .loc 1 800 0 is_stmt 0 discriminator 1
 960 0084 3B68     	 ldr r3,[r7]
 961 0086 022B     	 cmp r3,#2
 962 0088 38D1     	 bne .L75
 963              	.L74:
 964              	.LBB2:
 801:../Dave/Generated/FREERTOS/queue.c ****             {
 802:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_SEND( pxQueue );
 803:../Dave/Generated/FREERTOS/queue.c **** 
 804:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 805:../Dave/Generated/FREERTOS/queue.c ****                     {
 806:../Dave/Generated/FREERTOS/queue.c ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 965              	 .loc 1 806 0 is_stmt 1
 966 008a 3B6A     	 ldr r3,[r7,#32]
 967 008c 9B6B     	 ldr r3,[r3,#56]
 968 008e FB61     	 str r3,[r7,#28]
 807:../Dave/Generated/FREERTOS/queue.c **** 
 808:../Dave/Generated/FREERTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 969              	 .loc 1 808 0
 970 0090 396A     	 ldr r1,[r7,#32]
 971 0092 BA68     	 ldr r2,[r7,#8]
 972 0094 3B68     	 ldr r3,[r7]
 973 0096 081C     	 mov r0,r1
 974 0098 111C     	 mov r1,r2
 975 009a 1A1C     	 mov r2,r3
 976 009c FFF7FEFF 	 bl prvCopyDataToQueue
 977 00a0 031C     	 mov r3,r0
 978 00a2 BB61     	 str r3,[r7,#24]
 809:../Dave/Generated/FREERTOS/queue.c **** 
 810:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 979              	 .loc 1 810 0
 980 00a4 3B6A     	 ldr r3,[r7,#32]
 981 00a6 9B6C     	 ldr r3,[r3,#72]
 982 00a8 002B     	 cmp r3,#0
 983 00aa 10D0     	 beq .L76
 811:../Dave/Generated/FREERTOS/queue.c ****                         {
 812:../Dave/Generated/FREERTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 984              	 .loc 1 812 0
 985 00ac 3B68     	 ldr r3,[r7]
 986 00ae 022B     	 cmp r3,#2
 987 00b0 04D1     	 bne .L77
 988              	 .loc 1 812 0 is_stmt 0 discriminator 1
 989 00b2 FB69     	 ldr r3,[r7,#28]
 990 00b4 002B     	 cmp r3,#0
 991 00b6 01D0     	 beq .L77
 992              	 .loc 1 812 0
 993 00b8 C046     	 mov r8,r8
 994 00ba 1BE0     	 b .L79
 995              	.L77:
 813:../Dave/Generated/FREERTOS/queue.c ****                             {
 814:../Dave/Generated/FREERTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
 815:../Dave/Generated/FREERTOS/queue.c ****                                  * was overwritten in the queue so the number of items
 816:../Dave/Generated/FREERTOS/queue.c ****                                  * in the queue has not changed. */
 817:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 818:../Dave/Generated/FREERTOS/queue.c ****                             }
 819:../Dave/Generated/FREERTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 996              	 .loc 1 819 0 is_stmt 1
 997 00bc 3B6A     	 ldr r3,[r7,#32]
 998 00be 181C     	 mov r0,r3
 999 00c0 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1000 00c4 031E     	 sub r3,r0,#0
 1001 00c6 15D0     	 beq .L79
 820:../Dave/Generated/FREERTOS/queue.c ****                             {
 821:../Dave/Generated/FREERTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
 822:../Dave/Generated/FREERTOS/queue.c ****                                  * to the queue set caused a higher priority task to
 823:../Dave/Generated/FREERTOS/queue.c ****                                  * unblock. A context switch is required. */
 824:../Dave/Generated/FREERTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 1002              	 .loc 1 824 0
 1003 00c8 FFF7FEFF 	 bl vPortYield
 1004 00cc 12E0     	 b .L79
 1005              	.L76:
 825:../Dave/Generated/FREERTOS/queue.c ****                             }
 826:../Dave/Generated/FREERTOS/queue.c ****                             else
 827:../Dave/Generated/FREERTOS/queue.c ****                             {
 828:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 829:../Dave/Generated/FREERTOS/queue.c ****                             }
 830:../Dave/Generated/FREERTOS/queue.c ****                         }
 831:../Dave/Generated/FREERTOS/queue.c ****                         else
 832:../Dave/Generated/FREERTOS/queue.c ****                         {
 833:../Dave/Generated/FREERTOS/queue.c ****                             /* If there was a task waiting for data to arrive on the
 834:../Dave/Generated/FREERTOS/queue.c ****                              * queue then unblock it now. */
 835:../Dave/Generated/FREERTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 1006              	 .loc 1 835 0
 1007 00ce 3B6A     	 ldr r3,[r7,#32]
 1008 00d0 5B6A     	 ldr r3,[r3,#36]
 1009 00d2 002B     	 cmp r3,#0
 1010 00d4 09D0     	 beq .L80
 836:../Dave/Generated/FREERTOS/queue.c ****                             {
 837:../Dave/Generated/FREERTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 1011              	 .loc 1 837 0
 1012 00d6 3B6A     	 ldr r3,[r7,#32]
 1013 00d8 2433     	 add r3,r3,#36
 1014 00da 181C     	 mov r0,r3
 1015 00dc FFF7FEFF 	 bl xTaskRemoveFromEventList
 1016 00e0 031E     	 sub r3,r0,#0
 1017 00e2 07D0     	 beq .L79
 838:../Dave/Generated/FREERTOS/queue.c ****                                 {
 839:../Dave/Generated/FREERTOS/queue.c ****                                     /* The unblocked task has a priority higher than
 840:../Dave/Generated/FREERTOS/queue.c ****                                      * our own so yield immediately.  Yes it is ok to
 841:../Dave/Generated/FREERTOS/queue.c ****                                      * do this from within the critical section - the
 842:../Dave/Generated/FREERTOS/queue.c ****                                      * kernel takes care of that. */
 843:../Dave/Generated/FREERTOS/queue.c ****                                     queueYIELD_IF_USING_PREEMPTION();
 1018              	 .loc 1 843 0
 1019 00e4 FFF7FEFF 	 bl vPortYield
 1020 00e8 04E0     	 b .L79
 1021              	.L80:
 844:../Dave/Generated/FREERTOS/queue.c ****                                 }
 845:../Dave/Generated/FREERTOS/queue.c ****                                 else
 846:../Dave/Generated/FREERTOS/queue.c ****                                 {
 847:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
 848:../Dave/Generated/FREERTOS/queue.c ****                                 }
 849:../Dave/Generated/FREERTOS/queue.c ****                             }
 850:../Dave/Generated/FREERTOS/queue.c ****                             else if( xYieldRequired != pdFALSE )
 1022              	 .loc 1 850 0
 1023 00ea BB69     	 ldr r3,[r7,#24]
 1024 00ec 002B     	 cmp r3,#0
 1025 00ee 01D0     	 beq .L79
 851:../Dave/Generated/FREERTOS/queue.c ****                             {
 852:../Dave/Generated/FREERTOS/queue.c ****                                 /* This path is a special case that will only get
 853:../Dave/Generated/FREERTOS/queue.c ****                                  * executed if the task was holding multiple mutexes
 854:../Dave/Generated/FREERTOS/queue.c ****                                  * and the mutexes were given back in an order that is
 855:../Dave/Generated/FREERTOS/queue.c ****                                  * different to that in which they were taken. */
 856:../Dave/Generated/FREERTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 1026              	 .loc 1 856 0
 1027 00f0 FFF7FEFF 	 bl vPortYield
 1028              	.L79:
 1029              	.LBE2:
 857:../Dave/Generated/FREERTOS/queue.c ****                             }
 858:../Dave/Generated/FREERTOS/queue.c ****                             else
 859:../Dave/Generated/FREERTOS/queue.c ****                             {
 860:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 861:../Dave/Generated/FREERTOS/queue.c ****                             }
 862:../Dave/Generated/FREERTOS/queue.c ****                         }
 863:../Dave/Generated/FREERTOS/queue.c ****                     }
 864:../Dave/Generated/FREERTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 865:../Dave/Generated/FREERTOS/queue.c ****                     {
 866:../Dave/Generated/FREERTOS/queue.c ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 867:../Dave/Generated/FREERTOS/queue.c **** 
 868:../Dave/Generated/FREERTOS/queue.c ****                         /* If there was a task waiting for data to arrive on the
 869:../Dave/Generated/FREERTOS/queue.c ****                          * queue then unblock it now. */
 870:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 871:../Dave/Generated/FREERTOS/queue.c ****                         {
 872:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 873:../Dave/Generated/FREERTOS/queue.c ****                             {
 874:../Dave/Generated/FREERTOS/queue.c ****                                 /* The unblocked task has a priority higher than
 875:../Dave/Generated/FREERTOS/queue.c ****                                  * our own so yield immediately.  Yes it is ok to do
 876:../Dave/Generated/FREERTOS/queue.c ****                                  * this from within the critical section - the kernel
 877:../Dave/Generated/FREERTOS/queue.c ****                                  * takes care of that. */
 878:../Dave/Generated/FREERTOS/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 879:../Dave/Generated/FREERTOS/queue.c ****                             }
 880:../Dave/Generated/FREERTOS/queue.c ****                             else
 881:../Dave/Generated/FREERTOS/queue.c ****                             {
 882:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 883:../Dave/Generated/FREERTOS/queue.c ****                             }
 884:../Dave/Generated/FREERTOS/queue.c ****                         }
 885:../Dave/Generated/FREERTOS/queue.c ****                         else if( xYieldRequired != pdFALSE )
 886:../Dave/Generated/FREERTOS/queue.c ****                         {
 887:../Dave/Generated/FREERTOS/queue.c ****                             /* This path is a special case that will only get
 888:../Dave/Generated/FREERTOS/queue.c ****                              * executed if the task was holding multiple mutexes and
 889:../Dave/Generated/FREERTOS/queue.c ****                              * the mutexes were given back in an order that is
 890:../Dave/Generated/FREERTOS/queue.c ****                              * different to that in which they were taken. */
 891:../Dave/Generated/FREERTOS/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 892:../Dave/Generated/FREERTOS/queue.c ****                         }
 893:../Dave/Generated/FREERTOS/queue.c ****                         else
 894:../Dave/Generated/FREERTOS/queue.c ****                         {
 895:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 896:../Dave/Generated/FREERTOS/queue.c ****                         }
 897:../Dave/Generated/FREERTOS/queue.c ****                     }
 898:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
 899:../Dave/Generated/FREERTOS/queue.c **** 
 900:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 1030              	 .loc 1 900 0
 1031 00f4 FFF7FEFF 	 bl vPortExitCritical
 901:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 1032              	 .loc 1 901 0
 1033 00f8 0123     	 mov r3,#1
 1034 00fa 60E0     	 b .L91
 1035              	.L75:
 902:../Dave/Generated/FREERTOS/queue.c ****             }
 903:../Dave/Generated/FREERTOS/queue.c ****             else
 904:../Dave/Generated/FREERTOS/queue.c ****             {
 905:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 1036              	 .loc 1 905 0
 1037 00fc 7B68     	 ldr r3,[r7,#4]
 1038 00fe 002B     	 cmp r3,#0
 1039 0100 03D1     	 bne .L82
 906:../Dave/Generated/FREERTOS/queue.c ****                 {
 907:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was full and no block time is specified (or
 908:../Dave/Generated/FREERTOS/queue.c ****                      * the block time has expired) so leave now. */
 909:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 1040              	 .loc 1 909 0
 1041 0102 FFF7FEFF 	 bl vPortExitCritical
 910:../Dave/Generated/FREERTOS/queue.c **** 
 911:../Dave/Generated/FREERTOS/queue.c ****                     /* Return to the original privilege level before exiting
 912:../Dave/Generated/FREERTOS/queue.c ****                      * the function. */
 913:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
 914:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_FULL;
 1042              	 .loc 1 914 0
 1043 0106 0023     	 mov r3,#0
 1044 0108 59E0     	 b .L91
 1045              	.L82:
 915:../Dave/Generated/FREERTOS/queue.c ****                 }
 916:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 1046              	 .loc 1 916 0
 1047 010a 7B6A     	 ldr r3,[r7,#36]
 1048 010c 002B     	 cmp r3,#0
 1049 010e 06D1     	 bne .L83
 917:../Dave/Generated/FREERTOS/queue.c ****                 {
 918:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was full and a block time was specified so
 919:../Dave/Generated/FREERTOS/queue.c ****                      * configure the timeout structure. */
 920:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 1050              	 .loc 1 920 0
 1051 0110 1023     	 mov r3,#16
 1052 0112 FB18     	 add r3,r7,r3
 1053 0114 181C     	 mov r0,r3
 1054 0116 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
 921:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 1055              	 .loc 1 921 0
 1056 011a 0123     	 mov r3,#1
 1057 011c 7B62     	 str r3,[r7,#36]
 1058              	.L83:
 922:../Dave/Generated/FREERTOS/queue.c ****                 }
 923:../Dave/Generated/FREERTOS/queue.c ****                 else
 924:../Dave/Generated/FREERTOS/queue.c ****                 {
 925:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
 926:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 927:../Dave/Generated/FREERTOS/queue.c ****                 }
 928:../Dave/Generated/FREERTOS/queue.c ****             }
 929:../Dave/Generated/FREERTOS/queue.c ****         }
 930:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 1059              	 .loc 1 930 0
 1060 011e FFF7FEFF 	 bl vPortExitCritical
 931:../Dave/Generated/FREERTOS/queue.c **** 
 932:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
 933:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
 934:../Dave/Generated/FREERTOS/queue.c **** 
 935:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 1061              	 .loc 1 935 0
 1062 0122 FFF7FEFF 	 bl vTaskSuspendAll
 936:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 1063              	 .loc 1 936 0
 1064 0126 FFF7FEFF 	 bl vPortEnterCritical
 1065 012a 3B6A     	 ldr r3,[r7,#32]
 1066 012c 4422     	 mov r2,#68
 1067 012e 9B5C     	 ldrb r3,[r3,r2]
 1068 0130 DBB2     	 uxtb r3,r3
 1069 0132 5BB2     	 sxtb r3,r3
 1070 0134 0133     	 add r3,r3,#1
 1071 0136 03D1     	 bne .L84
 1072              	 .loc 1 936 0 is_stmt 0 discriminator 1
 1073 0138 3B6A     	 ldr r3,[r7,#32]
 1074 013a 4422     	 mov r2,#68
 1075 013c 0021     	 mov r1,#0
 1076 013e 9954     	 strb r1,[r3,r2]
 1077              	.L84:
 1078              	 .loc 1 936 0 discriminator 3
 1079 0140 3B6A     	 ldr r3,[r7,#32]
 1080 0142 4522     	 mov r2,#69
 1081 0144 9B5C     	 ldrb r3,[r3,r2]
 1082 0146 DBB2     	 uxtb r3,r3
 1083 0148 5BB2     	 sxtb r3,r3
 1084 014a 0133     	 add r3,r3,#1
 1085 014c 03D1     	 bne .L85
 1086              	 .loc 1 936 0 discriminator 4
 1087 014e 3B6A     	 ldr r3,[r7,#32]
 1088 0150 4522     	 mov r2,#69
 1089 0152 0021     	 mov r1,#0
 1090 0154 9954     	 strb r1,[r3,r2]
 1091              	.L85:
 1092              	 .loc 1 936 0 discriminator 6
 1093 0156 FFF7FEFF 	 bl vPortExitCritical
 937:../Dave/Generated/FREERTOS/queue.c **** 
 938:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
 939:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1094              	 .loc 1 939 0 is_stmt 1 discriminator 6
 1095 015a 1023     	 mov r3,#16
 1096 015c FA18     	 add r2,r7,r3
 1097 015e 3B1D     	 add r3,r7,#4
 1098 0160 101C     	 mov r0,r2
 1099 0162 191C     	 mov r1,r3
 1100 0164 FFF7FEFF 	 bl xTaskCheckForTimeOut
 1101 0168 031E     	 sub r3,r0,#0
 1102 016a 1FD1     	 bne .L86
 940:../Dave/Generated/FREERTOS/queue.c ****         {
 941:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 1103              	 .loc 1 941 0
 1104 016c 3B6A     	 ldr r3,[r7,#32]
 1105 016e 181C     	 mov r0,r3
 1106 0170 FFF7FEFF 	 bl prvIsQueueFull
 1107 0174 031E     	 sub r3,r0,#0
 1108 0176 12D0     	 beq .L87
 942:../Dave/Generated/FREERTOS/queue.c ****             {
 943:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 944:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1109              	 .loc 1 944 0
 1110 0178 3B6A     	 ldr r3,[r7,#32]
 1111 017a 1033     	 add r3,r3,#16
 1112 017c 1A1C     	 mov r2,r3
 1113 017e 7B68     	 ldr r3,[r7,#4]
 1114 0180 101C     	 mov r0,r2
 1115 0182 191C     	 mov r1,r3
 1116 0184 FFF7FEFF 	 bl vTaskPlaceOnEventList
 945:../Dave/Generated/FREERTOS/queue.c **** 
 946:../Dave/Generated/FREERTOS/queue.c ****                 /* Unlocking the queue means queue events can effect the
 947:../Dave/Generated/FREERTOS/queue.c ****                  * event list.  It is possible that interrupts occurring now
 948:../Dave/Generated/FREERTOS/queue.c ****                  * remove this task from the event list again - but as the
 949:../Dave/Generated/FREERTOS/queue.c ****                  * scheduler is suspended the task will go onto the pending
 950:../Dave/Generated/FREERTOS/queue.c ****                  * ready last instead of the actual ready list. */
 951:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1117              	 .loc 1 951 0
 1118 0188 3B6A     	 ldr r3,[r7,#32]
 1119 018a 181C     	 mov r0,r3
 1120 018c FFF7FEFF 	 bl prvUnlockQueue
 952:../Dave/Generated/FREERTOS/queue.c **** 
 953:../Dave/Generated/FREERTOS/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
 954:../Dave/Generated/FREERTOS/queue.c ****                  * ready list into the ready list - so it is feasible that this
 955:../Dave/Generated/FREERTOS/queue.c ****                  * task is already in a ready list before it yields - in which
 956:../Dave/Generated/FREERTOS/queue.c ****                  * case the yield will not cause a context switch unless there
 957:../Dave/Generated/FREERTOS/queue.c ****                  * is also a higher priority task in the pending ready list. */
 958:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 1121              	 .loc 1 958 0
 1122 0190 FFF7FEFF 	 bl xTaskResumeAll
 1123 0194 031E     	 sub r3,r0,#0
 1124 0196 11D1     	 bne .L90
 959:../Dave/Generated/FREERTOS/queue.c ****                 {
 960:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 1125              	 .loc 1 960 0
 1126 0198 FFF7FEFF 	 bl vPortYield
 1127 019c 0EE0     	 b .L90
 1128              	.L87:
 961:../Dave/Generated/FREERTOS/queue.c ****                 }
 962:../Dave/Generated/FREERTOS/queue.c ****             }
 963:../Dave/Generated/FREERTOS/queue.c ****             else
 964:../Dave/Generated/FREERTOS/queue.c ****             {
 965:../Dave/Generated/FREERTOS/queue.c ****                 /* Try again. */
 966:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1129              	 .loc 1 966 0
 1130 019e 3B6A     	 ldr r3,[r7,#32]
 1131 01a0 181C     	 mov r0,r3
 1132 01a2 FFF7FEFF 	 bl prvUnlockQueue
 967:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1133              	 .loc 1 967 0
 1134 01a6 FFF7FEFF 	 bl xTaskResumeAll
 1135 01aa 63E7     	 b .L72
 1136              	.L86:
 968:../Dave/Generated/FREERTOS/queue.c ****             }
 969:../Dave/Generated/FREERTOS/queue.c ****         }
 970:../Dave/Generated/FREERTOS/queue.c ****         else
 971:../Dave/Generated/FREERTOS/queue.c ****         {
 972:../Dave/Generated/FREERTOS/queue.c ****             /* The timeout has expired. */
 973:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 1137              	 .loc 1 973 0
 1138 01ac 3B6A     	 ldr r3,[r7,#32]
 1139 01ae 181C     	 mov r0,r3
 1140 01b0 FFF7FEFF 	 bl prvUnlockQueue
 974:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 1141              	 .loc 1 974 0
 1142 01b4 FFF7FEFF 	 bl xTaskResumeAll
 975:../Dave/Generated/FREERTOS/queue.c **** 
 976:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
 977:../Dave/Generated/FREERTOS/queue.c ****             return errQUEUE_FULL;
 1143              	 .loc 1 977 0
 1144 01b8 0023     	 mov r3,#0
 1145 01ba 00E0     	 b .L91
 1146              	.L90:
 978:../Dave/Generated/FREERTOS/queue.c ****         }
 979:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 1147              	 .loc 1 979 0 discriminator 7
 1148 01bc 5AE7     	 b .L72
 1149              	.L91:
 980:../Dave/Generated/FREERTOS/queue.c **** }
 1150              	 .loc 1 980 0 discriminator 8
 1151 01be 181C     	 mov r0,r3
 1152 01c0 BD46     	 mov sp,r7
 1153 01c2 0AB0     	 add sp,sp,#40
 1154              	 
 1155 01c4 80BD     	 pop {r7,pc}
 1156              	 .cfi_endproc
 1157              	.LFE52:
 1159              	 .section .text.xQueueGenericSendFromISR,"ax",%progbits
 1160              	 .align 2
 1161              	 .global xQueueGenericSendFromISR
 1162              	 .code 16
 1163              	 .thumb_func
 1165              	xQueueGenericSendFromISR:
 1166              	.LFB53:
 981:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 982:../Dave/Generated/FREERTOS/queue.c **** 
 983:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
 984:../Dave/Generated/FREERTOS/queue.c ****                                      const void * const pvItemToQueue,
 985:../Dave/Generated/FREERTOS/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
 986:../Dave/Generated/FREERTOS/queue.c ****                                      const BaseType_t xCopyPosition )
 987:../Dave/Generated/FREERTOS/queue.c **** {
 1167              	 .loc 1 987 0
 1168              	 .cfi_startproc
 1169 0000 80B5     	 push {r7,lr}
 1170              	.LCFI33:
 1171              	 .cfi_def_cfa_offset 8
 1172              	 .cfi_offset 7,-8
 1173              	 .cfi_offset 14,-4
 1174 0002 8AB0     	 sub sp,sp,#40
 1175              	.LCFI34:
 1176              	 .cfi_def_cfa_offset 48
 1177 0004 00AF     	 add r7,sp,#0
 1178              	.LCFI35:
 1179              	 .cfi_def_cfa_register 7
 1180 0006 F860     	 str r0,[r7,#12]
 1181 0008 B960     	 str r1,[r7,#8]
 1182 000a 7A60     	 str r2,[r7,#4]
 1183 000c 3B60     	 str r3,[r7]
 988:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
 989:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
 990:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1184              	 .loc 1 990 0
 1185 000e FB68     	 ldr r3,[r7,#12]
 1186 0010 3B62     	 str r3,[r7,#32]
 991:../Dave/Generated/FREERTOS/queue.c **** 
 992:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 1187              	 .loc 1 992 0
 1188 0012 3B6A     	 ldr r3,[r7,#32]
 1189 0014 002B     	 cmp r3,#0
 1190 0016 01D1     	 bne .L93
 1191              	 .loc 1 992 0 is_stmt 0 discriminator 1
 1192              	
 1193 0018 72B6     	 cpsid i
 1194              	
 1195              	 .code 16
 1196              	.L94:
 1197 001a FEE7     	 b .L94
 1198              	.L93:
 993:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1199              	 .loc 1 993 0 is_stmt 1
 1200 001c BB68     	 ldr r3,[r7,#8]
 1201 001e 002B     	 cmp r3,#0
 1202 0020 03D1     	 bne .L95
 1203              	 .loc 1 993 0 is_stmt 0 discriminator 2
 1204 0022 3B6A     	 ldr r3,[r7,#32]
 1205 0024 1B6C     	 ldr r3,[r3,#64]
 1206 0026 002B     	 cmp r3,#0
 1207 0028 01D1     	 bne .L96
 1208              	.L95:
 1209              	 .loc 1 993 0 discriminator 3
 1210 002a 0123     	 mov r3,#1
 1211 002c 00E0     	 b .L97
 1212              	.L96:
 1213              	 .loc 1 993 0 discriminator 4
 1214 002e 0023     	 mov r3,#0
 1215              	.L97:
 1216              	 .loc 1 993 0 discriminator 6
 1217 0030 002B     	 cmp r3,#0
 1218 0032 01D1     	 bne .L98
 1219              	 .loc 1 993 0 discriminator 7
 1220              	
 1221 0034 72B6     	 cpsid i
 1222              	
 1223              	 .code 16
 1224              	.L99:
 1225              	 .loc 1 993 0 discriminator 2
 1226 0036 FEE7     	 b .L99
 1227              	.L98:
 994:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1228              	 .loc 1 994 0 is_stmt 1
 1229 0038 3B68     	 ldr r3,[r7]
 1230 003a 022B     	 cmp r3,#2
 1231 003c 03D1     	 bne .L100
 1232              	 .loc 1 994 0 is_stmt 0 discriminator 2
 1233 003e 3B6A     	 ldr r3,[r7,#32]
 1234 0040 DB6B     	 ldr r3,[r3,#60]
 1235 0042 012B     	 cmp r3,#1
 1236 0044 01D1     	 bne .L101
 1237              	.L100:
 1238              	 .loc 1 994 0 discriminator 3
 1239 0046 0123     	 mov r3,#1
 1240 0048 00E0     	 b .L102
 1241              	.L101:
 1242              	 .loc 1 994 0 discriminator 4
 1243 004a 0023     	 mov r3,#0
 1244              	.L102:
 1245              	 .loc 1 994 0 discriminator 6
 1246 004c 002B     	 cmp r3,#0
 1247 004e 01D1     	 bne .L103
 1248              	 .loc 1 994 0 discriminator 7
 1249              	
 1250 0050 72B6     	 cpsid i
 1251              	
 1252              	 .code 16
 1253              	.L104:
 1254              	 .loc 1 994 0 discriminator 3
 1255 0052 FEE7     	 b .L104
 1256              	.L103:
 995:../Dave/Generated/FREERTOS/queue.c **** 
 996:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
 997:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
 998:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
 999:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1000:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1001:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1002:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1003:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1004:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1005:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1006:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1007:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1008:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1009:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1010:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1011:../Dave/Generated/FREERTOS/queue.c **** 
1012:../Dave/Generated/FREERTOS/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1013:../Dave/Generated/FREERTOS/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1014:../Dave/Generated/FREERTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1015:../Dave/Generated/FREERTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1016:../Dave/Generated/FREERTOS/queue.c ****      * post). */
1017:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1257              	 .loc 1 1017 0 is_stmt 1
 1258 0054 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 1259 0058 031C     	 mov r3,r0
 1260 005a FB61     	 str r3,[r7,#28]
1018:../Dave/Generated/FREERTOS/queue.c ****     {
1019:../Dave/Generated/FREERTOS/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
 1261              	 .loc 1 1019 0
 1262 005c 3B6A     	 ldr r3,[r7,#32]
 1263 005e 9A6B     	 ldr r2,[r3,#56]
 1264 0060 3B6A     	 ldr r3,[r7,#32]
 1265 0062 DB6B     	 ldr r3,[r3,#60]
 1266 0064 9A42     	 cmp r2,r3
 1267 0066 02D3     	 bcc .L105
 1268              	 .loc 1 1019 0 is_stmt 0 discriminator 1
 1269 0068 3B68     	 ldr r3,[r7]
 1270 006a 022B     	 cmp r3,#2
 1271 006c 55D1     	 bne .L106
 1272              	.L105:
 1273              	.LBB3:
1020:../Dave/Generated/FREERTOS/queue.c ****         {
1021:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1274              	 .loc 1 1021 0 is_stmt 1
 1275 006e 1B23     	 mov r3,#27
 1276 0070 FB18     	 add r3,r7,r3
 1277 0072 3A6A     	 ldr r2,[r7,#32]
 1278 0074 4521     	 mov r1,#69
 1279 0076 525C     	 ldrb r2,[r2,r1]
 1280 0078 1A70     	 strb r2,[r3]
1022:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1281              	 .loc 1 1022 0
 1282 007a 3B6A     	 ldr r3,[r7,#32]
 1283 007c 9B6B     	 ldr r3,[r3,#56]
 1284 007e 7B61     	 str r3,[r7,#20]
1023:../Dave/Generated/FREERTOS/queue.c **** 
1024:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1025:../Dave/Generated/FREERTOS/queue.c **** 
1026:../Dave/Generated/FREERTOS/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1027:../Dave/Generated/FREERTOS/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1028:../Dave/Generated/FREERTOS/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1029:../Dave/Generated/FREERTOS/queue.c ****              *  called here even though the disinherit function does not check if
1030:../Dave/Generated/FREERTOS/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1031:../Dave/Generated/FREERTOS/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 1285              	 .loc 1 1031 0
 1286 0080 396A     	 ldr r1,[r7,#32]
 1287 0082 BA68     	 ldr r2,[r7,#8]
 1288 0084 3B68     	 ldr r3,[r7]
 1289 0086 081C     	 mov r0,r1
 1290 0088 111C     	 mov r1,r2
 1291 008a 1A1C     	 mov r2,r3
 1292 008c FFF7FEFF 	 bl prvCopyDataToQueue
1032:../Dave/Generated/FREERTOS/queue.c **** 
1033:../Dave/Generated/FREERTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1034:../Dave/Generated/FREERTOS/queue.c ****              * be done when the queue is unlocked later. */
1035:../Dave/Generated/FREERTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1293              	 .loc 1 1035 0
 1294 0090 1B23     	 mov r3,#27
 1295 0092 FB18     	 add r3,r7,r3
 1296 0094 1B78     	 ldrb r3,[r3]
 1297 0096 5BB2     	 sxtb r3,r3
 1298 0098 0133     	 add r3,r3,#1
 1299 009a 2AD1     	 bne .L107
1036:../Dave/Generated/FREERTOS/queue.c ****             {
1037:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1038:../Dave/Generated/FREERTOS/queue.c ****                     {
1039:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 1300              	 .loc 1 1039 0
 1301 009c 3B6A     	 ldr r3,[r7,#32]
 1302 009e 9B6C     	 ldr r3,[r3,#72]
 1303 00a0 002B     	 cmp r3,#0
 1304 00a2 14D0     	 beq .L108
1040:../Dave/Generated/FREERTOS/queue.c ****                         {
1041:../Dave/Generated/FREERTOS/queue.c ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 1305              	 .loc 1 1041 0
 1306 00a4 3B68     	 ldr r3,[r7]
 1307 00a6 022B     	 cmp r3,#2
 1308 00a8 04D1     	 bne .L109
 1309              	 .loc 1 1041 0 is_stmt 0 discriminator 1
 1310 00aa 7B69     	 ldr r3,[r7,#20]
 1311 00ac 002B     	 cmp r3,#0
 1312 00ae 01D0     	 beq .L109
 1313              	 .loc 1 1041 0
 1314 00b0 C046     	 mov r8,r8
 1315 00b2 2FE0     	 b .L111
 1316              	.L109:
1042:../Dave/Generated/FREERTOS/queue.c ****                             {
1043:../Dave/Generated/FREERTOS/queue.c ****                                 /* Do not notify the queue set as an existing item
1044:../Dave/Generated/FREERTOS/queue.c ****                                  * was overwritten in the queue so the number of items
1045:../Dave/Generated/FREERTOS/queue.c ****                                  * in the queue has not changed. */
1046:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1047:../Dave/Generated/FREERTOS/queue.c ****                             }
1048:../Dave/Generated/FREERTOS/queue.c ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 1317              	 .loc 1 1048 0 is_stmt 1
 1318 00b4 3B6A     	 ldr r3,[r7,#32]
 1319 00b6 181C     	 mov r0,r3
 1320 00b8 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1321 00bc 031E     	 sub r3,r0,#0
 1322 00be 29D0     	 beq .L111
1049:../Dave/Generated/FREERTOS/queue.c ****                             {
1050:../Dave/Generated/FREERTOS/queue.c ****                                 /* The queue is a member of a queue set, and posting
1051:../Dave/Generated/FREERTOS/queue.c ****                                  * to the queue set caused a higher priority task to
1052:../Dave/Generated/FREERTOS/queue.c ****                                  * unblock.  A context switch is required. */
1053:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
 1323              	 .loc 1 1053 0
 1324 00c0 7B68     	 ldr r3,[r7,#4]
 1325 00c2 002B     	 cmp r3,#0
 1326 00c4 26D0     	 beq .L111
1054:../Dave/Generated/FREERTOS/queue.c ****                                 {
1055:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
 1327              	 .loc 1 1055 0
 1328 00c6 7B68     	 ldr r3,[r7,#4]
 1329 00c8 0122     	 mov r2,#1
 1330 00ca 1A60     	 str r2,[r3]
 1331 00cc 22E0     	 b .L111
 1332              	.L108:
1056:../Dave/Generated/FREERTOS/queue.c ****                                 }
1057:../Dave/Generated/FREERTOS/queue.c ****                                 else
1058:../Dave/Generated/FREERTOS/queue.c ****                                 {
1059:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1060:../Dave/Generated/FREERTOS/queue.c ****                                 }
1061:../Dave/Generated/FREERTOS/queue.c ****                             }
1062:../Dave/Generated/FREERTOS/queue.c ****                             else
1063:../Dave/Generated/FREERTOS/queue.c ****                             {
1064:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1065:../Dave/Generated/FREERTOS/queue.c ****                             }
1066:../Dave/Generated/FREERTOS/queue.c ****                         }
1067:../Dave/Generated/FREERTOS/queue.c ****                         else
1068:../Dave/Generated/FREERTOS/queue.c ****                         {
1069:../Dave/Generated/FREERTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 1333              	 .loc 1 1069 0
 1334 00ce 3B6A     	 ldr r3,[r7,#32]
 1335 00d0 5B6A     	 ldr r3,[r3,#36]
 1336 00d2 002B     	 cmp r3,#0
 1337 00d4 1ED0     	 beq .L111
1070:../Dave/Generated/FREERTOS/queue.c ****                             {
1071:../Dave/Generated/FREERTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 1338              	 .loc 1 1071 0
 1339 00d6 3B6A     	 ldr r3,[r7,#32]
 1340 00d8 2433     	 add r3,r3,#36
 1341 00da 181C     	 mov r0,r3
 1342 00dc FFF7FEFF 	 bl xTaskRemoveFromEventList
 1343 00e0 031E     	 sub r3,r0,#0
 1344 00e2 17D0     	 beq .L111
1072:../Dave/Generated/FREERTOS/queue.c ****                                 {
1073:../Dave/Generated/FREERTOS/queue.c ****                                     /* The task waiting has a higher priority so
1074:../Dave/Generated/FREERTOS/queue.c ****                                      *  record that a context switch is required. */
1075:../Dave/Generated/FREERTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
 1345              	 .loc 1 1075 0
 1346 00e4 7B68     	 ldr r3,[r7,#4]
 1347 00e6 002B     	 cmp r3,#0
 1348 00e8 14D0     	 beq .L111
1076:../Dave/Generated/FREERTOS/queue.c ****                                     {
1077:../Dave/Generated/FREERTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
 1349              	 .loc 1 1077 0
 1350 00ea 7B68     	 ldr r3,[r7,#4]
 1351 00ec 0122     	 mov r2,#1
 1352 00ee 1A60     	 str r2,[r3]
 1353 00f0 10E0     	 b .L111
 1354              	.L107:
1078:../Dave/Generated/FREERTOS/queue.c ****                                     }
1079:../Dave/Generated/FREERTOS/queue.c ****                                     else
1080:../Dave/Generated/FREERTOS/queue.c ****                                     {
1081:../Dave/Generated/FREERTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1082:../Dave/Generated/FREERTOS/queue.c ****                                     }
1083:../Dave/Generated/FREERTOS/queue.c ****                                 }
1084:../Dave/Generated/FREERTOS/queue.c ****                                 else
1085:../Dave/Generated/FREERTOS/queue.c ****                                 {
1086:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1087:../Dave/Generated/FREERTOS/queue.c ****                                 }
1088:../Dave/Generated/FREERTOS/queue.c ****                             }
1089:../Dave/Generated/FREERTOS/queue.c ****                             else
1090:../Dave/Generated/FREERTOS/queue.c ****                             {
1091:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1092:../Dave/Generated/FREERTOS/queue.c ****                             }
1093:../Dave/Generated/FREERTOS/queue.c ****                         }
1094:../Dave/Generated/FREERTOS/queue.c ****                     }
1095:../Dave/Generated/FREERTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1096:../Dave/Generated/FREERTOS/queue.c ****                     {
1097:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1098:../Dave/Generated/FREERTOS/queue.c ****                         {
1099:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1100:../Dave/Generated/FREERTOS/queue.c ****                             {
1101:../Dave/Generated/FREERTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1102:../Dave/Generated/FREERTOS/queue.c ****                                  * context switch is required. */
1103:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1104:../Dave/Generated/FREERTOS/queue.c ****                                 {
1105:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1106:../Dave/Generated/FREERTOS/queue.c ****                                 }
1107:../Dave/Generated/FREERTOS/queue.c ****                                 else
1108:../Dave/Generated/FREERTOS/queue.c ****                                 {
1109:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1110:../Dave/Generated/FREERTOS/queue.c ****                                 }
1111:../Dave/Generated/FREERTOS/queue.c ****                             }
1112:../Dave/Generated/FREERTOS/queue.c ****                             else
1113:../Dave/Generated/FREERTOS/queue.c ****                             {
1114:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1115:../Dave/Generated/FREERTOS/queue.c ****                             }
1116:../Dave/Generated/FREERTOS/queue.c ****                         }
1117:../Dave/Generated/FREERTOS/queue.c ****                         else
1118:../Dave/Generated/FREERTOS/queue.c ****                         {
1119:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1120:../Dave/Generated/FREERTOS/queue.c ****                         }
1121:../Dave/Generated/FREERTOS/queue.c **** 
1122:../Dave/Generated/FREERTOS/queue.c ****                         /* Not used in this path. */
1123:../Dave/Generated/FREERTOS/queue.c ****                         ( void ) uxPreviousMessagesWaiting;
1124:../Dave/Generated/FREERTOS/queue.c ****                     }
1125:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1126:../Dave/Generated/FREERTOS/queue.c ****             }
1127:../Dave/Generated/FREERTOS/queue.c ****             else
1128:../Dave/Generated/FREERTOS/queue.c ****             {
1129:../Dave/Generated/FREERTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1130:../Dave/Generated/FREERTOS/queue.c ****                  * knows that data was posted while it was locked. */
1131:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 1355              	 .loc 1 1131 0
 1356 00f2 1B23     	 mov r3,#27
 1357 00f4 FB18     	 add r3,r7,r3
 1358 00f6 1B78     	 ldrb r3,[r3]
 1359 00f8 5BB2     	 sxtb r3,r3
 1360 00fa 7F2B     	 cmp r3,#127
 1361 00fc 01D1     	 bne .L112
 1362              	 .loc 1 1131 0 is_stmt 0 discriminator 1
 1363              	
 1364 00fe 72B6     	 cpsid i
 1365              	
 1366              	 .code 16
 1367              	.L113:
 1368              	 .loc 1 1131 0 discriminator 9
 1369 0100 FEE7     	 b .L113
 1370              	.L112:
1132:../Dave/Generated/FREERTOS/queue.c **** 
1133:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1371              	 .loc 1 1133 0 is_stmt 1
 1372 0102 1B23     	 mov r3,#27
 1373 0104 FB18     	 add r3,r7,r3
 1374 0106 1B78     	 ldrb r3,[r3]
 1375 0108 0133     	 add r3,r3,#1
 1376 010a DBB2     	 uxtb r3,r3
 1377 010c D9B2     	 uxtb r1,r3
 1378 010e 3B6A     	 ldr r3,[r7,#32]
 1379 0110 4522     	 mov r2,#69
 1380 0112 9954     	 strb r1,[r3,r2]
 1381              	.L111:
1134:../Dave/Generated/FREERTOS/queue.c ****             }
1135:../Dave/Generated/FREERTOS/queue.c **** 
1136:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 1382              	 .loc 1 1136 0
 1383 0114 0123     	 mov r3,#1
 1384 0116 7B62     	 str r3,[r7,#36]
 1385              	.LBE3:
1020:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1386              	 .loc 1 1020 0
 1387 0118 01E0     	 b .L114
 1388              	.L106:
1137:../Dave/Generated/FREERTOS/queue.c ****         }
1138:../Dave/Generated/FREERTOS/queue.c ****         else
1139:../Dave/Generated/FREERTOS/queue.c ****         {
1140:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1141:../Dave/Generated/FREERTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1389              	 .loc 1 1141 0
 1390 011a 0023     	 mov r3,#0
 1391 011c 7B62     	 str r3,[r7,#36]
 1392              	.L114:
1142:../Dave/Generated/FREERTOS/queue.c ****         }
1143:../Dave/Generated/FREERTOS/queue.c ****     }
1144:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1393              	 .loc 1 1144 0
 1394 011e FB69     	 ldr r3,[r7,#28]
 1395 0120 181C     	 mov r0,r3
 1396 0122 FFF7FEFF 	 bl vClearInterruptMaskFromISR
1145:../Dave/Generated/FREERTOS/queue.c **** 
1146:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 1397              	 .loc 1 1146 0
 1398 0126 7B6A     	 ldr r3,[r7,#36]
1147:../Dave/Generated/FREERTOS/queue.c **** }
 1399              	 .loc 1 1147 0
 1400 0128 181C     	 mov r0,r3
 1401 012a BD46     	 mov sp,r7
 1402 012c 0AB0     	 add sp,sp,#40
 1403              	 
 1404 012e 80BD     	 pop {r7,pc}
 1405              	 .cfi_endproc
 1406              	.LFE53:
 1408              	 .section .text.xQueueGiveFromISR,"ax",%progbits
 1409              	 .align 2
 1410              	 .global xQueueGiveFromISR
 1411              	 .code 16
 1412              	 .thumb_func
 1414              	xQueueGiveFromISR:
 1415              	.LFB54:
1148:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1149:../Dave/Generated/FREERTOS/queue.c **** 
1150:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1151:../Dave/Generated/FREERTOS/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1152:../Dave/Generated/FREERTOS/queue.c **** {
 1416              	 .loc 1 1152 0
 1417              	 .cfi_startproc
 1418 0000 80B5     	 push {r7,lr}
 1419              	.LCFI36:
 1420              	 .cfi_def_cfa_offset 8
 1421              	 .cfi_offset 7,-8
 1422              	 .cfi_offset 14,-4
 1423 0002 88B0     	 sub sp,sp,#32
 1424              	.LCFI37:
 1425              	 .cfi_def_cfa_offset 40
 1426 0004 00AF     	 add r7,sp,#0
 1427              	.LCFI38:
 1428              	 .cfi_def_cfa_register 7
 1429 0006 7860     	 str r0,[r7,#4]
 1430 0008 3960     	 str r1,[r7]
1153:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
1154:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1155:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1431              	 .loc 1 1155 0
 1432 000a 7B68     	 ldr r3,[r7,#4]
 1433 000c BB61     	 str r3,[r7,#24]
1156:../Dave/Generated/FREERTOS/queue.c **** 
1157:../Dave/Generated/FREERTOS/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1158:../Dave/Generated/FREERTOS/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1159:../Dave/Generated/FREERTOS/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1160:../Dave/Generated/FREERTOS/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1161:../Dave/Generated/FREERTOS/queue.c ****      * post). */
1162:../Dave/Generated/FREERTOS/queue.c **** 
1163:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 1434              	 .loc 1 1163 0
 1435 000e BB69     	 ldr r3,[r7,#24]
 1436 0010 002B     	 cmp r3,#0
 1437 0012 01D1     	 bne .L117
 1438              	 .loc 1 1163 0 is_stmt 0 discriminator 1
 1439              	
 1440 0014 72B6     	 cpsid i
 1441              	
 1442              	 .code 16
 1443              	.L118:
 1444 0016 FEE7     	 b .L118
 1445              	.L117:
1164:../Dave/Generated/FREERTOS/queue.c **** 
1165:../Dave/Generated/FREERTOS/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1166:../Dave/Generated/FREERTOS/queue.c ****      * if the item size is not 0. */
1167:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 1446              	 .loc 1 1167 0 is_stmt 1
 1447 0018 BB69     	 ldr r3,[r7,#24]
 1448 001a 1B6C     	 ldr r3,[r3,#64]
 1449 001c 002B     	 cmp r3,#0
 1450 001e 01D0     	 beq .L119
 1451              	 .loc 1 1167 0 is_stmt 0 discriminator 1
 1452              	
 1453 0020 72B6     	 cpsid i
 1454              	
 1455              	 .code 16
 1456              	.L120:
 1457              	 .loc 1 1167 0 discriminator 2
 1458 0022 FEE7     	 b .L120
 1459              	.L119:
1168:../Dave/Generated/FREERTOS/queue.c **** 
1169:../Dave/Generated/FREERTOS/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1170:../Dave/Generated/FREERTOS/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1171:../Dave/Generated/FREERTOS/queue.c ****      * interrupts, only tasks. */
1172:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
 1460              	 .loc 1 1172 0 is_stmt 1
 1461 0024 BB69     	 ldr r3,[r7,#24]
 1462 0026 1B68     	 ldr r3,[r3]
 1463 0028 002B     	 cmp r3,#0
 1464 002a 03D1     	 bne .L121
 1465              	 .loc 1 1172 0 is_stmt 0 discriminator 2
 1466 002c BB69     	 ldr r3,[r7,#24]
 1467 002e 9B68     	 ldr r3,[r3,#8]
 1468 0030 002B     	 cmp r3,#0
 1469 0032 01D1     	 bne .L122
 1470              	.L121:
 1471              	 .loc 1 1172 0 discriminator 3
 1472 0034 0123     	 mov r3,#1
 1473 0036 00E0     	 b .L123
 1474              	.L122:
 1475              	 .loc 1 1172 0 discriminator 4
 1476 0038 0023     	 mov r3,#0
 1477              	.L123:
 1478              	 .loc 1 1172 0 discriminator 6
 1479 003a 002B     	 cmp r3,#0
 1480 003c 01D1     	 bne .L124
 1481              	 .loc 1 1172 0 discriminator 7
 1482              	
 1483 003e 72B6     	 cpsid i
 1484              	
 1485              	 .code 16
 1486              	.L125:
 1487              	 .loc 1 1172 0 discriminator 3
 1488 0040 FEE7     	 b .L125
 1489              	.L124:
1173:../Dave/Generated/FREERTOS/queue.c **** 
1174:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1175:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1176:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1177:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1178:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1179:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1180:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1181:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1182:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1183:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1184:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1185:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1186:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1187:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1188:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1189:../Dave/Generated/FREERTOS/queue.c **** 
1190:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1490              	 .loc 1 1190 0 is_stmt 1
 1491 0042 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 1492 0046 031C     	 mov r3,r0
 1493 0048 7B61     	 str r3,[r7,#20]
 1494              	.LBB4:
1191:../Dave/Generated/FREERTOS/queue.c ****     {
1192:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1495              	 .loc 1 1192 0
 1496 004a BB69     	 ldr r3,[r7,#24]
 1497 004c 9B6B     	 ldr r3,[r3,#56]
 1498 004e 3B61     	 str r3,[r7,#16]
1193:../Dave/Generated/FREERTOS/queue.c **** 
1194:../Dave/Generated/FREERTOS/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1195:../Dave/Generated/FREERTOS/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1196:../Dave/Generated/FREERTOS/queue.c ****          * space'. */
1197:../Dave/Generated/FREERTOS/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
 1499              	 .loc 1 1197 0
 1500 0050 BB69     	 ldr r3,[r7,#24]
 1501 0052 DA6B     	 ldr r2,[r3,#60]
 1502 0054 3B69     	 ldr r3,[r7,#16]
 1503 0056 9A42     	 cmp r2,r3
 1504 0058 46D9     	 bls .L126
 1505              	.LBB5:
1198:../Dave/Generated/FREERTOS/queue.c ****         {
1199:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
 1506              	 .loc 1 1199 0
 1507 005a 0F23     	 mov r3,#15
 1508 005c FB18     	 add r3,r7,r3
 1509 005e BA69     	 ldr r2,[r7,#24]
 1510 0060 4521     	 mov r1,#69
 1511 0062 525C     	 ldrb r2,[r2,r1]
 1512 0064 1A70     	 strb r2,[r3]
1200:../Dave/Generated/FREERTOS/queue.c **** 
1201:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1202:../Dave/Generated/FREERTOS/queue.c **** 
1203:../Dave/Generated/FREERTOS/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1204:../Dave/Generated/FREERTOS/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1205:../Dave/Generated/FREERTOS/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1206:../Dave/Generated/FREERTOS/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1207:../Dave/Generated/FREERTOS/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1208:../Dave/Generated/FREERTOS/queue.c ****              * messages (semaphores) available. */
1209:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1513              	 .loc 1 1209 0
 1514 0066 3B69     	 ldr r3,[r7,#16]
 1515 0068 5A1C     	 add r2,r3,#1
 1516 006a BB69     	 ldr r3,[r7,#24]
 1517 006c 9A63     	 str r2,[r3,#56]
1210:../Dave/Generated/FREERTOS/queue.c **** 
1211:../Dave/Generated/FREERTOS/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1212:../Dave/Generated/FREERTOS/queue.c ****              * be done when the queue is unlocked later. */
1213:../Dave/Generated/FREERTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 1518              	 .loc 1 1213 0
 1519 006e 0F23     	 mov r3,#15
 1520 0070 FB18     	 add r3,r7,r3
 1521 0072 1B78     	 ldrb r3,[r3]
 1522 0074 5BB2     	 sxtb r3,r3
 1523 0076 0133     	 add r3,r3,#1
 1524 0078 22D1     	 bne .L127
1214:../Dave/Generated/FREERTOS/queue.c ****             {
1215:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1216:../Dave/Generated/FREERTOS/queue.c ****                     {
1217:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->pxQueueSetContainer != NULL )
 1525              	 .loc 1 1217 0
 1526 007a BB69     	 ldr r3,[r7,#24]
 1527 007c 9B6C     	 ldr r3,[r3,#72]
 1528 007e 002B     	 cmp r3,#0
 1529 0080 0CD0     	 beq .L128
1218:../Dave/Generated/FREERTOS/queue.c ****                         {
1219:../Dave/Generated/FREERTOS/queue.c ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 1530              	 .loc 1 1219 0
 1531 0082 BB69     	 ldr r3,[r7,#24]
 1532 0084 181C     	 mov r0,r3
 1533 0086 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1534 008a 031E     	 sub r3,r0,#0
 1535 008c 29D0     	 beq .L129
1220:../Dave/Generated/FREERTOS/queue.c ****                             {
1221:../Dave/Generated/FREERTOS/queue.c ****                                 /* The semaphore is a member of a queue set, and
1222:../Dave/Generated/FREERTOS/queue.c ****                                  * posting to the queue set caused a higher priority
1223:../Dave/Generated/FREERTOS/queue.c ****                                  * task to unblock.  A context switch is required. */
1224:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
 1536              	 .loc 1 1224 0
 1537 008e 3B68     	 ldr r3,[r7]
 1538 0090 002B     	 cmp r3,#0
 1539 0092 26D0     	 beq .L129
1225:../Dave/Generated/FREERTOS/queue.c ****                                 {
1226:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
 1540              	 .loc 1 1226 0
 1541 0094 3B68     	 ldr r3,[r7]
 1542 0096 0122     	 mov r2,#1
 1543 0098 1A60     	 str r2,[r3]
 1544 009a 22E0     	 b .L129
 1545              	.L128:
1227:../Dave/Generated/FREERTOS/queue.c ****                                 }
1228:../Dave/Generated/FREERTOS/queue.c ****                                 else
1229:../Dave/Generated/FREERTOS/queue.c ****                                 {
1230:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1231:../Dave/Generated/FREERTOS/queue.c ****                                 }
1232:../Dave/Generated/FREERTOS/queue.c ****                             }
1233:../Dave/Generated/FREERTOS/queue.c ****                             else
1234:../Dave/Generated/FREERTOS/queue.c ****                             {
1235:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1236:../Dave/Generated/FREERTOS/queue.c ****                             }
1237:../Dave/Generated/FREERTOS/queue.c ****                         }
1238:../Dave/Generated/FREERTOS/queue.c ****                         else
1239:../Dave/Generated/FREERTOS/queue.c ****                         {
1240:../Dave/Generated/FREERTOS/queue.c ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 1546              	 .loc 1 1240 0
 1547 009c BB69     	 ldr r3,[r7,#24]
 1548 009e 5B6A     	 ldr r3,[r3,#36]
 1549 00a0 002B     	 cmp r3,#0
 1550 00a2 1ED0     	 beq .L129
1241:../Dave/Generated/FREERTOS/queue.c ****                             {
1242:../Dave/Generated/FREERTOS/queue.c ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 1551              	 .loc 1 1242 0
 1552 00a4 BB69     	 ldr r3,[r7,#24]
 1553 00a6 2433     	 add r3,r3,#36
 1554 00a8 181C     	 mov r0,r3
 1555 00aa FFF7FEFF 	 bl xTaskRemoveFromEventList
 1556 00ae 031E     	 sub r3,r0,#0
 1557 00b0 17D0     	 beq .L129
1243:../Dave/Generated/FREERTOS/queue.c ****                                 {
1244:../Dave/Generated/FREERTOS/queue.c ****                                     /* The task waiting has a higher priority so
1245:../Dave/Generated/FREERTOS/queue.c ****                                      *  record that a context switch is required. */
1246:../Dave/Generated/FREERTOS/queue.c ****                                     if( pxHigherPriorityTaskWoken != NULL )
 1558              	 .loc 1 1246 0
 1559 00b2 3B68     	 ldr r3,[r7]
 1560 00b4 002B     	 cmp r3,#0
 1561 00b6 14D0     	 beq .L129
1247:../Dave/Generated/FREERTOS/queue.c ****                                     {
1248:../Dave/Generated/FREERTOS/queue.c ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
 1562              	 .loc 1 1248 0
 1563 00b8 3B68     	 ldr r3,[r7]
 1564 00ba 0122     	 mov r2,#1
 1565 00bc 1A60     	 str r2,[r3]
 1566 00be 10E0     	 b .L129
 1567              	.L127:
1249:../Dave/Generated/FREERTOS/queue.c ****                                     }
1250:../Dave/Generated/FREERTOS/queue.c ****                                     else
1251:../Dave/Generated/FREERTOS/queue.c ****                                     {
1252:../Dave/Generated/FREERTOS/queue.c ****                                         mtCOVERAGE_TEST_MARKER();
1253:../Dave/Generated/FREERTOS/queue.c ****                                     }
1254:../Dave/Generated/FREERTOS/queue.c ****                                 }
1255:../Dave/Generated/FREERTOS/queue.c ****                                 else
1256:../Dave/Generated/FREERTOS/queue.c ****                                 {
1257:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1258:../Dave/Generated/FREERTOS/queue.c ****                                 }
1259:../Dave/Generated/FREERTOS/queue.c ****                             }
1260:../Dave/Generated/FREERTOS/queue.c ****                             else
1261:../Dave/Generated/FREERTOS/queue.c ****                             {
1262:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1263:../Dave/Generated/FREERTOS/queue.c ****                             }
1264:../Dave/Generated/FREERTOS/queue.c ****                         }
1265:../Dave/Generated/FREERTOS/queue.c ****                     }
1266:../Dave/Generated/FREERTOS/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1267:../Dave/Generated/FREERTOS/queue.c ****                     {
1268:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1269:../Dave/Generated/FREERTOS/queue.c ****                         {
1270:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1271:../Dave/Generated/FREERTOS/queue.c ****                             {
1272:../Dave/Generated/FREERTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
1273:../Dave/Generated/FREERTOS/queue.c ****                                  * context switch is required. */
1274:../Dave/Generated/FREERTOS/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1275:../Dave/Generated/FREERTOS/queue.c ****                                 {
1276:../Dave/Generated/FREERTOS/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1277:../Dave/Generated/FREERTOS/queue.c ****                                 }
1278:../Dave/Generated/FREERTOS/queue.c ****                                 else
1279:../Dave/Generated/FREERTOS/queue.c ****                                 {
1280:../Dave/Generated/FREERTOS/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1281:../Dave/Generated/FREERTOS/queue.c ****                                 }
1282:../Dave/Generated/FREERTOS/queue.c ****                             }
1283:../Dave/Generated/FREERTOS/queue.c ****                             else
1284:../Dave/Generated/FREERTOS/queue.c ****                             {
1285:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1286:../Dave/Generated/FREERTOS/queue.c ****                             }
1287:../Dave/Generated/FREERTOS/queue.c ****                         }
1288:../Dave/Generated/FREERTOS/queue.c ****                         else
1289:../Dave/Generated/FREERTOS/queue.c ****                         {
1290:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1291:../Dave/Generated/FREERTOS/queue.c ****                         }
1292:../Dave/Generated/FREERTOS/queue.c ****                     }
1293:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1294:../Dave/Generated/FREERTOS/queue.c ****             }
1295:../Dave/Generated/FREERTOS/queue.c ****             else
1296:../Dave/Generated/FREERTOS/queue.c ****             {
1297:../Dave/Generated/FREERTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1298:../Dave/Generated/FREERTOS/queue.c ****                  * knows that data was posted while it was locked. */
1299:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 1568              	 .loc 1 1299 0
 1569 00c0 0F23     	 mov r3,#15
 1570 00c2 FB18     	 add r3,r7,r3
 1571 00c4 1B78     	 ldrb r3,[r3]
 1572 00c6 5BB2     	 sxtb r3,r3
 1573 00c8 7F2B     	 cmp r3,#127
 1574 00ca 01D1     	 bne .L130
 1575              	 .loc 1 1299 0 is_stmt 0 discriminator 1
 1576              	
 1577 00cc 72B6     	 cpsid i
 1578              	
 1579              	 .code 16
 1580              	.L131:
 1581              	 .loc 1 1299 0 discriminator 8
 1582 00ce FEE7     	 b .L131
 1583              	.L130:
1300:../Dave/Generated/FREERTOS/queue.c **** 
1301:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1584              	 .loc 1 1301 0 is_stmt 1
 1585 00d0 0F23     	 mov r3,#15
 1586 00d2 FB18     	 add r3,r7,r3
 1587 00d4 1B78     	 ldrb r3,[r3]
 1588 00d6 0133     	 add r3,r3,#1
 1589 00d8 DBB2     	 uxtb r3,r3
 1590 00da D9B2     	 uxtb r1,r3
 1591 00dc BB69     	 ldr r3,[r7,#24]
 1592 00de 4522     	 mov r2,#69
 1593 00e0 9954     	 strb r1,[r3,r2]
 1594              	.L129:
1302:../Dave/Generated/FREERTOS/queue.c ****             }
1303:../Dave/Generated/FREERTOS/queue.c **** 
1304:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 1595              	 .loc 1 1304 0
 1596 00e2 0123     	 mov r3,#1
 1597 00e4 FB61     	 str r3,[r7,#28]
 1598              	.LBE5:
 1599 00e6 01E0     	 b .L132
 1600              	.L126:
1305:../Dave/Generated/FREERTOS/queue.c ****         }
1306:../Dave/Generated/FREERTOS/queue.c ****         else
1307:../Dave/Generated/FREERTOS/queue.c ****         {
1308:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1309:../Dave/Generated/FREERTOS/queue.c ****             xReturn = errQUEUE_FULL;
 1601              	 .loc 1 1309 0
 1602 00e8 0023     	 mov r3,#0
 1603 00ea FB61     	 str r3,[r7,#28]
 1604              	.L132:
 1605              	.LBE4:
1310:../Dave/Generated/FREERTOS/queue.c ****         }
1311:../Dave/Generated/FREERTOS/queue.c ****     }
1312:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1606              	 .loc 1 1312 0
 1607 00ec 7B69     	 ldr r3,[r7,#20]
 1608 00ee 181C     	 mov r0,r3
 1609 00f0 FFF7FEFF 	 bl vClearInterruptMaskFromISR
1313:../Dave/Generated/FREERTOS/queue.c **** 
1314:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 1610              	 .loc 1 1314 0
 1611 00f4 FB69     	 ldr r3,[r7,#28]
1315:../Dave/Generated/FREERTOS/queue.c **** }
 1612              	 .loc 1 1315 0
 1613 00f6 181C     	 mov r0,r3
 1614 00f8 BD46     	 mov sp,r7
 1615 00fa 08B0     	 add sp,sp,#32
 1616              	 
 1617 00fc 80BD     	 pop {r7,pc}
 1618              	 .cfi_endproc
 1619              	.LFE54:
 1621 00fe C046     	 .section .text.xQueueReceive,"ax",%progbits
 1622              	 .align 2
 1623              	 .global xQueueReceive
 1624              	 .code 16
 1625              	 .thumb_func
 1627              	xQueueReceive:
 1628              	.LFB55:
1316:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1317:../Dave/Generated/FREERTOS/queue.c **** 
1318:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1319:../Dave/Generated/FREERTOS/queue.c ****                           void * const pvBuffer,
1320:../Dave/Generated/FREERTOS/queue.c ****                           TickType_t xTicksToWait )
1321:../Dave/Generated/FREERTOS/queue.c **** {
 1629              	 .loc 1 1321 0
 1630              	 .cfi_startproc
 1631 0000 80B5     	 push {r7,lr}
 1632              	.LCFI39:
 1633              	 .cfi_def_cfa_offset 8
 1634              	 .cfi_offset 7,-8
 1635              	 .cfi_offset 14,-4
 1636 0002 8AB0     	 sub sp,sp,#40
 1637              	.LCFI40:
 1638              	 .cfi_def_cfa_offset 48
 1639 0004 00AF     	 add r7,sp,#0
 1640              	.LCFI41:
 1641              	 .cfi_def_cfa_register 7
 1642 0006 F860     	 str r0,[r7,#12]
 1643 0008 B960     	 str r1,[r7,#8]
 1644 000a 7A60     	 str r2,[r7,#4]
1322:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1645              	 .loc 1 1322 0
 1646 000c 0023     	 mov r3,#0
 1647 000e 7B62     	 str r3,[r7,#36]
1323:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
1324:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1648              	 .loc 1 1324 0
 1649 0010 FB68     	 ldr r3,[r7,#12]
 1650 0012 3B62     	 str r3,[r7,#32]
1325:../Dave/Generated/FREERTOS/queue.c **** 
1326:../Dave/Generated/FREERTOS/queue.c ****     /* Check the pointer is not NULL. */
1327:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( ( pxQueue ) );
 1651              	 .loc 1 1327 0
 1652 0014 3B6A     	 ldr r3,[r7,#32]
 1653 0016 002B     	 cmp r3,#0
 1654 0018 01D1     	 bne .L135
 1655              	 .loc 1 1327 0 is_stmt 0 discriminator 1
 1656              	
 1657 001a 72B6     	 cpsid i
 1658              	
 1659              	 .code 16
 1660              	.L136:
 1661 001c FEE7     	 b .L136
 1662              	.L135:
1328:../Dave/Generated/FREERTOS/queue.c **** 
1329:../Dave/Generated/FREERTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1330:../Dave/Generated/FREERTOS/queue.c ****      * is zero (so no data is copied into the buffer). */
1331:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 1663              	 .loc 1 1331 0 is_stmt 1
 1664 001e BB68     	 ldr r3,[r7,#8]
 1665 0020 002B     	 cmp r3,#0
 1666 0022 03D1     	 bne .L137
 1667              	 .loc 1 1331 0 is_stmt 0 discriminator 2
 1668 0024 3B6A     	 ldr r3,[r7,#32]
 1669 0026 1B6C     	 ldr r3,[r3,#64]
 1670 0028 002B     	 cmp r3,#0
 1671 002a 01D1     	 bne .L138
 1672              	.L137:
 1673              	 .loc 1 1331 0 discriminator 3
 1674 002c 0123     	 mov r3,#1
 1675 002e 00E0     	 b .L139
 1676              	.L138:
 1677              	 .loc 1 1331 0 discriminator 4
 1678 0030 0023     	 mov r3,#0
 1679              	.L139:
 1680              	 .loc 1 1331 0 discriminator 6
 1681 0032 002B     	 cmp r3,#0
 1682 0034 01D1     	 bne .L140
 1683              	 .loc 1 1331 0 discriminator 7
 1684              	
 1685 0036 72B6     	 cpsid i
 1686              	
 1687              	 .code 16
 1688              	.L141:
 1689              	 .loc 1 1331 0 discriminator 2
 1690 0038 FEE7     	 b .L141
 1691              	.L140:
1332:../Dave/Generated/FREERTOS/queue.c **** 
1333:../Dave/Generated/FREERTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1334:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1335:../Dave/Generated/FREERTOS/queue.c ****         {
1336:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 1692              	 .loc 1 1336 0 is_stmt 1
 1693 003a FFF7FEFF 	 bl xTaskGetSchedulerState
 1694 003e 031E     	 sub r3,r0,#0
 1695 0040 02D1     	 bne .L142
 1696              	 .loc 1 1336 0 is_stmt 0 discriminator 2
 1697 0042 7B68     	 ldr r3,[r7,#4]
 1698 0044 002B     	 cmp r3,#0
 1699 0046 01D1     	 bne .L143
 1700              	.L142:
 1701              	 .loc 1 1336 0 discriminator 3
 1702 0048 0123     	 mov r3,#1
 1703 004a 00E0     	 b .L144
 1704              	.L143:
 1705              	 .loc 1 1336 0 discriminator 4
 1706 004c 0023     	 mov r3,#0
 1707              	.L144:
 1708              	 .loc 1 1336 0 discriminator 6
 1709 004e 002B     	 cmp r3,#0
 1710 0050 01D1     	 bne .L145
 1711              	 .loc 1 1336 0 discriminator 7
 1712              	
 1713 0052 72B6     	 cpsid i
 1714              	
 1715              	 .code 16
 1716              	.L146:
 1717              	 .loc 1 1336 0 discriminator 3
 1718 0054 FEE7     	 b .L146
 1719              	.L145:
1337:../Dave/Generated/FREERTOS/queue.c ****         }
1338:../Dave/Generated/FREERTOS/queue.c ****     #endif
1339:../Dave/Generated/FREERTOS/queue.c **** 
1340:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1341:../Dave/Generated/FREERTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1342:../Dave/Generated/FREERTOS/queue.c ****      * interest of execution time efficiency. */
1343:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
1344:../Dave/Generated/FREERTOS/queue.c ****     {
1345:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 1720              	 .loc 1 1345 0 is_stmt 1
 1721 0056 FFF7FEFF 	 bl vPortEnterCritical
 1722              	.LBB6:
1346:../Dave/Generated/FREERTOS/queue.c ****         {
1347:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1723              	 .loc 1 1347 0
 1724 005a 3B6A     	 ldr r3,[r7,#32]
 1725 005c 9B6B     	 ldr r3,[r3,#56]
 1726 005e FB61     	 str r3,[r7,#28]
1348:../Dave/Generated/FREERTOS/queue.c **** 
1349:../Dave/Generated/FREERTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1350:../Dave/Generated/FREERTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1351:../Dave/Generated/FREERTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1727              	 .loc 1 1351 0
 1728 0060 FB69     	 ldr r3,[r7,#28]
 1729 0062 002B     	 cmp r3,#0
 1730 0064 1AD0     	 beq .L147
1352:../Dave/Generated/FREERTOS/queue.c ****             {
1353:../Dave/Generated/FREERTOS/queue.c ****                 /* Data available, remove one item. */
1354:../Dave/Generated/FREERTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 1731              	 .loc 1 1354 0
 1732 0066 3A6A     	 ldr r2,[r7,#32]
 1733 0068 BB68     	 ldr r3,[r7,#8]
 1734 006a 101C     	 mov r0,r2
 1735 006c 191C     	 mov r1,r3
 1736 006e FFF7FEFF 	 bl prvCopyDataFromQueue
1355:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1356:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1737              	 .loc 1 1356 0
 1738 0072 FB69     	 ldr r3,[r7,#28]
 1739 0074 5A1E     	 sub r2,r3,#1
 1740 0076 3B6A     	 ldr r3,[r7,#32]
 1741 0078 9A63     	 str r2,[r3,#56]
1357:../Dave/Generated/FREERTOS/queue.c **** 
1358:../Dave/Generated/FREERTOS/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1359:../Dave/Generated/FREERTOS/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1360:../Dave/Generated/FREERTOS/queue.c ****                  * task. */
1361:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1742              	 .loc 1 1361 0
 1743 007a 3B6A     	 ldr r3,[r7,#32]
 1744 007c 1B69     	 ldr r3,[r3,#16]
 1745 007e 002B     	 cmp r3,#0
 1746 0080 08D0     	 beq .L148
1362:../Dave/Generated/FREERTOS/queue.c ****                 {
1363:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1747              	 .loc 1 1363 0
 1748 0082 3B6A     	 ldr r3,[r7,#32]
 1749 0084 1033     	 add r3,r3,#16
 1750 0086 181C     	 mov r0,r3
 1751 0088 FFF7FEFF 	 bl xTaskRemoveFromEventList
 1752 008c 031E     	 sub r3,r0,#0
 1753 008e 01D0     	 beq .L148
1364:../Dave/Generated/FREERTOS/queue.c ****                     {
1365:../Dave/Generated/FREERTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 1754              	 .loc 1 1365 0
 1755 0090 FFF7FEFF 	 bl vPortYield
 1756              	.L148:
1366:../Dave/Generated/FREERTOS/queue.c ****                     }
1367:../Dave/Generated/FREERTOS/queue.c ****                     else
1368:../Dave/Generated/FREERTOS/queue.c ****                     {
1369:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1370:../Dave/Generated/FREERTOS/queue.c ****                     }
1371:../Dave/Generated/FREERTOS/queue.c ****                 }
1372:../Dave/Generated/FREERTOS/queue.c ****                 else
1373:../Dave/Generated/FREERTOS/queue.c ****                 {
1374:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1375:../Dave/Generated/FREERTOS/queue.c ****                 }
1376:../Dave/Generated/FREERTOS/queue.c **** 
1377:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 1757              	 .loc 1 1377 0
 1758 0094 FFF7FEFF 	 bl vPortExitCritical
1378:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 1759              	 .loc 1 1378 0
 1760 0098 0123     	 mov r3,#1
 1761 009a 66E0     	 b .L158
 1762              	.L147:
1379:../Dave/Generated/FREERTOS/queue.c ****             }
1380:../Dave/Generated/FREERTOS/queue.c ****             else
1381:../Dave/Generated/FREERTOS/queue.c ****             {
1382:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 1763              	 .loc 1 1382 0
 1764 009c 7B68     	 ldr r3,[r7,#4]
 1765 009e 002B     	 cmp r3,#0
 1766 00a0 03D1     	 bne .L150
1383:../Dave/Generated/FREERTOS/queue.c ****                 {
1384:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1385:../Dave/Generated/FREERTOS/queue.c ****                      * the block time has expired) so leave now. */
1386:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 1767              	 .loc 1 1386 0
 1768 00a2 FFF7FEFF 	 bl vPortExitCritical
1387:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1388:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_EMPTY;
 1769              	 .loc 1 1388 0
 1770 00a6 0023     	 mov r3,#0
 1771 00a8 5FE0     	 b .L158
 1772              	.L150:
1389:../Dave/Generated/FREERTOS/queue.c ****                 }
1390:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 1773              	 .loc 1 1390 0
 1774 00aa 7B6A     	 ldr r3,[r7,#36]
 1775 00ac 002B     	 cmp r3,#0
 1776 00ae 06D1     	 bne .L151
1391:../Dave/Generated/FREERTOS/queue.c ****                 {
1392:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1393:../Dave/Generated/FREERTOS/queue.c ****                      * configure the timeout structure. */
1394:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 1777              	 .loc 1 1394 0
 1778 00b0 1423     	 mov r3,#20
 1779 00b2 FB18     	 add r3,r7,r3
 1780 00b4 181C     	 mov r0,r3
 1781 00b6 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
1395:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 1782              	 .loc 1 1395 0
 1783 00ba 0123     	 mov r3,#1
 1784 00bc 7B62     	 str r3,[r7,#36]
 1785              	.L151:
 1786              	.LBE6:
1396:../Dave/Generated/FREERTOS/queue.c ****                 }
1397:../Dave/Generated/FREERTOS/queue.c ****                 else
1398:../Dave/Generated/FREERTOS/queue.c ****                 {
1399:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
1400:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1401:../Dave/Generated/FREERTOS/queue.c ****                 }
1402:../Dave/Generated/FREERTOS/queue.c ****             }
1403:../Dave/Generated/FREERTOS/queue.c ****         }
1404:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 1787              	 .loc 1 1404 0
 1788 00be FFF7FEFF 	 bl vPortExitCritical
1405:../Dave/Generated/FREERTOS/queue.c **** 
1406:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1407:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
1408:../Dave/Generated/FREERTOS/queue.c **** 
1409:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 1789              	 .loc 1 1409 0
 1790 00c2 FFF7FEFF 	 bl vTaskSuspendAll
1410:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 1791              	 .loc 1 1410 0
 1792 00c6 FFF7FEFF 	 bl vPortEnterCritical
 1793 00ca 3B6A     	 ldr r3,[r7,#32]
 1794 00cc 4422     	 mov r2,#68
 1795 00ce 9B5C     	 ldrb r3,[r3,r2]
 1796 00d0 DBB2     	 uxtb r3,r3
 1797 00d2 5BB2     	 sxtb r3,r3
 1798 00d4 0133     	 add r3,r3,#1
 1799 00d6 03D1     	 bne .L152
 1800              	 .loc 1 1410 0 is_stmt 0 discriminator 1
 1801 00d8 3B6A     	 ldr r3,[r7,#32]
 1802 00da 4422     	 mov r2,#68
 1803 00dc 0021     	 mov r1,#0
 1804 00de 9954     	 strb r1,[r3,r2]
 1805              	.L152:
 1806              	 .loc 1 1410 0 discriminator 3
 1807 00e0 3B6A     	 ldr r3,[r7,#32]
 1808 00e2 4522     	 mov r2,#69
 1809 00e4 9B5C     	 ldrb r3,[r3,r2]
 1810 00e6 DBB2     	 uxtb r3,r3
 1811 00e8 5BB2     	 sxtb r3,r3
 1812 00ea 0133     	 add r3,r3,#1
 1813 00ec 03D1     	 bne .L153
 1814              	 .loc 1 1410 0 discriminator 4
 1815 00ee 3B6A     	 ldr r3,[r7,#32]
 1816 00f0 4522     	 mov r2,#69
 1817 00f2 0021     	 mov r1,#0
 1818 00f4 9954     	 strb r1,[r3,r2]
 1819              	.L153:
 1820              	 .loc 1 1410 0 discriminator 6
 1821 00f6 FFF7FEFF 	 bl vPortExitCritical
1411:../Dave/Generated/FREERTOS/queue.c **** 
1412:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1413:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1822              	 .loc 1 1413 0 is_stmt 1 discriminator 6
 1823 00fa 1423     	 mov r3,#20
 1824 00fc FA18     	 add r2,r7,r3
 1825 00fe 3B1D     	 add r3,r7,#4
 1826 0100 101C     	 mov r0,r2
 1827 0102 191C     	 mov r1,r3
 1828 0104 FFF7FEFF 	 bl xTaskCheckForTimeOut
 1829 0108 031E     	 sub r3,r0,#0
 1830 010a 1FD1     	 bne .L154
1414:../Dave/Generated/FREERTOS/queue.c ****         {
1415:../Dave/Generated/FREERTOS/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1416:../Dave/Generated/FREERTOS/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1417:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1831              	 .loc 1 1417 0
 1832 010c 3B6A     	 ldr r3,[r7,#32]
 1833 010e 181C     	 mov r0,r3
 1834 0110 FFF7FEFF 	 bl prvIsQueueEmpty
 1835 0114 031E     	 sub r3,r0,#0
 1836 0116 12D0     	 beq .L155
1418:../Dave/Generated/FREERTOS/queue.c ****             {
1419:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1420:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1837              	 .loc 1 1420 0
 1838 0118 3B6A     	 ldr r3,[r7,#32]
 1839 011a 2433     	 add r3,r3,#36
 1840 011c 1A1C     	 mov r2,r3
 1841 011e 7B68     	 ldr r3,[r7,#4]
 1842 0120 101C     	 mov r0,r2
 1843 0122 191C     	 mov r1,r3
 1844 0124 FFF7FEFF 	 bl vTaskPlaceOnEventList
1421:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1845              	 .loc 1 1421 0
 1846 0128 3B6A     	 ldr r3,[r7,#32]
 1847 012a 181C     	 mov r0,r3
 1848 012c FFF7FEFF 	 bl prvUnlockQueue
1422:../Dave/Generated/FREERTOS/queue.c **** 
1423:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 1849              	 .loc 1 1423 0
 1850 0130 FFF7FEFF 	 bl xTaskResumeAll
 1851 0134 031E     	 sub r3,r0,#0
 1852 0136 17D1     	 bne .L157
1424:../Dave/Generated/FREERTOS/queue.c ****                 {
1425:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 1853              	 .loc 1 1425 0
 1854 0138 FFF7FEFF 	 bl vPortYield
 1855 013c 14E0     	 b .L157
 1856              	.L155:
1426:../Dave/Generated/FREERTOS/queue.c ****                 }
1427:../Dave/Generated/FREERTOS/queue.c ****                 else
1428:../Dave/Generated/FREERTOS/queue.c ****                 {
1429:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1430:../Dave/Generated/FREERTOS/queue.c ****                 }
1431:../Dave/Generated/FREERTOS/queue.c ****             }
1432:../Dave/Generated/FREERTOS/queue.c ****             else
1433:../Dave/Generated/FREERTOS/queue.c ****             {
1434:../Dave/Generated/FREERTOS/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1435:../Dave/Generated/FREERTOS/queue.c ****                  * data. */
1436:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 1857              	 .loc 1 1436 0
 1858 013e 3B6A     	 ldr r3,[r7,#32]
 1859 0140 181C     	 mov r0,r3
 1860 0142 FFF7FEFF 	 bl prvUnlockQueue
1437:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 1861              	 .loc 1 1437 0
 1862 0146 FFF7FEFF 	 bl xTaskResumeAll
 1863 014a 84E7     	 b .L145
 1864              	.L154:
1438:../Dave/Generated/FREERTOS/queue.c ****             }
1439:../Dave/Generated/FREERTOS/queue.c ****         }
1440:../Dave/Generated/FREERTOS/queue.c ****         else
1441:../Dave/Generated/FREERTOS/queue.c ****         {
1442:../Dave/Generated/FREERTOS/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1443:../Dave/Generated/FREERTOS/queue.c ****              * back and attempt to read the data. */
1444:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 1865              	 .loc 1 1444 0
 1866 014c 3B6A     	 ldr r3,[r7,#32]
 1867 014e 181C     	 mov r0,r3
 1868 0150 FFF7FEFF 	 bl prvUnlockQueue
1445:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 1869              	 .loc 1 1445 0
 1870 0154 FFF7FEFF 	 bl xTaskResumeAll
1446:../Dave/Generated/FREERTOS/queue.c **** 
1447:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1871              	 .loc 1 1447 0
 1872 0158 3B6A     	 ldr r3,[r7,#32]
 1873 015a 181C     	 mov r0,r3
 1874 015c FFF7FEFF 	 bl prvIsQueueEmpty
 1875 0160 031E     	 sub r3,r0,#0
 1876 0162 01D0     	 beq .L157
1448:../Dave/Generated/FREERTOS/queue.c ****             {
1449:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1450:../Dave/Generated/FREERTOS/queue.c ****                 return errQUEUE_EMPTY;
 1877              	 .loc 1 1450 0
 1878 0164 0023     	 mov r3,#0
 1879 0166 00E0     	 b .L158
 1880              	.L157:
1451:../Dave/Generated/FREERTOS/queue.c ****             }
1452:../Dave/Generated/FREERTOS/queue.c ****             else
1453:../Dave/Generated/FREERTOS/queue.c ****             {
1454:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1455:../Dave/Generated/FREERTOS/queue.c ****             }
1456:../Dave/Generated/FREERTOS/queue.c ****         }
1457:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 1881              	 .loc 1 1457 0 discriminator 5
 1882 0168 75E7     	 b .L145
 1883              	.L158:
1458:../Dave/Generated/FREERTOS/queue.c **** }
 1884              	 .loc 1 1458 0 discriminator 6
 1885 016a 181C     	 mov r0,r3
 1886 016c BD46     	 mov sp,r7
 1887 016e 0AB0     	 add sp,sp,#40
 1888              	 
 1889 0170 80BD     	 pop {r7,pc}
 1890              	 .cfi_endproc
 1891              	.LFE55:
 1893 0172 C046     	 .section .text.xQueueSemaphoreTake,"ax",%progbits
 1894              	 .align 2
 1895              	 .global xQueueSemaphoreTake
 1896              	 .code 16
 1897              	 .thumb_func
 1899              	xQueueSemaphoreTake:
 1900              	.LFB56:
1459:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1460:../Dave/Generated/FREERTOS/queue.c **** 
1461:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1462:../Dave/Generated/FREERTOS/queue.c ****                                 TickType_t xTicksToWait )
1463:../Dave/Generated/FREERTOS/queue.c **** {
 1901              	 .loc 1 1463 0
 1902              	 .cfi_startproc
 1903 0000 80B5     	 push {r7,lr}
 1904              	.LCFI42:
 1905              	 .cfi_def_cfa_offset 8
 1906              	 .cfi_offset 7,-8
 1907              	 .cfi_offset 14,-4
 1908 0002 8AB0     	 sub sp,sp,#40
 1909              	.LCFI43:
 1910              	 .cfi_def_cfa_offset 48
 1911 0004 00AF     	 add r7,sp,#0
 1912              	.LCFI44:
 1913              	 .cfi_def_cfa_register 7
 1914 0006 7860     	 str r0,[r7,#4]
 1915 0008 3960     	 str r1,[r7]
1464:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1916              	 .loc 1 1464 0
 1917 000a 0023     	 mov r3,#0
 1918 000c 7B62     	 str r3,[r7,#36]
1465:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
1466:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 1919              	 .loc 1 1466 0
 1920 000e 7B68     	 ldr r3,[r7,#4]
 1921 0010 FB61     	 str r3,[r7,#28]
1467:../Dave/Generated/FREERTOS/queue.c **** 
1468:../Dave/Generated/FREERTOS/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1469:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
 1922              	 .loc 1 1469 0
 1923 0012 0023     	 mov r3,#0
 1924 0014 3B62     	 str r3,[r7,#32]
1470:../Dave/Generated/FREERTOS/queue.c ****     #endif
1471:../Dave/Generated/FREERTOS/queue.c **** 
1472:../Dave/Generated/FREERTOS/queue.c ****     /* Check the queue pointer is not NULL. */
1473:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( ( pxQueue ) );
 1925              	 .loc 1 1473 0
 1926 0016 FB69     	 ldr r3,[r7,#28]
 1927 0018 002B     	 cmp r3,#0
 1928 001a 01D1     	 bne .L160
 1929              	 .loc 1 1473 0 is_stmt 0 discriminator 1
 1930              	
 1931 001c 72B6     	 cpsid i
 1932              	
 1933              	 .code 16
 1934              	.L161:
 1935 001e FEE7     	 b .L161
 1936              	.L160:
1474:../Dave/Generated/FREERTOS/queue.c **** 
1475:../Dave/Generated/FREERTOS/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1476:../Dave/Generated/FREERTOS/queue.c ****      * 0. */
1477:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
 1937              	 .loc 1 1477 0 is_stmt 1
 1938 0020 FB69     	 ldr r3,[r7,#28]
 1939 0022 1B6C     	 ldr r3,[r3,#64]
 1940 0024 002B     	 cmp r3,#0
 1941 0026 01D0     	 beq .L162
 1942              	 .loc 1 1477 0 is_stmt 0 discriminator 1
 1943              	
 1944 0028 72B6     	 cpsid i
 1945              	
 1946              	 .code 16
 1947              	.L163:
 1948              	 .loc 1 1477 0 discriminator 2
 1949 002a FEE7     	 b .L163
 1950              	.L162:
1478:../Dave/Generated/FREERTOS/queue.c **** 
1479:../Dave/Generated/FREERTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1480:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1481:../Dave/Generated/FREERTOS/queue.c ****         {
1482:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 1951              	 .loc 1 1482 0 is_stmt 1
 1952 002c FFF7FEFF 	 bl xTaskGetSchedulerState
 1953 0030 031E     	 sub r3,r0,#0
 1954 0032 02D1     	 bne .L164
 1955              	 .loc 1 1482 0 is_stmt 0 discriminator 2
 1956 0034 3B68     	 ldr r3,[r7]
 1957 0036 002B     	 cmp r3,#0
 1958 0038 01D1     	 bne .L165
 1959              	.L164:
 1960              	 .loc 1 1482 0 discriminator 3
 1961 003a 0123     	 mov r3,#1
 1962 003c 00E0     	 b .L166
 1963              	.L165:
 1964              	 .loc 1 1482 0 discriminator 4
 1965 003e 0023     	 mov r3,#0
 1966              	.L166:
 1967              	 .loc 1 1482 0 discriminator 6
 1968 0040 002B     	 cmp r3,#0
 1969 0042 01D1     	 bne .L167
 1970              	 .loc 1 1482 0 discriminator 7
 1971              	
 1972 0044 72B6     	 cpsid i
 1973              	
 1974              	 .code 16
 1975              	.L168:
 1976              	 .loc 1 1482 0 discriminator 3
 1977 0046 FEE7     	 b .L168
 1978              	.L167:
1483:../Dave/Generated/FREERTOS/queue.c ****         }
1484:../Dave/Generated/FREERTOS/queue.c ****     #endif
1485:../Dave/Generated/FREERTOS/queue.c **** 
1486:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1487:../Dave/Generated/FREERTOS/queue.c ****      * statements within the function itself.  This is done in the interest
1488:../Dave/Generated/FREERTOS/queue.c ****      * of execution time efficiency. */
1489:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
1490:../Dave/Generated/FREERTOS/queue.c ****     {
1491:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 1979              	 .loc 1 1491 0 is_stmt 1
 1980 0048 FFF7FEFF 	 bl vPortEnterCritical
 1981              	.LBB7:
1492:../Dave/Generated/FREERTOS/queue.c ****         {
1493:../Dave/Generated/FREERTOS/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1494:../Dave/Generated/FREERTOS/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1495:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1982              	 .loc 1 1495 0
 1983 004c FB69     	 ldr r3,[r7,#28]
 1984 004e 9B6B     	 ldr r3,[r3,#56]
 1985 0050 BB61     	 str r3,[r7,#24]
1496:../Dave/Generated/FREERTOS/queue.c **** 
1497:../Dave/Generated/FREERTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1498:../Dave/Generated/FREERTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1499:../Dave/Generated/FREERTOS/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 1986              	 .loc 1 1499 0
 1987 0052 BB69     	 ldr r3,[r7,#24]
 1988 0054 002B     	 cmp r3,#0
 1989 0056 1DD0     	 beq .L169
1500:../Dave/Generated/FREERTOS/queue.c ****             {
1501:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1502:../Dave/Generated/FREERTOS/queue.c **** 
1503:../Dave/Generated/FREERTOS/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1504:../Dave/Generated/FREERTOS/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1505:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 1990              	 .loc 1 1505 0
 1991 0058 BB69     	 ldr r3,[r7,#24]
 1992 005a 5A1E     	 sub r2,r3,#1
 1993 005c FB69     	 ldr r3,[r7,#28]
 1994 005e 9A63     	 str r2,[r3,#56]
1506:../Dave/Generated/FREERTOS/queue.c **** 
1507:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1508:../Dave/Generated/FREERTOS/queue.c ****                     {
1509:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1995              	 .loc 1 1509 0
 1996 0060 FB69     	 ldr r3,[r7,#28]
 1997 0062 1B68     	 ldr r3,[r3]
 1998 0064 002B     	 cmp r3,#0
 1999 0066 04D1     	 bne .L170
1510:../Dave/Generated/FREERTOS/queue.c ****                         {
1511:../Dave/Generated/FREERTOS/queue.c ****                             /* Record the information required to implement
1512:../Dave/Generated/FREERTOS/queue.c ****                              * priority inheritance should it become necessary. */
1513:../Dave/Generated/FREERTOS/queue.c ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 2000              	 .loc 1 1513 0
 2001 0068 FFF7FEFF 	 bl pvTaskIncrementMutexHeldCount
 2002 006c 021C     	 mov r2,r0
 2003 006e FB69     	 ldr r3,[r7,#28]
 2004 0070 9A60     	 str r2,[r3,#8]
 2005              	.L170:
1514:../Dave/Generated/FREERTOS/queue.c ****                         }
1515:../Dave/Generated/FREERTOS/queue.c ****                         else
1516:../Dave/Generated/FREERTOS/queue.c ****                         {
1517:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1518:../Dave/Generated/FREERTOS/queue.c ****                         }
1519:../Dave/Generated/FREERTOS/queue.c ****                     }
1520:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1521:../Dave/Generated/FREERTOS/queue.c **** 
1522:../Dave/Generated/FREERTOS/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1523:../Dave/Generated/FREERTOS/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1524:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2006              	 .loc 1 1524 0
 2007 0072 FB69     	 ldr r3,[r7,#28]
 2008 0074 1B69     	 ldr r3,[r3,#16]
 2009 0076 002B     	 cmp r3,#0
 2010 0078 08D0     	 beq .L171
1525:../Dave/Generated/FREERTOS/queue.c ****                 {
1526:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2011              	 .loc 1 1526 0
 2012 007a FB69     	 ldr r3,[r7,#28]
 2013 007c 1033     	 add r3,r3,#16
 2014 007e 181C     	 mov r0,r3
 2015 0080 FFF7FEFF 	 bl xTaskRemoveFromEventList
 2016 0084 031E     	 sub r3,r0,#0
 2017 0086 01D0     	 beq .L171
1527:../Dave/Generated/FREERTOS/queue.c ****                     {
1528:../Dave/Generated/FREERTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2018              	 .loc 1 1528 0
 2019 0088 FFF7FEFF 	 bl vPortYield
 2020              	.L171:
1529:../Dave/Generated/FREERTOS/queue.c ****                     }
1530:../Dave/Generated/FREERTOS/queue.c ****                     else
1531:../Dave/Generated/FREERTOS/queue.c ****                     {
1532:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1533:../Dave/Generated/FREERTOS/queue.c ****                     }
1534:../Dave/Generated/FREERTOS/queue.c ****                 }
1535:../Dave/Generated/FREERTOS/queue.c ****                 else
1536:../Dave/Generated/FREERTOS/queue.c ****                 {
1537:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1538:../Dave/Generated/FREERTOS/queue.c ****                 }
1539:../Dave/Generated/FREERTOS/queue.c **** 
1540:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 2021              	 .loc 1 1540 0
 2022 008c FFF7FEFF 	 bl vPortExitCritical
1541:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 2023              	 .loc 1 1541 0
 2024 0090 0123     	 mov r3,#1
 2025 0092 8EE0     	 b .L185
 2026              	.L169:
1542:../Dave/Generated/FREERTOS/queue.c ****             }
1543:../Dave/Generated/FREERTOS/queue.c ****             else
1544:../Dave/Generated/FREERTOS/queue.c ****             {
1545:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2027              	 .loc 1 1545 0
 2028 0094 3B68     	 ldr r3,[r7]
 2029 0096 002B     	 cmp r3,#0
 2030 0098 08D1     	 bne .L173
1546:../Dave/Generated/FREERTOS/queue.c ****                 {
1547:../Dave/Generated/FREERTOS/queue.c ****                     /* For inheritance to have occurred there must have been an
1548:../Dave/Generated/FREERTOS/queue.c ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1549:../Dave/Generated/FREERTOS/queue.c ****                      * if it were 0 the function would have exited. */
1550:../Dave/Generated/FREERTOS/queue.c ****                     #if ( configUSE_MUTEXES == 1 )
1551:../Dave/Generated/FREERTOS/queue.c ****                         {
1552:../Dave/Generated/FREERTOS/queue.c ****                             configASSERT( xInheritanceOccurred == pdFALSE );
 2031              	 .loc 1 1552 0
 2032 009a 3B6A     	 ldr r3,[r7,#32]
 2033 009c 002B     	 cmp r3,#0
 2034 009e 01D0     	 beq .L174
 2035              	 .loc 1 1552 0 is_stmt 0 discriminator 1
 2036              	
 2037 00a0 72B6     	 cpsid i
 2038              	
 2039              	 .code 16
 2040              	.L175:
 2041              	 .loc 1 1552 0 discriminator 4
 2042 00a2 FEE7     	 b .L175
 2043              	.L174:
1553:../Dave/Generated/FREERTOS/queue.c ****                         }
1554:../Dave/Generated/FREERTOS/queue.c ****                     #endif /* configUSE_MUTEXES */
1555:../Dave/Generated/FREERTOS/queue.c **** 
1556:../Dave/Generated/FREERTOS/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1557:../Dave/Generated/FREERTOS/queue.c ****                      * (or the block time has expired) so exit now. */
1558:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 2044              	 .loc 1 1558 0 is_stmt 1
 2045 00a4 FFF7FEFF 	 bl vPortExitCritical
1559:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1560:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_EMPTY;
 2046              	 .loc 1 1560 0
 2047 00a8 0023     	 mov r3,#0
 2048 00aa 82E0     	 b .L185
 2049              	.L173:
1561:../Dave/Generated/FREERTOS/queue.c ****                 }
1562:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2050              	 .loc 1 1562 0
 2051 00ac 7B6A     	 ldr r3,[r7,#36]
 2052 00ae 002B     	 cmp r3,#0
 2053 00b0 06D1     	 bne .L176
1563:../Dave/Generated/FREERTOS/queue.c ****                 {
1564:../Dave/Generated/FREERTOS/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1565:../Dave/Generated/FREERTOS/queue.c ****                      * so configure the timeout structure ready to block. */
1566:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2054              	 .loc 1 1566 0
 2055 00b2 0C23     	 mov r3,#12
 2056 00b4 FB18     	 add r3,r7,r3
 2057 00b6 181C     	 mov r0,r3
 2058 00b8 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
1567:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2059              	 .loc 1 1567 0
 2060 00bc 0123     	 mov r3,#1
 2061 00be 7B62     	 str r3,[r7,#36]
 2062              	.L176:
 2063              	.LBE7:
1568:../Dave/Generated/FREERTOS/queue.c ****                 }
1569:../Dave/Generated/FREERTOS/queue.c ****                 else
1570:../Dave/Generated/FREERTOS/queue.c ****                 {
1571:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
1572:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1573:../Dave/Generated/FREERTOS/queue.c ****                 }
1574:../Dave/Generated/FREERTOS/queue.c ****             }
1575:../Dave/Generated/FREERTOS/queue.c ****         }
1576:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 2064              	 .loc 1 1576 0
 2065 00c0 FFF7FEFF 	 bl vPortExitCritical
1577:../Dave/Generated/FREERTOS/queue.c **** 
1578:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1579:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
1580:../Dave/Generated/FREERTOS/queue.c **** 
1581:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 2066              	 .loc 1 1581 0
 2067 00c4 FFF7FEFF 	 bl vTaskSuspendAll
1582:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 2068              	 .loc 1 1582 0
 2069 00c8 FFF7FEFF 	 bl vPortEnterCritical
 2070 00cc FB69     	 ldr r3,[r7,#28]
 2071 00ce 4422     	 mov r2,#68
 2072 00d0 9B5C     	 ldrb r3,[r3,r2]
 2073 00d2 DBB2     	 uxtb r3,r3
 2074 00d4 5BB2     	 sxtb r3,r3
 2075 00d6 0133     	 add r3,r3,#1
 2076 00d8 03D1     	 bne .L177
 2077              	 .loc 1 1582 0 is_stmt 0 discriminator 1
 2078 00da FB69     	 ldr r3,[r7,#28]
 2079 00dc 4422     	 mov r2,#68
 2080 00de 0021     	 mov r1,#0
 2081 00e0 9954     	 strb r1,[r3,r2]
 2082              	.L177:
 2083              	 .loc 1 1582 0 discriminator 3
 2084 00e2 FB69     	 ldr r3,[r7,#28]
 2085 00e4 4522     	 mov r2,#69
 2086 00e6 9B5C     	 ldrb r3,[r3,r2]
 2087 00e8 DBB2     	 uxtb r3,r3
 2088 00ea 5BB2     	 sxtb r3,r3
 2089 00ec 0133     	 add r3,r3,#1
 2090 00ee 03D1     	 bne .L178
 2091              	 .loc 1 1582 0 discriminator 4
 2092 00f0 FB69     	 ldr r3,[r7,#28]
 2093 00f2 4522     	 mov r2,#69
 2094 00f4 0021     	 mov r1,#0
 2095 00f6 9954     	 strb r1,[r3,r2]
 2096              	.L178:
 2097              	 .loc 1 1582 0 discriminator 6
 2098 00f8 FFF7FEFF 	 bl vPortExitCritical
1583:../Dave/Generated/FREERTOS/queue.c **** 
1584:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1585:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2099              	 .loc 1 1585 0 is_stmt 1 discriminator 6
 2100 00fc 0C23     	 mov r3,#12
 2101 00fe FA18     	 add r2,r7,r3
 2102 0100 3B1C     	 mov r3,r7
 2103 0102 101C     	 mov r0,r2
 2104 0104 191C     	 mov r1,r3
 2105 0106 FFF7FEFF 	 bl xTaskCheckForTimeOut
 2106 010a 031E     	 sub r3,r0,#0
 2107 010c 2ED1     	 bne .L179
1586:../Dave/Generated/FREERTOS/queue.c ****         {
1587:../Dave/Generated/FREERTOS/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1588:../Dave/Generated/FREERTOS/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1589:../Dave/Generated/FREERTOS/queue.c ****              * become available.  As semaphores are implemented with queues the
1590:../Dave/Generated/FREERTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1591:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2108              	 .loc 1 1591 0
 2109 010e FB69     	 ldr r3,[r7,#28]
 2110 0110 181C     	 mov r0,r3
 2111 0112 FFF7FEFF 	 bl prvIsQueueEmpty
 2112 0116 031E     	 sub r3,r0,#0
 2113 0118 21D0     	 beq .L180
1592:../Dave/Generated/FREERTOS/queue.c ****             {
1593:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1594:../Dave/Generated/FREERTOS/queue.c **** 
1595:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1596:../Dave/Generated/FREERTOS/queue.c ****                     {
1597:../Dave/Generated/FREERTOS/queue.c ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2114              	 .loc 1 1597 0
 2115 011a FB69     	 ldr r3,[r7,#28]
 2116 011c 1B68     	 ldr r3,[r3]
 2117 011e 002B     	 cmp r3,#0
 2118 0120 0AD1     	 bne .L181
1598:../Dave/Generated/FREERTOS/queue.c ****                         {
1599:../Dave/Generated/FREERTOS/queue.c ****                             taskENTER_CRITICAL();
 2119              	 .loc 1 1599 0
 2120 0122 FFF7FEFF 	 bl vPortEnterCritical
1600:../Dave/Generated/FREERTOS/queue.c ****                             {
1601:../Dave/Generated/FREERTOS/queue.c ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
 2121              	 .loc 1 1601 0
 2122 0126 FB69     	 ldr r3,[r7,#28]
 2123 0128 9B68     	 ldr r3,[r3,#8]
 2124 012a 181C     	 mov r0,r3
 2125 012c FFF7FEFF 	 bl xTaskPriorityInherit
 2126 0130 031C     	 mov r3,r0
 2127 0132 3B62     	 str r3,[r7,#32]
1602:../Dave/Generated/FREERTOS/queue.c ****                             }
1603:../Dave/Generated/FREERTOS/queue.c ****                             taskEXIT_CRITICAL();
 2128              	 .loc 1 1603 0
 2129 0134 FFF7FEFF 	 bl vPortExitCritical
 2130              	.L181:
1604:../Dave/Generated/FREERTOS/queue.c ****                         }
1605:../Dave/Generated/FREERTOS/queue.c ****                         else
1606:../Dave/Generated/FREERTOS/queue.c ****                         {
1607:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1608:../Dave/Generated/FREERTOS/queue.c ****                         }
1609:../Dave/Generated/FREERTOS/queue.c ****                     }
1610:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:../Dave/Generated/FREERTOS/queue.c **** 
1612:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2131              	 .loc 1 1612 0
 2132 0138 FB69     	 ldr r3,[r7,#28]
 2133 013a 2433     	 add r3,r3,#36
 2134 013c 1A1C     	 mov r2,r3
 2135 013e 3B68     	 ldr r3,[r7]
 2136 0140 101C     	 mov r0,r2
 2137 0142 191C     	 mov r1,r3
 2138 0144 FFF7FEFF 	 bl vTaskPlaceOnEventList
1613:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2139              	 .loc 1 1613 0
 2140 0148 FB69     	 ldr r3,[r7,#28]
 2141 014a 181C     	 mov r0,r3
 2142 014c FFF7FEFF 	 bl prvUnlockQueue
1614:../Dave/Generated/FREERTOS/queue.c **** 
1615:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2143              	 .loc 1 1615 0
 2144 0150 FFF7FEFF 	 bl xTaskResumeAll
 2145 0154 031E     	 sub r3,r0,#0
 2146 0156 2BD1     	 bne .L183
1616:../Dave/Generated/FREERTOS/queue.c ****                 {
1617:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 2147              	 .loc 1 1617 0
 2148 0158 FFF7FEFF 	 bl vPortYield
 2149 015c 28E0     	 b .L183
 2150              	.L180:
1618:../Dave/Generated/FREERTOS/queue.c ****                 }
1619:../Dave/Generated/FREERTOS/queue.c ****                 else
1620:../Dave/Generated/FREERTOS/queue.c ****                 {
1621:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1622:../Dave/Generated/FREERTOS/queue.c ****                 }
1623:../Dave/Generated/FREERTOS/queue.c ****             }
1624:../Dave/Generated/FREERTOS/queue.c ****             else
1625:../Dave/Generated/FREERTOS/queue.c ****             {
1626:../Dave/Generated/FREERTOS/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1627:../Dave/Generated/FREERTOS/queue.c ****                  * attempt to take the semaphore again. */
1628:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2151              	 .loc 1 1628 0
 2152 015e FB69     	 ldr r3,[r7,#28]
 2153 0160 181C     	 mov r0,r3
 2154 0162 FFF7FEFF 	 bl prvUnlockQueue
1629:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2155              	 .loc 1 1629 0
 2156 0166 FFF7FEFF 	 bl xTaskResumeAll
 2157 016a 6DE7     	 b .L167
 2158              	.L179:
1630:../Dave/Generated/FREERTOS/queue.c ****             }
1631:../Dave/Generated/FREERTOS/queue.c ****         }
1632:../Dave/Generated/FREERTOS/queue.c ****         else
1633:../Dave/Generated/FREERTOS/queue.c ****         {
1634:../Dave/Generated/FREERTOS/queue.c ****             /* Timed out. */
1635:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2159              	 .loc 1 1635 0
 2160 016c FB69     	 ldr r3,[r7,#28]
 2161 016e 181C     	 mov r0,r3
 2162 0170 FFF7FEFF 	 bl prvUnlockQueue
1636:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 2163              	 .loc 1 1636 0
 2164 0174 FFF7FEFF 	 bl xTaskResumeAll
1637:../Dave/Generated/FREERTOS/queue.c **** 
1638:../Dave/Generated/FREERTOS/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1639:../Dave/Generated/FREERTOS/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1640:../Dave/Generated/FREERTOS/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1641:../Dave/Generated/FREERTOS/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1642:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2165              	 .loc 1 1642 0
 2166 0178 FB69     	 ldr r3,[r7,#28]
 2167 017a 181C     	 mov r0,r3
 2168 017c FFF7FEFF 	 bl prvIsQueueEmpty
 2169 0180 031E     	 sub r3,r0,#0
 2170 0182 15D0     	 beq .L183
1643:../Dave/Generated/FREERTOS/queue.c ****             {
1644:../Dave/Generated/FREERTOS/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1645:../Dave/Generated/FREERTOS/queue.c ****                     {
1646:../Dave/Generated/FREERTOS/queue.c ****                         /* xInheritanceOccurred could only have be set if
1647:../Dave/Generated/FREERTOS/queue.c ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1648:../Dave/Generated/FREERTOS/queue.c ****                          * test the mutex type again to check it is actually a mutex. */
1649:../Dave/Generated/FREERTOS/queue.c ****                         if( xInheritanceOccurred != pdFALSE )
 2171              	 .loc 1 1649 0
 2172 0184 3B6A     	 ldr r3,[r7,#32]
 2173 0186 002B     	 cmp r3,#0
 2174 0188 10D0     	 beq .L184
1650:../Dave/Generated/FREERTOS/queue.c ****                         {
1651:../Dave/Generated/FREERTOS/queue.c ****                             taskENTER_CRITICAL();
 2175              	 .loc 1 1651 0
 2176 018a FFF7FEFF 	 bl vPortEnterCritical
 2177              	.LBB8:
1652:../Dave/Generated/FREERTOS/queue.c ****                             {
1653:../Dave/Generated/FREERTOS/queue.c ****                                 UBaseType_t uxHighestWaitingPriority;
1654:../Dave/Generated/FREERTOS/queue.c **** 
1655:../Dave/Generated/FREERTOS/queue.c ****                                 /* This task blocking on the mutex caused another
1656:../Dave/Generated/FREERTOS/queue.c ****                                  * task to inherit this task's priority.  Now this task
1657:../Dave/Generated/FREERTOS/queue.c ****                                  * has timed out the priority should be disinherited
1658:../Dave/Generated/FREERTOS/queue.c ****                                  * again, but only as low as the next highest priority
1659:../Dave/Generated/FREERTOS/queue.c ****                                  * task that is waiting for the same mutex. */
1660:../Dave/Generated/FREERTOS/queue.c ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
 2178              	 .loc 1 1660 0
 2179 018e FB69     	 ldr r3,[r7,#28]
 2180 0190 181C     	 mov r0,r3
 2181 0192 FFF7FEFF 	 bl prvGetDisinheritPriorityAfterTimeout
 2182 0196 031C     	 mov r3,r0
 2183 0198 7B61     	 str r3,[r7,#20]
1661:../Dave/Generated/FREERTOS/queue.c ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
 2184              	 .loc 1 1661 0
 2185 019a FB69     	 ldr r3,[r7,#28]
 2186 019c 9A68     	 ldr r2,[r3,#8]
 2187 019e 7B69     	 ldr r3,[r7,#20]
 2188 01a0 101C     	 mov r0,r2
 2189 01a2 191C     	 mov r1,r3
 2190 01a4 FFF7FEFF 	 bl vTaskPriorityDisinheritAfterTimeout
 2191              	.LBE8:
1662:../Dave/Generated/FREERTOS/queue.c ****                             }
1663:../Dave/Generated/FREERTOS/queue.c ****                             taskEXIT_CRITICAL();
 2192              	 .loc 1 1663 0
 2193 01a8 FFF7FEFF 	 bl vPortExitCritical
 2194              	.L184:
1664:../Dave/Generated/FREERTOS/queue.c ****                         }
1665:../Dave/Generated/FREERTOS/queue.c ****                     }
1666:../Dave/Generated/FREERTOS/queue.c ****                 #endif /* configUSE_MUTEXES */
1667:../Dave/Generated/FREERTOS/queue.c **** 
1668:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1669:../Dave/Generated/FREERTOS/queue.c ****                 return errQUEUE_EMPTY;
 2195              	 .loc 1 1669 0
 2196 01ac 0023     	 mov r3,#0
 2197 01ae 00E0     	 b .L185
 2198              	.L183:
1670:../Dave/Generated/FREERTOS/queue.c ****             }
1671:../Dave/Generated/FREERTOS/queue.c ****             else
1672:../Dave/Generated/FREERTOS/queue.c ****             {
1673:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1674:../Dave/Generated/FREERTOS/queue.c ****             }
1675:../Dave/Generated/FREERTOS/queue.c ****         }
1676:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 2199              	 .loc 1 1676 0 discriminator 6
 2200 01b0 4AE7     	 b .L167
 2201              	.L185:
1677:../Dave/Generated/FREERTOS/queue.c **** }
 2202              	 .loc 1 1677 0 discriminator 7
 2203 01b2 181C     	 mov r0,r3
 2204 01b4 BD46     	 mov sp,r7
 2205 01b6 0AB0     	 add sp,sp,#40
 2206              	 
 2207 01b8 80BD     	 pop {r7,pc}
 2208              	 .cfi_endproc
 2209              	.LFE56:
 2211 01ba C046     	 .section .text.xQueuePeek,"ax",%progbits
 2212              	 .align 2
 2213              	 .global xQueuePeek
 2214              	 .code 16
 2215              	 .thumb_func
 2217              	xQueuePeek:
 2218              	.LFB57:
1678:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1679:../Dave/Generated/FREERTOS/queue.c **** 
1680:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1681:../Dave/Generated/FREERTOS/queue.c ****                        void * const pvBuffer,
1682:../Dave/Generated/FREERTOS/queue.c ****                        TickType_t xTicksToWait )
1683:../Dave/Generated/FREERTOS/queue.c **** {
 2219              	 .loc 1 1683 0
 2220              	 .cfi_startproc
 2221 0000 80B5     	 push {r7,lr}
 2222              	.LCFI45:
 2223              	 .cfi_def_cfa_offset 8
 2224              	 .cfi_offset 7,-8
 2225              	 .cfi_offset 14,-4
 2226 0002 8AB0     	 sub sp,sp,#40
 2227              	.LCFI46:
 2228              	 .cfi_def_cfa_offset 48
 2229 0004 00AF     	 add r7,sp,#0
 2230              	.LCFI47:
 2231              	 .cfi_def_cfa_register 7
 2232 0006 F860     	 str r0,[r7,#12]
 2233 0008 B960     	 str r1,[r7,#8]
 2234 000a 7A60     	 str r2,[r7,#4]
1684:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 2235              	 .loc 1 1684 0
 2236 000c 0023     	 mov r3,#0
 2237 000e 7B62     	 str r3,[r7,#36]
1685:../Dave/Generated/FREERTOS/queue.c ****     TimeOut_t xTimeOut;
1686:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1687:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2238              	 .loc 1 1687 0
 2239 0010 FB68     	 ldr r3,[r7,#12]
 2240 0012 3B62     	 str r3,[r7,#32]
1688:../Dave/Generated/FREERTOS/queue.c **** 
1689:../Dave/Generated/FREERTOS/queue.c ****     /* Check the pointer is not NULL. */
1690:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( ( pxQueue ) );
 2241              	 .loc 1 1690 0
 2242 0014 3B6A     	 ldr r3,[r7,#32]
 2243 0016 002B     	 cmp r3,#0
 2244 0018 01D1     	 bne .L187
 2245              	 .loc 1 1690 0 is_stmt 0 discriminator 1
 2246              	
 2247 001a 72B6     	 cpsid i
 2248              	
 2249              	 .code 16
 2250              	.L188:
 2251 001c FEE7     	 b .L188
 2252              	.L187:
1691:../Dave/Generated/FREERTOS/queue.c **** 
1692:../Dave/Generated/FREERTOS/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1693:../Dave/Generated/FREERTOS/queue.c ****      * is zero (so no data is copied into the buffer. */
1694:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
 2253              	 .loc 1 1694 0 is_stmt 1
 2254 001e BB68     	 ldr r3,[r7,#8]
 2255 0020 002B     	 cmp r3,#0
 2256 0022 03D1     	 bne .L189
 2257              	 .loc 1 1694 0 is_stmt 0 discriminator 2
 2258 0024 3B6A     	 ldr r3,[r7,#32]
 2259 0026 1B6C     	 ldr r3,[r3,#64]
 2260 0028 002B     	 cmp r3,#0
 2261 002a 01D1     	 bne .L190
 2262              	.L189:
 2263              	 .loc 1 1694 0 discriminator 3
 2264 002c 0123     	 mov r3,#1
 2265 002e 00E0     	 b .L191
 2266              	.L190:
 2267              	 .loc 1 1694 0 discriminator 4
 2268 0030 0023     	 mov r3,#0
 2269              	.L191:
 2270              	 .loc 1 1694 0 discriminator 6
 2271 0032 002B     	 cmp r3,#0
 2272 0034 01D1     	 bne .L192
 2273              	 .loc 1 1694 0 discriminator 7
 2274              	
 2275 0036 72B6     	 cpsid i
 2276              	
 2277              	 .code 16
 2278              	.L193:
 2279              	 .loc 1 1694 0 discriminator 2
 2280 0038 FEE7     	 b .L193
 2281              	.L192:
1695:../Dave/Generated/FREERTOS/queue.c **** 
1696:../Dave/Generated/FREERTOS/queue.c ****     /* Cannot block if the scheduler is suspended. */
1697:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1698:../Dave/Generated/FREERTOS/queue.c ****         {
1699:../Dave/Generated/FREERTOS/queue.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 2282              	 .loc 1 1699 0 is_stmt 1
 2283 003a FFF7FEFF 	 bl xTaskGetSchedulerState
 2284 003e 031E     	 sub r3,r0,#0
 2285 0040 02D1     	 bne .L194
 2286              	 .loc 1 1699 0 is_stmt 0 discriminator 2
 2287 0042 7B68     	 ldr r3,[r7,#4]
 2288 0044 002B     	 cmp r3,#0
 2289 0046 01D1     	 bne .L195
 2290              	.L194:
 2291              	 .loc 1 1699 0 discriminator 3
 2292 0048 0123     	 mov r3,#1
 2293 004a 00E0     	 b .L196
 2294              	.L195:
 2295              	 .loc 1 1699 0 discriminator 4
 2296 004c 0023     	 mov r3,#0
 2297              	.L196:
 2298              	 .loc 1 1699 0 discriminator 6
 2299 004e 002B     	 cmp r3,#0
 2300 0050 01D1     	 bne .L197
 2301              	 .loc 1 1699 0 discriminator 7
 2302              	
 2303 0052 72B6     	 cpsid i
 2304              	
 2305              	 .code 16
 2306              	.L198:
 2307              	 .loc 1 1699 0 discriminator 3
 2308 0054 FEE7     	 b .L198
 2309              	.L197:
1700:../Dave/Generated/FREERTOS/queue.c ****         }
1701:../Dave/Generated/FREERTOS/queue.c ****     #endif
1702:../Dave/Generated/FREERTOS/queue.c **** 
1703:../Dave/Generated/FREERTOS/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1704:../Dave/Generated/FREERTOS/queue.c ****      * allow return statements within the function itself.  This is done in the
1705:../Dave/Generated/FREERTOS/queue.c ****      * interest of execution time efficiency. */
1706:../Dave/Generated/FREERTOS/queue.c ****     for( ; ; )
1707:../Dave/Generated/FREERTOS/queue.c ****     {
1708:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 2310              	 .loc 1 1708 0 is_stmt 1
 2311 0056 FFF7FEFF 	 bl vPortEnterCritical
 2312              	.LBB9:
1709:../Dave/Generated/FREERTOS/queue.c ****         {
1710:../Dave/Generated/FREERTOS/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2313              	 .loc 1 1710 0
 2314 005a 3B6A     	 ldr r3,[r7,#32]
 2315 005c 9B6B     	 ldr r3,[r3,#56]
 2316 005e FB61     	 str r3,[r7,#28]
1711:../Dave/Generated/FREERTOS/queue.c **** 
1712:../Dave/Generated/FREERTOS/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1713:../Dave/Generated/FREERTOS/queue.c ****              * must be the highest priority task wanting to access the queue. */
1714:../Dave/Generated/FREERTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2317              	 .loc 1 1714 0
 2318 0060 FB69     	 ldr r3,[r7,#28]
 2319 0062 002B     	 cmp r3,#0
 2320 0064 1CD0     	 beq .L199
1715:../Dave/Generated/FREERTOS/queue.c ****             {
1716:../Dave/Generated/FREERTOS/queue.c ****                 /* Remember the read position so it can be reset after the data
1717:../Dave/Generated/FREERTOS/queue.c ****                  * is read from the queue as this function is only peeking the
1718:../Dave/Generated/FREERTOS/queue.c ****                  * data, not removing it. */
1719:../Dave/Generated/FREERTOS/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2321              	 .loc 1 1719 0
 2322 0066 3B6A     	 ldr r3,[r7,#32]
 2323 0068 DB68     	 ldr r3,[r3,#12]
 2324 006a BB61     	 str r3,[r7,#24]
1720:../Dave/Generated/FREERTOS/queue.c **** 
1721:../Dave/Generated/FREERTOS/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 2325              	 .loc 1 1721 0
 2326 006c 3A6A     	 ldr r2,[r7,#32]
 2327 006e BB68     	 ldr r3,[r7,#8]
 2328 0070 101C     	 mov r0,r2
 2329 0072 191C     	 mov r1,r3
 2330 0074 FFF7FEFF 	 bl prvCopyDataFromQueue
1722:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1723:../Dave/Generated/FREERTOS/queue.c **** 
1724:../Dave/Generated/FREERTOS/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1725:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2331              	 .loc 1 1725 0
 2332 0078 3B6A     	 ldr r3,[r7,#32]
 2333 007a BA69     	 ldr r2,[r7,#24]
 2334 007c DA60     	 str r2,[r3,#12]
1726:../Dave/Generated/FREERTOS/queue.c **** 
1727:../Dave/Generated/FREERTOS/queue.c ****                 /* The data is being left in the queue, so see if there are
1728:../Dave/Generated/FREERTOS/queue.c ****                  * any other tasks waiting for the data. */
1729:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2335              	 .loc 1 1729 0
 2336 007e 3B6A     	 ldr r3,[r7,#32]
 2337 0080 5B6A     	 ldr r3,[r3,#36]
 2338 0082 002B     	 cmp r3,#0
 2339 0084 08D0     	 beq .L200
1730:../Dave/Generated/FREERTOS/queue.c ****                 {
1731:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
 2340              	 .loc 1 1731 0
 2341 0086 3B6A     	 ldr r3,[r7,#32]
 2342 0088 2433     	 add r3,r3,#36
 2343 008a 181C     	 mov r0,r3
 2344 008c FFF7FEFF 	 bl xTaskRemoveFromEventList
 2345 0090 031E     	 sub r3,r0,#0
 2346 0092 01D0     	 beq .L200
1732:../Dave/Generated/FREERTOS/queue.c ****                     {
1733:../Dave/Generated/FREERTOS/queue.c ****                         /* The task waiting has a higher priority than this task. */
1734:../Dave/Generated/FREERTOS/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 2347              	 .loc 1 1734 0
 2348 0094 FFF7FEFF 	 bl vPortYield
 2349              	.L200:
1735:../Dave/Generated/FREERTOS/queue.c ****                     }
1736:../Dave/Generated/FREERTOS/queue.c ****                     else
1737:../Dave/Generated/FREERTOS/queue.c ****                     {
1738:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1739:../Dave/Generated/FREERTOS/queue.c ****                     }
1740:../Dave/Generated/FREERTOS/queue.c ****                 }
1741:../Dave/Generated/FREERTOS/queue.c ****                 else
1742:../Dave/Generated/FREERTOS/queue.c ****                 {
1743:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1744:../Dave/Generated/FREERTOS/queue.c ****                 }
1745:../Dave/Generated/FREERTOS/queue.c **** 
1746:../Dave/Generated/FREERTOS/queue.c ****                 taskEXIT_CRITICAL();
 2350              	 .loc 1 1746 0
 2351 0098 FFF7FEFF 	 bl vPortExitCritical
1747:../Dave/Generated/FREERTOS/queue.c ****                 return pdPASS;
 2352              	 .loc 1 1747 0
 2353 009c 0123     	 mov r3,#1
 2354 009e 66E0     	 b .L210
 2355              	.L199:
1748:../Dave/Generated/FREERTOS/queue.c ****             }
1749:../Dave/Generated/FREERTOS/queue.c ****             else
1750:../Dave/Generated/FREERTOS/queue.c ****             {
1751:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
 2356              	 .loc 1 1751 0
 2357 00a0 7B68     	 ldr r3,[r7,#4]
 2358 00a2 002B     	 cmp r3,#0
 2359 00a4 03D1     	 bne .L202
1752:../Dave/Generated/FREERTOS/queue.c ****                 {
1753:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and no block time is specified (or
1754:../Dave/Generated/FREERTOS/queue.c ****                      * the block time has expired) so leave now. */
1755:../Dave/Generated/FREERTOS/queue.c ****                     taskEXIT_CRITICAL();
 2360              	 .loc 1 1755 0
 2361 00a6 FFF7FEFF 	 bl vPortExitCritical
1756:../Dave/Generated/FREERTOS/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1757:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_EMPTY;
 2362              	 .loc 1 1757 0
 2363 00aa 0023     	 mov r3,#0
 2364 00ac 5FE0     	 b .L210
 2365              	.L202:
1758:../Dave/Generated/FREERTOS/queue.c ****                 }
1759:../Dave/Generated/FREERTOS/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
 2366              	 .loc 1 1759 0
 2367 00ae 7B6A     	 ldr r3,[r7,#36]
 2368 00b0 002B     	 cmp r3,#0
 2369 00b2 06D1     	 bne .L203
1760:../Dave/Generated/FREERTOS/queue.c ****                 {
1761:../Dave/Generated/FREERTOS/queue.c ****                     /* The queue was empty and a block time was specified so
1762:../Dave/Generated/FREERTOS/queue.c ****                      * configure the timeout structure ready to enter the blocked
1763:../Dave/Generated/FREERTOS/queue.c ****                      * state. */
1764:../Dave/Generated/FREERTOS/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 2370              	 .loc 1 1764 0
 2371 00b4 1023     	 mov r3,#16
 2372 00b6 FB18     	 add r3,r7,r3
 2373 00b8 181C     	 mov r0,r3
 2374 00ba FFF7FEFF 	 bl vTaskInternalSetTimeOutState
1765:../Dave/Generated/FREERTOS/queue.c ****                     xEntryTimeSet = pdTRUE;
 2375              	 .loc 1 1765 0
 2376 00be 0123     	 mov r3,#1
 2377 00c0 7B62     	 str r3,[r7,#36]
 2378              	.L203:
 2379              	.LBE9:
1766:../Dave/Generated/FREERTOS/queue.c ****                 }
1767:../Dave/Generated/FREERTOS/queue.c ****                 else
1768:../Dave/Generated/FREERTOS/queue.c ****                 {
1769:../Dave/Generated/FREERTOS/queue.c ****                     /* Entry time was already set. */
1770:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1771:../Dave/Generated/FREERTOS/queue.c ****                 }
1772:../Dave/Generated/FREERTOS/queue.c ****             }
1773:../Dave/Generated/FREERTOS/queue.c ****         }
1774:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 2380              	 .loc 1 1774 0
 2381 00c2 FFF7FEFF 	 bl vPortExitCritical
1775:../Dave/Generated/FREERTOS/queue.c **** 
1776:../Dave/Generated/FREERTOS/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1777:../Dave/Generated/FREERTOS/queue.c ****          * now the critical section has been exited. */
1778:../Dave/Generated/FREERTOS/queue.c **** 
1779:../Dave/Generated/FREERTOS/queue.c ****         vTaskSuspendAll();
 2382              	 .loc 1 1779 0
 2383 00c6 FFF7FEFF 	 bl vTaskSuspendAll
1780:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 2384              	 .loc 1 1780 0
 2385 00ca FFF7FEFF 	 bl vPortEnterCritical
 2386 00ce 3B6A     	 ldr r3,[r7,#32]
 2387 00d0 4422     	 mov r2,#68
 2388 00d2 9B5C     	 ldrb r3,[r3,r2]
 2389 00d4 DBB2     	 uxtb r3,r3
 2390 00d6 5BB2     	 sxtb r3,r3
 2391 00d8 0133     	 add r3,r3,#1
 2392 00da 03D1     	 bne .L204
 2393              	 .loc 1 1780 0 is_stmt 0 discriminator 1
 2394 00dc 3B6A     	 ldr r3,[r7,#32]
 2395 00de 4422     	 mov r2,#68
 2396 00e0 0021     	 mov r1,#0
 2397 00e2 9954     	 strb r1,[r3,r2]
 2398              	.L204:
 2399              	 .loc 1 1780 0 discriminator 3
 2400 00e4 3B6A     	 ldr r3,[r7,#32]
 2401 00e6 4522     	 mov r2,#69
 2402 00e8 9B5C     	 ldrb r3,[r3,r2]
 2403 00ea DBB2     	 uxtb r3,r3
 2404 00ec 5BB2     	 sxtb r3,r3
 2405 00ee 0133     	 add r3,r3,#1
 2406 00f0 03D1     	 bne .L205
 2407              	 .loc 1 1780 0 discriminator 4
 2408 00f2 3B6A     	 ldr r3,[r7,#32]
 2409 00f4 4522     	 mov r2,#69
 2410 00f6 0021     	 mov r1,#0
 2411 00f8 9954     	 strb r1,[r3,r2]
 2412              	.L205:
 2413              	 .loc 1 1780 0 discriminator 6
 2414 00fa FFF7FEFF 	 bl vPortExitCritical
1781:../Dave/Generated/FREERTOS/queue.c **** 
1782:../Dave/Generated/FREERTOS/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1783:../Dave/Generated/FREERTOS/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 2415              	 .loc 1 1783 0 is_stmt 1 discriminator 6
 2416 00fe 1023     	 mov r3,#16
 2417 0100 FA18     	 add r2,r7,r3
 2418 0102 3B1D     	 add r3,r7,#4
 2419 0104 101C     	 mov r0,r2
 2420 0106 191C     	 mov r1,r3
 2421 0108 FFF7FEFF 	 bl xTaskCheckForTimeOut
 2422 010c 031E     	 sub r3,r0,#0
 2423 010e 1FD1     	 bne .L206
1784:../Dave/Generated/FREERTOS/queue.c ****         {
1785:../Dave/Generated/FREERTOS/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1786:../Dave/Generated/FREERTOS/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1787:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2424              	 .loc 1 1787 0
 2425 0110 3B6A     	 ldr r3,[r7,#32]
 2426 0112 181C     	 mov r0,r3
 2427 0114 FFF7FEFF 	 bl prvIsQueueEmpty
 2428 0118 031E     	 sub r3,r0,#0
 2429 011a 12D0     	 beq .L207
1788:../Dave/Generated/FREERTOS/queue.c ****             {
1789:../Dave/Generated/FREERTOS/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1790:../Dave/Generated/FREERTOS/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2430              	 .loc 1 1790 0
 2431 011c 3B6A     	 ldr r3,[r7,#32]
 2432 011e 2433     	 add r3,r3,#36
 2433 0120 1A1C     	 mov r2,r3
 2434 0122 7B68     	 ldr r3,[r7,#4]
 2435 0124 101C     	 mov r0,r2
 2436 0126 191C     	 mov r1,r3
 2437 0128 FFF7FEFF 	 bl vTaskPlaceOnEventList
1791:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2438              	 .loc 1 1791 0
 2439 012c 3B6A     	 ldr r3,[r7,#32]
 2440 012e 181C     	 mov r0,r3
 2441 0130 FFF7FEFF 	 bl prvUnlockQueue
1792:../Dave/Generated/FREERTOS/queue.c **** 
1793:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
 2442              	 .loc 1 1793 0
 2443 0134 FFF7FEFF 	 bl xTaskResumeAll
 2444 0138 031E     	 sub r3,r0,#0
 2445 013a 17D1     	 bne .L209
1794:../Dave/Generated/FREERTOS/queue.c ****                 {
1795:../Dave/Generated/FREERTOS/queue.c ****                     portYIELD_WITHIN_API();
 2446              	 .loc 1 1795 0
 2447 013c FFF7FEFF 	 bl vPortYield
 2448 0140 14E0     	 b .L209
 2449              	.L207:
1796:../Dave/Generated/FREERTOS/queue.c ****                 }
1797:../Dave/Generated/FREERTOS/queue.c ****                 else
1798:../Dave/Generated/FREERTOS/queue.c ****                 {
1799:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1800:../Dave/Generated/FREERTOS/queue.c ****                 }
1801:../Dave/Generated/FREERTOS/queue.c ****             }
1802:../Dave/Generated/FREERTOS/queue.c ****             else
1803:../Dave/Generated/FREERTOS/queue.c ****             {
1804:../Dave/Generated/FREERTOS/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1805:../Dave/Generated/FREERTOS/queue.c ****                  * state, instead return to try and obtain the data. */
1806:../Dave/Generated/FREERTOS/queue.c ****                 prvUnlockQueue( pxQueue );
 2450              	 .loc 1 1806 0
 2451 0142 3B6A     	 ldr r3,[r7,#32]
 2452 0144 181C     	 mov r0,r3
 2453 0146 FFF7FEFF 	 bl prvUnlockQueue
1807:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) xTaskResumeAll();
 2454              	 .loc 1 1807 0
 2455 014a FFF7FEFF 	 bl xTaskResumeAll
 2456 014e 82E7     	 b .L197
 2457              	.L206:
1808:../Dave/Generated/FREERTOS/queue.c ****             }
1809:../Dave/Generated/FREERTOS/queue.c ****         }
1810:../Dave/Generated/FREERTOS/queue.c ****         else
1811:../Dave/Generated/FREERTOS/queue.c ****         {
1812:../Dave/Generated/FREERTOS/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
1813:../Dave/Generated/FREERTOS/queue.c ****              * exit, otherwise go back and try to read the data again. */
1814:../Dave/Generated/FREERTOS/queue.c ****             prvUnlockQueue( pxQueue );
 2458              	 .loc 1 1814 0
 2459 0150 3B6A     	 ldr r3,[r7,#32]
 2460 0152 181C     	 mov r0,r3
 2461 0154 FFF7FEFF 	 bl prvUnlockQueue
1815:../Dave/Generated/FREERTOS/queue.c ****             ( void ) xTaskResumeAll();
 2462              	 .loc 1 1815 0
 2463 0158 FFF7FEFF 	 bl xTaskResumeAll
1816:../Dave/Generated/FREERTOS/queue.c **** 
1817:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 2464              	 .loc 1 1817 0
 2465 015c 3B6A     	 ldr r3,[r7,#32]
 2466 015e 181C     	 mov r0,r3
 2467 0160 FFF7FEFF 	 bl prvIsQueueEmpty
 2468 0164 031E     	 sub r3,r0,#0
 2469 0166 01D0     	 beq .L209
1818:../Dave/Generated/FREERTOS/queue.c ****             {
1819:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1820:../Dave/Generated/FREERTOS/queue.c ****                 return errQUEUE_EMPTY;
 2470              	 .loc 1 1820 0
 2471 0168 0023     	 mov r3,#0
 2472 016a 00E0     	 b .L210
 2473              	.L209:
1821:../Dave/Generated/FREERTOS/queue.c ****             }
1822:../Dave/Generated/FREERTOS/queue.c ****             else
1823:../Dave/Generated/FREERTOS/queue.c ****             {
1824:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1825:../Dave/Generated/FREERTOS/queue.c ****             }
1826:../Dave/Generated/FREERTOS/queue.c ****         }
1827:../Dave/Generated/FREERTOS/queue.c ****     } /*lint -restore */
 2474              	 .loc 1 1827 0 discriminator 5
 2475 016c 73E7     	 b .L197
 2476              	.L210:
1828:../Dave/Generated/FREERTOS/queue.c **** }
 2477              	 .loc 1 1828 0 discriminator 6
 2478 016e 181C     	 mov r0,r3
 2479 0170 BD46     	 mov sp,r7
 2480 0172 0AB0     	 add sp,sp,#40
 2481              	 
 2482 0174 80BD     	 pop {r7,pc}
 2483              	 .cfi_endproc
 2484              	.LFE57:
 2486 0176 C046     	 .section .text.xQueueReceiveFromISR,"ax",%progbits
 2487              	 .align 2
 2488              	 .global xQueueReceiveFromISR
 2489              	 .code 16
 2490              	 .thumb_func
 2492              	xQueueReceiveFromISR:
 2493              	.LFB58:
1829:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1830:../Dave/Generated/FREERTOS/queue.c **** 
1831:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1832:../Dave/Generated/FREERTOS/queue.c ****                                  void * const pvBuffer,
1833:../Dave/Generated/FREERTOS/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1834:../Dave/Generated/FREERTOS/queue.c **** {
 2494              	 .loc 1 1834 0
 2495              	 .cfi_startproc
 2496 0000 80B5     	 push {r7,lr}
 2497              	.LCFI48:
 2498              	 .cfi_def_cfa_offset 8
 2499              	 .cfi_offset 7,-8
 2500              	 .cfi_offset 14,-4
 2501 0002 8AB0     	 sub sp,sp,#40
 2502              	.LCFI49:
 2503              	 .cfi_def_cfa_offset 48
 2504 0004 00AF     	 add r7,sp,#0
 2505              	.LCFI50:
 2506              	 .cfi_def_cfa_register 7
 2507 0006 F860     	 str r0,[r7,#12]
 2508 0008 B960     	 str r1,[r7,#8]
 2509 000a 7A60     	 str r2,[r7,#4]
1835:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
1836:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1837:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2510              	 .loc 1 1837 0
 2511 000c FB68     	 ldr r3,[r7,#12]
 2512 000e 3B62     	 str r3,[r7,#32]
1838:../Dave/Generated/FREERTOS/queue.c **** 
1839:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 2513              	 .loc 1 1839 0
 2514 0010 3B6A     	 ldr r3,[r7,#32]
 2515 0012 002B     	 cmp r3,#0
 2516 0014 01D1     	 bne .L212
 2517              	 .loc 1 1839 0 is_stmt 0 discriminator 1
 2518              	
 2519 0016 72B6     	 cpsid i
 2520              	
 2521              	 .code 16
 2522              	.L213:
 2523 0018 FEE7     	 b .L213
 2524              	.L212:
1840:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2525              	 .loc 1 1840 0 is_stmt 1
 2526 001a BB68     	 ldr r3,[r7,#8]
 2527 001c 002B     	 cmp r3,#0
 2528 001e 03D1     	 bne .L214
 2529              	 .loc 1 1840 0 is_stmt 0 discriminator 2
 2530 0020 3B6A     	 ldr r3,[r7,#32]
 2531 0022 1B6C     	 ldr r3,[r3,#64]
 2532 0024 002B     	 cmp r3,#0
 2533 0026 01D1     	 bne .L215
 2534              	.L214:
 2535              	 .loc 1 1840 0 discriminator 3
 2536 0028 0123     	 mov r3,#1
 2537 002a 00E0     	 b .L216
 2538              	.L215:
 2539              	 .loc 1 1840 0 discriminator 4
 2540 002c 0023     	 mov r3,#0
 2541              	.L216:
 2542              	 .loc 1 1840 0 discriminator 6
 2543 002e 002B     	 cmp r3,#0
 2544 0030 01D1     	 bne .L217
 2545              	 .loc 1 1840 0 discriminator 7
 2546              	
 2547 0032 72B6     	 cpsid i
 2548              	
 2549              	 .code 16
 2550              	.L218:
 2551              	 .loc 1 1840 0 discriminator 2
 2552 0034 FEE7     	 b .L218
 2553              	.L217:
1841:../Dave/Generated/FREERTOS/queue.c **** 
1842:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1843:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1844:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1845:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1846:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1847:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1848:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1849:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1850:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1851:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1852:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1853:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1854:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1855:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1856:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1857:../Dave/Generated/FREERTOS/queue.c **** 
1858:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2554              	 .loc 1 1858 0 is_stmt 1
 2555 0036 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 2556 003a 031C     	 mov r3,r0
 2557 003c FB61     	 str r3,[r7,#28]
 2558              	.LBB10:
1859:../Dave/Generated/FREERTOS/queue.c ****     {
1860:../Dave/Generated/FREERTOS/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2559              	 .loc 1 1860 0
 2560 003e 3B6A     	 ldr r3,[r7,#32]
 2561 0040 9B6B     	 ldr r3,[r3,#56]
 2562 0042 BB61     	 str r3,[r7,#24]
1861:../Dave/Generated/FREERTOS/queue.c **** 
1862:../Dave/Generated/FREERTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1863:../Dave/Generated/FREERTOS/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2563              	 .loc 1 1863 0
 2564 0044 BB69     	 ldr r3,[r7,#24]
 2565 0046 002B     	 cmp r3,#0
 2566 0048 3BD0     	 beq .L219
 2567              	.LBB11:
1864:../Dave/Generated/FREERTOS/queue.c ****         {
1865:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
 2568              	 .loc 1 1865 0
 2569 004a 1723     	 mov r3,#23
 2570 004c FB18     	 add r3,r7,r3
 2571 004e 3A6A     	 ldr r2,[r7,#32]
 2572 0050 4421     	 mov r1,#68
 2573 0052 525C     	 ldrb r2,[r2,r1]
 2574 0054 1A70     	 strb r2,[r3]
1866:../Dave/Generated/FREERTOS/queue.c **** 
1867:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1868:../Dave/Generated/FREERTOS/queue.c **** 
1869:../Dave/Generated/FREERTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2575              	 .loc 1 1869 0
 2576 0056 3A6A     	 ldr r2,[r7,#32]
 2577 0058 BB68     	 ldr r3,[r7,#8]
 2578 005a 101C     	 mov r0,r2
 2579 005c 191C     	 mov r1,r3
 2580 005e FFF7FEFF 	 bl prvCopyDataFromQueue
1870:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2581              	 .loc 1 1870 0
 2582 0062 BB69     	 ldr r3,[r7,#24]
 2583 0064 5A1E     	 sub r2,r3,#1
 2584 0066 3B6A     	 ldr r3,[r7,#32]
 2585 0068 9A63     	 str r2,[r3,#56]
1871:../Dave/Generated/FREERTOS/queue.c **** 
1872:../Dave/Generated/FREERTOS/queue.c ****             /* If the queue is locked the event list will not be modified.
1873:../Dave/Generated/FREERTOS/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1874:../Dave/Generated/FREERTOS/queue.c ****              * will know that an ISR has removed data while the queue was
1875:../Dave/Generated/FREERTOS/queue.c ****              * locked. */
1876:../Dave/Generated/FREERTOS/queue.c ****             if( cRxLock == queueUNLOCKED )
 2586              	 .loc 1 1876 0
 2587 006a 1723     	 mov r3,#23
 2588 006c FB18     	 add r3,r7,r3
 2589 006e 1B78     	 ldrb r3,[r3]
 2590 0070 5BB2     	 sxtb r3,r3
 2591 0072 0133     	 add r3,r3,#1
 2592 0074 11D1     	 bne .L220
1877:../Dave/Generated/FREERTOS/queue.c ****             {
1878:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2593              	 .loc 1 1878 0
 2594 0076 3B6A     	 ldr r3,[r7,#32]
 2595 0078 1B69     	 ldr r3,[r3,#16]
 2596 007a 002B     	 cmp r3,#0
 2597 007c 1ED0     	 beq .L221
1879:../Dave/Generated/FREERTOS/queue.c ****                 {
1880:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2598              	 .loc 1 1880 0
 2599 007e 3B6A     	 ldr r3,[r7,#32]
 2600 0080 1033     	 add r3,r3,#16
 2601 0082 181C     	 mov r0,r3
 2602 0084 FFF7FEFF 	 bl xTaskRemoveFromEventList
 2603 0088 031E     	 sub r3,r0,#0
 2604 008a 17D0     	 beq .L221
1881:../Dave/Generated/FREERTOS/queue.c ****                     {
1882:../Dave/Generated/FREERTOS/queue.c ****                         /* The task waiting has a higher priority than us so
1883:../Dave/Generated/FREERTOS/queue.c ****                          * force a context switch. */
1884:../Dave/Generated/FREERTOS/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
 2605              	 .loc 1 1884 0
 2606 008c 7B68     	 ldr r3,[r7,#4]
 2607 008e 002B     	 cmp r3,#0
 2608 0090 14D0     	 beq .L221
1885:../Dave/Generated/FREERTOS/queue.c ****                         {
1886:../Dave/Generated/FREERTOS/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
 2609              	 .loc 1 1886 0
 2610 0092 7B68     	 ldr r3,[r7,#4]
 2611 0094 0122     	 mov r2,#1
 2612 0096 1A60     	 str r2,[r3]
 2613 0098 10E0     	 b .L221
 2614              	.L220:
1887:../Dave/Generated/FREERTOS/queue.c ****                         }
1888:../Dave/Generated/FREERTOS/queue.c ****                         else
1889:../Dave/Generated/FREERTOS/queue.c ****                         {
1890:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/queue.c ****                         }
1892:../Dave/Generated/FREERTOS/queue.c ****                     }
1893:../Dave/Generated/FREERTOS/queue.c ****                     else
1894:../Dave/Generated/FREERTOS/queue.c ****                     {
1895:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1896:../Dave/Generated/FREERTOS/queue.c ****                     }
1897:../Dave/Generated/FREERTOS/queue.c ****                 }
1898:../Dave/Generated/FREERTOS/queue.c ****                 else
1899:../Dave/Generated/FREERTOS/queue.c ****                 {
1900:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1901:../Dave/Generated/FREERTOS/queue.c ****                 }
1902:../Dave/Generated/FREERTOS/queue.c ****             }
1903:../Dave/Generated/FREERTOS/queue.c ****             else
1904:../Dave/Generated/FREERTOS/queue.c ****             {
1905:../Dave/Generated/FREERTOS/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1906:../Dave/Generated/FREERTOS/queue.c ****                  * knows that data was removed while it was locked. */
1907:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cRxLock != queueINT8_MAX );
 2615              	 .loc 1 1907 0
 2616 009a 1723     	 mov r3,#23
 2617 009c FB18     	 add r3,r7,r3
 2618 009e 1B78     	 ldrb r3,[r3]
 2619 00a0 5BB2     	 sxtb r3,r3
 2620 00a2 7F2B     	 cmp r3,#127
 2621 00a4 01D1     	 bne .L222
 2622              	 .loc 1 1907 0 is_stmt 0 discriminator 1
 2623              	
 2624 00a6 72B6     	 cpsid i
 2625              	
 2626              	 .code 16
 2627              	.L223:
 2628              	 .loc 1 1907 0 discriminator 5
 2629 00a8 FEE7     	 b .L223
 2630              	.L222:
1908:../Dave/Generated/FREERTOS/queue.c **** 
1909:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 2631              	 .loc 1 1909 0 is_stmt 1
 2632 00aa 1723     	 mov r3,#23
 2633 00ac FB18     	 add r3,r7,r3
 2634 00ae 1B78     	 ldrb r3,[r3]
 2635 00b0 0133     	 add r3,r3,#1
 2636 00b2 DBB2     	 uxtb r3,r3
 2637 00b4 D9B2     	 uxtb r1,r3
 2638 00b6 3B6A     	 ldr r3,[r7,#32]
 2639 00b8 4422     	 mov r2,#68
 2640 00ba 9954     	 strb r1,[r3,r2]
 2641              	.L221:
1910:../Dave/Generated/FREERTOS/queue.c ****             }
1911:../Dave/Generated/FREERTOS/queue.c **** 
1912:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 2642              	 .loc 1 1912 0
 2643 00bc 0123     	 mov r3,#1
 2644 00be 7B62     	 str r3,[r7,#36]
 2645              	.LBE11:
 2646 00c0 01E0     	 b .L224
 2647              	.L219:
1913:../Dave/Generated/FREERTOS/queue.c ****         }
1914:../Dave/Generated/FREERTOS/queue.c ****         else
1915:../Dave/Generated/FREERTOS/queue.c ****         {
1916:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 2648              	 .loc 1 1916 0
 2649 00c2 0023     	 mov r3,#0
 2650 00c4 7B62     	 str r3,[r7,#36]
 2651              	.L224:
 2652              	.LBE10:
1917:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1918:../Dave/Generated/FREERTOS/queue.c ****         }
1919:../Dave/Generated/FREERTOS/queue.c ****     }
1920:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2653              	 .loc 1 1920 0
 2654 00c6 FB69     	 ldr r3,[r7,#28]
 2655 00c8 181C     	 mov r0,r3
 2656 00ca FFF7FEFF 	 bl vClearInterruptMaskFromISR
1921:../Dave/Generated/FREERTOS/queue.c **** 
1922:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 2657              	 .loc 1 1922 0
 2658 00ce 7B6A     	 ldr r3,[r7,#36]
1923:../Dave/Generated/FREERTOS/queue.c **** }
 2659              	 .loc 1 1923 0
 2660 00d0 181C     	 mov r0,r3
 2661 00d2 BD46     	 mov sp,r7
 2662 00d4 0AB0     	 add sp,sp,#40
 2663              	 
 2664 00d6 80BD     	 pop {r7,pc}
 2665              	 .cfi_endproc
 2666              	.LFE58:
 2668              	 .section .text.xQueuePeekFromISR,"ax",%progbits
 2669              	 .align 2
 2670              	 .global xQueuePeekFromISR
 2671              	 .code 16
 2672              	 .thumb_func
 2674              	xQueuePeekFromISR:
 2675              	.LFB59:
1924:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1925:../Dave/Generated/FREERTOS/queue.c **** 
1926:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1927:../Dave/Generated/FREERTOS/queue.c ****                               void * const pvBuffer )
1928:../Dave/Generated/FREERTOS/queue.c **** {
 2676              	 .loc 1 1928 0
 2677              	 .cfi_startproc
 2678 0000 80B5     	 push {r7,lr}
 2679              	.LCFI51:
 2680              	 .cfi_def_cfa_offset 8
 2681              	 .cfi_offset 7,-8
 2682              	 .cfi_offset 14,-4
 2683 0002 86B0     	 sub sp,sp,#24
 2684              	.LCFI52:
 2685              	 .cfi_def_cfa_offset 32
 2686 0004 00AF     	 add r7,sp,#0
 2687              	.LCFI53:
 2688              	 .cfi_def_cfa_register 7
 2689 0006 7860     	 str r0,[r7,#4]
 2690 0008 3960     	 str r1,[r7]
1929:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
1930:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1931:../Dave/Generated/FREERTOS/queue.c ****     int8_t * pcOriginalReadPosition;
1932:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2691              	 .loc 1 1932 0
 2692 000a 7B68     	 ldr r3,[r7,#4]
 2693 000c 3B61     	 str r3,[r7,#16]
1933:../Dave/Generated/FREERTOS/queue.c **** 
1934:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 2694              	 .loc 1 1934 0
 2695 000e 3B69     	 ldr r3,[r7,#16]
 2696 0010 002B     	 cmp r3,#0
 2697 0012 01D1     	 bne .L227
 2698              	 .loc 1 1934 0 is_stmt 0 discriminator 1
 2699              	
 2700 0014 72B6     	 cpsid i
 2701              	
 2702              	 .code 16
 2703              	.L228:
 2704 0016 FEE7     	 b .L228
 2705              	.L227:
1935:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2706              	 .loc 1 1935 0 is_stmt 1
 2707 0018 3B68     	 ldr r3,[r7]
 2708 001a 002B     	 cmp r3,#0
 2709 001c 03D1     	 bne .L229
 2710              	 .loc 1 1935 0 is_stmt 0 discriminator 2
 2711 001e 3B69     	 ldr r3,[r7,#16]
 2712 0020 1B6C     	 ldr r3,[r3,#64]
 2713 0022 002B     	 cmp r3,#0
 2714 0024 01D1     	 bne .L230
 2715              	.L229:
 2716              	 .loc 1 1935 0 discriminator 3
 2717 0026 0123     	 mov r3,#1
 2718 0028 00E0     	 b .L231
 2719              	.L230:
 2720              	 .loc 1 1935 0 discriminator 4
 2721 002a 0023     	 mov r3,#0
 2722              	.L231:
 2723              	 .loc 1 1935 0 discriminator 6
 2724 002c 002B     	 cmp r3,#0
 2725 002e 01D1     	 bne .L232
 2726              	 .loc 1 1935 0 discriminator 7
 2727              	
 2728 0030 72B6     	 cpsid i
 2729              	
 2730              	 .code 16
 2731              	.L233:
 2732              	 .loc 1 1935 0 discriminator 2
 2733 0032 FEE7     	 b .L233
 2734              	.L232:
1936:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2735              	 .loc 1 1936 0 is_stmt 1
 2736 0034 3B69     	 ldr r3,[r7,#16]
 2737 0036 1B6C     	 ldr r3,[r3,#64]
 2738 0038 002B     	 cmp r3,#0
 2739 003a 01D1     	 bne .L234
 2740              	 .loc 1 1936 0 is_stmt 0 discriminator 1
 2741              	
 2742 003c 72B6     	 cpsid i
 2743              	
 2744              	 .code 16
 2745              	.L235:
 2746              	 .loc 1 1936 0 discriminator 3
 2747 003e FEE7     	 b .L235
 2748              	.L234:
1937:../Dave/Generated/FREERTOS/queue.c **** 
1938:../Dave/Generated/FREERTOS/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1939:../Dave/Generated/FREERTOS/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1940:../Dave/Generated/FREERTOS/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1941:../Dave/Generated/FREERTOS/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1942:../Dave/Generated/FREERTOS/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1943:../Dave/Generated/FREERTOS/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1944:../Dave/Generated/FREERTOS/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1945:../Dave/Generated/FREERTOS/queue.c ****      * assigned a priority above the configured maximum system call priority.
1946:../Dave/Generated/FREERTOS/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1947:../Dave/Generated/FREERTOS/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1948:../Dave/Generated/FREERTOS/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1949:../Dave/Generated/FREERTOS/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1950:../Dave/Generated/FREERTOS/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1951:../Dave/Generated/FREERTOS/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1952:../Dave/Generated/FREERTOS/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1953:../Dave/Generated/FREERTOS/queue.c **** 
1954:../Dave/Generated/FREERTOS/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2749              	 .loc 1 1954 0 is_stmt 1
 2750 0040 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 2751 0044 031C     	 mov r3,r0
 2752 0046 FB60     	 str r3,[r7,#12]
1955:../Dave/Generated/FREERTOS/queue.c ****     {
1956:../Dave/Generated/FREERTOS/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1957:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 2753              	 .loc 1 1957 0
 2754 0048 3B69     	 ldr r3,[r7,#16]
 2755 004a 9B6B     	 ldr r3,[r3,#56]
 2756 004c 002B     	 cmp r3,#0
 2757 004e 0ED0     	 beq .L236
1958:../Dave/Generated/FREERTOS/queue.c ****         {
1959:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1960:../Dave/Generated/FREERTOS/queue.c **** 
1961:../Dave/Generated/FREERTOS/queue.c ****             /* Remember the read position so it can be reset as nothing is
1962:../Dave/Generated/FREERTOS/queue.c ****              * actually being removed from the queue. */
1963:../Dave/Generated/FREERTOS/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 2758              	 .loc 1 1963 0
 2759 0050 3B69     	 ldr r3,[r7,#16]
 2760 0052 DB68     	 ldr r3,[r3,#12]
 2761 0054 BB60     	 str r3,[r7,#8]
1964:../Dave/Generated/FREERTOS/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2762              	 .loc 1 1964 0
 2763 0056 3A69     	 ldr r2,[r7,#16]
 2764 0058 3B68     	 ldr r3,[r7]
 2765 005a 101C     	 mov r0,r2
 2766 005c 191C     	 mov r1,r3
 2767 005e FFF7FEFF 	 bl prvCopyDataFromQueue
1965:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2768              	 .loc 1 1965 0
 2769 0062 3B69     	 ldr r3,[r7,#16]
 2770 0064 BA68     	 ldr r2,[r7,#8]
 2771 0066 DA60     	 str r2,[r3,#12]
1966:../Dave/Generated/FREERTOS/queue.c **** 
1967:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 2772              	 .loc 1 1967 0
 2773 0068 0123     	 mov r3,#1
 2774 006a 7B61     	 str r3,[r7,#20]
 2775 006c 01E0     	 b .L237
 2776              	.L236:
1968:../Dave/Generated/FREERTOS/queue.c ****         }
1969:../Dave/Generated/FREERTOS/queue.c ****         else
1970:../Dave/Generated/FREERTOS/queue.c ****         {
1971:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 2777              	 .loc 1 1971 0
 2778 006e 0023     	 mov r3,#0
 2779 0070 7B61     	 str r3,[r7,#20]
 2780              	.L237:
1972:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1973:../Dave/Generated/FREERTOS/queue.c ****         }
1974:../Dave/Generated/FREERTOS/queue.c ****     }
1975:../Dave/Generated/FREERTOS/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2781              	 .loc 1 1975 0
 2782 0072 FB68     	 ldr r3,[r7,#12]
 2783 0074 181C     	 mov r0,r3
 2784 0076 FFF7FEFF 	 bl vClearInterruptMaskFromISR
1976:../Dave/Generated/FREERTOS/queue.c **** 
1977:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 2785              	 .loc 1 1977 0
 2786 007a 7B69     	 ldr r3,[r7,#20]
1978:../Dave/Generated/FREERTOS/queue.c **** }
 2787              	 .loc 1 1978 0
 2788 007c 181C     	 mov r0,r3
 2789 007e BD46     	 mov sp,r7
 2790 0080 06B0     	 add sp,sp,#24
 2791              	 
 2792 0082 80BD     	 pop {r7,pc}
 2793              	 .cfi_endproc
 2794              	.LFE59:
 2796              	 .section .text.uxQueueMessagesWaiting,"ax",%progbits
 2797              	 .align 2
 2798              	 .global uxQueueMessagesWaiting
 2799              	 .code 16
 2800              	 .thumb_func
 2802              	uxQueueMessagesWaiting:
 2803              	.LFB60:
1979:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1980:../Dave/Generated/FREERTOS/queue.c **** 
1981:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1982:../Dave/Generated/FREERTOS/queue.c **** {
 2804              	 .loc 1 1982 0
 2805              	 .cfi_startproc
 2806 0000 80B5     	 push {r7,lr}
 2807              	.LCFI54:
 2808              	 .cfi_def_cfa_offset 8
 2809              	 .cfi_offset 7,-8
 2810              	 .cfi_offset 14,-4
 2811 0002 84B0     	 sub sp,sp,#16
 2812              	.LCFI55:
 2813              	 .cfi_def_cfa_offset 24
 2814 0004 00AF     	 add r7,sp,#0
 2815              	.LCFI56:
 2816              	 .cfi_def_cfa_register 7
 2817 0006 7860     	 str r0,[r7,#4]
1983:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxReturn;
1984:../Dave/Generated/FREERTOS/queue.c **** 
1985:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( xQueue );
 2818              	 .loc 1 1985 0
 2819 0008 7B68     	 ldr r3,[r7,#4]
 2820 000a 002B     	 cmp r3,#0
 2821 000c 01D1     	 bne .L240
 2822              	 .loc 1 1985 0 is_stmt 0 discriminator 1
 2823              	
 2824 000e 72B6     	 cpsid i
 2825              	
 2826              	 .code 16
 2827              	.L241:
 2828 0010 FEE7     	 b .L241
 2829              	.L240:
1986:../Dave/Generated/FREERTOS/queue.c **** 
1987:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 2830              	 .loc 1 1987 0 is_stmt 1
 2831 0012 FFF7FEFF 	 bl vPortEnterCritical
1988:../Dave/Generated/FREERTOS/queue.c ****     {
1989:../Dave/Generated/FREERTOS/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2832              	 .loc 1 1989 0
 2833 0016 7B68     	 ldr r3,[r7,#4]
 2834 0018 9B6B     	 ldr r3,[r3,#56]
 2835 001a FB60     	 str r3,[r7,#12]
1990:../Dave/Generated/FREERTOS/queue.c ****     }
1991:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 2836              	 .loc 1 1991 0
 2837 001c FFF7FEFF 	 bl vPortExitCritical
1992:../Dave/Generated/FREERTOS/queue.c **** 
1993:../Dave/Generated/FREERTOS/queue.c ****     return uxReturn;
 2838              	 .loc 1 1993 0
 2839 0020 FB68     	 ldr r3,[r7,#12]
1994:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2840              	 .loc 1 1994 0
 2841 0022 181C     	 mov r0,r3
 2842 0024 BD46     	 mov sp,r7
 2843 0026 04B0     	 add sp,sp,#16
 2844              	 
 2845 0028 80BD     	 pop {r7,pc}
 2846              	 .cfi_endproc
 2847              	.LFE60:
 2849 002a C046     	 .section .text.uxQueueSpacesAvailable,"ax",%progbits
 2850              	 .align 2
 2851              	 .global uxQueueSpacesAvailable
 2852              	 .code 16
 2853              	 .thumb_func
 2855              	uxQueueSpacesAvailable:
 2856              	.LFB61:
1995:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1996:../Dave/Generated/FREERTOS/queue.c **** 
1997:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1998:../Dave/Generated/FREERTOS/queue.c **** {
 2857              	 .loc 1 1998 0
 2858              	 .cfi_startproc
 2859 0000 80B5     	 push {r7,lr}
 2860              	.LCFI57:
 2861              	 .cfi_def_cfa_offset 8
 2862              	 .cfi_offset 7,-8
 2863              	 .cfi_offset 14,-4
 2864 0002 84B0     	 sub sp,sp,#16
 2865              	.LCFI58:
 2866              	 .cfi_def_cfa_offset 24
 2867 0004 00AF     	 add r7,sp,#0
 2868              	.LCFI59:
 2869              	 .cfi_def_cfa_register 7
 2870 0006 7860     	 str r0,[r7,#4]
1999:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxReturn;
2000:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2871              	 .loc 1 2000 0
 2872 0008 7B68     	 ldr r3,[r7,#4]
 2873 000a FB60     	 str r3,[r7,#12]
2001:../Dave/Generated/FREERTOS/queue.c **** 
2002:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 2874              	 .loc 1 2002 0
 2875 000c FB68     	 ldr r3,[r7,#12]
 2876 000e 002B     	 cmp r3,#0
 2877 0010 01D1     	 bne .L244
 2878              	 .loc 1 2002 0 is_stmt 0 discriminator 1
 2879              	
 2880 0012 72B6     	 cpsid i
 2881              	
 2882              	 .code 16
 2883              	.L245:
 2884 0014 FEE7     	 b .L245
 2885              	.L244:
2003:../Dave/Generated/FREERTOS/queue.c **** 
2004:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 2886              	 .loc 1 2004 0 is_stmt 1
 2887 0016 FFF7FEFF 	 bl vPortEnterCritical
2005:../Dave/Generated/FREERTOS/queue.c ****     {
2006:../Dave/Generated/FREERTOS/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2888              	 .loc 1 2006 0
 2889 001a FB68     	 ldr r3,[r7,#12]
 2890 001c DA6B     	 ldr r2,[r3,#60]
 2891 001e FB68     	 ldr r3,[r7,#12]
 2892 0020 9B6B     	 ldr r3,[r3,#56]
 2893 0022 D31A     	 sub r3,r2,r3
 2894 0024 BB60     	 str r3,[r7,#8]
2007:../Dave/Generated/FREERTOS/queue.c ****     }
2008:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 2895              	 .loc 1 2008 0
 2896 0026 FFF7FEFF 	 bl vPortExitCritical
2009:../Dave/Generated/FREERTOS/queue.c **** 
2010:../Dave/Generated/FREERTOS/queue.c ****     return uxReturn;
 2897              	 .loc 1 2010 0
 2898 002a BB68     	 ldr r3,[r7,#8]
2011:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2899              	 .loc 1 2011 0
 2900 002c 181C     	 mov r0,r3
 2901 002e BD46     	 mov sp,r7
 2902 0030 04B0     	 add sp,sp,#16
 2903              	 
 2904 0032 80BD     	 pop {r7,pc}
 2905              	 .cfi_endproc
 2906              	.LFE61:
 2908              	 .section .text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2909              	 .align 2
 2910              	 .global uxQueueMessagesWaitingFromISR
 2911              	 .code 16
 2912              	 .thumb_func
 2914              	uxQueueMessagesWaitingFromISR:
 2915              	.LFB62:
2012:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2013:../Dave/Generated/FREERTOS/queue.c **** 
2014:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2015:../Dave/Generated/FREERTOS/queue.c **** {
 2916              	 .loc 1 2015 0
 2917              	 .cfi_startproc
 2918 0000 80B5     	 push {r7,lr}
 2919              	.LCFI60:
 2920              	 .cfi_def_cfa_offset 8
 2921              	 .cfi_offset 7,-8
 2922              	 .cfi_offset 14,-4
 2923 0002 84B0     	 sub sp,sp,#16
 2924              	.LCFI61:
 2925              	 .cfi_def_cfa_offset 24
 2926 0004 00AF     	 add r7,sp,#0
 2927              	.LCFI62:
 2928              	 .cfi_def_cfa_register 7
 2929 0006 7860     	 str r0,[r7,#4]
2016:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxReturn;
2017:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2930              	 .loc 1 2017 0
 2931 0008 7B68     	 ldr r3,[r7,#4]
 2932 000a FB60     	 str r3,[r7,#12]
2018:../Dave/Generated/FREERTOS/queue.c **** 
2019:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 2933              	 .loc 1 2019 0
 2934 000c FB68     	 ldr r3,[r7,#12]
 2935 000e 002B     	 cmp r3,#0
 2936 0010 01D1     	 bne .L248
 2937              	 .loc 1 2019 0 is_stmt 0 discriminator 1
 2938              	
 2939 0012 72B6     	 cpsid i
 2940              	
 2941              	 .code 16
 2942              	.L249:
 2943 0014 FEE7     	 b .L249
 2944              	.L248:
2020:../Dave/Generated/FREERTOS/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
 2945              	 .loc 1 2020 0 is_stmt 1
 2946 0016 FB68     	 ldr r3,[r7,#12]
 2947 0018 9B6B     	 ldr r3,[r3,#56]
 2948 001a BB60     	 str r3,[r7,#8]
2021:../Dave/Generated/FREERTOS/queue.c **** 
2022:../Dave/Generated/FREERTOS/queue.c ****     return uxReturn;
 2949              	 .loc 1 2022 0
 2950 001c BB68     	 ldr r3,[r7,#8]
2023:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2951              	 .loc 1 2023 0
 2952 001e 181C     	 mov r0,r3
 2953 0020 BD46     	 mov sp,r7
 2954 0022 04B0     	 add sp,sp,#16
 2955              	 
 2956 0024 80BD     	 pop {r7,pc}
 2957              	 .cfi_endproc
 2958              	.LFE62:
 2960 0026 C046     	 .section .text.vQueueDelete,"ax",%progbits
 2961              	 .align 2
 2962              	 .global vQueueDelete
 2963              	 .code 16
 2964              	 .thumb_func
 2966              	vQueueDelete:
 2967              	.LFB63:
2024:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2025:../Dave/Generated/FREERTOS/queue.c **** 
2026:../Dave/Generated/FREERTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2027:../Dave/Generated/FREERTOS/queue.c **** {
 2968              	 .loc 1 2027 0
 2969              	 .cfi_startproc
 2970 0000 80B5     	 push {r7,lr}
 2971              	.LCFI63:
 2972              	 .cfi_def_cfa_offset 8
 2973              	 .cfi_offset 7,-8
 2974              	 .cfi_offset 14,-4
 2975 0002 84B0     	 sub sp,sp,#16
 2976              	.LCFI64:
 2977              	 .cfi_def_cfa_offset 24
 2978 0004 00AF     	 add r7,sp,#0
 2979              	.LCFI65:
 2980              	 .cfi_def_cfa_register 7
 2981 0006 7860     	 str r0,[r7,#4]
2028:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 2982              	 .loc 1 2028 0
 2983 0008 7B68     	 ldr r3,[r7,#4]
 2984 000a FB60     	 str r3,[r7,#12]
2029:../Dave/Generated/FREERTOS/queue.c **** 
2030:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 2985              	 .loc 1 2030 0
 2986 000c FB68     	 ldr r3,[r7,#12]
 2987 000e 002B     	 cmp r3,#0
 2988 0010 01D1     	 bne .L252
 2989              	 .loc 1 2030 0 is_stmt 0 discriminator 1
 2990              	
 2991 0012 72B6     	 cpsid i
 2992              	
 2993              	 .code 16
 2994              	.L253:
 2995 0014 FEE7     	 b .L253
 2996              	.L252:
2031:../Dave/Generated/FREERTOS/queue.c ****     traceQUEUE_DELETE( pxQueue );
2032:../Dave/Generated/FREERTOS/queue.c **** 
2033:../Dave/Generated/FREERTOS/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2034:../Dave/Generated/FREERTOS/queue.c ****         {
2035:../Dave/Generated/FREERTOS/queue.c ****             vQueueUnregisterQueue( pxQueue );
 2997              	 .loc 1 2035 0 is_stmt 1
 2998 0016 FB68     	 ldr r3,[r7,#12]
 2999 0018 181C     	 mov r0,r3
 3000 001a FFF7FEFF 	 bl vQueueUnregisterQueue
2036:../Dave/Generated/FREERTOS/queue.c ****         }
2037:../Dave/Generated/FREERTOS/queue.c ****     #endif
2038:../Dave/Generated/FREERTOS/queue.c **** 
2039:../Dave/Generated/FREERTOS/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2040:../Dave/Generated/FREERTOS/queue.c ****         {
2041:../Dave/Generated/FREERTOS/queue.c ****             /* The queue can only have been allocated dynamically - free it
2042:../Dave/Generated/FREERTOS/queue.c ****              * again. */
2043:../Dave/Generated/FREERTOS/queue.c ****             vPortFree( pxQueue );
 3001              	 .loc 1 2043 0
 3002 001e FB68     	 ldr r3,[r7,#12]
 3003 0020 181C     	 mov r0,r3
 3004 0022 FFF7FEFF 	 bl vPortFree
2044:../Dave/Generated/FREERTOS/queue.c ****         }
2045:../Dave/Generated/FREERTOS/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2046:../Dave/Generated/FREERTOS/queue.c ****         {
2047:../Dave/Generated/FREERTOS/queue.c ****             /* The queue could have been allocated statically or dynamically, so
2048:../Dave/Generated/FREERTOS/queue.c ****              * check before attempting to free the memory. */
2049:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2050:../Dave/Generated/FREERTOS/queue.c ****             {
2051:../Dave/Generated/FREERTOS/queue.c ****                 vPortFree( pxQueue );
2052:../Dave/Generated/FREERTOS/queue.c ****             }
2053:../Dave/Generated/FREERTOS/queue.c ****             else
2054:../Dave/Generated/FREERTOS/queue.c ****             {
2055:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2056:../Dave/Generated/FREERTOS/queue.c ****             }
2057:../Dave/Generated/FREERTOS/queue.c ****         }
2058:../Dave/Generated/FREERTOS/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2059:../Dave/Generated/FREERTOS/queue.c ****         {
2060:../Dave/Generated/FREERTOS/queue.c ****             /* The queue must have been statically allocated, so is not going to be
2061:../Dave/Generated/FREERTOS/queue.c ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2062:../Dave/Generated/FREERTOS/queue.c ****             ( void ) pxQueue;
2063:../Dave/Generated/FREERTOS/queue.c ****         }
2064:../Dave/Generated/FREERTOS/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2065:../Dave/Generated/FREERTOS/queue.c **** }
 3005              	 .loc 1 2065 0
 3006 0026 BD46     	 mov sp,r7
 3007 0028 04B0     	 add sp,sp,#16
 3008              	 
 3009 002a 80BD     	 pop {r7,pc}
 3010              	 .cfi_endproc
 3011              	.LFE63:
 3013              	 .section .text.uxQueueGetQueueNumber,"ax",%progbits
 3014              	 .align 2
 3015              	 .global uxQueueGetQueueNumber
 3016              	 .code 16
 3017              	 .thumb_func
 3019              	uxQueueGetQueueNumber:
 3020              	.LFB64:
2066:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2067:../Dave/Generated/FREERTOS/queue.c **** 
2068:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2069:../Dave/Generated/FREERTOS/queue.c **** 
2070:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2071:../Dave/Generated/FREERTOS/queue.c ****     {
 3021              	 .loc 1 2071 0
 3022              	 .cfi_startproc
 3023 0000 80B5     	 push {r7,lr}
 3024              	.LCFI66:
 3025              	 .cfi_def_cfa_offset 8
 3026              	 .cfi_offset 7,-8
 3027              	 .cfi_offset 14,-4
 3028 0002 82B0     	 sub sp,sp,#8
 3029              	.LCFI67:
 3030              	 .cfi_def_cfa_offset 16
 3031 0004 00AF     	 add r7,sp,#0
 3032              	.LCFI68:
 3033              	 .cfi_def_cfa_register 7
 3034 0006 7860     	 str r0,[r7,#4]
2072:../Dave/Generated/FREERTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3035              	 .loc 1 2072 0
 3036 0008 7B68     	 ldr r3,[r7,#4]
 3037 000a DB6C     	 ldr r3,[r3,#76]
2073:../Dave/Generated/FREERTOS/queue.c ****     }
 3038              	 .loc 1 2073 0
 3039 000c 181C     	 mov r0,r3
 3040 000e BD46     	 mov sp,r7
 3041 0010 02B0     	 add sp,sp,#8
 3042              	 
 3043 0012 80BD     	 pop {r7,pc}
 3044              	 .cfi_endproc
 3045              	.LFE64:
 3047              	 .section .text.vQueueSetQueueNumber,"ax",%progbits
 3048              	 .align 2
 3049              	 .global vQueueSetQueueNumber
 3050              	 .code 16
 3051              	 .thumb_func
 3053              	vQueueSetQueueNumber:
 3054              	.LFB65:
2074:../Dave/Generated/FREERTOS/queue.c **** 
2075:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2076:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2077:../Dave/Generated/FREERTOS/queue.c **** 
2078:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2079:../Dave/Generated/FREERTOS/queue.c **** 
2080:../Dave/Generated/FREERTOS/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2081:../Dave/Generated/FREERTOS/queue.c ****                                UBaseType_t uxQueueNumber )
2082:../Dave/Generated/FREERTOS/queue.c ****     {
 3055              	 .loc 1 2082 0
 3056              	 .cfi_startproc
 3057 0000 80B5     	 push {r7,lr}
 3058              	.LCFI69:
 3059              	 .cfi_def_cfa_offset 8
 3060              	 .cfi_offset 7,-8
 3061              	 .cfi_offset 14,-4
 3062 0002 82B0     	 sub sp,sp,#8
 3063              	.LCFI70:
 3064              	 .cfi_def_cfa_offset 16
 3065 0004 00AF     	 add r7,sp,#0
 3066              	.LCFI71:
 3067              	 .cfi_def_cfa_register 7
 3068 0006 7860     	 str r0,[r7,#4]
 3069 0008 3960     	 str r1,[r7]
2083:../Dave/Generated/FREERTOS/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3070              	 .loc 1 2083 0
 3071 000a 7B68     	 ldr r3,[r7,#4]
 3072 000c 3A68     	 ldr r2,[r7]
 3073 000e DA64     	 str r2,[r3,#76]
2084:../Dave/Generated/FREERTOS/queue.c ****     }
 3074              	 .loc 1 2084 0
 3075 0010 BD46     	 mov sp,r7
 3076 0012 02B0     	 add sp,sp,#8
 3077              	 
 3078 0014 80BD     	 pop {r7,pc}
 3079              	 .cfi_endproc
 3080              	.LFE65:
 3082 0016 C046     	 .section .text.ucQueueGetQueueType,"ax",%progbits
 3083              	 .align 2
 3084              	 .global ucQueueGetQueueType
 3085              	 .code 16
 3086              	 .thumb_func
 3088              	ucQueueGetQueueType:
 3089              	.LFB66:
2085:../Dave/Generated/FREERTOS/queue.c **** 
2086:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2087:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2088:../Dave/Generated/FREERTOS/queue.c **** 
2089:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2090:../Dave/Generated/FREERTOS/queue.c **** 
2091:../Dave/Generated/FREERTOS/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2092:../Dave/Generated/FREERTOS/queue.c ****     {
 3090              	 .loc 1 2092 0
 3091              	 .cfi_startproc
 3092 0000 80B5     	 push {r7,lr}
 3093              	.LCFI72:
 3094              	 .cfi_def_cfa_offset 8
 3095              	 .cfi_offset 7,-8
 3096              	 .cfi_offset 14,-4
 3097 0002 82B0     	 sub sp,sp,#8
 3098              	.LCFI73:
 3099              	 .cfi_def_cfa_offset 16
 3100 0004 00AF     	 add r7,sp,#0
 3101              	.LCFI74:
 3102              	 .cfi_def_cfa_register 7
 3103 0006 7860     	 str r0,[r7,#4]
2093:../Dave/Generated/FREERTOS/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
 3104              	 .loc 1 2093 0
 3105 0008 7B68     	 ldr r3,[r7,#4]
 3106 000a 5022     	 mov r2,#80
 3107 000c 9B5C     	 ldrb r3,[r3,r2]
2094:../Dave/Generated/FREERTOS/queue.c ****     }
 3108              	 .loc 1 2094 0
 3109 000e 181C     	 mov r0,r3
 3110 0010 BD46     	 mov sp,r7
 3111 0012 02B0     	 add sp,sp,#8
 3112              	 
 3113 0014 80BD     	 pop {r7,pc}
 3114              	 .cfi_endproc
 3115              	.LFE66:
 3117 0016 C046     	 .section .text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 3118              	 .align 2
 3119              	 .code 16
 3120              	 .thumb_func
 3122              	prvGetDisinheritPriorityAfterTimeout:
 3123              	.LFB67:
2095:../Dave/Generated/FREERTOS/queue.c **** 
2096:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2097:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2098:../Dave/Generated/FREERTOS/queue.c **** 
2099:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_MUTEXES == 1 )
2100:../Dave/Generated/FREERTOS/queue.c **** 
2101:../Dave/Generated/FREERTOS/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2102:../Dave/Generated/FREERTOS/queue.c ****     {
 3124              	 .loc 1 2102 0
 3125              	 .cfi_startproc
 3126 0000 80B5     	 push {r7,lr}
 3127              	.LCFI75:
 3128              	 .cfi_def_cfa_offset 8
 3129              	 .cfi_offset 7,-8
 3130              	 .cfi_offset 14,-4
 3131 0002 84B0     	 sub sp,sp,#16
 3132              	.LCFI76:
 3133              	 .cfi_def_cfa_offset 24
 3134 0004 00AF     	 add r7,sp,#0
 3135              	.LCFI77:
 3136              	 .cfi_def_cfa_register 7
 3137 0006 7860     	 str r0,[r7,#4]
2103:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2104:../Dave/Generated/FREERTOS/queue.c **** 
2105:../Dave/Generated/FREERTOS/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2106:../Dave/Generated/FREERTOS/queue.c ****          * priority, but the waiting task times out, then the holder should
2107:../Dave/Generated/FREERTOS/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2108:../Dave/Generated/FREERTOS/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2109:../Dave/Generated/FREERTOS/queue.c ****          * return the priority of the highest priority task that is waiting for the
2110:../Dave/Generated/FREERTOS/queue.c ****          * mutex. */
2111:../Dave/Generated/FREERTOS/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 3138              	 .loc 1 2111 0
 3139 0008 7B68     	 ldr r3,[r7,#4]
 3140 000a 5B6A     	 ldr r3,[r3,#36]
 3141 000c 002B     	 cmp r3,#0
 3142 000e 06D0     	 beq .L260
2112:../Dave/Generated/FREERTOS/queue.c ****         {
2113:../Dave/Generated/FREERTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
 3143              	 .loc 1 2113 0
 3144 0010 7B68     	 ldr r3,[r7,#4]
 3145 0012 1B6B     	 ldr r3,[r3,#48]
 3146 0014 1B68     	 ldr r3,[r3]
 3147 0016 0522     	 mov r2,#5
 3148 0018 D31A     	 sub r3,r2,r3
 3149 001a FB60     	 str r3,[r7,#12]
 3150 001c 01E0     	 b .L261
 3151              	.L260:
2114:../Dave/Generated/FREERTOS/queue.c ****         }
2115:../Dave/Generated/FREERTOS/queue.c ****         else
2116:../Dave/Generated/FREERTOS/queue.c ****         {
2117:../Dave/Generated/FREERTOS/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 3152              	 .loc 1 2117 0
 3153 001e 0023     	 mov r3,#0
 3154 0020 FB60     	 str r3,[r7,#12]
 3155              	.L261:
2118:../Dave/Generated/FREERTOS/queue.c ****         }
2119:../Dave/Generated/FREERTOS/queue.c **** 
2120:../Dave/Generated/FREERTOS/queue.c ****         return uxHighestPriorityOfWaitingTasks;
 3156              	 .loc 1 2120 0
 3157 0022 FB68     	 ldr r3,[r7,#12]
2121:../Dave/Generated/FREERTOS/queue.c ****     }
 3158              	 .loc 1 2121 0
 3159 0024 181C     	 mov r0,r3
 3160 0026 BD46     	 mov sp,r7
 3161 0028 04B0     	 add sp,sp,#16
 3162              	 
 3163 002a 80BD     	 pop {r7,pc}
 3164              	 .cfi_endproc
 3165              	.LFE67:
 3167              	 .section .text.prvCopyDataToQueue,"ax",%progbits
 3168              	 .align 2
 3169              	 .code 16
 3170              	 .thumb_func
 3172              	prvCopyDataToQueue:
 3173              	.LFB68:
2122:../Dave/Generated/FREERTOS/queue.c **** 
2123:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
2124:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2125:../Dave/Generated/FREERTOS/queue.c **** 
2126:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2127:../Dave/Generated/FREERTOS/queue.c ****                                       const void * pvItemToQueue,
2128:../Dave/Generated/FREERTOS/queue.c ****                                       const BaseType_t xPosition )
2129:../Dave/Generated/FREERTOS/queue.c **** {
 3174              	 .loc 1 2129 0
 3175              	 .cfi_startproc
 3176 0000 80B5     	 push {r7,lr}
 3177              	.LCFI78:
 3178              	 .cfi_def_cfa_offset 8
 3179              	 .cfi_offset 7,-8
 3180              	 .cfi_offset 14,-4
 3181 0002 86B0     	 sub sp,sp,#24
 3182              	.LCFI79:
 3183              	 .cfi_def_cfa_offset 32
 3184 0004 00AF     	 add r7,sp,#0
 3185              	.LCFI80:
 3186              	 .cfi_def_cfa_register 7
 3187 0006 F860     	 str r0,[r7,#12]
 3188 0008 B960     	 str r1,[r7,#8]
 3189 000a 7A60     	 str r2,[r7,#4]
2130:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn = pdFALSE;
 3190              	 .loc 1 2130 0
 3191 000c 0023     	 mov r3,#0
 3192 000e 7B61     	 str r3,[r7,#20]
2131:../Dave/Generated/FREERTOS/queue.c ****     UBaseType_t uxMessagesWaiting;
2132:../Dave/Generated/FREERTOS/queue.c **** 
2133:../Dave/Generated/FREERTOS/queue.c ****     /* This function is called from a critical section. */
2134:../Dave/Generated/FREERTOS/queue.c **** 
2135:../Dave/Generated/FREERTOS/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 3193              	 .loc 1 2135 0
 3194 0010 FB68     	 ldr r3,[r7,#12]
 3195 0012 9B6B     	 ldr r3,[r3,#56]
 3196 0014 3B61     	 str r3,[r7,#16]
2136:../Dave/Generated/FREERTOS/queue.c **** 
2137:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 3197              	 .loc 1 2137 0
 3198 0016 FB68     	 ldr r3,[r7,#12]
 3199 0018 1B6C     	 ldr r3,[r3,#64]
 3200 001a 002B     	 cmp r3,#0
 3201 001c 0ED1     	 bne .L264
2138:../Dave/Generated/FREERTOS/queue.c ****     {
2139:../Dave/Generated/FREERTOS/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2140:../Dave/Generated/FREERTOS/queue.c ****             {
2141:../Dave/Generated/FREERTOS/queue.c ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 3202              	 .loc 1 2141 0
 3203 001e FB68     	 ldr r3,[r7,#12]
 3204 0020 1B68     	 ldr r3,[r3]
 3205 0022 002B     	 cmp r3,#0
 3206 0024 52D1     	 bne .L265
2142:../Dave/Generated/FREERTOS/queue.c ****                 {
2143:../Dave/Generated/FREERTOS/queue.c ****                     /* The mutex is no longer being held. */
2144:../Dave/Generated/FREERTOS/queue.c ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 3207              	 .loc 1 2144 0
 3208 0026 FB68     	 ldr r3,[r7,#12]
 3209 0028 9B68     	 ldr r3,[r3,#8]
 3210 002a 181C     	 mov r0,r3
 3211 002c FFF7FEFF 	 bl xTaskPriorityDisinherit
 3212 0030 031C     	 mov r3,r0
 3213 0032 7B61     	 str r3,[r7,#20]
2145:../Dave/Generated/FREERTOS/queue.c ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
 3214              	 .loc 1 2145 0
 3215 0034 FB68     	 ldr r3,[r7,#12]
 3216 0036 0022     	 mov r2,#0
 3217 0038 9A60     	 str r2,[r3,#8]
 3218 003a 47E0     	 b .L265
 3219              	.L264:
2146:../Dave/Generated/FREERTOS/queue.c ****                 }
2147:../Dave/Generated/FREERTOS/queue.c ****                 else
2148:../Dave/Generated/FREERTOS/queue.c ****                 {
2149:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2150:../Dave/Generated/FREERTOS/queue.c ****                 }
2151:../Dave/Generated/FREERTOS/queue.c ****             }
2152:../Dave/Generated/FREERTOS/queue.c ****         #endif /* configUSE_MUTEXES */
2153:../Dave/Generated/FREERTOS/queue.c ****     }
2154:../Dave/Generated/FREERTOS/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
 3220              	 .loc 1 2154 0
 3221 003c 7B68     	 ldr r3,[r7,#4]
 3222 003e 002B     	 cmp r3,#0
 3223 0040 1BD1     	 bne .L266
2155:../Dave/Generated/FREERTOS/queue.c ****     {
2156:../Dave/Generated/FREERTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
 3224              	 .loc 1 2156 0
 3225 0042 FB68     	 ldr r3,[r7,#12]
 3226 0044 5968     	 ldr r1,[r3,#4]
 3227 0046 FB68     	 ldr r3,[r7,#12]
 3228 0048 1B6C     	 ldr r3,[r3,#64]
 3229 004a BA68     	 ldr r2,[r7,#8]
 3230 004c 081C     	 mov r0,r1
 3231 004e 111C     	 mov r1,r2
 3232 0050 1A1C     	 mov r2,r3
 3233 0052 FFF7FEFF 	 bl memcpy
2157:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 3234              	 .loc 1 2157 0
 3235 0056 FB68     	 ldr r3,[r7,#12]
 3236 0058 5A68     	 ldr r2,[r3,#4]
 3237 005a FB68     	 ldr r3,[r7,#12]
 3238 005c 1B6C     	 ldr r3,[r3,#64]
 3239 005e D218     	 add r2,r2,r3
 3240 0060 FB68     	 ldr r3,[r7,#12]
 3241 0062 5A60     	 str r2,[r3,#4]
2158:../Dave/Generated/FREERTOS/queue.c **** 
2159:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
 3242              	 .loc 1 2159 0
 3243 0064 FB68     	 ldr r3,[r7,#12]
 3244 0066 5A68     	 ldr r2,[r3,#4]
 3245 0068 FB68     	 ldr r3,[r7,#12]
 3246 006a 9B68     	 ldr r3,[r3,#8]
 3247 006c 9A42     	 cmp r2,r3
 3248 006e 2DD3     	 bcc .L265
2160:../Dave/Generated/FREERTOS/queue.c ****         {
2161:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 3249              	 .loc 1 2161 0
 3250 0070 FB68     	 ldr r3,[r7,#12]
 3251 0072 1A68     	 ldr r2,[r3]
 3252 0074 FB68     	 ldr r3,[r7,#12]
 3253 0076 5A60     	 str r2,[r3,#4]
 3254 0078 28E0     	 b .L265
 3255              	.L266:
2162:../Dave/Generated/FREERTOS/queue.c ****         }
2163:../Dave/Generated/FREERTOS/queue.c ****         else
2164:../Dave/Generated/FREERTOS/queue.c ****         {
2165:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2166:../Dave/Generated/FREERTOS/queue.c ****         }
2167:../Dave/Generated/FREERTOS/queue.c ****     }
2168:../Dave/Generated/FREERTOS/queue.c ****     else
2169:../Dave/Generated/FREERTOS/queue.c ****     {
2170:../Dave/Generated/FREERTOS/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
 3256              	 .loc 1 2170 0
 3257 007a FB68     	 ldr r3,[r7,#12]
 3258 007c D968     	 ldr r1,[r3,#12]
 3259 007e FB68     	 ldr r3,[r7,#12]
 3260 0080 1B6C     	 ldr r3,[r3,#64]
 3261 0082 BA68     	 ldr r2,[r7,#8]
 3262 0084 081C     	 mov r0,r1
 3263 0086 111C     	 mov r1,r2
 3264 0088 1A1C     	 mov r2,r3
 3265 008a FFF7FEFF 	 bl memcpy
2171:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 3266              	 .loc 1 2171 0
 3267 008e FB68     	 ldr r3,[r7,#12]
 3268 0090 DA68     	 ldr r2,[r3,#12]
 3269 0092 FB68     	 ldr r3,[r7,#12]
 3270 0094 1B6C     	 ldr r3,[r3,#64]
 3271 0096 5B42     	 neg r3,r3
 3272 0098 D218     	 add r2,r2,r3
 3273 009a FB68     	 ldr r3,[r7,#12]
 3274 009c DA60     	 str r2,[r3,#12]
2172:../Dave/Generated/FREERTOS/queue.c **** 
2173:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
 3275              	 .loc 1 2173 0
 3276 009e FB68     	 ldr r3,[r7,#12]
 3277 00a0 DA68     	 ldr r2,[r3,#12]
 3278 00a2 FB68     	 ldr r3,[r7,#12]
 3279 00a4 1B68     	 ldr r3,[r3]
 3280 00a6 9A42     	 cmp r2,r3
 3281 00a8 07D2     	 bcs .L267
2174:../Dave/Generated/FREERTOS/queue.c ****         {
2175:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 3282              	 .loc 1 2175 0
 3283 00aa FB68     	 ldr r3,[r7,#12]
 3284 00ac 9A68     	 ldr r2,[r3,#8]
 3285 00ae FB68     	 ldr r3,[r7,#12]
 3286 00b0 1B6C     	 ldr r3,[r3,#64]
 3287 00b2 5B42     	 neg r3,r3
 3288 00b4 D218     	 add r2,r2,r3
 3289 00b6 FB68     	 ldr r3,[r7,#12]
 3290 00b8 DA60     	 str r2,[r3,#12]
 3291              	.L267:
2176:../Dave/Generated/FREERTOS/queue.c ****         }
2177:../Dave/Generated/FREERTOS/queue.c ****         else
2178:../Dave/Generated/FREERTOS/queue.c ****         {
2179:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2180:../Dave/Generated/FREERTOS/queue.c ****         }
2181:../Dave/Generated/FREERTOS/queue.c **** 
2182:../Dave/Generated/FREERTOS/queue.c ****         if( xPosition == queueOVERWRITE )
 3292              	 .loc 1 2182 0
 3293 00ba 7B68     	 ldr r3,[r7,#4]
 3294 00bc 022B     	 cmp r3,#2
 3295 00be 05D1     	 bne .L265
2183:../Dave/Generated/FREERTOS/queue.c ****         {
2184:../Dave/Generated/FREERTOS/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 3296              	 .loc 1 2184 0
 3297 00c0 3B69     	 ldr r3,[r7,#16]
 3298 00c2 002B     	 cmp r3,#0
 3299 00c4 02D0     	 beq .L265
2185:../Dave/Generated/FREERTOS/queue.c ****             {
2186:../Dave/Generated/FREERTOS/queue.c ****                 /* An item is not being added but overwritten, so subtract
2187:../Dave/Generated/FREERTOS/queue.c ****                  * one from the recorded number of items in the queue so when
2188:../Dave/Generated/FREERTOS/queue.c ****                  * one is added again below the number of recorded items remains
2189:../Dave/Generated/FREERTOS/queue.c ****                  * correct. */
2190:../Dave/Generated/FREERTOS/queue.c ****                 --uxMessagesWaiting;
 3300              	 .loc 1 2190 0
 3301 00c6 3B69     	 ldr r3,[r7,#16]
 3302 00c8 013B     	 sub r3,r3,#1
 3303 00ca 3B61     	 str r3,[r7,#16]
 3304              	.L265:
2191:../Dave/Generated/FREERTOS/queue.c ****             }
2192:../Dave/Generated/FREERTOS/queue.c ****             else
2193:../Dave/Generated/FREERTOS/queue.c ****             {
2194:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2195:../Dave/Generated/FREERTOS/queue.c ****             }
2196:../Dave/Generated/FREERTOS/queue.c ****         }
2197:../Dave/Generated/FREERTOS/queue.c ****         else
2198:../Dave/Generated/FREERTOS/queue.c ****         {
2199:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2200:../Dave/Generated/FREERTOS/queue.c ****         }
2201:../Dave/Generated/FREERTOS/queue.c ****     }
2202:../Dave/Generated/FREERTOS/queue.c **** 
2203:../Dave/Generated/FREERTOS/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 3305              	 .loc 1 2203 0
 3306 00cc 3B69     	 ldr r3,[r7,#16]
 3307 00ce 5A1C     	 add r2,r3,#1
 3308 00d0 FB68     	 ldr r3,[r7,#12]
 3309 00d2 9A63     	 str r2,[r3,#56]
2204:../Dave/Generated/FREERTOS/queue.c **** 
2205:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3310              	 .loc 1 2205 0
 3311 00d4 7B69     	 ldr r3,[r7,#20]
2206:../Dave/Generated/FREERTOS/queue.c **** }
 3312              	 .loc 1 2206 0
 3313 00d6 181C     	 mov r0,r3
 3314 00d8 BD46     	 mov sp,r7
 3315 00da 06B0     	 add sp,sp,#24
 3316              	 
 3317 00dc 80BD     	 pop {r7,pc}
 3318              	 .cfi_endproc
 3319              	.LFE68:
 3321 00de C046     	 .section .text.prvCopyDataFromQueue,"ax",%progbits
 3322              	 .align 2
 3323              	 .code 16
 3324              	 .thumb_func
 3326              	prvCopyDataFromQueue:
 3327              	.LFB69:
2207:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2208:../Dave/Generated/FREERTOS/queue.c **** 
2209:../Dave/Generated/FREERTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2210:../Dave/Generated/FREERTOS/queue.c ****                                   void * const pvBuffer )
2211:../Dave/Generated/FREERTOS/queue.c **** {
 3328              	 .loc 1 2211 0
 3329              	 .cfi_startproc
 3330 0000 80B5     	 push {r7,lr}
 3331              	.LCFI81:
 3332              	 .cfi_def_cfa_offset 8
 3333              	 .cfi_offset 7,-8
 3334              	 .cfi_offset 14,-4
 3335 0002 82B0     	 sub sp,sp,#8
 3336              	.LCFI82:
 3337              	 .cfi_def_cfa_offset 16
 3338 0004 00AF     	 add r7,sp,#0
 3339              	.LCFI83:
 3340              	 .cfi_def_cfa_register 7
 3341 0006 7860     	 str r0,[r7,#4]
 3342 0008 3960     	 str r1,[r7]
2212:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 3343              	 .loc 1 2212 0
 3344 000a 7B68     	 ldr r3,[r7,#4]
 3345 000c 1B6C     	 ldr r3,[r3,#64]
 3346 000e 002B     	 cmp r3,#0
 3347 0010 1AD0     	 beq .L269
2213:../Dave/Generated/FREERTOS/queue.c ****     {
2214:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
 3348              	 .loc 1 2214 0
 3349 0012 7B68     	 ldr r3,[r7,#4]
 3350 0014 DA68     	 ldr r2,[r3,#12]
 3351 0016 7B68     	 ldr r3,[r7,#4]
 3352 0018 1B6C     	 ldr r3,[r3,#64]
 3353 001a D218     	 add r2,r2,r3
 3354 001c 7B68     	 ldr r3,[r7,#4]
 3355 001e DA60     	 str r2,[r3,#12]
2215:../Dave/Generated/FREERTOS/queue.c **** 
2216:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
 3356              	 .loc 1 2216 0
 3357 0020 7B68     	 ldr r3,[r7,#4]
 3358 0022 DA68     	 ldr r2,[r3,#12]
 3359 0024 7B68     	 ldr r3,[r7,#4]
 3360 0026 9B68     	 ldr r3,[r3,#8]
 3361 0028 9A42     	 cmp r2,r3
 3362 002a 03D3     	 bcc .L271
2217:../Dave/Generated/FREERTOS/queue.c ****         {
2218:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 3363              	 .loc 1 2218 0
 3364 002c 7B68     	 ldr r3,[r7,#4]
 3365 002e 1A68     	 ldr r2,[r3]
 3366 0030 7B68     	 ldr r3,[r7,#4]
 3367 0032 DA60     	 str r2,[r3,#12]
 3368              	.L271:
2219:../Dave/Generated/FREERTOS/queue.c ****         }
2220:../Dave/Generated/FREERTOS/queue.c ****         else
2221:../Dave/Generated/FREERTOS/queue.c ****         {
2222:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2223:../Dave/Generated/FREERTOS/queue.c ****         }
2224:../Dave/Generated/FREERTOS/queue.c **** 
2225:../Dave/Generated/FREERTOS/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
 3369              	 .loc 1 2225 0
 3370 0034 7B68     	 ldr r3,[r7,#4]
 3371 0036 DA68     	 ldr r2,[r3,#12]
 3372 0038 7B68     	 ldr r3,[r7,#4]
 3373 003a 1B6C     	 ldr r3,[r3,#64]
 3374 003c 3968     	 ldr r1,[r7]
 3375 003e 081C     	 mov r0,r1
 3376 0040 111C     	 mov r1,r2
 3377 0042 1A1C     	 mov r2,r3
 3378 0044 FFF7FEFF 	 bl memcpy
 3379              	.L269:
2226:../Dave/Generated/FREERTOS/queue.c ****     }
2227:../Dave/Generated/FREERTOS/queue.c **** }
 3380              	 .loc 1 2227 0
 3381 0048 BD46     	 mov sp,r7
 3382 004a 02B0     	 add sp,sp,#8
 3383              	 
 3384 004c 80BD     	 pop {r7,pc}
 3385              	 .cfi_endproc
 3386              	.LFE69:
 3388 004e C046     	 .section .text.prvUnlockQueue,"ax",%progbits
 3389              	 .align 2
 3390              	 .code 16
 3391              	 .thumb_func
 3393              	prvUnlockQueue:
 3394              	.LFB70:
2228:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2229:../Dave/Generated/FREERTOS/queue.c **** 
2230:../Dave/Generated/FREERTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2231:../Dave/Generated/FREERTOS/queue.c **** {
 3395              	 .loc 1 2231 0
 3396              	 .cfi_startproc
 3397 0000 80B5     	 push {r7,lr}
 3398              	.LCFI84:
 3399              	 .cfi_def_cfa_offset 8
 3400              	 .cfi_offset 7,-8
 3401              	 .cfi_offset 14,-4
 3402 0002 84B0     	 sub sp,sp,#16
 3403              	.LCFI85:
 3404              	 .cfi_def_cfa_offset 24
 3405 0004 00AF     	 add r7,sp,#0
 3406              	.LCFI86:
 3407              	 .cfi_def_cfa_register 7
 3408 0006 7860     	 str r0,[r7,#4]
2232:../Dave/Generated/FREERTOS/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2233:../Dave/Generated/FREERTOS/queue.c **** 
2234:../Dave/Generated/FREERTOS/queue.c ****     /* The lock counts contains the number of extra data items placed or
2235:../Dave/Generated/FREERTOS/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2236:../Dave/Generated/FREERTOS/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2237:../Dave/Generated/FREERTOS/queue.c ****      * updated. */
2238:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 3409              	 .loc 1 2238 0
 3410 0008 FFF7FEFF 	 bl vPortEnterCritical
 3411              	.LBB12:
2239:../Dave/Generated/FREERTOS/queue.c ****     {
2240:../Dave/Generated/FREERTOS/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
 3412              	 .loc 1 2240 0
 3413 000c 0F23     	 mov r3,#15
 3414 000e FB18     	 add r3,r7,r3
 3415 0010 7A68     	 ldr r2,[r7,#4]
 3416 0012 4521     	 mov r1,#69
 3417 0014 525C     	 ldrb r2,[r2,r1]
 3418 0016 1A70     	 strb r2,[r3]
2241:../Dave/Generated/FREERTOS/queue.c **** 
2242:../Dave/Generated/FREERTOS/queue.c ****         /* See if data was added to the queue while it was locked. */
2243:../Dave/Generated/FREERTOS/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
 3419              	 .loc 1 2243 0
 3420 0018 23E0     	 b .L273
 3421              	.L278:
2244:../Dave/Generated/FREERTOS/queue.c ****         {
2245:../Dave/Generated/FREERTOS/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2246:../Dave/Generated/FREERTOS/queue.c ****              * blocked waiting for data to become available? */
2247:../Dave/Generated/FREERTOS/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2248:../Dave/Generated/FREERTOS/queue.c ****                 {
2249:../Dave/Generated/FREERTOS/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 3422              	 .loc 1 2249 0
 3423 001a 7B68     	 ldr r3,[r7,#4]
 3424 001c 9B6C     	 ldr r3,[r3,#72]
 3425 001e 002B     	 cmp r3,#0
 3426 0020 08D0     	 beq .L274
2250:../Dave/Generated/FREERTOS/queue.c ****                     {
2251:../Dave/Generated/FREERTOS/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 3427              	 .loc 1 2251 0
 3428 0022 7B68     	 ldr r3,[r7,#4]
 3429 0024 181C     	 mov r0,r3
 3430 0026 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 3431 002a 031E     	 sub r3,r0,#0
 3432 002c 11D0     	 beq .L275
2252:../Dave/Generated/FREERTOS/queue.c ****                         {
2253:../Dave/Generated/FREERTOS/queue.c ****                             /* The queue is a member of a queue set, and posting to
2254:../Dave/Generated/FREERTOS/queue.c ****                              * the queue set caused a higher priority task to unblock.
2255:../Dave/Generated/FREERTOS/queue.c ****                              * A context switch is required. */
2256:../Dave/Generated/FREERTOS/queue.c ****                             vTaskMissedYield();
 3433              	 .loc 1 2256 0
 3434 002e FFF7FEFF 	 bl vTaskMissedYield
 3435 0032 0EE0     	 b .L275
 3436              	.L274:
2257:../Dave/Generated/FREERTOS/queue.c ****                         }
2258:../Dave/Generated/FREERTOS/queue.c ****                         else
2259:../Dave/Generated/FREERTOS/queue.c ****                         {
2260:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2261:../Dave/Generated/FREERTOS/queue.c ****                         }
2262:../Dave/Generated/FREERTOS/queue.c ****                     }
2263:../Dave/Generated/FREERTOS/queue.c ****                     else
2264:../Dave/Generated/FREERTOS/queue.c ****                     {
2265:../Dave/Generated/FREERTOS/queue.c ****                         /* Tasks that are removed from the event list will get
2266:../Dave/Generated/FREERTOS/queue.c ****                          * added to the pending ready list as the scheduler is still
2267:../Dave/Generated/FREERTOS/queue.c ****                          * suspended. */
2268:../Dave/Generated/FREERTOS/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 3437              	 .loc 1 2268 0
 3438 0034 7B68     	 ldr r3,[r7,#4]
 3439 0036 5B6A     	 ldr r3,[r3,#36]
 3440 0038 002B     	 cmp r3,#0
 3441 003a 09D0     	 beq .L276
2269:../Dave/Generated/FREERTOS/queue.c ****                         {
2270:../Dave/Generated/FREERTOS/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 3442              	 .loc 1 2270 0
 3443 003c 7B68     	 ldr r3,[r7,#4]
 3444 003e 2433     	 add r3,r3,#36
 3445 0040 181C     	 mov r0,r3
 3446 0042 FFF7FEFF 	 bl xTaskRemoveFromEventList
 3447 0046 031E     	 sub r3,r0,#0
 3448 0048 03D0     	 beq .L275
2271:../Dave/Generated/FREERTOS/queue.c ****                             {
2272:../Dave/Generated/FREERTOS/queue.c ****                                 /* The task waiting has a higher priority so record that a
2273:../Dave/Generated/FREERTOS/queue.c ****                                  * context switch is required. */
2274:../Dave/Generated/FREERTOS/queue.c ****                                 vTaskMissedYield();
 3449              	 .loc 1 2274 0
 3450 004a FFF7FEFF 	 bl vTaskMissedYield
 3451 004e 00E0     	 b .L275
 3452              	.L276:
2275:../Dave/Generated/FREERTOS/queue.c ****                             }
2276:../Dave/Generated/FREERTOS/queue.c ****                             else
2277:../Dave/Generated/FREERTOS/queue.c ****                             {
2278:../Dave/Generated/FREERTOS/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
2279:../Dave/Generated/FREERTOS/queue.c ****                             }
2280:../Dave/Generated/FREERTOS/queue.c ****                         }
2281:../Dave/Generated/FREERTOS/queue.c ****                         else
2282:../Dave/Generated/FREERTOS/queue.c ****                         {
2283:../Dave/Generated/FREERTOS/queue.c ****                             break;
 3453              	 .loc 1 2283 0
 3454 0050 0DE0     	 b .L277
 3455              	.L275:
2284:../Dave/Generated/FREERTOS/queue.c ****                         }
2285:../Dave/Generated/FREERTOS/queue.c ****                     }
2286:../Dave/Generated/FREERTOS/queue.c ****                 }
2287:../Dave/Generated/FREERTOS/queue.c ****             #else /* configUSE_QUEUE_SETS */
2288:../Dave/Generated/FREERTOS/queue.c ****                 {
2289:../Dave/Generated/FREERTOS/queue.c ****                     /* Tasks that are removed from the event list will get added to
2290:../Dave/Generated/FREERTOS/queue.c ****                      * the pending ready list as the scheduler is still suspended. */
2291:../Dave/Generated/FREERTOS/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2292:../Dave/Generated/FREERTOS/queue.c ****                     {
2293:../Dave/Generated/FREERTOS/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2294:../Dave/Generated/FREERTOS/queue.c ****                         {
2295:../Dave/Generated/FREERTOS/queue.c ****                             /* The task waiting has a higher priority so record that
2296:../Dave/Generated/FREERTOS/queue.c ****                              * a context switch is required. */
2297:../Dave/Generated/FREERTOS/queue.c ****                             vTaskMissedYield();
2298:../Dave/Generated/FREERTOS/queue.c ****                         }
2299:../Dave/Generated/FREERTOS/queue.c ****                         else
2300:../Dave/Generated/FREERTOS/queue.c ****                         {
2301:../Dave/Generated/FREERTOS/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2302:../Dave/Generated/FREERTOS/queue.c ****                         }
2303:../Dave/Generated/FREERTOS/queue.c ****                     }
2304:../Dave/Generated/FREERTOS/queue.c ****                     else
2305:../Dave/Generated/FREERTOS/queue.c ****                     {
2306:../Dave/Generated/FREERTOS/queue.c ****                         break;
2307:../Dave/Generated/FREERTOS/queue.c ****                     }
2308:../Dave/Generated/FREERTOS/queue.c ****                 }
2309:../Dave/Generated/FREERTOS/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2310:../Dave/Generated/FREERTOS/queue.c **** 
2311:../Dave/Generated/FREERTOS/queue.c ****             --cTxLock;
 3456              	 .loc 1 2311 0
 3457 0052 0F23     	 mov r3,#15
 3458 0054 FB18     	 add r3,r7,r3
 3459 0056 1B78     	 ldrb r3,[r3]
 3460 0058 013B     	 sub r3,r3,#1
 3461 005a DAB2     	 uxtb r2,r3
 3462 005c 0F23     	 mov r3,#15
 3463 005e FB18     	 add r3,r7,r3
 3464 0060 1A70     	 strb r2,[r3]
 3465              	.L273:
2243:../Dave/Generated/FREERTOS/queue.c ****         {
 3466              	 .loc 1 2243 0
 3467 0062 0F23     	 mov r3,#15
 3468 0064 FB18     	 add r3,r7,r3
 3469 0066 1B78     	 ldrb r3,[r3]
 3470 0068 5BB2     	 sxtb r3,r3
 3471 006a 002B     	 cmp r3,#0
 3472 006c D5DC     	 bgt .L278
 3473              	.L277:
2312:../Dave/Generated/FREERTOS/queue.c ****         }
2313:../Dave/Generated/FREERTOS/queue.c **** 
2314:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
 3474              	 .loc 1 2314 0
 3475 006e 7B68     	 ldr r3,[r7,#4]
 3476 0070 4522     	 mov r2,#69
 3477 0072 FF21     	 mov r1,#255
 3478 0074 9954     	 strb r1,[r3,r2]
 3479              	.LBE12:
2315:../Dave/Generated/FREERTOS/queue.c ****     }
2316:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 3480              	 .loc 1 2316 0
 3481 0076 FFF7FEFF 	 bl vPortExitCritical
2317:../Dave/Generated/FREERTOS/queue.c **** 
2318:../Dave/Generated/FREERTOS/queue.c ****     /* Do the same for the Rx lock. */
2319:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 3482              	 .loc 1 2319 0
 3483 007a FFF7FEFF 	 bl vPortEnterCritical
 3484              	.LBB13:
2320:../Dave/Generated/FREERTOS/queue.c ****     {
2321:../Dave/Generated/FREERTOS/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
 3485              	 .loc 1 2321 0
 3486 007e 0E23     	 mov r3,#14
 3487 0080 FB18     	 add r3,r7,r3
 3488 0082 7A68     	 ldr r2,[r7,#4]
 3489 0084 4421     	 mov r1,#68
 3490 0086 525C     	 ldrb r2,[r2,r1]
 3491 0088 1A70     	 strb r2,[r3]
2322:../Dave/Generated/FREERTOS/queue.c **** 
2323:../Dave/Generated/FREERTOS/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
 3492              	 .loc 1 2323 0
 3493 008a 16E0     	 b .L279
 3494              	.L283:
2324:../Dave/Generated/FREERTOS/queue.c ****         {
2325:../Dave/Generated/FREERTOS/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 3495              	 .loc 1 2325 0
 3496 008c 7B68     	 ldr r3,[r7,#4]
 3497 008e 1B69     	 ldr r3,[r3,#16]
 3498 0090 002B     	 cmp r3,#0
 3499 0092 11D0     	 beq .L280
2326:../Dave/Generated/FREERTOS/queue.c ****             {
2327:../Dave/Generated/FREERTOS/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 3500              	 .loc 1 2327 0
 3501 0094 7B68     	 ldr r3,[r7,#4]
 3502 0096 1033     	 add r3,r3,#16
 3503 0098 181C     	 mov r0,r3
 3504 009a FFF7FEFF 	 bl xTaskRemoveFromEventList
 3505 009e 031E     	 sub r3,r0,#0
 3506 00a0 01D0     	 beq .L281
2328:../Dave/Generated/FREERTOS/queue.c ****                 {
2329:../Dave/Generated/FREERTOS/queue.c ****                     vTaskMissedYield();
 3507              	 .loc 1 2329 0
 3508 00a2 FFF7FEFF 	 bl vTaskMissedYield
 3509              	.L281:
2330:../Dave/Generated/FREERTOS/queue.c ****                 }
2331:../Dave/Generated/FREERTOS/queue.c ****                 else
2332:../Dave/Generated/FREERTOS/queue.c ****                 {
2333:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2334:../Dave/Generated/FREERTOS/queue.c ****                 }
2335:../Dave/Generated/FREERTOS/queue.c **** 
2336:../Dave/Generated/FREERTOS/queue.c ****                 --cRxLock;
 3510              	 .loc 1 2336 0
 3511 00a6 0E23     	 mov r3,#14
 3512 00a8 FB18     	 add r3,r7,r3
 3513 00aa 1B78     	 ldrb r3,[r3]
 3514 00ac 013B     	 sub r3,r3,#1
 3515 00ae DAB2     	 uxtb r2,r3
 3516 00b0 0E23     	 mov r3,#14
 3517 00b2 FB18     	 add r3,r7,r3
 3518 00b4 1A70     	 strb r2,[r3]
 3519 00b6 00E0     	 b .L279
 3520              	.L280:
2337:../Dave/Generated/FREERTOS/queue.c ****             }
2338:../Dave/Generated/FREERTOS/queue.c ****             else
2339:../Dave/Generated/FREERTOS/queue.c ****             {
2340:../Dave/Generated/FREERTOS/queue.c ****                 break;
 3521              	 .loc 1 2340 0
 3522 00b8 05E0     	 b .L282
 3523              	.L279:
2323:../Dave/Generated/FREERTOS/queue.c ****         {
 3524              	 .loc 1 2323 0
 3525 00ba 0E23     	 mov r3,#14
 3526 00bc FB18     	 add r3,r7,r3
 3527 00be 1B78     	 ldrb r3,[r3]
 3528 00c0 5BB2     	 sxtb r3,r3
 3529 00c2 002B     	 cmp r3,#0
 3530 00c4 E2DC     	 bgt .L283
 3531              	.L282:
2341:../Dave/Generated/FREERTOS/queue.c ****             }
2342:../Dave/Generated/FREERTOS/queue.c ****         }
2343:../Dave/Generated/FREERTOS/queue.c **** 
2344:../Dave/Generated/FREERTOS/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
 3532              	 .loc 1 2344 0
 3533 00c6 7B68     	 ldr r3,[r7,#4]
 3534 00c8 4422     	 mov r2,#68
 3535 00ca FF21     	 mov r1,#255
 3536 00cc 9954     	 strb r1,[r3,r2]
 3537              	.LBE13:
2345:../Dave/Generated/FREERTOS/queue.c ****     }
2346:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 3538              	 .loc 1 2346 0
 3539 00ce FFF7FEFF 	 bl vPortExitCritical
2347:../Dave/Generated/FREERTOS/queue.c **** }
 3540              	 .loc 1 2347 0
 3541 00d2 BD46     	 mov sp,r7
 3542 00d4 04B0     	 add sp,sp,#16
 3543              	 
 3544 00d6 80BD     	 pop {r7,pc}
 3545              	 .cfi_endproc
 3546              	.LFE70:
 3548              	 .section .text.prvIsQueueEmpty,"ax",%progbits
 3549              	 .align 2
 3550              	 .code 16
 3551              	 .thumb_func
 3553              	prvIsQueueEmpty:
 3554              	.LFB71:
2348:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2349:../Dave/Generated/FREERTOS/queue.c **** 
2350:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2351:../Dave/Generated/FREERTOS/queue.c **** {
 3555              	 .loc 1 2351 0
 3556              	 .cfi_startproc
 3557 0000 80B5     	 push {r7,lr}
 3558              	.LCFI87:
 3559              	 .cfi_def_cfa_offset 8
 3560              	 .cfi_offset 7,-8
 3561              	 .cfi_offset 14,-4
 3562 0002 84B0     	 sub sp,sp,#16
 3563              	.LCFI88:
 3564              	 .cfi_def_cfa_offset 24
 3565 0004 00AF     	 add r7,sp,#0
 3566              	.LCFI89:
 3567              	 .cfi_def_cfa_register 7
 3568 0006 7860     	 str r0,[r7,#4]
2352:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2353:../Dave/Generated/FREERTOS/queue.c **** 
2354:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 3569              	 .loc 1 2354 0
 3570 0008 FFF7FEFF 	 bl vPortEnterCritical
2355:../Dave/Generated/FREERTOS/queue.c ****     {
2356:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3571              	 .loc 1 2356 0
 3572 000c 7B68     	 ldr r3,[r7,#4]
 3573 000e 9B6B     	 ldr r3,[r3,#56]
 3574 0010 002B     	 cmp r3,#0
 3575 0012 02D1     	 bne .L285
2357:../Dave/Generated/FREERTOS/queue.c ****         {
2358:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdTRUE;
 3576              	 .loc 1 2358 0
 3577 0014 0123     	 mov r3,#1
 3578 0016 FB60     	 str r3,[r7,#12]
 3579 0018 01E0     	 b .L286
 3580              	.L285:
2359:../Dave/Generated/FREERTOS/queue.c ****         }
2360:../Dave/Generated/FREERTOS/queue.c ****         else
2361:../Dave/Generated/FREERTOS/queue.c ****         {
2362:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFALSE;
 3581              	 .loc 1 2362 0
 3582 001a 0023     	 mov r3,#0
 3583 001c FB60     	 str r3,[r7,#12]
 3584              	.L286:
2363:../Dave/Generated/FREERTOS/queue.c ****         }
2364:../Dave/Generated/FREERTOS/queue.c ****     }
2365:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 3585              	 .loc 1 2365 0
 3586 001e FFF7FEFF 	 bl vPortExitCritical
2366:../Dave/Generated/FREERTOS/queue.c **** 
2367:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3587              	 .loc 1 2367 0
 3588 0022 FB68     	 ldr r3,[r7,#12]
2368:../Dave/Generated/FREERTOS/queue.c **** }
 3589              	 .loc 1 2368 0
 3590 0024 181C     	 mov r0,r3
 3591 0026 BD46     	 mov sp,r7
 3592 0028 04B0     	 add sp,sp,#16
 3593              	 
 3594 002a 80BD     	 pop {r7,pc}
 3595              	 .cfi_endproc
 3596              	.LFE71:
 3598              	 .section .text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3599              	 .align 2
 3600              	 .global xQueueIsQueueEmptyFromISR
 3601              	 .code 16
 3602              	 .thumb_func
 3604              	xQueueIsQueueEmptyFromISR:
 3605              	.LFB72:
2369:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2370:../Dave/Generated/FREERTOS/queue.c **** 
2371:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2372:../Dave/Generated/FREERTOS/queue.c **** {
 3606              	 .loc 1 2372 0
 3607              	 .cfi_startproc
 3608 0000 80B5     	 push {r7,lr}
 3609              	.LCFI90:
 3610              	 .cfi_def_cfa_offset 8
 3611              	 .cfi_offset 7,-8
 3612              	 .cfi_offset 14,-4
 3613 0002 84B0     	 sub sp,sp,#16
 3614              	.LCFI91:
 3615              	 .cfi_def_cfa_offset 24
 3616 0004 00AF     	 add r7,sp,#0
 3617              	.LCFI92:
 3618              	 .cfi_def_cfa_register 7
 3619 0006 7860     	 str r0,[r7,#4]
2373:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2374:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3620              	 .loc 1 2374 0
 3621 0008 7B68     	 ldr r3,[r7,#4]
 3622 000a BB60     	 str r3,[r7,#8]
2375:../Dave/Generated/FREERTOS/queue.c **** 
2376:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 3623              	 .loc 1 2376 0
 3624 000c BB68     	 ldr r3,[r7,#8]
 3625 000e 002B     	 cmp r3,#0
 3626 0010 01D1     	 bne .L289
 3627              	 .loc 1 2376 0 is_stmt 0 discriminator 1
 3628              	
 3629 0012 72B6     	 cpsid i
 3630              	
 3631              	 .code 16
 3632              	.L290:
 3633 0014 FEE7     	 b .L290
 3634              	.L289:
2377:../Dave/Generated/FREERTOS/queue.c **** 
2378:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3635              	 .loc 1 2378 0 is_stmt 1
 3636 0016 BB68     	 ldr r3,[r7,#8]
 3637 0018 9B6B     	 ldr r3,[r3,#56]
 3638 001a 002B     	 cmp r3,#0
 3639 001c 02D1     	 bne .L291
2379:../Dave/Generated/FREERTOS/queue.c ****     {
2380:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdTRUE;
 3640              	 .loc 1 2380 0
 3641 001e 0123     	 mov r3,#1
 3642 0020 FB60     	 str r3,[r7,#12]
 3643 0022 01E0     	 b .L292
 3644              	.L291:
2381:../Dave/Generated/FREERTOS/queue.c ****     }
2382:../Dave/Generated/FREERTOS/queue.c ****     else
2383:../Dave/Generated/FREERTOS/queue.c ****     {
2384:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdFALSE;
 3645              	 .loc 1 2384 0
 3646 0024 0023     	 mov r3,#0
 3647 0026 FB60     	 str r3,[r7,#12]
 3648              	.L292:
2385:../Dave/Generated/FREERTOS/queue.c ****     }
2386:../Dave/Generated/FREERTOS/queue.c **** 
2387:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3649              	 .loc 1 2387 0
 3650 0028 FB68     	 ldr r3,[r7,#12]
2388:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3651              	 .loc 1 2388 0
 3652 002a 181C     	 mov r0,r3
 3653 002c BD46     	 mov sp,r7
 3654 002e 04B0     	 add sp,sp,#16
 3655              	 
 3656 0030 80BD     	 pop {r7,pc}
 3657              	 .cfi_endproc
 3658              	.LFE72:
 3660 0032 C046     	 .section .text.prvIsQueueFull,"ax",%progbits
 3661              	 .align 2
 3662              	 .code 16
 3663              	 .thumb_func
 3665              	prvIsQueueFull:
 3666              	.LFB73:
2389:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2390:../Dave/Generated/FREERTOS/queue.c **** 
2391:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2392:../Dave/Generated/FREERTOS/queue.c **** {
 3667              	 .loc 1 2392 0
 3668              	 .cfi_startproc
 3669 0000 80B5     	 push {r7,lr}
 3670              	.LCFI93:
 3671              	 .cfi_def_cfa_offset 8
 3672              	 .cfi_offset 7,-8
 3673              	 .cfi_offset 14,-4
 3674 0002 84B0     	 sub sp,sp,#16
 3675              	.LCFI94:
 3676              	 .cfi_def_cfa_offset 24
 3677 0004 00AF     	 add r7,sp,#0
 3678              	.LCFI95:
 3679              	 .cfi_def_cfa_register 7
 3680 0006 7860     	 str r0,[r7,#4]
2393:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2394:../Dave/Generated/FREERTOS/queue.c **** 
2395:../Dave/Generated/FREERTOS/queue.c ****     taskENTER_CRITICAL();
 3681              	 .loc 1 2395 0
 3682 0008 FFF7FEFF 	 bl vPortEnterCritical
2396:../Dave/Generated/FREERTOS/queue.c ****     {
2397:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3683              	 .loc 1 2397 0
 3684 000c 7B68     	 ldr r3,[r7,#4]
 3685 000e 9A6B     	 ldr r2,[r3,#56]
 3686 0010 7B68     	 ldr r3,[r7,#4]
 3687 0012 DB6B     	 ldr r3,[r3,#60]
 3688 0014 9A42     	 cmp r2,r3
 3689 0016 02D1     	 bne .L295
2398:../Dave/Generated/FREERTOS/queue.c ****         {
2399:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdTRUE;
 3690              	 .loc 1 2399 0
 3691 0018 0123     	 mov r3,#1
 3692 001a FB60     	 str r3,[r7,#12]
 3693 001c 01E0     	 b .L296
 3694              	.L295:
2400:../Dave/Generated/FREERTOS/queue.c ****         }
2401:../Dave/Generated/FREERTOS/queue.c ****         else
2402:../Dave/Generated/FREERTOS/queue.c ****         {
2403:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFALSE;
 3695              	 .loc 1 2403 0
 3696 001e 0023     	 mov r3,#0
 3697 0020 FB60     	 str r3,[r7,#12]
 3698              	.L296:
2404:../Dave/Generated/FREERTOS/queue.c ****         }
2405:../Dave/Generated/FREERTOS/queue.c ****     }
2406:../Dave/Generated/FREERTOS/queue.c ****     taskEXIT_CRITICAL();
 3699              	 .loc 1 2406 0
 3700 0022 FFF7FEFF 	 bl vPortExitCritical
2407:../Dave/Generated/FREERTOS/queue.c **** 
2408:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3701              	 .loc 1 2408 0
 3702 0026 FB68     	 ldr r3,[r7,#12]
2409:../Dave/Generated/FREERTOS/queue.c **** }
 3703              	 .loc 1 2409 0
 3704 0028 181C     	 mov r0,r3
 3705 002a BD46     	 mov sp,r7
 3706 002c 04B0     	 add sp,sp,#16
 3707              	 
 3708 002e 80BD     	 pop {r7,pc}
 3709              	 .cfi_endproc
 3710              	.LFE73:
 3712              	 .section .text.xQueueIsQueueFullFromISR,"ax",%progbits
 3713              	 .align 2
 3714              	 .global xQueueIsQueueFullFromISR
 3715              	 .code 16
 3716              	 .thumb_func
 3718              	xQueueIsQueueFullFromISR:
 3719              	.LFB74:
2410:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2411:../Dave/Generated/FREERTOS/queue.c **** 
2412:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2413:../Dave/Generated/FREERTOS/queue.c **** {
 3720              	 .loc 1 2413 0
 3721              	 .cfi_startproc
 3722 0000 80B5     	 push {r7,lr}
 3723              	.LCFI96:
 3724              	 .cfi_def_cfa_offset 8
 3725              	 .cfi_offset 7,-8
 3726              	 .cfi_offset 14,-4
 3727 0002 84B0     	 sub sp,sp,#16
 3728              	.LCFI97:
 3729              	 .cfi_def_cfa_offset 24
 3730 0004 00AF     	 add r7,sp,#0
 3731              	.LCFI98:
 3732              	 .cfi_def_cfa_register 7
 3733 0006 7860     	 str r0,[r7,#4]
2414:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xReturn;
2415:../Dave/Generated/FREERTOS/queue.c ****     Queue_t * const pxQueue = xQueue;
 3734              	 .loc 1 2415 0
 3735 0008 7B68     	 ldr r3,[r7,#4]
 3736 000a BB60     	 str r3,[r7,#8]
2416:../Dave/Generated/FREERTOS/queue.c **** 
2417:../Dave/Generated/FREERTOS/queue.c ****     configASSERT( pxQueue );
 3737              	 .loc 1 2417 0
 3738 000c BB68     	 ldr r3,[r7,#8]
 3739 000e 002B     	 cmp r3,#0
 3740 0010 01D1     	 bne .L299
 3741              	 .loc 1 2417 0 is_stmt 0 discriminator 1
 3742              	
 3743 0012 72B6     	 cpsid i
 3744              	
 3745              	 .code 16
 3746              	.L300:
 3747 0014 FEE7     	 b .L300
 3748              	.L299:
2418:../Dave/Generated/FREERTOS/queue.c **** 
2419:../Dave/Generated/FREERTOS/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3749              	 .loc 1 2419 0 is_stmt 1
 3750 0016 BB68     	 ldr r3,[r7,#8]
 3751 0018 9A6B     	 ldr r2,[r3,#56]
 3752 001a BB68     	 ldr r3,[r7,#8]
 3753 001c DB6B     	 ldr r3,[r3,#60]
 3754 001e 9A42     	 cmp r2,r3
 3755 0020 02D1     	 bne .L301
2420:../Dave/Generated/FREERTOS/queue.c ****     {
2421:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdTRUE;
 3756              	 .loc 1 2421 0
 3757 0022 0123     	 mov r3,#1
 3758 0024 FB60     	 str r3,[r7,#12]
 3759 0026 01E0     	 b .L302
 3760              	.L301:
2422:../Dave/Generated/FREERTOS/queue.c ****     }
2423:../Dave/Generated/FREERTOS/queue.c ****     else
2424:../Dave/Generated/FREERTOS/queue.c ****     {
2425:../Dave/Generated/FREERTOS/queue.c ****         xReturn = pdFALSE;
 3761              	 .loc 1 2425 0
 3762 0028 0023     	 mov r3,#0
 3763 002a FB60     	 str r3,[r7,#12]
 3764              	.L302:
2426:../Dave/Generated/FREERTOS/queue.c ****     }
2427:../Dave/Generated/FREERTOS/queue.c **** 
2428:../Dave/Generated/FREERTOS/queue.c ****     return xReturn;
 3765              	 .loc 1 2428 0
 3766 002c FB68     	 ldr r3,[r7,#12]
2429:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3767              	 .loc 1 2429 0
 3768 002e 181C     	 mov r0,r3
 3769 0030 BD46     	 mov sp,r7
 3770 0032 04B0     	 add sp,sp,#16
 3771              	 
 3772 0034 80BD     	 pop {r7,pc}
 3773              	 .cfi_endproc
 3774              	.LFE74:
 3776 0036 C046     	 .section .text.vQueueAddToRegistry,"ax",%progbits
 3777              	 .align 2
 3778              	 .global vQueueAddToRegistry
 3779              	 .code 16
 3780              	 .thumb_func
 3782              	vQueueAddToRegistry:
 3783              	.LFB75:
2430:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2431:../Dave/Generated/FREERTOS/queue.c **** 
2432:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2433:../Dave/Generated/FREERTOS/queue.c **** 
2434:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2435:../Dave/Generated/FREERTOS/queue.c ****                              const void * pvItemToQueue,
2436:../Dave/Generated/FREERTOS/queue.c ****                              TickType_t xTicksToWait )
2437:../Dave/Generated/FREERTOS/queue.c ****     {
2438:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2439:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2440:../Dave/Generated/FREERTOS/queue.c **** 
2441:../Dave/Generated/FREERTOS/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2442:../Dave/Generated/FREERTOS/queue.c ****          * is required to prevent an interrupt removing something from the queue
2443:../Dave/Generated/FREERTOS/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2444:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2445:../Dave/Generated/FREERTOS/queue.c ****         {
2446:../Dave/Generated/FREERTOS/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2447:../Dave/Generated/FREERTOS/queue.c ****             {
2448:../Dave/Generated/FREERTOS/queue.c ****                 /* The queue is full - do we want to block or just leave without
2449:../Dave/Generated/FREERTOS/queue.c ****                  * posting? */
2450:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2451:../Dave/Generated/FREERTOS/queue.c ****                 {
2452:../Dave/Generated/FREERTOS/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2453:../Dave/Generated/FREERTOS/queue.c ****                      * return indicating that we need to block. */
2454:../Dave/Generated/FREERTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2455:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2456:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_BLOCKED;
2457:../Dave/Generated/FREERTOS/queue.c ****                 }
2458:../Dave/Generated/FREERTOS/queue.c ****                 else
2459:../Dave/Generated/FREERTOS/queue.c ****                 {
2460:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2461:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_FULL;
2462:../Dave/Generated/FREERTOS/queue.c ****                 }
2463:../Dave/Generated/FREERTOS/queue.c ****             }
2464:../Dave/Generated/FREERTOS/queue.c ****         }
2465:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2466:../Dave/Generated/FREERTOS/queue.c **** 
2467:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2468:../Dave/Generated/FREERTOS/queue.c ****         {
2469:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2470:../Dave/Generated/FREERTOS/queue.c ****             {
2471:../Dave/Generated/FREERTOS/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2472:../Dave/Generated/FREERTOS/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2473:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdPASS;
2474:../Dave/Generated/FREERTOS/queue.c **** 
2475:../Dave/Generated/FREERTOS/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2476:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2477:../Dave/Generated/FREERTOS/queue.c ****                 {
2478:../Dave/Generated/FREERTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2479:../Dave/Generated/FREERTOS/queue.c ****                      * into the ready list as we are within a critical section.
2480:../Dave/Generated/FREERTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2481:../Dave/Generated/FREERTOS/queue.c ****                      * the event were caused from within an interrupt. */
2482:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2483:../Dave/Generated/FREERTOS/queue.c ****                     {
2484:../Dave/Generated/FREERTOS/queue.c ****                         /* The co-routine waiting has a higher priority so record
2485:../Dave/Generated/FREERTOS/queue.c ****                          * that a yield might be appropriate. */
2486:../Dave/Generated/FREERTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2487:../Dave/Generated/FREERTOS/queue.c ****                     }
2488:../Dave/Generated/FREERTOS/queue.c ****                     else
2489:../Dave/Generated/FREERTOS/queue.c ****                     {
2490:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2491:../Dave/Generated/FREERTOS/queue.c ****                     }
2492:../Dave/Generated/FREERTOS/queue.c ****                 }
2493:../Dave/Generated/FREERTOS/queue.c ****                 else
2494:../Dave/Generated/FREERTOS/queue.c ****                 {
2495:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2496:../Dave/Generated/FREERTOS/queue.c ****                 }
2497:../Dave/Generated/FREERTOS/queue.c ****             }
2498:../Dave/Generated/FREERTOS/queue.c ****             else
2499:../Dave/Generated/FREERTOS/queue.c ****             {
2500:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = errQUEUE_FULL;
2501:../Dave/Generated/FREERTOS/queue.c ****             }
2502:../Dave/Generated/FREERTOS/queue.c ****         }
2503:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2504:../Dave/Generated/FREERTOS/queue.c **** 
2505:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
2506:../Dave/Generated/FREERTOS/queue.c ****     }
2507:../Dave/Generated/FREERTOS/queue.c **** 
2508:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2509:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2510:../Dave/Generated/FREERTOS/queue.c **** 
2511:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2512:../Dave/Generated/FREERTOS/queue.c **** 
2513:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2514:../Dave/Generated/FREERTOS/queue.c ****                                 void * pvBuffer,
2515:../Dave/Generated/FREERTOS/queue.c ****                                 TickType_t xTicksToWait )
2516:../Dave/Generated/FREERTOS/queue.c ****     {
2517:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2518:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2519:../Dave/Generated/FREERTOS/queue.c **** 
2520:../Dave/Generated/FREERTOS/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2521:../Dave/Generated/FREERTOS/queue.c ****          * is required to prevent an interrupt adding something to the queue
2522:../Dave/Generated/FREERTOS/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2523:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2524:../Dave/Generated/FREERTOS/queue.c ****         {
2525:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2526:../Dave/Generated/FREERTOS/queue.c ****             {
2527:../Dave/Generated/FREERTOS/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2528:../Dave/Generated/FREERTOS/queue.c ****                  * leave with nothing? */
2529:../Dave/Generated/FREERTOS/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2530:../Dave/Generated/FREERTOS/queue.c ****                 {
2531:../Dave/Generated/FREERTOS/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2532:../Dave/Generated/FREERTOS/queue.c ****                      * indicating that we need to block. */
2533:../Dave/Generated/FREERTOS/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2534:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2535:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_BLOCKED;
2536:../Dave/Generated/FREERTOS/queue.c ****                 }
2537:../Dave/Generated/FREERTOS/queue.c ****                 else
2538:../Dave/Generated/FREERTOS/queue.c ****                 {
2539:../Dave/Generated/FREERTOS/queue.c ****                     portENABLE_INTERRUPTS();
2540:../Dave/Generated/FREERTOS/queue.c ****                     return errQUEUE_FULL;
2541:../Dave/Generated/FREERTOS/queue.c ****                 }
2542:../Dave/Generated/FREERTOS/queue.c ****             }
2543:../Dave/Generated/FREERTOS/queue.c ****             else
2544:../Dave/Generated/FREERTOS/queue.c ****             {
2545:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2546:../Dave/Generated/FREERTOS/queue.c ****             }
2547:../Dave/Generated/FREERTOS/queue.c ****         }
2548:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2549:../Dave/Generated/FREERTOS/queue.c **** 
2550:../Dave/Generated/FREERTOS/queue.c ****         portDISABLE_INTERRUPTS();
2551:../Dave/Generated/FREERTOS/queue.c ****         {
2552:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2553:../Dave/Generated/FREERTOS/queue.c ****             {
2554:../Dave/Generated/FREERTOS/queue.c ****                 /* Data is available from the queue. */
2555:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2556:../Dave/Generated/FREERTOS/queue.c **** 
2557:../Dave/Generated/FREERTOS/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2558:../Dave/Generated/FREERTOS/queue.c ****                 {
2559:../Dave/Generated/FREERTOS/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2560:../Dave/Generated/FREERTOS/queue.c ****                 }
2561:../Dave/Generated/FREERTOS/queue.c ****                 else
2562:../Dave/Generated/FREERTOS/queue.c ****                 {
2563:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2564:../Dave/Generated/FREERTOS/queue.c ****                 }
2565:../Dave/Generated/FREERTOS/queue.c **** 
2566:../Dave/Generated/FREERTOS/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2567:../Dave/Generated/FREERTOS/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2568:../Dave/Generated/FREERTOS/queue.c **** 
2569:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdPASS;
2570:../Dave/Generated/FREERTOS/queue.c **** 
2571:../Dave/Generated/FREERTOS/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2572:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2573:../Dave/Generated/FREERTOS/queue.c ****                 {
2574:../Dave/Generated/FREERTOS/queue.c ****                     /* In this instance the co-routine could be placed directly
2575:../Dave/Generated/FREERTOS/queue.c ****                      * into the ready list as we are within a critical section.
2576:../Dave/Generated/FREERTOS/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2577:../Dave/Generated/FREERTOS/queue.c ****                      * the event were caused from within an interrupt. */
2578:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2579:../Dave/Generated/FREERTOS/queue.c ****                     {
2580:../Dave/Generated/FREERTOS/queue.c ****                         xReturn = errQUEUE_YIELD;
2581:../Dave/Generated/FREERTOS/queue.c ****                     }
2582:../Dave/Generated/FREERTOS/queue.c ****                     else
2583:../Dave/Generated/FREERTOS/queue.c ****                     {
2584:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2585:../Dave/Generated/FREERTOS/queue.c ****                     }
2586:../Dave/Generated/FREERTOS/queue.c ****                 }
2587:../Dave/Generated/FREERTOS/queue.c ****                 else
2588:../Dave/Generated/FREERTOS/queue.c ****                 {
2589:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2590:../Dave/Generated/FREERTOS/queue.c ****                 }
2591:../Dave/Generated/FREERTOS/queue.c ****             }
2592:../Dave/Generated/FREERTOS/queue.c ****             else
2593:../Dave/Generated/FREERTOS/queue.c ****             {
2594:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdFAIL;
2595:../Dave/Generated/FREERTOS/queue.c ****             }
2596:../Dave/Generated/FREERTOS/queue.c ****         }
2597:../Dave/Generated/FREERTOS/queue.c ****         portENABLE_INTERRUPTS();
2598:../Dave/Generated/FREERTOS/queue.c **** 
2599:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
2600:../Dave/Generated/FREERTOS/queue.c ****     }
2601:../Dave/Generated/FREERTOS/queue.c **** 
2602:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2603:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2604:../Dave/Generated/FREERTOS/queue.c **** 
2605:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2606:../Dave/Generated/FREERTOS/queue.c **** 
2607:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2608:../Dave/Generated/FREERTOS/queue.c ****                                     const void * pvItemToQueue,
2609:../Dave/Generated/FREERTOS/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2610:../Dave/Generated/FREERTOS/queue.c ****     {
2611:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2612:../Dave/Generated/FREERTOS/queue.c **** 
2613:../Dave/Generated/FREERTOS/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2614:../Dave/Generated/FREERTOS/queue.c ****          * exit without doing anything. */
2615:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2616:../Dave/Generated/FREERTOS/queue.c ****         {
2617:../Dave/Generated/FREERTOS/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2618:../Dave/Generated/FREERTOS/queue.c **** 
2619:../Dave/Generated/FREERTOS/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
2620:../Dave/Generated/FREERTOS/queue.c ****              * co-routine has not already been woken. */
2621:../Dave/Generated/FREERTOS/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2622:../Dave/Generated/FREERTOS/queue.c ****             {
2623:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2624:../Dave/Generated/FREERTOS/queue.c ****                 {
2625:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2626:../Dave/Generated/FREERTOS/queue.c ****                     {
2627:../Dave/Generated/FREERTOS/queue.c ****                         return pdTRUE;
2628:../Dave/Generated/FREERTOS/queue.c ****                     }
2629:../Dave/Generated/FREERTOS/queue.c ****                     else
2630:../Dave/Generated/FREERTOS/queue.c ****                     {
2631:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2632:../Dave/Generated/FREERTOS/queue.c ****                     }
2633:../Dave/Generated/FREERTOS/queue.c ****                 }
2634:../Dave/Generated/FREERTOS/queue.c ****                 else
2635:../Dave/Generated/FREERTOS/queue.c ****                 {
2636:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2637:../Dave/Generated/FREERTOS/queue.c ****                 }
2638:../Dave/Generated/FREERTOS/queue.c ****             }
2639:../Dave/Generated/FREERTOS/queue.c ****             else
2640:../Dave/Generated/FREERTOS/queue.c ****             {
2641:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2642:../Dave/Generated/FREERTOS/queue.c ****             }
2643:../Dave/Generated/FREERTOS/queue.c ****         }
2644:../Dave/Generated/FREERTOS/queue.c ****         else
2645:../Dave/Generated/FREERTOS/queue.c ****         {
2646:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2647:../Dave/Generated/FREERTOS/queue.c ****         }
2648:../Dave/Generated/FREERTOS/queue.c **** 
2649:../Dave/Generated/FREERTOS/queue.c ****         return xCoRoutinePreviouslyWoken;
2650:../Dave/Generated/FREERTOS/queue.c ****     }
2651:../Dave/Generated/FREERTOS/queue.c **** 
2652:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2653:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2654:../Dave/Generated/FREERTOS/queue.c **** 
2655:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2656:../Dave/Generated/FREERTOS/queue.c **** 
2657:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2658:../Dave/Generated/FREERTOS/queue.c ****                                        void * pvBuffer,
2659:../Dave/Generated/FREERTOS/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2660:../Dave/Generated/FREERTOS/queue.c ****     {
2661:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2662:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
2663:../Dave/Generated/FREERTOS/queue.c **** 
2664:../Dave/Generated/FREERTOS/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2665:../Dave/Generated/FREERTOS/queue.c ****          * not then just leave without doing anything. */
2666:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2667:../Dave/Generated/FREERTOS/queue.c ****         {
2668:../Dave/Generated/FREERTOS/queue.c ****             /* Copy the data from the queue. */
2669:../Dave/Generated/FREERTOS/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2670:../Dave/Generated/FREERTOS/queue.c **** 
2671:../Dave/Generated/FREERTOS/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2672:../Dave/Generated/FREERTOS/queue.c ****             {
2673:../Dave/Generated/FREERTOS/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2674:../Dave/Generated/FREERTOS/queue.c ****             }
2675:../Dave/Generated/FREERTOS/queue.c ****             else
2676:../Dave/Generated/FREERTOS/queue.c ****             {
2677:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2678:../Dave/Generated/FREERTOS/queue.c ****             }
2679:../Dave/Generated/FREERTOS/queue.c **** 
2680:../Dave/Generated/FREERTOS/queue.c ****             --( pxQueue->uxMessagesWaiting );
2681:../Dave/Generated/FREERTOS/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2682:../Dave/Generated/FREERTOS/queue.c **** 
2683:../Dave/Generated/FREERTOS/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2684:../Dave/Generated/FREERTOS/queue.c ****             {
2685:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2686:../Dave/Generated/FREERTOS/queue.c ****                 {
2687:../Dave/Generated/FREERTOS/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2688:../Dave/Generated/FREERTOS/queue.c ****                     {
2689:../Dave/Generated/FREERTOS/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2690:../Dave/Generated/FREERTOS/queue.c ****                     }
2691:../Dave/Generated/FREERTOS/queue.c ****                     else
2692:../Dave/Generated/FREERTOS/queue.c ****                     {
2693:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2694:../Dave/Generated/FREERTOS/queue.c ****                     }
2695:../Dave/Generated/FREERTOS/queue.c ****                 }
2696:../Dave/Generated/FREERTOS/queue.c ****                 else
2697:../Dave/Generated/FREERTOS/queue.c ****                 {
2698:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2699:../Dave/Generated/FREERTOS/queue.c ****                 }
2700:../Dave/Generated/FREERTOS/queue.c ****             }
2701:../Dave/Generated/FREERTOS/queue.c ****             else
2702:../Dave/Generated/FREERTOS/queue.c ****             {
2703:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2704:../Dave/Generated/FREERTOS/queue.c ****             }
2705:../Dave/Generated/FREERTOS/queue.c **** 
2706:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
2707:../Dave/Generated/FREERTOS/queue.c ****         }
2708:../Dave/Generated/FREERTOS/queue.c ****         else
2709:../Dave/Generated/FREERTOS/queue.c ****         {
2710:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
2711:../Dave/Generated/FREERTOS/queue.c ****         }
2712:../Dave/Generated/FREERTOS/queue.c **** 
2713:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
2714:../Dave/Generated/FREERTOS/queue.c ****     }
2715:../Dave/Generated/FREERTOS/queue.c **** 
2716:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2717:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2718:../Dave/Generated/FREERTOS/queue.c **** 
2719:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2720:../Dave/Generated/FREERTOS/queue.c **** 
2721:../Dave/Generated/FREERTOS/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2722:../Dave/Generated/FREERTOS/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2723:../Dave/Generated/FREERTOS/queue.c ****     {
 3784              	 .loc 1 2723 0
 3785              	 .cfi_startproc
 3786 0000 80B5     	 push {r7,lr}
 3787              	.LCFI99:
 3788              	 .cfi_def_cfa_offset 8
 3789              	 .cfi_offset 7,-8
 3790              	 .cfi_offset 14,-4
 3791 0002 84B0     	 sub sp,sp,#16
 3792              	.LCFI100:
 3793              	 .cfi_def_cfa_offset 24
 3794 0004 00AF     	 add r7,sp,#0
 3795              	.LCFI101:
 3796              	 .cfi_def_cfa_register 7
 3797 0006 7860     	 str r0,[r7,#4]
 3798 0008 3960     	 str r1,[r7]
2724:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t ux;
2725:../Dave/Generated/FREERTOS/queue.c **** 
2726:../Dave/Generated/FREERTOS/queue.c ****         /* See if there is an empty space in the registry.  A NULL name denotes
2727:../Dave/Generated/FREERTOS/queue.c ****          * a free slot. */
2728:../Dave/Generated/FREERTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3799              	 .loc 1 2728 0
 3800 000a 0023     	 mov r3,#0
 3801 000c FB60     	 str r3,[r7,#12]
 3802 000e 14E0     	 b .L305
 3803              	.L308:
2729:../Dave/Generated/FREERTOS/queue.c ****         {
2730:../Dave/Generated/FREERTOS/queue.c ****             if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3804              	 .loc 1 2730 0
 3805 0010 0D4B     	 ldr r3,.L309
 3806 0012 FA68     	 ldr r2,[r7,#12]
 3807 0014 D200     	 lsl r2,r2,#3
 3808 0016 D358     	 ldr r3,[r2,r3]
 3809 0018 002B     	 cmp r3,#0
 3810 001a 0BD1     	 bne .L306
2731:../Dave/Generated/FREERTOS/queue.c ****             {
2732:../Dave/Generated/FREERTOS/queue.c ****                 /* Store the information on this queue. */
2733:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3811              	 .loc 1 2733 0
 3812 001c 0A4B     	 ldr r3,.L309
 3813 001e FA68     	 ldr r2,[r7,#12]
 3814 0020 D200     	 lsl r2,r2,#3
 3815 0022 3968     	 ldr r1,[r7]
 3816 0024 D150     	 str r1,[r2,r3]
2734:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = xQueue;
 3817              	 .loc 1 2734 0
 3818 0026 084A     	 ldr r2,.L309
 3819 0028 FB68     	 ldr r3,[r7,#12]
 3820 002a DB00     	 lsl r3,r3,#3
 3821 002c D318     	 add r3,r2,r3
 3822 002e 7A68     	 ldr r2,[r7,#4]
 3823 0030 5A60     	 str r2,[r3,#4]
2735:../Dave/Generated/FREERTOS/queue.c **** 
2736:../Dave/Generated/FREERTOS/queue.c ****                 traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2737:../Dave/Generated/FREERTOS/queue.c ****                 break;
 3824              	 .loc 1 2737 0
 3825 0032 05E0     	 b .L304
 3826              	.L306:
2728:../Dave/Generated/FREERTOS/queue.c ****         {
 3827              	 .loc 1 2728 0 discriminator 2
 3828 0034 FB68     	 ldr r3,[r7,#12]
 3829 0036 0133     	 add r3,r3,#1
 3830 0038 FB60     	 str r3,[r7,#12]
 3831              	.L305:
2728:../Dave/Generated/FREERTOS/queue.c ****         {
 3832              	 .loc 1 2728 0 is_stmt 0 discriminator 1
 3833 003a FB68     	 ldr r3,[r7,#12]
 3834 003c 072B     	 cmp r3,#7
 3835 003e E7D9     	 bls .L308
 3836              	.L304:
2738:../Dave/Generated/FREERTOS/queue.c ****             }
2739:../Dave/Generated/FREERTOS/queue.c ****             else
2740:../Dave/Generated/FREERTOS/queue.c ****             {
2741:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2742:../Dave/Generated/FREERTOS/queue.c ****             }
2743:../Dave/Generated/FREERTOS/queue.c ****         }
2744:../Dave/Generated/FREERTOS/queue.c ****     }
 3837              	 .loc 1 2744 0 is_stmt 1
 3838 0040 BD46     	 mov sp,r7
 3839 0042 04B0     	 add sp,sp,#16
 3840              	 
 3841 0044 80BD     	 pop {r7,pc}
 3842              	.L310:
 3843 0046 C046     	 .align 2
 3844              	.L309:
 3845 0048 00000000 	 .word xQueueRegistry
 3846              	 .cfi_endproc
 3847              	.LFE75:
 3849              	 .section .text.pcQueueGetName,"ax",%progbits
 3850              	 .align 2
 3851              	 .global pcQueueGetName
 3852              	 .code 16
 3853              	 .thumb_func
 3855              	pcQueueGetName:
 3856              	.LFB76:
2745:../Dave/Generated/FREERTOS/queue.c **** 
2746:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2747:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2748:../Dave/Generated/FREERTOS/queue.c **** 
2749:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2750:../Dave/Generated/FREERTOS/queue.c **** 
2751:../Dave/Generated/FREERTOS/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2752:../Dave/Generated/FREERTOS/queue.c ****     {
 3857              	 .loc 1 2752 0
 3858              	 .cfi_startproc
 3859 0000 80B5     	 push {r7,lr}
 3860              	.LCFI102:
 3861              	 .cfi_def_cfa_offset 8
 3862              	 .cfi_offset 7,-8
 3863              	 .cfi_offset 14,-4
 3864 0002 84B0     	 sub sp,sp,#16
 3865              	.LCFI103:
 3866              	 .cfi_def_cfa_offset 24
 3867 0004 00AF     	 add r7,sp,#0
 3868              	.LCFI104:
 3869              	 .cfi_def_cfa_register 7
 3870 0006 7860     	 str r0,[r7,#4]
2753:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t ux;
2754:../Dave/Generated/FREERTOS/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
 3871              	 .loc 1 2754 0
 3872 0008 0023     	 mov r3,#0
 3873 000a BB60     	 str r3,[r7,#8]
2755:../Dave/Generated/FREERTOS/queue.c **** 
2756:../Dave/Generated/FREERTOS/queue.c ****         /* Note there is nothing here to protect against another task adding or
2757:../Dave/Generated/FREERTOS/queue.c ****          * removing entries from the registry while it is being searched. */
2758:../Dave/Generated/FREERTOS/queue.c **** 
2759:../Dave/Generated/FREERTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3874              	 .loc 1 2759 0
 3875 000c 0023     	 mov r3,#0
 3876 000e FB60     	 str r3,[r7,#12]
 3877 0010 10E0     	 b .L312
 3878              	.L315:
2760:../Dave/Generated/FREERTOS/queue.c ****         {
2761:../Dave/Generated/FREERTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 3879              	 .loc 1 2761 0
 3880 0012 0C4A     	 ldr r2,.L317
 3881 0014 FB68     	 ldr r3,[r7,#12]
 3882 0016 DB00     	 lsl r3,r3,#3
 3883 0018 D318     	 add r3,r2,r3
 3884 001a 5A68     	 ldr r2,[r3,#4]
 3885 001c 7B68     	 ldr r3,[r7,#4]
 3886 001e 9A42     	 cmp r2,r3
 3887 0020 05D1     	 bne .L313
2762:../Dave/Generated/FREERTOS/queue.c ****             {
2763:../Dave/Generated/FREERTOS/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3888              	 .loc 1 2763 0
 3889 0022 084B     	 ldr r3,.L317
 3890 0024 FA68     	 ldr r2,[r7,#12]
 3891 0026 D200     	 lsl r2,r2,#3
 3892 0028 D358     	 ldr r3,[r2,r3]
 3893 002a BB60     	 str r3,[r7,#8]
2764:../Dave/Generated/FREERTOS/queue.c ****                 break;
 3894              	 .loc 1 2764 0
 3895 002c 05E0     	 b .L314
 3896              	.L313:
2759:../Dave/Generated/FREERTOS/queue.c ****         {
 3897              	 .loc 1 2759 0 discriminator 2
 3898 002e FB68     	 ldr r3,[r7,#12]
 3899 0030 0133     	 add r3,r3,#1
 3900 0032 FB60     	 str r3,[r7,#12]
 3901              	.L312:
2759:../Dave/Generated/FREERTOS/queue.c ****         {
 3902              	 .loc 1 2759 0 is_stmt 0 discriminator 1
 3903 0034 FB68     	 ldr r3,[r7,#12]
 3904 0036 072B     	 cmp r3,#7
 3905 0038 EBD9     	 bls .L315
 3906              	.L314:
2765:../Dave/Generated/FREERTOS/queue.c ****             }
2766:../Dave/Generated/FREERTOS/queue.c ****             else
2767:../Dave/Generated/FREERTOS/queue.c ****             {
2768:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2769:../Dave/Generated/FREERTOS/queue.c ****             }
2770:../Dave/Generated/FREERTOS/queue.c ****         }
2771:../Dave/Generated/FREERTOS/queue.c **** 
2772:../Dave/Generated/FREERTOS/queue.c ****         return pcReturn;
 3907              	 .loc 1 2772 0 is_stmt 1
 3908 003a BB68     	 ldr r3,[r7,#8]
2773:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3909              	 .loc 1 2773 0
 3910 003c 181C     	 mov r0,r3
 3911 003e BD46     	 mov sp,r7
 3912 0040 04B0     	 add sp,sp,#16
 3913              	 
 3914 0042 80BD     	 pop {r7,pc}
 3915              	.L318:
 3916              	 .align 2
 3917              	.L317:
 3918 0044 00000000 	 .word xQueueRegistry
 3919              	 .cfi_endproc
 3920              	.LFE76:
 3922              	 .section .text.vQueueUnregisterQueue,"ax",%progbits
 3923              	 .align 2
 3924              	 .global vQueueUnregisterQueue
 3925              	 .code 16
 3926              	 .thumb_func
 3928              	vQueueUnregisterQueue:
 3929              	.LFB77:
2774:../Dave/Generated/FREERTOS/queue.c **** 
2775:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2776:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2777:../Dave/Generated/FREERTOS/queue.c **** 
2778:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2779:../Dave/Generated/FREERTOS/queue.c **** 
2780:../Dave/Generated/FREERTOS/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2781:../Dave/Generated/FREERTOS/queue.c ****     {
 3930              	 .loc 1 2781 0
 3931              	 .cfi_startproc
 3932 0000 80B5     	 push {r7,lr}
 3933              	.LCFI105:
 3934              	 .cfi_def_cfa_offset 8
 3935              	 .cfi_offset 7,-8
 3936              	 .cfi_offset 14,-4
 3937 0002 84B0     	 sub sp,sp,#16
 3938              	.LCFI106:
 3939              	 .cfi_def_cfa_offset 24
 3940 0004 00AF     	 add r7,sp,#0
 3941              	.LCFI107:
 3942              	 .cfi_def_cfa_register 7
 3943 0006 7860     	 str r0,[r7,#4]
2782:../Dave/Generated/FREERTOS/queue.c ****         UBaseType_t ux;
2783:../Dave/Generated/FREERTOS/queue.c **** 
2784:../Dave/Generated/FREERTOS/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2785:../Dave/Generated/FREERTOS/queue.c ****          * registry. */
2786:../Dave/Generated/FREERTOS/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3944              	 .loc 1 2786 0
 3945 0008 0023     	 mov r3,#0
 3946 000a FB60     	 str r3,[r7,#12]
 3947 000c 16E0     	 b .L320
 3948              	.L323:
2787:../Dave/Generated/FREERTOS/queue.c ****         {
2788:../Dave/Generated/FREERTOS/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 3949              	 .loc 1 2788 0
 3950 000e 0E4A     	 ldr r2,.L324
 3951 0010 FB68     	 ldr r3,[r7,#12]
 3952 0012 DB00     	 lsl r3,r3,#3
 3953 0014 D318     	 add r3,r2,r3
 3954 0016 5A68     	 ldr r2,[r3,#4]
 3955 0018 7B68     	 ldr r3,[r7,#4]
 3956 001a 9A42     	 cmp r2,r3
 3957 001c 0BD1     	 bne .L321
2789:../Dave/Generated/FREERTOS/queue.c ****             {
2790:../Dave/Generated/FREERTOS/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2791:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 3958              	 .loc 1 2791 0
 3959 001e 0A4B     	 ldr r3,.L324
 3960 0020 FA68     	 ldr r2,[r7,#12]
 3961 0022 D200     	 lsl r2,r2,#3
 3962 0024 0021     	 mov r1,#0
 3963 0026 D150     	 str r1,[r2,r3]
2792:../Dave/Generated/FREERTOS/queue.c **** 
2793:../Dave/Generated/FREERTOS/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2794:../Dave/Generated/FREERTOS/queue.c ****                  * appear in the registry twice if it is added, removed, then
2795:../Dave/Generated/FREERTOS/queue.c ****                  * added again. */
2796:../Dave/Generated/FREERTOS/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3964              	 .loc 1 2796 0
 3965 0028 074A     	 ldr r2,.L324
 3966 002a FB68     	 ldr r3,[r7,#12]
 3967 002c DB00     	 lsl r3,r3,#3
 3968 002e D318     	 add r3,r2,r3
 3969 0030 0022     	 mov r2,#0
 3970 0032 5A60     	 str r2,[r3,#4]
2797:../Dave/Generated/FREERTOS/queue.c ****                 break;
 3971              	 .loc 1 2797 0
 3972 0034 05E0     	 b .L319
 3973              	.L321:
2786:../Dave/Generated/FREERTOS/queue.c ****         {
 3974              	 .loc 1 2786 0 discriminator 2
 3975 0036 FB68     	 ldr r3,[r7,#12]
 3976 0038 0133     	 add r3,r3,#1
 3977 003a FB60     	 str r3,[r7,#12]
 3978              	.L320:
2786:../Dave/Generated/FREERTOS/queue.c ****         {
 3979              	 .loc 1 2786 0 is_stmt 0 discriminator 1
 3980 003c FB68     	 ldr r3,[r7,#12]
 3981 003e 072B     	 cmp r3,#7
 3982 0040 E5D9     	 bls .L323
 3983              	.L319:
2798:../Dave/Generated/FREERTOS/queue.c ****             }
2799:../Dave/Generated/FREERTOS/queue.c ****             else
2800:../Dave/Generated/FREERTOS/queue.c ****             {
2801:../Dave/Generated/FREERTOS/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2802:../Dave/Generated/FREERTOS/queue.c ****             }
2803:../Dave/Generated/FREERTOS/queue.c ****         }
2804:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3984              	 .loc 1 2804 0 is_stmt 1
 3985 0042 BD46     	 mov sp,r7
 3986 0044 04B0     	 add sp,sp,#16
 3987              	 
 3988 0046 80BD     	 pop {r7,pc}
 3989              	.L325:
 3990              	 .align 2
 3991              	.L324:
 3992 0048 00000000 	 .word xQueueRegistry
 3993              	 .cfi_endproc
 3994              	.LFE77:
 3996              	 .section .text.vQueueWaitForMessageRestricted,"ax",%progbits
 3997              	 .align 2
 3998              	 .global vQueueWaitForMessageRestricted
 3999              	 .code 16
 4000              	 .thumb_func
 4002              	vQueueWaitForMessageRestricted:
 4003              	.LFB78:
2805:../Dave/Generated/FREERTOS/queue.c **** 
2806:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2807:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2808:../Dave/Generated/FREERTOS/queue.c **** 
2809:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2810:../Dave/Generated/FREERTOS/queue.c **** 
2811:../Dave/Generated/FREERTOS/queue.c ****     void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
2812:../Dave/Generated/FREERTOS/queue.c ****                                          TickType_t xTicksToWait,
2813:../Dave/Generated/FREERTOS/queue.c ****                                          const BaseType_t xWaitIndefinitely )
2814:../Dave/Generated/FREERTOS/queue.c ****     {
 4004              	 .loc 1 2814 0
 4005              	 .cfi_startproc
 4006 0000 80B5     	 push {r7,lr}
 4007              	.LCFI108:
 4008              	 .cfi_def_cfa_offset 8
 4009              	 .cfi_offset 7,-8
 4010              	 .cfi_offset 14,-4
 4011 0002 86B0     	 sub sp,sp,#24
 4012              	.LCFI109:
 4013              	 .cfi_def_cfa_offset 32
 4014 0004 00AF     	 add r7,sp,#0
 4015              	.LCFI110:
 4016              	 .cfi_def_cfa_register 7
 4017 0006 F860     	 str r0,[r7,#12]
 4018 0008 B960     	 str r1,[r7,#8]
 4019 000a 7A60     	 str r2,[r7,#4]
2815:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueue = xQueue;
 4020              	 .loc 1 2815 0
 4021 000c FB68     	 ldr r3,[r7,#12]
 4022 000e 7B61     	 str r3,[r7,#20]
2816:../Dave/Generated/FREERTOS/queue.c **** 
2817:../Dave/Generated/FREERTOS/queue.c ****         /* This function should not be called by application code hence the
2818:../Dave/Generated/FREERTOS/queue.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
2819:../Dave/Generated/FREERTOS/queue.c ****          * designed for use by kernel code, and has special calling requirements.
2820:../Dave/Generated/FREERTOS/queue.c ****          * It can result in vListInsert() being called on a list that can only
2821:../Dave/Generated/FREERTOS/queue.c ****          * possibly ever have one item in it, so the list will be fast, but even
2822:../Dave/Generated/FREERTOS/queue.c ****          * so it should be called with the scheduler locked and not from a critical
2823:../Dave/Generated/FREERTOS/queue.c ****          * section. */
2824:../Dave/Generated/FREERTOS/queue.c **** 
2825:../Dave/Generated/FREERTOS/queue.c ****         /* Only do anything if there are no messages in the queue.  This function
2826:../Dave/Generated/FREERTOS/queue.c ****          *  will not actually cause the task to block, just place it on a blocked
2827:../Dave/Generated/FREERTOS/queue.c ****          *  list.  It will not block until the scheduler is unlocked - at which
2828:../Dave/Generated/FREERTOS/queue.c ****          *  time a yield will be performed.  If an item is added to the queue while
2829:../Dave/Generated/FREERTOS/queue.c ****          *  the queue is locked, and the calling task blocks on the queue, then the
2830:../Dave/Generated/FREERTOS/queue.c ****          *  calling task will be immediately unblocked when the queue is unlocked. */
2831:../Dave/Generated/FREERTOS/queue.c ****         prvLockQueue( pxQueue );
 4023              	 .loc 1 2831 0
 4024 0010 FFF7FEFF 	 bl vPortEnterCritical
 4025 0014 7B69     	 ldr r3,[r7,#20]
 4026 0016 4422     	 mov r2,#68
 4027 0018 9B5C     	 ldrb r3,[r3,r2]
 4028 001a DBB2     	 uxtb r3,r3
 4029 001c 5BB2     	 sxtb r3,r3
 4030 001e 0133     	 add r3,r3,#1
 4031 0020 03D1     	 bne .L327
 4032              	 .loc 1 2831 0 is_stmt 0 discriminator 1
 4033 0022 7B69     	 ldr r3,[r7,#20]
 4034 0024 4422     	 mov r2,#68
 4035 0026 0021     	 mov r1,#0
 4036 0028 9954     	 strb r1,[r3,r2]
 4037              	.L327:
 4038              	 .loc 1 2831 0 discriminator 3
 4039 002a 7B69     	 ldr r3,[r7,#20]
 4040 002c 4522     	 mov r2,#69
 4041 002e 9B5C     	 ldrb r3,[r3,r2]
 4042 0030 DBB2     	 uxtb r3,r3
 4043 0032 5BB2     	 sxtb r3,r3
 4044 0034 0133     	 add r3,r3,#1
 4045 0036 03D1     	 bne .L328
 4046              	 .loc 1 2831 0 discriminator 4
 4047 0038 7B69     	 ldr r3,[r7,#20]
 4048 003a 4522     	 mov r2,#69
 4049 003c 0021     	 mov r1,#0
 4050 003e 9954     	 strb r1,[r3,r2]
 4051              	.L328:
 4052              	 .loc 1 2831 0 discriminator 6
 4053 0040 FFF7FEFF 	 bl vPortExitCritical
2832:../Dave/Generated/FREERTOS/queue.c **** 
2833:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 4054              	 .loc 1 2833 0 is_stmt 1 discriminator 6
 4055 0044 7B69     	 ldr r3,[r7,#20]
 4056 0046 9B6B     	 ldr r3,[r3,#56]
 4057 0048 002B     	 cmp r3,#0
 4058 004a 09D1     	 bne .L329
2834:../Dave/Generated/FREERTOS/queue.c ****         {
2835:../Dave/Generated/FREERTOS/queue.c ****             /* There is nothing in the queue, block for the specified period. */
2836:../Dave/Generated/FREERTOS/queue.c ****             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xW
 4059              	 .loc 1 2836 0
 4060 004c 7B69     	 ldr r3,[r7,#20]
 4061 004e 2433     	 add r3,r3,#36
 4062 0050 191C     	 mov r1,r3
 4063 0052 BA68     	 ldr r2,[r7,#8]
 4064 0054 7B68     	 ldr r3,[r7,#4]
 4065 0056 081C     	 mov r0,r1
 4066 0058 111C     	 mov r1,r2
 4067 005a 1A1C     	 mov r2,r3
 4068 005c FFF7FEFF 	 bl vTaskPlaceOnEventListRestricted
 4069              	.L329:
2837:../Dave/Generated/FREERTOS/queue.c ****         }
2838:../Dave/Generated/FREERTOS/queue.c ****         else
2839:../Dave/Generated/FREERTOS/queue.c ****         {
2840:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
2841:../Dave/Generated/FREERTOS/queue.c ****         }
2842:../Dave/Generated/FREERTOS/queue.c **** 
2843:../Dave/Generated/FREERTOS/queue.c ****         prvUnlockQueue( pxQueue );
 4070              	 .loc 1 2843 0
 4071 0060 7B69     	 ldr r3,[r7,#20]
 4072 0062 181C     	 mov r0,r3
 4073 0064 FFF7FEFF 	 bl prvUnlockQueue
2844:../Dave/Generated/FREERTOS/queue.c ****     }
 4074              	 .loc 1 2844 0
 4075 0068 BD46     	 mov sp,r7
 4076 006a 06B0     	 add sp,sp,#24
 4077              	 
 4078 006c 80BD     	 pop {r7,pc}
 4079              	 .cfi_endproc
 4080              	.LFE78:
 4082 006e C046     	 .section .text.xQueueCreateSet,"ax",%progbits
 4083              	 .align 2
 4084              	 .global xQueueCreateSet
 4085              	 .code 16
 4086              	 .thumb_func
 4088              	xQueueCreateSet:
 4089              	.LFB79:
2845:../Dave/Generated/FREERTOS/queue.c **** 
2846:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TIMERS */
2847:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2848:../Dave/Generated/FREERTOS/queue.c **** 
2849:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
2850:../Dave/Generated/FREERTOS/queue.c **** 
2851:../Dave/Generated/FREERTOS/queue.c ****     QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
2852:../Dave/Generated/FREERTOS/queue.c ****     {
 4090              	 .loc 1 2852 0
 4091              	 .cfi_startproc
 4092 0000 80B5     	 push {r7,lr}
 4093              	.LCFI111:
 4094              	 .cfi_def_cfa_offset 8
 4095              	 .cfi_offset 7,-8
 4096              	 .cfi_offset 14,-4
 4097 0002 84B0     	 sub sp,sp,#16
 4098              	.LCFI112:
 4099              	 .cfi_def_cfa_offset 24
 4100 0004 00AF     	 add r7,sp,#0
 4101              	.LCFI113:
 4102              	 .cfi_def_cfa_register 7
 4103 0006 7860     	 str r0,[r7,#4]
2853:../Dave/Generated/FREERTOS/queue.c ****         QueueSetHandle_t pxQueue;
2854:../Dave/Generated/FREERTOS/queue.c **** 
2855:../Dave/Generated/FREERTOS/queue.c ****         pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), que
 4104              	 .loc 1 2855 0
 4105 0008 7B68     	 ldr r3,[r7,#4]
 4106 000a 181C     	 mov r0,r3
 4107 000c 0421     	 mov r1,#4
 4108 000e 0022     	 mov r2,#0
 4109 0010 FFF7FEFF 	 bl xQueueGenericCreate
 4110 0014 031C     	 mov r3,r0
 4111 0016 FB60     	 str r3,[r7,#12]
2856:../Dave/Generated/FREERTOS/queue.c **** 
2857:../Dave/Generated/FREERTOS/queue.c ****         return pxQueue;
 4112              	 .loc 1 2857 0
 4113 0018 FB68     	 ldr r3,[r7,#12]
2858:../Dave/Generated/FREERTOS/queue.c ****     }
 4114              	 .loc 1 2858 0
 4115 001a 181C     	 mov r0,r3
 4116 001c BD46     	 mov sp,r7
 4117 001e 04B0     	 add sp,sp,#16
 4118              	 
 4119 0020 80BD     	 pop {r7,pc}
 4120              	 .cfi_endproc
 4121              	.LFE79:
 4123 0022 C046     	 .section .text.xQueueAddToSet,"ax",%progbits
 4124              	 .align 2
 4125              	 .global xQueueAddToSet
 4126              	 .code 16
 4127              	 .thumb_func
 4129              	xQueueAddToSet:
 4130              	.LFB80:
2859:../Dave/Generated/FREERTOS/queue.c **** 
2860:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2861:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2862:../Dave/Generated/FREERTOS/queue.c **** 
2863:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2864:../Dave/Generated/FREERTOS/queue.c **** 
2865:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
2866:../Dave/Generated/FREERTOS/queue.c ****                                QueueSetHandle_t xQueueSet )
2867:../Dave/Generated/FREERTOS/queue.c ****     {
 4131              	 .loc 1 2867 0
 4132              	 .cfi_startproc
 4133 0000 80B5     	 push {r7,lr}
 4134              	.LCFI114:
 4135              	 .cfi_def_cfa_offset 8
 4136              	 .cfi_offset 7,-8
 4137              	 .cfi_offset 14,-4
 4138 0002 84B0     	 sub sp,sp,#16
 4139              	.LCFI115:
 4140              	 .cfi_def_cfa_offset 24
 4141 0004 00AF     	 add r7,sp,#0
 4142              	.LCFI116:
 4143              	 .cfi_def_cfa_register 7
 4144 0006 7860     	 str r0,[r7,#4]
 4145 0008 3960     	 str r1,[r7]
2868:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2869:../Dave/Generated/FREERTOS/queue.c **** 
2870:../Dave/Generated/FREERTOS/queue.c ****         taskENTER_CRITICAL();
 4146              	 .loc 1 2870 0
 4147 000a FFF7FEFF 	 bl vPortEnterCritical
2871:../Dave/Generated/FREERTOS/queue.c ****         {
2872:../Dave/Generated/FREERTOS/queue.c ****             if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 4148              	 .loc 1 2872 0
 4149 000e 7B68     	 ldr r3,[r7,#4]
 4150 0010 9B6C     	 ldr r3,[r3,#72]
 4151 0012 002B     	 cmp r3,#0
 4152 0014 02D0     	 beq .L333
2873:../Dave/Generated/FREERTOS/queue.c ****             {
2874:../Dave/Generated/FREERTOS/queue.c ****                 /* Cannot add a queue/semaphore to more than one queue set. */
2875:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdFAIL;
 4153              	 .loc 1 2875 0
 4154 0016 0023     	 mov r3,#0
 4155 0018 FB60     	 str r3,[r7,#12]
 4156 001a 0BE0     	 b .L334
 4157              	.L333:
2876:../Dave/Generated/FREERTOS/queue.c ****             }
2877:../Dave/Generated/FREERTOS/queue.c ****             else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 4158              	 .loc 1 2877 0
 4159 001c 7B68     	 ldr r3,[r7,#4]
 4160 001e 9B6B     	 ldr r3,[r3,#56]
 4161 0020 002B     	 cmp r3,#0
 4162 0022 02D0     	 beq .L335
2878:../Dave/Generated/FREERTOS/queue.c ****             {
2879:../Dave/Generated/FREERTOS/queue.c ****                 /* Cannot add a queue/semaphore to a queue set if there are already
2880:../Dave/Generated/FREERTOS/queue.c ****                  * items in the queue/semaphore. */
2881:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdFAIL;
 4163              	 .loc 1 2881 0
 4164 0024 0023     	 mov r3,#0
 4165 0026 FB60     	 str r3,[r7,#12]
 4166 0028 04E0     	 b .L334
 4167              	.L335:
2882:../Dave/Generated/FREERTOS/queue.c ****             }
2883:../Dave/Generated/FREERTOS/queue.c ****             else
2884:../Dave/Generated/FREERTOS/queue.c ****             {
2885:../Dave/Generated/FREERTOS/queue.c ****                 ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 4168              	 .loc 1 2885 0
 4169 002a 7B68     	 ldr r3,[r7,#4]
 4170 002c 3A68     	 ldr r2,[r7]
 4171 002e 9A64     	 str r2,[r3,#72]
2886:../Dave/Generated/FREERTOS/queue.c ****                 xReturn = pdPASS;
 4172              	 .loc 1 2886 0
 4173 0030 0123     	 mov r3,#1
 4174 0032 FB60     	 str r3,[r7,#12]
 4175              	.L334:
2887:../Dave/Generated/FREERTOS/queue.c ****             }
2888:../Dave/Generated/FREERTOS/queue.c ****         }
2889:../Dave/Generated/FREERTOS/queue.c ****         taskEXIT_CRITICAL();
 4176              	 .loc 1 2889 0
 4177 0034 FFF7FEFF 	 bl vPortExitCritical
2890:../Dave/Generated/FREERTOS/queue.c **** 
2891:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 4178              	 .loc 1 2891 0
 4179 0038 FB68     	 ldr r3,[r7,#12]
2892:../Dave/Generated/FREERTOS/queue.c ****     }
 4180              	 .loc 1 2892 0
 4181 003a 181C     	 mov r0,r3
 4182 003c BD46     	 mov sp,r7
 4183 003e 04B0     	 add sp,sp,#16
 4184              	 
 4185 0040 80BD     	 pop {r7,pc}
 4186              	 .cfi_endproc
 4187              	.LFE80:
 4189 0042 C046     	 .section .text.xQueueRemoveFromSet,"ax",%progbits
 4190              	 .align 2
 4191              	 .global xQueueRemoveFromSet
 4192              	 .code 16
 4193              	 .thumb_func
 4195              	xQueueRemoveFromSet:
 4196              	.LFB81:
2893:../Dave/Generated/FREERTOS/queue.c **** 
2894:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2895:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2896:../Dave/Generated/FREERTOS/queue.c **** 
2897:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2898:../Dave/Generated/FREERTOS/queue.c **** 
2899:../Dave/Generated/FREERTOS/queue.c ****     BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
2900:../Dave/Generated/FREERTOS/queue.c ****                                     QueueSetHandle_t xQueueSet )
2901:../Dave/Generated/FREERTOS/queue.c ****     {
 4197              	 .loc 1 2901 0
 4198              	 .cfi_startproc
 4199 0000 80B5     	 push {r7,lr}
 4200              	.LCFI117:
 4201              	 .cfi_def_cfa_offset 8
 4202              	 .cfi_offset 7,-8
 4203              	 .cfi_offset 14,-4
 4204 0002 84B0     	 sub sp,sp,#16
 4205              	.LCFI118:
 4206              	 .cfi_def_cfa_offset 24
 4207 0004 00AF     	 add r7,sp,#0
 4208              	.LCFI119:
 4209              	 .cfi_def_cfa_register 7
 4210 0006 7860     	 str r0,[r7,#4]
 4211 0008 3960     	 str r1,[r7]
2902:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn;
2903:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
 4212              	 .loc 1 2903 0
 4213 000a 7B68     	 ldr r3,[r7,#4]
 4214 000c BB60     	 str r3,[r7,#8]
2904:../Dave/Generated/FREERTOS/queue.c **** 
2905:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
 4215              	 .loc 1 2905 0
 4216 000e BB68     	 ldr r3,[r7,#8]
 4217 0010 9A6C     	 ldr r2,[r3,#72]
 4218 0012 3B68     	 ldr r3,[r7]
 4219 0014 9A42     	 cmp r2,r3
 4220 0016 02D0     	 beq .L338
2906:../Dave/Generated/FREERTOS/queue.c ****         {
2907:../Dave/Generated/FREERTOS/queue.c ****             /* The queue was not a member of the set. */
2908:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 4221              	 .loc 1 2908 0
 4222 0018 0023     	 mov r3,#0
 4223 001a FB60     	 str r3,[r7,#12]
 4224 001c 0FE0     	 b .L339
 4225              	.L338:
2909:../Dave/Generated/FREERTOS/queue.c ****         }
2910:../Dave/Generated/FREERTOS/queue.c ****         else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
 4226              	 .loc 1 2910 0
 4227 001e BB68     	 ldr r3,[r7,#8]
 4228 0020 9B6B     	 ldr r3,[r3,#56]
 4229 0022 002B     	 cmp r3,#0
 4230 0024 02D0     	 beq .L340
2911:../Dave/Generated/FREERTOS/queue.c ****         {
2912:../Dave/Generated/FREERTOS/queue.c ****             /* It is dangerous to remove a queue from a set when the queue is
2913:../Dave/Generated/FREERTOS/queue.c ****              * not empty because the queue set will still hold pending events for
2914:../Dave/Generated/FREERTOS/queue.c ****              * the queue. */
2915:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdFAIL;
 4231              	 .loc 1 2915 0
 4232 0026 0023     	 mov r3,#0
 4233 0028 FB60     	 str r3,[r7,#12]
 4234 002a 08E0     	 b .L339
 4235              	.L340:
2916:../Dave/Generated/FREERTOS/queue.c ****         }
2917:../Dave/Generated/FREERTOS/queue.c ****         else
2918:../Dave/Generated/FREERTOS/queue.c ****         {
2919:../Dave/Generated/FREERTOS/queue.c ****             taskENTER_CRITICAL();
 4236              	 .loc 1 2919 0
 4237 002c FFF7FEFF 	 bl vPortEnterCritical
2920:../Dave/Generated/FREERTOS/queue.c ****             {
2921:../Dave/Generated/FREERTOS/queue.c ****                 /* The queue is no longer contained in the set. */
2922:../Dave/Generated/FREERTOS/queue.c ****                 pxQueueOrSemaphore->pxQueueSetContainer = NULL;
 4238              	 .loc 1 2922 0
 4239 0030 BB68     	 ldr r3,[r7,#8]
 4240 0032 0022     	 mov r2,#0
 4241 0034 9A64     	 str r2,[r3,#72]
2923:../Dave/Generated/FREERTOS/queue.c ****             }
2924:../Dave/Generated/FREERTOS/queue.c ****             taskEXIT_CRITICAL();
 4242              	 .loc 1 2924 0
 4243 0036 FFF7FEFF 	 bl vPortExitCritical
2925:../Dave/Generated/FREERTOS/queue.c ****             xReturn = pdPASS;
 4244              	 .loc 1 2925 0
 4245 003a 0123     	 mov r3,#1
 4246 003c FB60     	 str r3,[r7,#12]
 4247              	.L339:
2926:../Dave/Generated/FREERTOS/queue.c ****         }
2927:../Dave/Generated/FREERTOS/queue.c **** 
2928:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 4248              	 .loc 1 2928 0
 4249 003e FB68     	 ldr r3,[r7,#12]
2929:../Dave/Generated/FREERTOS/queue.c ****     } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
 4250              	 .loc 1 2929 0
 4251 0040 181C     	 mov r0,r3
 4252 0042 BD46     	 mov sp,r7
 4253 0044 04B0     	 add sp,sp,#16
 4254              	 
 4255 0046 80BD     	 pop {r7,pc}
 4256              	 .cfi_endproc
 4257              	.LFE81:
 4259              	 .section .text.xQueueSelectFromSet,"ax",%progbits
 4260              	 .align 2
 4261              	 .global xQueueSelectFromSet
 4262              	 .code 16
 4263              	 .thumb_func
 4265              	xQueueSelectFromSet:
 4266              	.LFB82:
2930:../Dave/Generated/FREERTOS/queue.c **** 
2931:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2932:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2933:../Dave/Generated/FREERTOS/queue.c **** 
2934:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2935:../Dave/Generated/FREERTOS/queue.c **** 
2936:../Dave/Generated/FREERTOS/queue.c ****     QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
2937:../Dave/Generated/FREERTOS/queue.c ****                                                 TickType_t const xTicksToWait )
2938:../Dave/Generated/FREERTOS/queue.c ****     {
 4267              	 .loc 1 2938 0
 4268              	 .cfi_startproc
 4269 0000 80B5     	 push {r7,lr}
 4270              	.LCFI120:
 4271              	 .cfi_def_cfa_offset 8
 4272              	 .cfi_offset 7,-8
 4273              	 .cfi_offset 14,-4
 4274 0002 84B0     	 sub sp,sp,#16
 4275              	.LCFI121:
 4276              	 .cfi_def_cfa_offset 24
 4277 0004 00AF     	 add r7,sp,#0
 4278              	.LCFI122:
 4279              	 .cfi_def_cfa_register 7
 4280 0006 7860     	 str r0,[r7,#4]
 4281 0008 3960     	 str r1,[r7]
2939:../Dave/Generated/FREERTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 4282              	 .loc 1 2939 0
 4283 000a 0023     	 mov r3,#0
 4284 000c FB60     	 str r3,[r7,#12]
2940:../Dave/Generated/FREERTOS/queue.c **** 
2941:../Dave/Generated/FREERTOS/queue.c ****         ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961
 4285              	 .loc 1 2941 0
 4286 000e 7968     	 ldr r1,[r7,#4]
 4287 0010 0C23     	 mov r3,#12
 4288 0012 FA18     	 add r2,r7,r3
 4289 0014 3B68     	 ldr r3,[r7]
 4290 0016 081C     	 mov r0,r1
 4291 0018 111C     	 mov r1,r2
 4292 001a 1A1C     	 mov r2,r3
 4293 001c FFF7FEFF 	 bl xQueueReceive
2942:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 4294              	 .loc 1 2942 0
 4295 0020 FB68     	 ldr r3,[r7,#12]
2943:../Dave/Generated/FREERTOS/queue.c ****     }
 4296              	 .loc 1 2943 0
 4297 0022 181C     	 mov r0,r3
 4298 0024 BD46     	 mov sp,r7
 4299 0026 04B0     	 add sp,sp,#16
 4300              	 
 4301 0028 80BD     	 pop {r7,pc}
 4302              	 .cfi_endproc
 4303              	.LFE82:
 4305 002a C046     	 .section .text.xQueueSelectFromSetFromISR,"ax",%progbits
 4306              	 .align 2
 4307              	 .global xQueueSelectFromSetFromISR
 4308              	 .code 16
 4309              	 .thumb_func
 4311              	xQueueSelectFromSetFromISR:
 4312              	.LFB83:
2944:../Dave/Generated/FREERTOS/queue.c **** 
2945:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2946:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2947:../Dave/Generated/FREERTOS/queue.c **** 
2948:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2949:../Dave/Generated/FREERTOS/queue.c **** 
2950:../Dave/Generated/FREERTOS/queue.c ****     QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
2951:../Dave/Generated/FREERTOS/queue.c ****     {
 4313              	 .loc 1 2951 0
 4314              	 .cfi_startproc
 4315 0000 80B5     	 push {r7,lr}
 4316              	.LCFI123:
 4317              	 .cfi_def_cfa_offset 8
 4318              	 .cfi_offset 7,-8
 4319              	 .cfi_offset 14,-4
 4320 0002 84B0     	 sub sp,sp,#16
 4321              	.LCFI124:
 4322              	 .cfi_def_cfa_offset 24
 4323 0004 00AF     	 add r7,sp,#0
 4324              	.LCFI125:
 4325              	 .cfi_def_cfa_register 7
 4326 0006 7860     	 str r0,[r7,#4]
2952:../Dave/Generated/FREERTOS/queue.c ****         QueueSetMemberHandle_t xReturn = NULL;
 4327              	 .loc 1 2952 0
 4328 0008 0023     	 mov r3,#0
 4329 000a FB60     	 str r3,[r7,#12]
2953:../Dave/Generated/FREERTOS/queue.c **** 
2954:../Dave/Generated/FREERTOS/queue.c ****         ( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 
 4330              	 .loc 1 2954 0
 4331 000c 7A68     	 ldr r2,[r7,#4]
 4332 000e 0C23     	 mov r3,#12
 4333 0010 FB18     	 add r3,r7,r3
 4334 0012 101C     	 mov r0,r2
 4335 0014 191C     	 mov r1,r3
 4336 0016 0022     	 mov r2,#0
 4337 0018 FFF7FEFF 	 bl xQueueReceiveFromISR
2955:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 4338              	 .loc 1 2955 0
 4339 001c FB68     	 ldr r3,[r7,#12]
2956:../Dave/Generated/FREERTOS/queue.c ****     }
 4340              	 .loc 1 2956 0
 4341 001e 181C     	 mov r0,r3
 4342 0020 BD46     	 mov sp,r7
 4343 0022 04B0     	 add sp,sp,#16
 4344              	 
 4345 0024 80BD     	 pop {r7,pc}
 4346              	 .cfi_endproc
 4347              	.LFE83:
 4349 0026 C046     	 .section .text.prvNotifyQueueSetContainer,"ax",%progbits
 4350              	 .align 2
 4351              	 .code 16
 4352              	 .thumb_func
 4354              	prvNotifyQueueSetContainer:
 4355              	.LFB84:
2957:../Dave/Generated/FREERTOS/queue.c **** 
2958:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2959:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2960:../Dave/Generated/FREERTOS/queue.c **** 
2961:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2962:../Dave/Generated/FREERTOS/queue.c **** 
2963:../Dave/Generated/FREERTOS/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
2964:../Dave/Generated/FREERTOS/queue.c ****     {
 4356              	 .loc 1 2964 0
 4357              	 .cfi_startproc
 4358 0000 80B5     	 push {r7,lr}
 4359              	.LCFI126:
 4360              	 .cfi_def_cfa_offset 8
 4361              	 .cfi_offset 7,-8
 4362              	 .cfi_offset 14,-4
 4363 0002 86B0     	 sub sp,sp,#24
 4364              	.LCFI127:
 4365              	 .cfi_def_cfa_offset 32
 4366 0004 00AF     	 add r7,sp,#0
 4367              	.LCFI128:
 4368              	 .cfi_def_cfa_register 7
 4369 0006 7860     	 str r0,[r7,#4]
2965:../Dave/Generated/FREERTOS/queue.c ****         Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 4370              	 .loc 1 2965 0
 4371 0008 7B68     	 ldr r3,[r7,#4]
 4372 000a 9B6C     	 ldr r3,[r3,#72]
 4373 000c 3B61     	 str r3,[r7,#16]
2966:../Dave/Generated/FREERTOS/queue.c ****         BaseType_t xReturn = pdFALSE;
 4374              	 .loc 1 2966 0
 4375 000e 0023     	 mov r3,#0
 4376 0010 7B61     	 str r3,[r7,#20]
2967:../Dave/Generated/FREERTOS/queue.c **** 
2968:../Dave/Generated/FREERTOS/queue.c ****         /* This function must be called form a critical section. */
2969:../Dave/Generated/FREERTOS/queue.c **** 
2970:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxQueueSetContainer );
 4377              	 .loc 1 2970 0
 4378 0012 3B69     	 ldr r3,[r7,#16]
 4379 0014 002B     	 cmp r3,#0
 4380 0016 01D1     	 bne .L347
 4381              	 .loc 1 2970 0 is_stmt 0 discriminator 1
 4382              	
 4383 0018 72B6     	 cpsid i
 4384              	
 4385              	 .code 16
 4386              	.L348:
 4387 001a FEE7     	 b .L348
 4388              	.L347:
2971:../Dave/Generated/FREERTOS/queue.c ****         configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 4389              	 .loc 1 2971 0 is_stmt 1
 4390 001c 3B69     	 ldr r3,[r7,#16]
 4391 001e 9A6B     	 ldr r2,[r3,#56]
 4392 0020 3B69     	 ldr r3,[r7,#16]
 4393 0022 DB6B     	 ldr r3,[r3,#60]
 4394 0024 9A42     	 cmp r2,r3
 4395 0026 01D3     	 bcc .L349
 4396              	 .loc 1 2971 0 is_stmt 0 discriminator 1
 4397              	
 4398 0028 72B6     	 cpsid i
 4399              	
 4400              	 .code 16
 4401              	.L350:
 4402              	 .loc 1 2971 0 discriminator 2
 4403 002a FEE7     	 b .L350
 4404              	.L349:
2972:../Dave/Generated/FREERTOS/queue.c **** 
2973:../Dave/Generated/FREERTOS/queue.c ****         if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 4405              	 .loc 1 2973 0 is_stmt 1
 4406 002c 3B69     	 ldr r3,[r7,#16]
 4407 002e 9A6B     	 ldr r2,[r3,#56]
 4408 0030 3B69     	 ldr r3,[r7,#16]
 4409 0032 DB6B     	 ldr r3,[r3,#60]
 4410 0034 9A42     	 cmp r2,r3
 4411 0036 34D2     	 bcs .L351
 4412              	.LBB14:
2974:../Dave/Generated/FREERTOS/queue.c ****         {
2975:../Dave/Generated/FREERTOS/queue.c ****             const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 4413              	 .loc 1 2975 0
 4414 0038 0F23     	 mov r3,#15
 4415 003a FB18     	 add r3,r7,r3
 4416 003c 3A69     	 ldr r2,[r7,#16]
 4417 003e 4521     	 mov r1,#69
 4418 0040 525C     	 ldrb r2,[r2,r1]
 4419 0042 1A70     	 strb r2,[r3]
2976:../Dave/Generated/FREERTOS/queue.c **** 
2977:../Dave/Generated/FREERTOS/queue.c ****             traceQUEUE_SET_SEND( pxQueueSetContainer );
2978:../Dave/Generated/FREERTOS/queue.c **** 
2979:../Dave/Generated/FREERTOS/queue.c ****             /* The data copied is the handle of the queue that contains data. */
2980:../Dave/Generated/FREERTOS/queue.c ****             xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 4420              	 .loc 1 2980 0
 4421 0044 3A69     	 ldr r2,[r7,#16]
 4422 0046 3B1D     	 add r3,r7,#4
 4423 0048 101C     	 mov r0,r2
 4424 004a 191C     	 mov r1,r3
 4425 004c 0022     	 mov r2,#0
 4426 004e FFF7FEFF 	 bl prvCopyDataToQueue
 4427 0052 031C     	 mov r3,r0
 4428 0054 7B61     	 str r3,[r7,#20]
2981:../Dave/Generated/FREERTOS/queue.c **** 
2982:../Dave/Generated/FREERTOS/queue.c ****             if( cTxLock == queueUNLOCKED )
 4429              	 .loc 1 2982 0
 4430 0056 0F23     	 mov r3,#15
 4431 0058 FB18     	 add r3,r7,r3
 4432 005a 1B78     	 ldrb r3,[r3]
 4433 005c 5BB2     	 sxtb r3,r3
 4434 005e 0133     	 add r3,r3,#1
 4435 0060 0DD1     	 bne .L352
2983:../Dave/Generated/FREERTOS/queue.c ****             {
2984:../Dave/Generated/FREERTOS/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALS
 4436              	 .loc 1 2984 0
 4437 0062 3B69     	 ldr r3,[r7,#16]
 4438 0064 5B6A     	 ldr r3,[r3,#36]
 4439 0066 002B     	 cmp r3,#0
 4440 0068 1BD0     	 beq .L353
2985:../Dave/Generated/FREERTOS/queue.c ****                 {
2986:../Dave/Generated/FREERTOS/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) 
 4441              	 .loc 1 2986 0
 4442 006a 3B69     	 ldr r3,[r7,#16]
 4443 006c 2433     	 add r3,r3,#36
 4444 006e 181C     	 mov r0,r3
 4445 0070 FFF7FEFF 	 bl xTaskRemoveFromEventList
 4446 0074 031E     	 sub r3,r0,#0
 4447 0076 14D0     	 beq .L353
2987:../Dave/Generated/FREERTOS/queue.c ****                     {
2988:../Dave/Generated/FREERTOS/queue.c ****                         /* The task waiting has a higher priority. */
2989:../Dave/Generated/FREERTOS/queue.c ****                         xReturn = pdTRUE;
 4448              	 .loc 1 2989 0
 4449 0078 0123     	 mov r3,#1
 4450 007a 7B61     	 str r3,[r7,#20]
 4451 007c 11E0     	 b .L353
 4452              	.L352:
2990:../Dave/Generated/FREERTOS/queue.c ****                     }
2991:../Dave/Generated/FREERTOS/queue.c ****                     else
2992:../Dave/Generated/FREERTOS/queue.c ****                     {
2993:../Dave/Generated/FREERTOS/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2994:../Dave/Generated/FREERTOS/queue.c ****                     }
2995:../Dave/Generated/FREERTOS/queue.c ****                 }
2996:../Dave/Generated/FREERTOS/queue.c ****                 else
2997:../Dave/Generated/FREERTOS/queue.c ****                 {
2998:../Dave/Generated/FREERTOS/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2999:../Dave/Generated/FREERTOS/queue.c ****                 }
3000:../Dave/Generated/FREERTOS/queue.c ****             }
3001:../Dave/Generated/FREERTOS/queue.c ****             else
3002:../Dave/Generated/FREERTOS/queue.c ****             {
3003:../Dave/Generated/FREERTOS/queue.c ****                 configASSERT( cTxLock != queueINT8_MAX );
 4453              	 .loc 1 3003 0
 4454 007e 0F23     	 mov r3,#15
 4455 0080 FB18     	 add r3,r7,r3
 4456 0082 1B78     	 ldrb r3,[r3]
 4457 0084 5BB2     	 sxtb r3,r3
 4458 0086 7F2B     	 cmp r3,#127
 4459 0088 01D1     	 bne .L354
 4460              	 .loc 1 3003 0 is_stmt 0 discriminator 1
 4461              	
 4462 008a 72B6     	 cpsid i
 4463              	
 4464              	 .code 16
 4465              	.L355:
 4466              	 .loc 1 3003 0 discriminator 5
 4467 008c FEE7     	 b .L355
 4468              	.L354:
3004:../Dave/Generated/FREERTOS/queue.c **** 
3005:../Dave/Generated/FREERTOS/queue.c ****                 pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 4469              	 .loc 1 3005 0 is_stmt 1
 4470 008e 0F23     	 mov r3,#15
 4471 0090 FB18     	 add r3,r7,r3
 4472 0092 1B78     	 ldrb r3,[r3]
 4473 0094 0133     	 add r3,r3,#1
 4474 0096 DBB2     	 uxtb r3,r3
 4475 0098 D9B2     	 uxtb r1,r3
 4476 009a 3B69     	 ldr r3,[r7,#16]
 4477 009c 4522     	 mov r2,#69
 4478 009e 9954     	 strb r1,[r3,r2]
 4479              	.LBE14:
 4480 00a0 FFE7     	 b .L351
 4481              	.L353:
 4482              	.L351:
3006:../Dave/Generated/FREERTOS/queue.c ****             }
3007:../Dave/Generated/FREERTOS/queue.c ****         }
3008:../Dave/Generated/FREERTOS/queue.c ****         else
3009:../Dave/Generated/FREERTOS/queue.c ****         {
3010:../Dave/Generated/FREERTOS/queue.c ****             mtCOVERAGE_TEST_MARKER();
3011:../Dave/Generated/FREERTOS/queue.c ****         }
3012:../Dave/Generated/FREERTOS/queue.c **** 
3013:../Dave/Generated/FREERTOS/queue.c ****         return xReturn;
 4483              	 .loc 1 3013 0
 4484 00a2 7B69     	 ldr r3,[r7,#20]
3014:../Dave/Generated/FREERTOS/queue.c ****     }
 4485              	 .loc 1 3014 0
 4486 00a4 181C     	 mov r0,r3
 4487 00a6 BD46     	 mov sp,r7
 4488 00a8 06B0     	 add sp,sp,#24
 4489              	 
 4490 00aa 80BD     	 pop {r7,pc}
 4491              	 .cfi_endproc
 4492              	.LFE84:
 4494              	 .text
 4495              	.Letext0:
 4496              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 4497              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4498              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4499              	 .file 5 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
 4500              	 .file 6 "../Dave/Generated/FREERTOS/list.h"
 4501              	 .file 7 "../Dave/Generated/FREERTOS/task.h"
 4502              	 .file 8 "../Dave/Generated/FREERTOS/queue.h"
 4503              	 .file 9 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
                            *COM*:00000040 xQueueRegistry
    {standard input}:19     .text.xQueueGenericReset:00000000 $t
    {standard input}:24     .text.xQueueGenericReset:00000000 xQueueGenericReset
    {standard input}:147    .text.xQueueGenericCreate:00000000 $t
    {standard input}:152    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
    {standard input}:283    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
    {standard input}:279    .text.prvInitialiseNewQueue:00000000 $t
    {standard input}:351    .text.prvInitialiseMutex:00000000 $t
    {standard input}:355    .text.prvInitialiseMutex:00000000 prvInitialiseMutex
    {standard input}:827    .text.xQueueGenericSend:00000000 xQueueGenericSend
    {standard input}:404    .text.xQueueCreateMutex:00000000 $t
    {standard input}:409    .text.xQueueCreateMutex:00000000 xQueueCreateMutex
    {standard input}:459    .text.xQueueGetMutexHolder:00000000 $t
    {standard input}:464    .text.xQueueGetMutexHolder:00000000 xQueueGetMutexHolder
    {standard input}:514    .text.xQueueGetMutexHolderFromISR:00000000 $t
    {standard input}:519    .text.xQueueGetMutexHolderFromISR:00000000 xQueueGetMutexHolderFromISR
    {standard input}:574    .text.xQueueGiveMutexRecursive:00000000 $t
    {standard input}:579    .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
    {standard input}:658    .text.xQueueTakeMutexRecursive:00000000 $t
    {standard input}:663    .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
    {standard input}:1899   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
    {standard input}:745    .text.xQueueCreateCountingSemaphore:00000000 $t
    {standard input}:750    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
    {standard input}:822    .text.xQueueGenericSend:00000000 $t
    {standard input}:3172   .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
    {standard input}:4354   .text.prvNotifyQueueSetContainer:00000000 prvNotifyQueueSetContainer
    {standard input}:3665   .text.prvIsQueueFull:00000000 prvIsQueueFull
    {standard input}:3393   .text.prvUnlockQueue:00000000 prvUnlockQueue
    {standard input}:1160   .text.xQueueGenericSendFromISR:00000000 $t
    {standard input}:1165   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
    {standard input}:1409   .text.xQueueGiveFromISR:00000000 $t
    {standard input}:1414   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
    {standard input}:1622   .text.xQueueReceive:00000000 $t
    {standard input}:1627   .text.xQueueReceive:00000000 xQueueReceive
    {standard input}:3326   .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
    {standard input}:3553   .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
    {standard input}:1894   .text.xQueueSemaphoreTake:00000000 $t
    {standard input}:3122   .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
    {standard input}:2212   .text.xQueuePeek:00000000 $t
    {standard input}:2217   .text.xQueuePeek:00000000 xQueuePeek
    {standard input}:2487   .text.xQueueReceiveFromISR:00000000 $t
    {standard input}:2492   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
    {standard input}:2669   .text.xQueuePeekFromISR:00000000 $t
    {standard input}:2674   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
    {standard input}:2797   .text.uxQueueMessagesWaiting:00000000 $t
    {standard input}:2802   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
    {standard input}:2850   .text.uxQueueSpacesAvailable:00000000 $t
    {standard input}:2855   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
    {standard input}:2909   .text.uxQueueMessagesWaitingFromISR:00000000 $t
    {standard input}:2914   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
    {standard input}:2961   .text.vQueueDelete:00000000 $t
    {standard input}:2966   .text.vQueueDelete:00000000 vQueueDelete
    {standard input}:3928   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
    {standard input}:3014   .text.uxQueueGetQueueNumber:00000000 $t
    {standard input}:3019   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
    {standard input}:3048   .text.vQueueSetQueueNumber:00000000 $t
    {standard input}:3053   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
    {standard input}:3083   .text.ucQueueGetQueueType:00000000 $t
    {standard input}:3088   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
    {standard input}:3118   .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
    {standard input}:3168   .text.prvCopyDataToQueue:00000000 $t
    {standard input}:3322   .text.prvCopyDataFromQueue:00000000 $t
    {standard input}:3389   .text.prvUnlockQueue:00000000 $t
    {standard input}:3549   .text.prvIsQueueEmpty:00000000 $t
    {standard input}:3599   .text.xQueueIsQueueEmptyFromISR:00000000 $t
    {standard input}:3604   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
    {standard input}:3661   .text.prvIsQueueFull:00000000 $t
    {standard input}:3713   .text.xQueueIsQueueFullFromISR:00000000 $t
    {standard input}:3718   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
    {standard input}:3777   .text.vQueueAddToRegistry:00000000 $t
    {standard input}:3782   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
    {standard input}:3845   .text.vQueueAddToRegistry:00000048 $d
    {standard input}:3850   .text.pcQueueGetName:00000000 $t
    {standard input}:3855   .text.pcQueueGetName:00000000 pcQueueGetName
    {standard input}:3918   .text.pcQueueGetName:00000044 $d
    {standard input}:3923   .text.vQueueUnregisterQueue:00000000 $t
    {standard input}:3992   .text.vQueueUnregisterQueue:00000048 $d
    {standard input}:3997   .text.vQueueWaitForMessageRestricted:00000000 $t
    {standard input}:4002   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
    {standard input}:4083   .text.xQueueCreateSet:00000000 $t
    {standard input}:4088   .text.xQueueCreateSet:00000000 xQueueCreateSet
    {standard input}:4124   .text.xQueueAddToSet:00000000 $t
    {standard input}:4129   .text.xQueueAddToSet:00000000 xQueueAddToSet
    {standard input}:4190   .text.xQueueRemoveFromSet:00000000 $t
    {standard input}:4195   .text.xQueueRemoveFromSet:00000000 xQueueRemoveFromSet
    {standard input}:4260   .text.xQueueSelectFromSet:00000000 $t
    {standard input}:4265   .text.xQueueSelectFromSet:00000000 xQueueSelectFromSet
    {standard input}:4306   .text.xQueueSelectFromSetFromISR:00000000 $t
    {standard input}:4311   .text.xQueueSelectFromSetFromISR:00000000 xQueueSelectFromSetFromISR
    {standard input}:4350   .text.prvNotifyQueueSetContainer:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
xTaskRemoveFromEventList
vPortYield
vListInitialise
vPortExitCritical
__aeabi_uidiv
pvPortMalloc
xTaskGetCurrentTaskHandle
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
ulSetInterruptMaskFromISR
vClearInterruptMaskFromISR
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
vTaskPlaceOnEventListRestricted
