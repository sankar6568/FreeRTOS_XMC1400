   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,6
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "tasks.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .global pxCurrentTCB
  18              	 .section .bss.pxCurrentTCB,"aw",%nobits
  19              	 .align 2
  22              	pxCurrentTCB:
  23 0000 00000000 	 .space 4
  24              	 .section .bss.pxReadyTasksLists,"aw",%nobits
  25              	 .align 2
  28              	pxReadyTasksLists:
  29 0000 00000000 	 .space 100
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              	 .section .bss.xDelayedTaskList1,"aw",%nobits
  31              	 .align 2
  34              	xDelayedTaskList1:
  35 0000 00000000 	 .space 20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              	 .section .bss.xDelayedTaskList2,"aw",%nobits
  37              	 .align 2
  40              	xDelayedTaskList2:
  41 0000 00000000 	 .space 20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              	 .section .bss.pxDelayedTaskList,"aw",%nobits
  43              	 .align 2
  46              	pxDelayedTaskList:
  47 0000 00000000 	 .space 4
  48              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              	 .align 2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 	 .space 4
  54              	 .section .bss.xPendingReadyList,"aw",%nobits
  55              	 .align 2
  58              	xPendingReadyList:
  59 0000 00000000 	 .space 20
  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
  61              	 .align 2
  64              	xTasksWaitingTermination:
  65 0000 00000000 	 .space 20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              	 .align 2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 	 .space 4
  72              	 .section .bss.xSuspendedTaskList,"aw",%nobits
  73              	 .align 2
  76              	xSuspendedTaskList:
  77 0000 00000000 	 .space 20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              	 .align 2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 	 .space 4
  84              	 .section .bss.xTickCount,"aw",%nobits
  85              	 .align 2
  88              	xTickCount:
  89 0000 00000000 	 .space 4
  90              	 .section .bss.uxTopReadyPriority,"aw",%nobits
  91              	 .align 2
  94              	uxTopReadyPriority:
  95 0000 00000000 	 .space 4
  96              	 .section .bss.xSchedulerRunning,"aw",%nobits
  97              	 .align 2
 100              	xSchedulerRunning:
 101 0000 00000000 	 .space 4
 102              	 .section .bss.xPendedTicks,"aw",%nobits
 103              	 .align 2
 106              	xPendedTicks:
 107 0000 00000000 	 .space 4
 108              	 .section .bss.xYieldPending,"aw",%nobits
 109              	 .align 2
 112              	xYieldPending:
 113 0000 00000000 	 .space 4
 114              	 .section .bss.xNumOfOverflows,"aw",%nobits
 115              	 .align 2
 118              	xNumOfOverflows:
 119 0000 00000000 	 .space 4
 120              	 .section .bss.uxTaskNumber,"aw",%nobits
 121              	 .align 2
 124              	uxTaskNumber:
 125 0000 00000000 	 .space 4
 126              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 127              	 .align 2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 	 .space 4
 132              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 133              	 .align 2
 136              	xIdleTaskHandle:
 137 0000 00000000 	 .space 4
 138              	 .global uxTopUsedPriority
 139              	 .section .data.uxTopUsedPriority,"aw",%progbits
 140              	 .align 2
 143              	uxTopUsedPriority:
 144 0000 04000000 	 .word 4
 145              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 146              	 .align 2
 149              	uxSchedulerSuspended:
 150 0000 00000000 	 .space 4
 151              	 .section .text.xTaskCreate,"ax",%progbits
 152              	 .align 2
 153              	 .global xTaskCreate
 154              	 .code 16
 155              	 .thumb_func
 157              	xTaskCreate:
 158              	.LFB42:
 159              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****  * FreeRTOS Kernel V10.4.3
   3:../Dave/Generated/FREERTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../Dave/Generated/FREERTOS/tasks.c ****  *
   5:../Dave/Generated/FREERTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../Dave/Generated/FREERTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../Dave/Generated/FREERTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../Dave/Generated/FREERTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../Dave/Generated/FREERTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../Dave/Generated/FREERTOS/tasks.c ****  * subject to the following conditions:
  11:../Dave/Generated/FREERTOS/tasks.c ****  *
  12:../Dave/Generated/FREERTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../Dave/Generated/FREERTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:../Dave/Generated/FREERTOS/tasks.c ****  *
  15:../Dave/Generated/FREERTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../Dave/Generated/FREERTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../Dave/Generated/FREERTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../Dave/Generated/FREERTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../Dave/Generated/FREERTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../Dave/Generated/FREERTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../Dave/Generated/FREERTOS/tasks.c ****  *
  22:../Dave/Generated/FREERTOS/tasks.c ****  * https://www.FreeRTOS.org
  23:../Dave/Generated/FREERTOS/tasks.c ****  * https://github.com/FreeRTOS
  24:../Dave/Generated/FREERTOS/tasks.c ****  *
  25:../Dave/Generated/FREERTOS/tasks.c ****  */
  26:../Dave/Generated/FREERTOS/tasks.c **** 
  27:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  28:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  29:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  30:../Dave/Generated/FREERTOS/tasks.c **** 
  31:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../Dave/Generated/FREERTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:../Dave/Generated/FREERTOS/tasks.c ****  * task.h is included from an application file. */
  34:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../Dave/Generated/FREERTOS/tasks.c **** 
  36:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  37:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  38:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  39:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  40:../Dave/Generated/FREERTOS/tasks.c **** #include "stack_macros.h"
  41:../Dave/Generated/FREERTOS/tasks.c **** 
  42:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:../Dave/Generated/FREERTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:../Dave/Generated/FREERTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  45:../Dave/Generated/FREERTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  46:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:../Dave/Generated/FREERTOS/tasks.c **** 
  48:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:../Dave/Generated/FREERTOS/tasks.c ****  * functions but without including stdio.h here. */
  50:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:../Dave/Generated/FREERTOS/tasks.c **** 
  52:../Dave/Generated/FREERTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  53:../Dave/Generated/FREERTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  54:../Dave/Generated/FREERTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../Dave/Generated/FREERTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  56:../Dave/Generated/FREERTOS/tasks.c ****     #include <stdio.h>
  57:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  60:../Dave/Generated/FREERTOS/tasks.c **** 
  61:../Dave/Generated/FREERTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  62:../Dave/Generated/FREERTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  63:../Dave/Generated/FREERTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:../Dave/Generated/FREERTOS/tasks.c **** #else
  65:../Dave/Generated/FREERTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:../Dave/Generated/FREERTOS/tasks.c **** #endif
  67:../Dave/Generated/FREERTOS/tasks.c **** 
  68:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:../Dave/Generated/FREERTOS/tasks.c **** 
  73:../Dave/Generated/FREERTOS/tasks.c **** /*
  74:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:../Dave/Generated/FREERTOS/tasks.c ****  */
  77:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:../Dave/Generated/FREERTOS/tasks.c **** 
  79:../Dave/Generated/FREERTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  80:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:../Dave/Generated/FREERTOS/tasks.c **** 
  84:../Dave/Generated/FREERTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  85:../Dave/Generated/FREERTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  86:../Dave/Generated/FREERTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:../Dave/Generated/FREERTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  89:../Dave/Generated/FREERTOS/tasks.c **** #else
  90:../Dave/Generated/FREERTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:../Dave/Generated/FREERTOS/tasks.c **** #endif
  92:../Dave/Generated/FREERTOS/tasks.c **** 
  93:../Dave/Generated/FREERTOS/tasks.c **** /*
  94:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  95:../Dave/Generated/FREERTOS/tasks.c ****  */
  96:../Dave/Generated/FREERTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  97:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
  98:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
  99:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 100:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:../Dave/Generated/FREERTOS/tasks.c **** 
 102:../Dave/Generated/FREERTOS/tasks.c **** /*
 103:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 104:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 105:../Dave/Generated/FREERTOS/tasks.c ****  */
 106:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:../Dave/Generated/FREERTOS/tasks.c ****     #define static
 108:../Dave/Generated/FREERTOS/tasks.c **** #endif
 109:../Dave/Generated/FREERTOS/tasks.c **** 
 110:../Dave/Generated/FREERTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:../Dave/Generated/FREERTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:../Dave/Generated/FREERTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 113:../Dave/Generated/FREERTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 114:../Dave/Generated/FREERTOS/tasks.c **** #endif
 115:../Dave/Generated/FREERTOS/tasks.c **** 
 116:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:../Dave/Generated/FREERTOS/tasks.c **** 
 118:../Dave/Generated/FREERTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:../Dave/Generated/FREERTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 120:../Dave/Generated/FREERTOS/tasks.c ****  * microcontroller architecture. */
 121:../Dave/Generated/FREERTOS/tasks.c **** 
 122:../Dave/Generated/FREERTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:../Dave/Generated/FREERTOS/tasks.c ****  * state task. */
 124:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:../Dave/Generated/FREERTOS/tasks.c ****     {                                               \
 126:../Dave/Generated/FREERTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:../Dave/Generated/FREERTOS/tasks.c ****         {                                           \
 128:../Dave/Generated/FREERTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 129:../Dave/Generated/FREERTOS/tasks.c ****         }                                           \
 130:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 131:../Dave/Generated/FREERTOS/tasks.c **** 
 132:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 133:../Dave/Generated/FREERTOS/tasks.c **** 
 134:../Dave/Generated/FREERTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                         \
 136:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:../Dave/Generated/FREERTOS/tasks.c ****                                                                               \
 138:../Dave/Generated/FREERTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:../Dave/Generated/FREERTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:../Dave/Generated/FREERTOS/tasks.c ****         {                                                                     \
 141:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 142:../Dave/Generated/FREERTOS/tasks.c ****             --uxTopPriority;                                                  \
 143:../Dave/Generated/FREERTOS/tasks.c ****         }                                                                     \
 144:../Dave/Generated/FREERTOS/tasks.c ****                                                                               \
 145:../Dave/Generated/FREERTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 146:../Dave/Generated/FREERTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 147:../Dave/Generated/FREERTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:../Dave/Generated/FREERTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:../Dave/Generated/FREERTOS/tasks.c **** 
 151:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/tasks.c **** 
 153:../Dave/Generated/FREERTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:../Dave/Generated/FREERTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 155:../Dave/Generated/FREERTOS/tasks.c ****  * being used. */
 156:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:../Dave/Generated/FREERTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:../Dave/Generated/FREERTOS/tasks.c **** 
 159:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:../Dave/Generated/FREERTOS/tasks.c **** 
 161:../Dave/Generated/FREERTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:../Dave/Generated/FREERTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 163:../Dave/Generated/FREERTOS/tasks.c ****  * architecture being used. */
 164:../Dave/Generated/FREERTOS/tasks.c **** 
 165:../Dave/Generated/FREERTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 166:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:../Dave/Generated/FREERTOS/tasks.c **** 
 168:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 169:../Dave/Generated/FREERTOS/tasks.c **** 
 170:../Dave/Generated/FREERTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                                           \
 172:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 173:../Dave/Generated/FREERTOS/tasks.c ****                                                                                                 \
 174:../Dave/Generated/FREERTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:../Dave/Generated/FREERTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:../Dave/Generated/FREERTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:../Dave/Generated/FREERTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:../Dave/Generated/FREERTOS/tasks.c **** 
 180:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 181:../Dave/Generated/FREERTOS/tasks.c **** 
 182:../Dave/Generated/FREERTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 183:../Dave/Generated/FREERTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:../Dave/Generated/FREERTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 185:../Dave/Generated/FREERTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                                              
 187:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:../Dave/Generated/FREERTOS/tasks.c ****         {                                                                                          
 189:../Dave/Generated/FREERTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:../Dave/Generated/FREERTOS/tasks.c ****         }                                                                                          
 191:../Dave/Generated/FREERTOS/tasks.c ****     }
 192:../Dave/Generated/FREERTOS/tasks.c **** 
 193:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:../Dave/Generated/FREERTOS/tasks.c **** 
 195:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 196:../Dave/Generated/FREERTOS/tasks.c **** 
 197:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:../Dave/Generated/FREERTOS/tasks.c ****  * count overflows. */
 199:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:../Dave/Generated/FREERTOS/tasks.c ****     {                                                                             \
 201:../Dave/Generated/FREERTOS/tasks.c ****         List_t * pxTemp;                                                          \
 202:../Dave/Generated/FREERTOS/tasks.c ****                                                                                   \
 203:../Dave/Generated/FREERTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:../Dave/Generated/FREERTOS/tasks.c ****                                                                                   \
 206:../Dave/Generated/FREERTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 207:../Dave/Generated/FREERTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:../Dave/Generated/FREERTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:../Dave/Generated/FREERTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 210:../Dave/Generated/FREERTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 211:../Dave/Generated/FREERTOS/tasks.c ****     }
 212:../Dave/Generated/FREERTOS/tasks.c **** 
 213:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 214:../Dave/Generated/FREERTOS/tasks.c **** 
 215:../Dave/Generated/FREERTOS/tasks.c **** /*
 216:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 218:../Dave/Generated/FREERTOS/tasks.c ****  */
 219:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:../Dave/Generated/FREERTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:../Dave/Generated/FREERTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:../Dave/Generated/FREERTOS/tasks.c ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:../Dave/Generated/FREERTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 225:../Dave/Generated/FREERTOS/tasks.c **** 
 226:../Dave/Generated/FREERTOS/tasks.c **** /*
 227:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 228:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 229:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 230:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:../Dave/Generated/FREERTOS/tasks.c ****  */
 232:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:../Dave/Generated/FREERTOS/tasks.c **** 
 234:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 235:../Dave/Generated/FREERTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:../Dave/Generated/FREERTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:../Dave/Generated/FREERTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 238:../Dave/Generated/FREERTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 239:../Dave/Generated/FREERTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 240:../Dave/Generated/FREERTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:../Dave/Generated/FREERTOS/tasks.c ****  * to its original value when it is released. */
 242:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:../Dave/Generated/FREERTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:../Dave/Generated/FREERTOS/tasks.c **** #else
 245:../Dave/Generated/FREERTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:../Dave/Generated/FREERTOS/tasks.c **** #endif
 247:../Dave/Generated/FREERTOS/tasks.c **** 
 248:../Dave/Generated/FREERTOS/tasks.c **** /*
 249:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 251:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 252:../Dave/Generated/FREERTOS/tasks.c ****  */
 253:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:../Dave/Generated/FREERTOS/tasks.c **** {
 255:../Dave/Generated/FREERTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:../Dave/Generated/FREERTOS/tasks.c **** 
 257:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:../Dave/Generated/FREERTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 260:../Dave/Generated/FREERTOS/tasks.c **** 
 261:../Dave/Generated/FREERTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:../Dave/Generated/FREERTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:../Dave/Generated/FREERTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:../Dave/Generated/FREERTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:../Dave/Generated/FREERTOS/tasks.c **** 
 267:../Dave/Generated/FREERTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:../Dave/Generated/FREERTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 270:../Dave/Generated/FREERTOS/tasks.c **** 
 271:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 274:../Dave/Generated/FREERTOS/tasks.c **** 
 275:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 279:../Dave/Generated/FREERTOS/tasks.c **** 
 280:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 281:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 283:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 284:../Dave/Generated/FREERTOS/tasks.c **** 
 285:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 287:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 288:../Dave/Generated/FREERTOS/tasks.c **** 
 289:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:../Dave/Generated/FREERTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 292:../Dave/Generated/FREERTOS/tasks.c **** 
 293:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 296:../Dave/Generated/FREERTOS/tasks.c **** 
 297:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:../Dave/Generated/FREERTOS/tasks.c **** 
 299:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:../Dave/Generated/FREERTOS/tasks.c ****          * Note Newlib support has been included by popular demand, but is not
 301:../Dave/Generated/FREERTOS/tasks.c ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:../Dave/Generated/FREERTOS/tasks.c ****          * responsible for resulting newlib operation.  User must be familiar with
 303:../Dave/Generated/FREERTOS/tasks.c ****          * newlib and must provide system-wide implementations of the necessary
 304:../Dave/Generated/FREERTOS/tasks.c ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:../Dave/Generated/FREERTOS/tasks.c ****          * implements a system-wide malloc() that must be provided with locks.
 306:../Dave/Generated/FREERTOS/tasks.c ****          *
 307:../Dave/Generated/FREERTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:../Dave/Generated/FREERTOS/tasks.c ****          * for additional information. */
 309:../Dave/Generated/FREERTOS/tasks.c ****         struct  _reent xNewLib_reent;
 310:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 311:../Dave/Generated/FREERTOS/tasks.c **** 
 312:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:../Dave/Generated/FREERTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:../Dave/Generated/FREERTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 316:../Dave/Generated/FREERTOS/tasks.c **** 
 317:../Dave/Generated/FREERTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 318:../Dave/Generated/FREERTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:../Dave/Generated/FREERTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 322:../Dave/Generated/FREERTOS/tasks.c **** 
 323:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucDelayAborted;
 325:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 326:../Dave/Generated/FREERTOS/tasks.c **** 
 327:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:../Dave/Generated/FREERTOS/tasks.c ****         int iTaskErrno;
 329:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 330:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 331:../Dave/Generated/FREERTOS/tasks.c **** 
 332:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:../Dave/Generated/FREERTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 334:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 335:../Dave/Generated/FREERTOS/tasks.c **** 
 336:../Dave/Generated/FREERTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:../Dave/Generated/FREERTOS/tasks.c ****  * which static variables must be declared volatile. */
 338:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:../Dave/Generated/FREERTOS/tasks.c **** 
 340:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 341:../Dave/Generated/FREERTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 342:../Dave/Generated/FREERTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:../Dave/Generated/FREERTOS/tasks.c ****  * the static qualifier. */
 344:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:../Dave/Generated/FREERTOS/tasks.c **** 
 351:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 352:../Dave/Generated/FREERTOS/tasks.c **** 
 353:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:../Dave/Generated/FREERTOS/tasks.c **** 
 356:../Dave/Generated/FREERTOS/tasks.c **** #endif
 357:../Dave/Generated/FREERTOS/tasks.c **** 
 358:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:../Dave/Generated/FREERTOS/tasks.c **** 
 360:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:../Dave/Generated/FREERTOS/tasks.c **** 
 362:../Dave/Generated/FREERTOS/tasks.c **** #endif
 363:../Dave/Generated/FREERTOS/tasks.c **** 
 364:../Dave/Generated/FREERTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:../Dave/Generated/FREERTOS/tasks.c ****  * the errno of the currently running task. */
 366:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:../Dave/Generated/FREERTOS/tasks.c ****     int FreeRTOS_errno = 0;
 368:../Dave/Generated/FREERTOS/tasks.c **** #endif
 369:../Dave/Generated/FREERTOS/tasks.c **** 
 370:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 371:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 374:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:../Dave/Generated/FREERTOS/tasks.c **** 
 382:../Dave/Generated/FREERTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:../Dave/Generated/FREERTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:../Dave/Generated/FREERTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 385:../Dave/Generated/FREERTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:../Dave/Generated/FREERTOS/tasks.c **** 
 387:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:../Dave/Generated/FREERTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:../Dave/Generated/FREERTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:../Dave/Generated/FREERTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:../Dave/Generated/FREERTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:../Dave/Generated/FREERTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 393:../Dave/Generated/FREERTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:../Dave/Generated/FREERTOS/tasks.c ****  * accessed from a critical section. */
 395:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:../Dave/Generated/FREERTOS/tasks.c **** 
 397:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:../Dave/Generated/FREERTOS/tasks.c **** 
 399:../Dave/Generated/FREERTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 400:../Dave/Generated/FREERTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 401:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:../Dave/Generated/FREERTOS/tasks.c ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:../Dave/Generated/FREERTOS/tasks.c **** 
 404:../Dave/Generated/FREERTOS/tasks.c **** #endif
 405:../Dave/Generated/FREERTOS/tasks.c **** 
 406:../Dave/Generated/FREERTOS/tasks.c **** /*lint -restore */
 407:../Dave/Generated/FREERTOS/tasks.c **** 
 408:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 409:../Dave/Generated/FREERTOS/tasks.c **** 
 410:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 411:../Dave/Generated/FREERTOS/tasks.c **** 
 412:../Dave/Generated/FREERTOS/tasks.c **** /**
 413:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 416:../Dave/Generated/FREERTOS/tasks.c ****  */
 417:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:../Dave/Generated/FREERTOS/tasks.c **** 
 419:../Dave/Generated/FREERTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:../Dave/Generated/FREERTOS/tasks.c **** 
 421:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 422:../Dave/Generated/FREERTOS/tasks.c **** 
 423:../Dave/Generated/FREERTOS/tasks.c **** /*
 424:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 426:../Dave/Generated/FREERTOS/tasks.c ****  */
 427:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:../Dave/Generated/FREERTOS/tasks.c **** 
 429:../Dave/Generated/FREERTOS/tasks.c **** /*
 430:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 431:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 432:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 433:../Dave/Generated/FREERTOS/tasks.c ****  *
 434:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 436:../Dave/Generated/FREERTOS/tasks.c ****  *
 437:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 438:../Dave/Generated/FREERTOS/tasks.c ****  *
 439:../Dave/Generated/FREERTOS/tasks.c ****  */
 440:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:../Dave/Generated/FREERTOS/tasks.c **** 
 442:../Dave/Generated/FREERTOS/tasks.c **** /*
 443:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 444:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 445:../Dave/Generated/FREERTOS/tasks.c ****  *
 446:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 447:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:../Dave/Generated/FREERTOS/tasks.c ****  */
 449:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 450:../Dave/Generated/FREERTOS/tasks.c **** 
 451:../Dave/Generated/FREERTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:../Dave/Generated/FREERTOS/tasks.c **** 
 453:../Dave/Generated/FREERTOS/tasks.c **** #endif
 454:../Dave/Generated/FREERTOS/tasks.c **** 
 455:../Dave/Generated/FREERTOS/tasks.c **** /*
 456:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 459:../Dave/Generated/FREERTOS/tasks.c ****  */
 460:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:../Dave/Generated/FREERTOS/tasks.c **** 
 462:../Dave/Generated/FREERTOS/tasks.c **** /*
 463:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 465:../Dave/Generated/FREERTOS/tasks.c ****  */
 466:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:../Dave/Generated/FREERTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:../Dave/Generated/FREERTOS/tasks.c **** 
 469:../Dave/Generated/FREERTOS/tasks.c **** /*
 470:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 471:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 473:../Dave/Generated/FREERTOS/tasks.c ****  *
 474:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 476:../Dave/Generated/FREERTOS/tasks.c ****  */
 477:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:../Dave/Generated/FREERTOS/tasks.c **** 
 479:../Dave/Generated/FREERTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:../Dave/Generated/FREERTOS/tasks.c ****                                                      List_t * pxList,
 481:../Dave/Generated/FREERTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:../Dave/Generated/FREERTOS/tasks.c **** 
 483:../Dave/Generated/FREERTOS/tasks.c **** #endif
 484:../Dave/Generated/FREERTOS/tasks.c **** 
 485:../Dave/Generated/FREERTOS/tasks.c **** /*
 486:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:../Dave/Generated/FREERTOS/tasks.c ****  */
 489:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:../Dave/Generated/FREERTOS/tasks.c **** 
 491:../Dave/Generated/FREERTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:../Dave/Generated/FREERTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:../Dave/Generated/FREERTOS/tasks.c **** 
 494:../Dave/Generated/FREERTOS/tasks.c **** #endif
 495:../Dave/Generated/FREERTOS/tasks.c **** 
 496:../Dave/Generated/FREERTOS/tasks.c **** /*
 497:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 498:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 499:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 500:../Dave/Generated/FREERTOS/tasks.c ****  */
 501:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:../Dave/Generated/FREERTOS/tasks.c **** 
 503:../Dave/Generated/FREERTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:../Dave/Generated/FREERTOS/tasks.c **** 
 505:../Dave/Generated/FREERTOS/tasks.c **** #endif
 506:../Dave/Generated/FREERTOS/tasks.c **** 
 507:../Dave/Generated/FREERTOS/tasks.c **** /*
 508:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 510:../Dave/Generated/FREERTOS/tasks.c ****  *
 511:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 515:../Dave/Generated/FREERTOS/tasks.c ****  */
 516:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:../Dave/Generated/FREERTOS/tasks.c **** 
 518:../Dave/Generated/FREERTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:../Dave/Generated/FREERTOS/tasks.c **** 
 520:../Dave/Generated/FREERTOS/tasks.c **** #endif
 521:../Dave/Generated/FREERTOS/tasks.c **** 
 522:../Dave/Generated/FREERTOS/tasks.c **** /*
 523:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 525:../Dave/Generated/FREERTOS/tasks.c ****  */
 526:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:../Dave/Generated/FREERTOS/tasks.c **** 
 528:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:../Dave/Generated/FREERTOS/tasks.c **** 
 530:../Dave/Generated/FREERTOS/tasks.c **** /*
 531:../Dave/Generated/FREERTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 532:../Dave/Generated/FREERTOS/tasks.c ****  * human readable tables of task information.
 533:../Dave/Generated/FREERTOS/tasks.c ****  */
 534:../Dave/Generated/FREERTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:../Dave/Generated/FREERTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:../Dave/Generated/FREERTOS/tasks.c **** 
 537:../Dave/Generated/FREERTOS/tasks.c **** #endif
 538:../Dave/Generated/FREERTOS/tasks.c **** 
 539:../Dave/Generated/FREERTOS/tasks.c **** /*
 540:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 541:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 542:../Dave/Generated/FREERTOS/tasks.c ****  */
 543:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 544:../Dave/Generated/FREERTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 545:../Dave/Generated/FREERTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 546:../Dave/Generated/FREERTOS/tasks.c ****                                   void * const pvParameters,
 547:../Dave/Generated/FREERTOS/tasks.c ****                                   UBaseType_t uxPriority,
 548:../Dave/Generated/FREERTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 549:../Dave/Generated/FREERTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 550:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:../Dave/Generated/FREERTOS/tasks.c **** 
 552:../Dave/Generated/FREERTOS/tasks.c **** /*
 553:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 554:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 555:../Dave/Generated/FREERTOS/tasks.c ****  */
 556:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:../Dave/Generated/FREERTOS/tasks.c **** 
 558:../Dave/Generated/FREERTOS/tasks.c **** /*
 559:../Dave/Generated/FREERTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:../Dave/Generated/FREERTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:../Dave/Generated/FREERTOS/tasks.c ****  * called by the function.
 562:../Dave/Generated/FREERTOS/tasks.c ****  */
 563:../Dave/Generated/FREERTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:../Dave/Generated/FREERTOS/tasks.c **** 
 565:../Dave/Generated/FREERTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:../Dave/Generated/FREERTOS/tasks.c **** 
 567:../Dave/Generated/FREERTOS/tasks.c **** #endif
 568:../Dave/Generated/FREERTOS/tasks.c **** 
 569:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 570:../Dave/Generated/FREERTOS/tasks.c **** 
 571:../Dave/Generated/FREERTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:../Dave/Generated/FREERTOS/tasks.c **** 
 573:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:../Dave/Generated/FREERTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:../Dave/Generated/FREERTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 576:../Dave/Generated/FREERTOS/tasks.c ****                                     void * const pvParameters,
 577:../Dave/Generated/FREERTOS/tasks.c ****                                     UBaseType_t uxPriority,
 578:../Dave/Generated/FREERTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 579:../Dave/Generated/FREERTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 580:../Dave/Generated/FREERTOS/tasks.c ****     {
 581:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 582:../Dave/Generated/FREERTOS/tasks.c ****         TaskHandle_t xReturn;
 583:../Dave/Generated/FREERTOS/tasks.c **** 
 584:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 585:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 586:../Dave/Generated/FREERTOS/tasks.c **** 
 587:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 588:../Dave/Generated/FREERTOS/tasks.c ****             {
 589:../Dave/Generated/FREERTOS/tasks.c ****                 /* Sanity check that the size of the structure used to declare a
 590:../Dave/Generated/FREERTOS/tasks.c ****                  * variable of type StaticTask_t equals the size of the real task
 591:../Dave/Generated/FREERTOS/tasks.c ****                  * structure. */
 592:../Dave/Generated/FREERTOS/tasks.c ****                 volatile size_t xSize = sizeof( StaticTask_t );
 593:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( xSize == sizeof( TCB_t ) );
 594:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 595:../Dave/Generated/FREERTOS/tasks.c ****             }
 596:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 597:../Dave/Generated/FREERTOS/tasks.c **** 
 598:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 599:../Dave/Generated/FREERTOS/tasks.c ****         {
 600:../Dave/Generated/FREERTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 601:../Dave/Generated/FREERTOS/tasks.c ****              * function - use them. */
 602:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 603:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 604:../Dave/Generated/FREERTOS/tasks.c **** 
 605:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:../Dave/Generated/FREERTOS/tasks.c ****                 {
 607:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 608:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 609:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 610:../Dave/Generated/FREERTOS/tasks.c ****                 }
 611:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:../Dave/Generated/FREERTOS/tasks.c **** 
 613:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 614:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 615:../Dave/Generated/FREERTOS/tasks.c ****         }
 616:../Dave/Generated/FREERTOS/tasks.c ****         else
 617:../Dave/Generated/FREERTOS/tasks.c ****         {
 618:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = NULL;
 619:../Dave/Generated/FREERTOS/tasks.c ****         }
 620:../Dave/Generated/FREERTOS/tasks.c **** 
 621:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 622:../Dave/Generated/FREERTOS/tasks.c ****     }
 623:../Dave/Generated/FREERTOS/tasks.c **** 
 624:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 626:../Dave/Generated/FREERTOS/tasks.c **** 
 627:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:../Dave/Generated/FREERTOS/tasks.c **** 
 629:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:../Dave/Generated/FREERTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 631:../Dave/Generated/FREERTOS/tasks.c ****     {
 632:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 633:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:../Dave/Generated/FREERTOS/tasks.c **** 
 635:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:../Dave/Generated/FREERTOS/tasks.c **** 
 638:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:../Dave/Generated/FREERTOS/tasks.c ****         {
 640:../Dave/Generated/FREERTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:../Dave/Generated/FREERTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 642:../Dave/Generated/FREERTOS/tasks.c ****              * not static allocation is being used. */
 643:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 644:../Dave/Generated/FREERTOS/tasks.c **** 
 645:../Dave/Generated/FREERTOS/tasks.c ****             /* Store the stack location in the TCB. */
 646:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:../Dave/Generated/FREERTOS/tasks.c **** 
 648:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:../Dave/Generated/FREERTOS/tasks.c ****                 {
 650:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 651:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created statically in case the task is later deleted. */
 652:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:../Dave/Generated/FREERTOS/tasks.c ****                 }
 654:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:../Dave/Generated/FREERTOS/tasks.c **** 
 656:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 658:../Dave/Generated/FREERTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 659:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 660:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 661:../Dave/Generated/FREERTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 662:../Dave/Generated/FREERTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 663:../Dave/Generated/FREERTOS/tasks.c **** 
 664:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdPASS;
 666:../Dave/Generated/FREERTOS/tasks.c ****         }
 667:../Dave/Generated/FREERTOS/tasks.c **** 
 668:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 669:../Dave/Generated/FREERTOS/tasks.c ****     }
 670:../Dave/Generated/FREERTOS/tasks.c **** 
 671:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:../Dave/Generated/FREERTOS/tasks.c **** 
 674:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:../Dave/Generated/FREERTOS/tasks.c **** 
 676:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:../Dave/Generated/FREERTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 678:../Dave/Generated/FREERTOS/tasks.c ****     {
 679:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 680:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:../Dave/Generated/FREERTOS/tasks.c **** 
 682:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:../Dave/Generated/FREERTOS/tasks.c **** 
 684:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:../Dave/Generated/FREERTOS/tasks.c ****         {
 686:../Dave/Generated/FREERTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:../Dave/Generated/FREERTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 688:../Dave/Generated/FREERTOS/tasks.c ****              * not static allocation is being used. */
 689:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:../Dave/Generated/FREERTOS/tasks.c **** 
 691:../Dave/Generated/FREERTOS/tasks.c ****             if( pxNewTCB != NULL )
 692:../Dave/Generated/FREERTOS/tasks.c ****             {
 693:../Dave/Generated/FREERTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 694:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:../Dave/Generated/FREERTOS/tasks.c **** 
 696:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:../Dave/Generated/FREERTOS/tasks.c ****                     {
 698:../Dave/Generated/FREERTOS/tasks.c ****                         /* Tasks can be created statically or dynamically, so note
 699:../Dave/Generated/FREERTOS/tasks.c ****                          * this task had a statically allocated stack in case it is
 700:../Dave/Generated/FREERTOS/tasks.c ****                          * later deleted.  The TCB was allocated dynamically. */
 701:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:../Dave/Generated/FREERTOS/tasks.c ****                     }
 703:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:../Dave/Generated/FREERTOS/tasks.c **** 
 705:../Dave/Generated/FREERTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 707:../Dave/Generated/FREERTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 709:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 710:../Dave/Generated/FREERTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 711:../Dave/Generated/FREERTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 712:../Dave/Generated/FREERTOS/tasks.c **** 
 713:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 715:../Dave/Generated/FREERTOS/tasks.c ****             }
 716:../Dave/Generated/FREERTOS/tasks.c ****         }
 717:../Dave/Generated/FREERTOS/tasks.c **** 
 718:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 719:../Dave/Generated/FREERTOS/tasks.c ****     }
 720:../Dave/Generated/FREERTOS/tasks.c **** 
 721:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 723:../Dave/Generated/FREERTOS/tasks.c **** 
 724:../Dave/Generated/FREERTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:../Dave/Generated/FREERTOS/tasks.c **** 
 726:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:../Dave/Generated/FREERTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:../Dave/Generated/FREERTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:../Dave/Generated/FREERTOS/tasks.c ****                             void * const pvParameters,
 730:../Dave/Generated/FREERTOS/tasks.c ****                             UBaseType_t uxPriority,
 731:../Dave/Generated/FREERTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 732:../Dave/Generated/FREERTOS/tasks.c ****     {
 160              	 .loc 1 732 0
 161              	 .cfi_startproc
 162 0000 90B5     	 push {r4,r7,lr}
 163              	.LCFI0:
 164              	 .cfi_def_cfa_offset 12
 165              	 .cfi_offset 4,-12
 166              	 .cfi_offset 7,-8
 167              	 .cfi_offset 14,-4
 168 0002 8DB0     	 sub sp,sp,#52
 169              	.LCFI1:
 170              	 .cfi_def_cfa_offset 64
 171 0004 04AF     	 add r7,sp,#16
 172              	.LCFI2:
 173              	 .cfi_def_cfa 7,48
 174 0006 F860     	 str r0,[r7,#12]
 175 0008 B960     	 str r1,[r7,#8]
 176 000a 3B60     	 str r3,[r7]
 177 000c BB1D     	 add r3,r7,#6
 178 000e 1A80     	 strh r2,[r3]
 179              	.LBB2:
 733:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNewTCB;
 734:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
 735:../Dave/Generated/FREERTOS/tasks.c **** 
 736:../Dave/Generated/FREERTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:../Dave/Generated/FREERTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:../Dave/Generated/FREERTOS/tasks.c ****          * the TCB then the stack. */
 739:../Dave/Generated/FREERTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 740:../Dave/Generated/FREERTOS/tasks.c ****             {
 741:../Dave/Generated/FREERTOS/tasks.c ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:../Dave/Generated/FREERTOS/tasks.c ****                  * the implementation of the port malloc function and whether or not static
 743:../Dave/Generated/FREERTOS/tasks.c ****                  * allocation is being used. */
 744:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:../Dave/Generated/FREERTOS/tasks.c **** 
 746:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxNewTCB != NULL )
 747:../Dave/Generated/FREERTOS/tasks.c ****                 {
 748:../Dave/Generated/FREERTOS/tasks.c ****                     /* Allocate space for the stack used by the task being created.
 749:../Dave/Generated/FREERTOS/tasks.c ****                      * The base of the stack memory stored in the TCB so the task can
 750:../Dave/Generated/FREERTOS/tasks.c ****                      * be deleted later if required. */
 751:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth
 752:../Dave/Generated/FREERTOS/tasks.c **** 
 753:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxNewTCB->pxStack == NULL )
 754:../Dave/Generated/FREERTOS/tasks.c ****                     {
 755:../Dave/Generated/FREERTOS/tasks.c ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:../Dave/Generated/FREERTOS/tasks.c ****                         vPortFree( pxNewTCB );
 757:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB = NULL;
 758:../Dave/Generated/FREERTOS/tasks.c ****                     }
 759:../Dave/Generated/FREERTOS/tasks.c ****                 }
 760:../Dave/Generated/FREERTOS/tasks.c ****             }
 761:../Dave/Generated/FREERTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 762:../Dave/Generated/FREERTOS/tasks.c ****             {
 763:../Dave/Generated/FREERTOS/tasks.c ****                 StackType_t * pxStack;
 764:../Dave/Generated/FREERTOS/tasks.c **** 
 765:../Dave/Generated/FREERTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created. */
 766:../Dave/Generated/FREERTOS/tasks.c ****                 pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); 
 180              	 .loc 1 766 0
 181 0010 BB1D     	 add r3,r7,#6
 182 0012 1B88     	 ldrh r3,[r3]
 183 0014 9B00     	 lsl r3,r3,#2
 184 0016 181C     	 mov r0,r3
 185 0018 FFF7FEFF 	 bl pvPortMalloc
 186 001c 031C     	 mov r3,r0
 187 001e 7B61     	 str r3,[r7,#20]
 767:../Dave/Generated/FREERTOS/tasks.c **** 
 768:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxStack != NULL )
 188              	 .loc 1 768 0
 189 0020 7B69     	 ldr r3,[r7,#20]
 190 0022 002B     	 cmp r3,#0
 191 0024 10D0     	 beq .L2
 769:../Dave/Generated/FREERTOS/tasks.c ****                 {
 770:../Dave/Generated/FREERTOS/tasks.c ****                     /* Allocate space for the TCB. */
 771:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 192              	 .loc 1 771 0
 193 0026 7020     	 mov r0,#112
 194 0028 FFF7FEFF 	 bl pvPortMalloc
 195 002c 031C     	 mov r3,r0
 196 002e FB61     	 str r3,[r7,#28]
 772:../Dave/Generated/FREERTOS/tasks.c **** 
 773:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxNewTCB != NULL )
 197              	 .loc 1 773 0
 198 0030 FB69     	 ldr r3,[r7,#28]
 199 0032 002B     	 cmp r3,#0
 200 0034 03D0     	 beq .L3
 774:../Dave/Generated/FREERTOS/tasks.c ****                     {
 775:../Dave/Generated/FREERTOS/tasks.c ****                         /* Store the stack location in the TCB. */
 776:../Dave/Generated/FREERTOS/tasks.c ****                         pxNewTCB->pxStack = pxStack;
 201              	 .loc 1 776 0
 202 0036 FB69     	 ldr r3,[r7,#28]
 203 0038 7A69     	 ldr r2,[r7,#20]
 204 003a 1A63     	 str r2,[r3,#48]
 205 003c 06E0     	 b .L5
 206              	.L3:
 777:../Dave/Generated/FREERTOS/tasks.c ****                     }
 778:../Dave/Generated/FREERTOS/tasks.c ****                     else
 779:../Dave/Generated/FREERTOS/tasks.c ****                     {
 780:../Dave/Generated/FREERTOS/tasks.c ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:../Dave/Generated/FREERTOS/tasks.c ****                          * it again. */
 782:../Dave/Generated/FREERTOS/tasks.c ****                         vPortFree( pxStack );
 207              	 .loc 1 782 0
 208 003e 7B69     	 ldr r3,[r7,#20]
 209 0040 181C     	 mov r0,r3
 210 0042 FFF7FEFF 	 bl vPortFree
 211 0046 01E0     	 b .L5
 212              	.L2:
 783:../Dave/Generated/FREERTOS/tasks.c ****                     }
 784:../Dave/Generated/FREERTOS/tasks.c ****                 }
 785:../Dave/Generated/FREERTOS/tasks.c ****                 else
 786:../Dave/Generated/FREERTOS/tasks.c ****                 {
 787:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB = NULL;
 213              	 .loc 1 787 0
 214 0048 0023     	 mov r3,#0
 215 004a FB61     	 str r3,[r7,#28]
 216              	.L5:
 217              	.LBE2:
 788:../Dave/Generated/FREERTOS/tasks.c ****                 }
 789:../Dave/Generated/FREERTOS/tasks.c ****             }
 790:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 791:../Dave/Generated/FREERTOS/tasks.c **** 
 792:../Dave/Generated/FREERTOS/tasks.c ****         if( pxNewTCB != NULL )
 218              	 .loc 1 792 0
 219 004c FB69     	 ldr r3,[r7,#28]
 220 004e 002B     	 cmp r3,#0
 221 0050 16D0     	 beq .L6
 793:../Dave/Generated/FREERTOS/tasks.c ****         {
 794:../Dave/Generated/FREERTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:../Dave/Generated/FREERTOS/tasks.c ****                 {
 796:../Dave/Generated/FREERTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note this
 797:../Dave/Generated/FREERTOS/tasks.c ****                      * task was created dynamically in case it is later deleted. */
 798:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:../Dave/Generated/FREERTOS/tasks.c ****                 }
 800:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:../Dave/Generated/FREERTOS/tasks.c **** 
 802:../Dave/Generated/FREERTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 222              	 .loc 1 802 0
 223 0052 BB1D     	 add r3,r7,#6
 224 0054 1A88     	 ldrh r2,[r3]
 225 0056 F868     	 ldr r0,[r7,#12]
 226 0058 B968     	 ldr r1,[r7,#8]
 227 005a 3C68     	 ldr r4,[r7]
 228 005c 3B6B     	 ldr r3,[r7,#48]
 229 005e 0093     	 str r3,[sp]
 230 0060 7B6B     	 ldr r3,[r7,#52]
 231 0062 0193     	 str r3,[sp,#4]
 232 0064 FB69     	 ldr r3,[r7,#28]
 233 0066 0293     	 str r3,[sp,#8]
 234 0068 0023     	 mov r3,#0
 235 006a 0393     	 str r3,[sp,#12]
 236 006c 231C     	 mov r3,r4
 237 006e FFF7FEFF 	 bl prvInitialiseNewTask
 803:../Dave/Generated/FREERTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 238              	 .loc 1 803 0
 239 0072 FB69     	 ldr r3,[r7,#28]
 240 0074 181C     	 mov r0,r3
 241 0076 FFF7FEFF 	 bl prvAddNewTaskToReadyList
 804:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdPASS;
 242              	 .loc 1 804 0
 243 007a 0123     	 mov r3,#1
 244 007c BB61     	 str r3,[r7,#24]
 245 007e 02E0     	 b .L7
 246              	.L6:
 805:../Dave/Generated/FREERTOS/tasks.c ****         }
 806:../Dave/Generated/FREERTOS/tasks.c ****         else
 807:../Dave/Generated/FREERTOS/tasks.c ****         {
 808:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 247              	 .loc 1 808 0
 248 0080 0123     	 mov r3,#1
 249 0082 5B42     	 neg r3,r3
 250 0084 BB61     	 str r3,[r7,#24]
 251              	.L7:
 809:../Dave/Generated/FREERTOS/tasks.c ****         }
 810:../Dave/Generated/FREERTOS/tasks.c **** 
 811:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 252              	 .loc 1 811 0
 253 0086 BB69     	 ldr r3,[r7,#24]
 812:../Dave/Generated/FREERTOS/tasks.c ****     }
 254              	 .loc 1 812 0
 255 0088 181C     	 mov r0,r3
 256 008a BD46     	 mov sp,r7
 257 008c 09B0     	 add sp,sp,#36
 258              	 
 259 008e 90BD     	 pop {r4,r7,pc}
 260              	 .cfi_endproc
 261              	.LFE42:
 263              	 .section .text.prvInitialiseNewTask,"ax",%progbits
 264              	 .align 2
 265              	 .code 16
 266              	 .thumb_func
 268              	prvInitialiseNewTask:
 269              	.LFB43:
 813:../Dave/Generated/FREERTOS/tasks.c **** 
 814:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 816:../Dave/Generated/FREERTOS/tasks.c **** 
 817:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:../Dave/Generated/FREERTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:../Dave/Generated/FREERTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 820:../Dave/Generated/FREERTOS/tasks.c ****                                   void * const pvParameters,
 821:../Dave/Generated/FREERTOS/tasks.c ****                                   UBaseType_t uxPriority,
 822:../Dave/Generated/FREERTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 823:../Dave/Generated/FREERTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 824:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 825:../Dave/Generated/FREERTOS/tasks.c **** {
 270              	 .loc 1 825 0
 271              	 .cfi_startproc
 272 0000 80B5     	 push {r7,lr}
 273              	.LCFI3:
 274              	 .cfi_def_cfa_offset 8
 275              	 .cfi_offset 7,-8
 276              	 .cfi_offset 14,-4
 277 0002 86B0     	 sub sp,sp,#24
 278              	.LCFI4:
 279              	 .cfi_def_cfa_offset 32
 280 0004 00AF     	 add r7,sp,#0
 281              	.LCFI5:
 282              	 .cfi_def_cfa_register 7
 283 0006 F860     	 str r0,[r7,#12]
 284 0008 B960     	 str r1,[r7,#8]
 285 000a 7A60     	 str r2,[r7,#4]
 286 000c 3B60     	 str r3,[r7]
 826:../Dave/Generated/FREERTOS/tasks.c ****     StackType_t * pxTopOfStack;
 827:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t x;
 828:../Dave/Generated/FREERTOS/tasks.c **** 
 829:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 830:../Dave/Generated/FREERTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 831:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xRunPrivileged;
 832:../Dave/Generated/FREERTOS/tasks.c **** 
 833:../Dave/Generated/FREERTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:../Dave/Generated/FREERTOS/tasks.c ****         {
 835:../Dave/Generated/FREERTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 836:../Dave/Generated/FREERTOS/tasks.c ****         }
 837:../Dave/Generated/FREERTOS/tasks.c ****         else
 838:../Dave/Generated/FREERTOS/tasks.c ****         {
 839:../Dave/Generated/FREERTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 840:../Dave/Generated/FREERTOS/tasks.c ****         }
 841:../Dave/Generated/FREERTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:../Dave/Generated/FREERTOS/tasks.c **** 
 844:../Dave/Generated/FREERTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 845:../Dave/Generated/FREERTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:../Dave/Generated/FREERTOS/tasks.c ****         {
 847:../Dave/Generated/FREERTOS/tasks.c ****             /* Fill the stack with a known value to assist debugging. */
 848:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 287              	 .loc 1 848 0
 288 000e BB6A     	 ldr r3,[r7,#40]
 289 0010 1A6B     	 ldr r2,[r3,#48]
 290 0012 7B68     	 ldr r3,[r7,#4]
 291 0014 9B00     	 lsl r3,r3,#2
 292 0016 101C     	 mov r0,r2
 293 0018 A521     	 mov r1,#165
 294 001a 1A1C     	 mov r2,r3
 295 001c FFF7FEFF 	 bl memset
 849:../Dave/Generated/FREERTOS/tasks.c ****         }
 850:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:../Dave/Generated/FREERTOS/tasks.c **** 
 852:../Dave/Generated/FREERTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:../Dave/Generated/FREERTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:../Dave/Generated/FREERTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:../Dave/Generated/FREERTOS/tasks.c ****      * by the port. */
 856:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 857:../Dave/Generated/FREERTOS/tasks.c ****         {
 858:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 296              	 .loc 1 858 0
 297 0020 BB6A     	 ldr r3,[r7,#40]
 298 0022 1A6B     	 ldr r2,[r3,#48]
 299 0024 7B68     	 ldr r3,[r7,#4]
 300 0026 4349     	 ldr r1,.L20
 301 0028 8C46     	 mov ip,r1
 302 002a 6344     	 add r3,r3,ip
 303 002c 9B00     	 lsl r3,r3,#2
 304 002e D318     	 add r3,r2,r3
 305 0030 3B61     	 str r3,[r7,#16]
 859:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 306              	 .loc 1 859 0
 307 0032 3B69     	 ldr r3,[r7,#16]
 308 0034 0722     	 mov r2,#7
 309 0036 9343     	 bic r3,r2
 310 0038 3B61     	 str r3,[r7,#16]
 860:../Dave/Generated/FREERTOS/tasks.c **** 
 861:../Dave/Generated/FREERTOS/tasks.c ****             /* Check the alignment of the calculated top of stack is correct. */
 862:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 311              	 .loc 1 862 0
 312 003a 3B69     	 ldr r3,[r7,#16]
 313 003c 0722     	 mov r2,#7
 314 003e 1340     	 and r3,r2
 315 0040 01D0     	 beq .L10
 316              	 .loc 1 862 0 is_stmt 0 discriminator 1
 317              	
 318 0042 72B6     	 cpsid i
 319              	
 320              	 .code 16
 321              	.L11:
 322 0044 FEE7     	 b .L11
 323              	.L10:
 863:../Dave/Generated/FREERTOS/tasks.c **** 
 864:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:../Dave/Generated/FREERTOS/tasks.c ****                 {
 866:../Dave/Generated/FREERTOS/tasks.c ****                     /* Also record the stack's high address, which may assist
 867:../Dave/Generated/FREERTOS/tasks.c ****                      * debugging. */
 868:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:../Dave/Generated/FREERTOS/tasks.c ****                 }
 870:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:../Dave/Generated/FREERTOS/tasks.c ****         }
 872:../Dave/Generated/FREERTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 873:../Dave/Generated/FREERTOS/tasks.c ****         {
 874:../Dave/Generated/FREERTOS/tasks.c ****             pxTopOfStack = pxNewTCB->pxStack;
 875:../Dave/Generated/FREERTOS/tasks.c **** 
 876:../Dave/Generated/FREERTOS/tasks.c ****             /* Check the alignment of the stack buffer is correct. */
 877:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:../Dave/Generated/FREERTOS/tasks.c **** 
 879:../Dave/Generated/FREERTOS/tasks.c ****             /* The other extreme of the stack space is required if stack checking is
 880:../Dave/Generated/FREERTOS/tasks.c ****              * performed. */
 881:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:../Dave/Generated/FREERTOS/tasks.c ****         }
 883:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 884:../Dave/Generated/FREERTOS/tasks.c **** 
 885:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the task name in the TCB. */
 886:../Dave/Generated/FREERTOS/tasks.c ****     if( pcName != NULL )
 324              	 .loc 1 886 0 is_stmt 1
 325 0046 BB68     	 ldr r3,[r7,#8]
 326 0048 002B     	 cmp r3,#0
 327 004a 1FD0     	 beq .L12
 887:../Dave/Generated/FREERTOS/tasks.c ****     {
 888:../Dave/Generated/FREERTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 328              	 .loc 1 888 0
 329 004c 0023     	 mov r3,#0
 330 004e 7B61     	 str r3,[r7,#20]
 331 0050 14E0     	 b .L13
 332              	.L16:
 889:../Dave/Generated/FREERTOS/tasks.c ****         {
 890:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 333              	 .loc 1 890 0
 334 0052 BA68     	 ldr r2,[r7,#8]
 335 0054 7B69     	 ldr r3,[r7,#20]
 336 0056 D318     	 add r3,r2,r3
 337 0058 1878     	 ldrb r0,[r3]
 338 005a BA6A     	 ldr r2,[r7,#40]
 339 005c 3021     	 mov r1,#48
 340 005e 7B69     	 ldr r3,[r7,#20]
 341 0060 D318     	 add r3,r2,r3
 342 0062 5B18     	 add r3,r3,r1
 343 0064 021C     	 add r2,r0,#0
 344 0066 1A71     	 strb r2,[r3,#4]
 891:../Dave/Generated/FREERTOS/tasks.c **** 
 892:../Dave/Generated/FREERTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:../Dave/Generated/FREERTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:../Dave/Generated/FREERTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 895:../Dave/Generated/FREERTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 345              	 .loc 1 895 0
 346 0068 BA68     	 ldr r2,[r7,#8]
 347 006a 7B69     	 ldr r3,[r7,#20]
 348 006c D318     	 add r3,r2,r3
 349 006e 1B78     	 ldrb r3,[r3]
 350 0070 002B     	 cmp r3,#0
 351 0072 00D1     	 bne .L14
 896:../Dave/Generated/FREERTOS/tasks.c ****             {
 897:../Dave/Generated/FREERTOS/tasks.c ****                 break;
 352              	 .loc 1 897 0
 353 0074 05E0     	 b .L15
 354              	.L14:
 888:../Dave/Generated/FREERTOS/tasks.c ****         {
 355              	 .loc 1 888 0 discriminator 2
 356 0076 7B69     	 ldr r3,[r7,#20]
 357 0078 0133     	 add r3,r3,#1
 358 007a 7B61     	 str r3,[r7,#20]
 359              	.L13:
 888:../Dave/Generated/FREERTOS/tasks.c ****         {
 360              	 .loc 1 888 0 is_stmt 0 discriminator 1
 361 007c 7B69     	 ldr r3,[r7,#20]
 362 007e 0F2B     	 cmp r3,#15
 363 0080 E7D9     	 bls .L16
 364              	.L15:
 898:../Dave/Generated/FREERTOS/tasks.c ****             }
 899:../Dave/Generated/FREERTOS/tasks.c ****             else
 900:../Dave/Generated/FREERTOS/tasks.c ****             {
 901:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 902:../Dave/Generated/FREERTOS/tasks.c ****             }
 903:../Dave/Generated/FREERTOS/tasks.c ****         }
 904:../Dave/Generated/FREERTOS/tasks.c **** 
 905:../Dave/Generated/FREERTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 906:../Dave/Generated/FREERTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:../Dave/Generated/FREERTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 365              	 .loc 1 907 0 is_stmt 1
 366 0082 BB6A     	 ldr r3,[r7,#40]
 367 0084 4322     	 mov r2,#67
 368 0086 0021     	 mov r1,#0
 369 0088 9954     	 strb r1,[r3,r2]
 370 008a 03E0     	 b .L17
 371              	.L12:
 908:../Dave/Generated/FREERTOS/tasks.c ****     }
 909:../Dave/Generated/FREERTOS/tasks.c ****     else
 910:../Dave/Generated/FREERTOS/tasks.c ****     {
 911:../Dave/Generated/FREERTOS/tasks.c ****         /* The task has not been given a name, so just ensure there is a NULL
 912:../Dave/Generated/FREERTOS/tasks.c ****          * terminator when it is read out. */
 913:../Dave/Generated/FREERTOS/tasks.c ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 372              	 .loc 1 913 0
 373 008c BB6A     	 ldr r3,[r7,#40]
 374 008e 3422     	 mov r2,#52
 375 0090 0021     	 mov r1,#0
 376 0092 9954     	 strb r1,[r3,r2]
 377              	.L17:
 914:../Dave/Generated/FREERTOS/tasks.c ****     }
 915:../Dave/Generated/FREERTOS/tasks.c **** 
 916:../Dave/Generated/FREERTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large.  First
 917:../Dave/Generated/FREERTOS/tasks.c ****      * remove the privilege bit if one is present. */
 918:../Dave/Generated/FREERTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 378              	 .loc 1 918 0
 379 0094 3B6A     	 ldr r3,[r7,#32]
 380 0096 042B     	 cmp r3,#4
 381 0098 01D9     	 bls .L18
 919:../Dave/Generated/FREERTOS/tasks.c ****     {
 920:../Dave/Generated/FREERTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 382              	 .loc 1 920 0
 383 009a 0423     	 mov r3,#4
 384 009c 3B62     	 str r3,[r7,#32]
 385              	.L18:
 921:../Dave/Generated/FREERTOS/tasks.c ****     }
 922:../Dave/Generated/FREERTOS/tasks.c ****     else
 923:../Dave/Generated/FREERTOS/tasks.c ****     {
 924:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 925:../Dave/Generated/FREERTOS/tasks.c ****     }
 926:../Dave/Generated/FREERTOS/tasks.c **** 
 927:../Dave/Generated/FREERTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 386              	 .loc 1 927 0
 387 009e BB6A     	 ldr r3,[r7,#40]
 388 00a0 3A6A     	 ldr r2,[r7,#32]
 389 00a2 DA62     	 str r2,[r3,#44]
 928:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 929:../Dave/Generated/FREERTOS/tasks.c ****         {
 930:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxBasePriority = uxPriority;
 390              	 .loc 1 930 0
 391 00a4 BB6A     	 ldr r3,[r7,#40]
 392 00a6 3A6A     	 ldr r2,[r7,#32]
 393 00a8 DA64     	 str r2,[r3,#76]
 931:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxMutexesHeld = 0;
 394              	 .loc 1 931 0
 395 00aa BB6A     	 ldr r3,[r7,#40]
 396 00ac 0022     	 mov r2,#0
 397 00ae 1A65     	 str r2,[r3,#80]
 932:../Dave/Generated/FREERTOS/tasks.c ****         }
 933:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 934:../Dave/Generated/FREERTOS/tasks.c **** 
 935:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 398              	 .loc 1 935 0
 399 00b0 BB6A     	 ldr r3,[r7,#40]
 400 00b2 0433     	 add r3,r3,#4
 401 00b4 181C     	 mov r0,r3
 402 00b6 FFF7FEFF 	 bl vListInitialiseItem
 936:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 403              	 .loc 1 936 0
 404 00ba BB6A     	 ldr r3,[r7,#40]
 405 00bc 1833     	 add r3,r3,#24
 406 00be 181C     	 mov r0,r3
 407 00c0 FFF7FEFF 	 bl vListInitialiseItem
 937:../Dave/Generated/FREERTOS/tasks.c **** 
 938:../Dave/Generated/FREERTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:../Dave/Generated/FREERTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 940:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 408              	 .loc 1 940 0
 409 00c4 BB6A     	 ldr r3,[r7,#40]
 410 00c6 BA6A     	 ldr r2,[r7,#40]
 411 00c8 1A61     	 str r2,[r3,#16]
 941:../Dave/Generated/FREERTOS/tasks.c **** 
 942:../Dave/Generated/FREERTOS/tasks.c ****     /* Event lists are always in priority order. */
 943:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 412              	 .loc 1 943 0
 413 00ca 3B6A     	 ldr r3,[r7,#32]
 414 00cc 0522     	 mov r2,#5
 415 00ce D21A     	 sub r2,r2,r3
 416 00d0 BB6A     	 ldr r3,[r7,#40]
 417 00d2 9A61     	 str r2,[r3,#24]
 944:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 418              	 .loc 1 944 0
 419 00d4 BB6A     	 ldr r3,[r7,#40]
 420 00d6 BA6A     	 ldr r2,[r7,#40]
 421 00d8 5A62     	 str r2,[r3,#36]
 945:../Dave/Generated/FREERTOS/tasks.c **** 
 946:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:../Dave/Generated/FREERTOS/tasks.c ****         {
 948:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:../Dave/Generated/FREERTOS/tasks.c ****         }
 950:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:../Dave/Generated/FREERTOS/tasks.c **** 
 952:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:../Dave/Generated/FREERTOS/tasks.c ****         {
 954:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->pxTaskTag = NULL;
 955:../Dave/Generated/FREERTOS/tasks.c ****         }
 956:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:../Dave/Generated/FREERTOS/tasks.c **** 
 958:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:../Dave/Generated/FREERTOS/tasks.c ****         {
 960:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:../Dave/Generated/FREERTOS/tasks.c ****         }
 962:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:../Dave/Generated/FREERTOS/tasks.c **** 
 964:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:../Dave/Generated/FREERTOS/tasks.c ****         {
 966:../Dave/Generated/FREERTOS/tasks.c ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:../Dave/Generated/FREERTOS/tasks.c ****         }
 968:../Dave/Generated/FREERTOS/tasks.c ****     #else
 969:../Dave/Generated/FREERTOS/tasks.c ****         {
 970:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid compiler warning about unreferenced parameter. */
 971:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) xRegions;
 972:../Dave/Generated/FREERTOS/tasks.c ****         }
 973:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 974:../Dave/Generated/FREERTOS/tasks.c **** 
 975:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:../Dave/Generated/FREERTOS/tasks.c ****         {
 977:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 422              	 .loc 1 977 0
 423 00da BB6A     	 ldr r3,[r7,#40]
 424 00dc 5433     	 add r3,r3,#84
 425 00de 181C     	 mov r0,r3
 426 00e0 0021     	 mov r1,#0
 427 00e2 1422     	 mov r2,#20
 428 00e4 FFF7FEFF 	 bl memset
 978:../Dave/Generated/FREERTOS/tasks.c ****         }
 979:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 980:../Dave/Generated/FREERTOS/tasks.c **** 
 981:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:../Dave/Generated/FREERTOS/tasks.c ****         {
 983:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 429              	 .loc 1 983 0
 430 00e8 BB6A     	 ldr r3,[r7,#40]
 431 00ea 6833     	 add r3,r3,#104
 432 00ec 181C     	 mov r0,r3
 433 00ee 0021     	 mov r1,#0
 434 00f0 0422     	 mov r2,#4
 435 00f2 FFF7FEFF 	 bl memset
 984:../Dave/Generated/FREERTOS/tasks.c ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 436              	 .loc 1 984 0
 437 00f6 BB6A     	 ldr r3,[r7,#40]
 438 00f8 6C33     	 add r3,r3,#108
 439 00fa 181C     	 mov r0,r3
 440 00fc 0021     	 mov r1,#0
 441 00fe 0122     	 mov r2,#1
 442 0100 FFF7FEFF 	 bl memset
 985:../Dave/Generated/FREERTOS/tasks.c ****         }
 986:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 987:../Dave/Generated/FREERTOS/tasks.c **** 
 988:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:../Dave/Generated/FREERTOS/tasks.c ****         {
 990:../Dave/Generated/FREERTOS/tasks.c ****             /* Initialise this task's Newlib reent structure.
 991:../Dave/Generated/FREERTOS/tasks.c ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:../Dave/Generated/FREERTOS/tasks.c ****              * for additional information. */
 993:../Dave/Generated/FREERTOS/tasks.c ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:../Dave/Generated/FREERTOS/tasks.c ****         }
 995:../Dave/Generated/FREERTOS/tasks.c ****     #endif
 996:../Dave/Generated/FREERTOS/tasks.c **** 
 997:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 998:../Dave/Generated/FREERTOS/tasks.c ****         {
 999:../Dave/Generated/FREERTOS/tasks.c ****             pxNewTCB->ucDelayAborted = pdFALSE;
 443              	 .loc 1 999 0
 444 0104 BB6A     	 ldr r3,[r7,#40]
 445 0106 6D22     	 mov r2,#109
 446 0108 0021     	 mov r1,#0
 447 010a 9954     	 strb r1,[r3,r2]
1000:../Dave/Generated/FREERTOS/tasks.c ****         }
1001:../Dave/Generated/FREERTOS/tasks.c ****     #endif
1002:../Dave/Generated/FREERTOS/tasks.c **** 
1003:../Dave/Generated/FREERTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
1004:../Dave/Generated/FREERTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
1005:../Dave/Generated/FREERTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
1006:../Dave/Generated/FREERTOS/tasks.c ****      * the top of stack variable is updated. */
1007:../Dave/Generated/FREERTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:../Dave/Generated/FREERTOS/tasks.c ****         {
1009:../Dave/Generated/FREERTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1010:../Dave/Generated/FREERTOS/tasks.c ****              * pass the stack end address to the stack initialization
1011:../Dave/Generated/FREERTOS/tasks.c ****              * function as well. */
1012:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:../Dave/Generated/FREERTOS/tasks.c ****                 {
1014:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1015:../Dave/Generated/FREERTOS/tasks.c ****                         {
1016:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:../Dave/Generated/FREERTOS/tasks.c ****                         }
1018:../Dave/Generated/FREERTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1019:../Dave/Generated/FREERTOS/tasks.c ****                         {
1020:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:../Dave/Generated/FREERTOS/tasks.c ****                         }
1022:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1023:../Dave/Generated/FREERTOS/tasks.c ****                 }
1024:../Dave/Generated/FREERTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:../Dave/Generated/FREERTOS/tasks.c ****                 {
1026:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:../Dave/Generated/FREERTOS/tasks.c ****                 }
1028:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../Dave/Generated/FREERTOS/tasks.c ****         }
1030:../Dave/Generated/FREERTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
1031:../Dave/Generated/FREERTOS/tasks.c ****         {
1032:../Dave/Generated/FREERTOS/tasks.c ****             /* If the port has capability to detect stack overflow,
1033:../Dave/Generated/FREERTOS/tasks.c ****              * pass the stack end address to the stack initialization
1034:../Dave/Generated/FREERTOS/tasks.c ****              * function as well. */
1035:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:../Dave/Generated/FREERTOS/tasks.c ****                 {
1037:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( portSTACK_GROWTH < 0 )
1038:../Dave/Generated/FREERTOS/tasks.c ****                         {
1039:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:../Dave/Generated/FREERTOS/tasks.c ****                         }
1041:../Dave/Generated/FREERTOS/tasks.c ****                     #else /* portSTACK_GROWTH */
1042:../Dave/Generated/FREERTOS/tasks.c ****                         {
1043:../Dave/Generated/FREERTOS/tasks.c ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:../Dave/Generated/FREERTOS/tasks.c ****                         }
1045:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* portSTACK_GROWTH */
1046:../Dave/Generated/FREERTOS/tasks.c ****                 }
1047:../Dave/Generated/FREERTOS/tasks.c ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:../Dave/Generated/FREERTOS/tasks.c ****                 {
1049:../Dave/Generated/FREERTOS/tasks.c ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
 448              	 .loc 1 1049 0
 449 010c 3969     	 ldr r1,[r7,#16]
 450 010e FA68     	 ldr r2,[r7,#12]
 451 0110 3B68     	 ldr r3,[r7]
 452 0112 081C     	 mov r0,r1
 453 0114 111C     	 mov r1,r2
 454 0116 1A1C     	 mov r2,r3
 455 0118 FFF7FEFF 	 bl pxPortInitialiseStack
 456 011c 021C     	 mov r2,r0
 457 011e BB6A     	 ldr r3,[r7,#40]
 458 0120 1A60     	 str r2,[r3]
1050:../Dave/Generated/FREERTOS/tasks.c ****                 }
1051:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../Dave/Generated/FREERTOS/tasks.c ****         }
1053:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1054:../Dave/Generated/FREERTOS/tasks.c **** 
1055:../Dave/Generated/FREERTOS/tasks.c ****     if( pxCreatedTask != NULL )
 459              	 .loc 1 1055 0
 460 0122 7B6A     	 ldr r3,[r7,#36]
 461 0124 002B     	 cmp r3,#0
 462 0126 02D0     	 beq .L9
1056:../Dave/Generated/FREERTOS/tasks.c ****     {
1057:../Dave/Generated/FREERTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1058:../Dave/Generated/FREERTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1059:../Dave/Generated/FREERTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 463              	 .loc 1 1059 0
 464 0128 7B6A     	 ldr r3,[r7,#36]
 465 012a BA6A     	 ldr r2,[r7,#40]
 466 012c 1A60     	 str r2,[r3]
 467              	.L9:
1060:../Dave/Generated/FREERTOS/tasks.c ****     }
1061:../Dave/Generated/FREERTOS/tasks.c ****     else
1062:../Dave/Generated/FREERTOS/tasks.c ****     {
1063:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1064:../Dave/Generated/FREERTOS/tasks.c ****     }
1065:../Dave/Generated/FREERTOS/tasks.c **** }
 468              	 .loc 1 1065 0
 469 012e BD46     	 mov sp,r7
 470 0130 06B0     	 add sp,sp,#24
 471              	 
 472 0132 80BD     	 pop {r7,pc}
 473              	.L21:
 474              	 .align 2
 475              	.L20:
 476 0134 FFFFFF3F 	 .word 1073741823
 477              	 .cfi_endproc
 478              	.LFE43:
 480              	 .section .text.prvAddNewTaskToReadyList,"ax",%progbits
 481              	 .align 2
 482              	 .code 16
 483              	 .thumb_func
 485              	prvAddNewTaskToReadyList:
 486              	.LFB44:
1066:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1067:../Dave/Generated/FREERTOS/tasks.c **** 
1068:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:../Dave/Generated/FREERTOS/tasks.c **** {
 487              	 .loc 1 1069 0
 488              	 .cfi_startproc
 489 0000 80B5     	 push {r7,lr}
 490              	.LCFI6:
 491              	 .cfi_def_cfa_offset 8
 492              	 .cfi_offset 7,-8
 493              	 .cfi_offset 14,-4
 494 0002 82B0     	 sub sp,sp,#8
 495              	.LCFI7:
 496              	 .cfi_def_cfa_offset 16
 497 0004 00AF     	 add r7,sp,#0
 498              	.LCFI8:
 499              	 .cfi_def_cfa_register 7
 500 0006 7860     	 str r0,[r7,#4]
1070:../Dave/Generated/FREERTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:../Dave/Generated/FREERTOS/tasks.c ****      * updated. */
1072:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 501              	 .loc 1 1072 0
 502 0008 FFF7FEFF 	 bl vPortEnterCritical
1073:../Dave/Generated/FREERTOS/tasks.c ****     {
1074:../Dave/Generated/FREERTOS/tasks.c ****         uxCurrentNumberOfTasks++;
 503              	 .loc 1 1074 0
 504 000c 294B     	 ldr r3,.L27
 505 000e 1B68     	 ldr r3,[r3]
 506 0010 5A1C     	 add r2,r3,#1
 507 0012 284B     	 ldr r3,.L27
 508 0014 1A60     	 str r2,[r3]
1075:../Dave/Generated/FREERTOS/tasks.c **** 
1076:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB == NULL )
 509              	 .loc 1 1076 0
 510 0016 284B     	 ldr r3,.L27+4
 511 0018 1B68     	 ldr r3,[r3]
 512 001a 002B     	 cmp r3,#0
 513 001c 09D1     	 bne .L23
1077:../Dave/Generated/FREERTOS/tasks.c ****         {
1078:../Dave/Generated/FREERTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1079:../Dave/Generated/FREERTOS/tasks.c ****              * the suspended state - make this the current task. */
1080:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
 514              	 .loc 1 1080 0
 515 001e 264B     	 ldr r3,.L27+4
 516 0020 7A68     	 ldr r2,[r7,#4]
 517 0022 1A60     	 str r2,[r3]
1081:../Dave/Generated/FREERTOS/tasks.c **** 
1082:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 518              	 .loc 1 1082 0
 519 0024 234B     	 ldr r3,.L27
 520 0026 1B68     	 ldr r3,[r3]
 521 0028 012B     	 cmp r3,#1
 522 002a 10D1     	 bne .L24
1083:../Dave/Generated/FREERTOS/tasks.c ****             {
1084:../Dave/Generated/FREERTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1085:../Dave/Generated/FREERTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1086:../Dave/Generated/FREERTOS/tasks.c ****                  * fails, but we will report the failure. */
1087:../Dave/Generated/FREERTOS/tasks.c ****                 prvInitialiseTaskLists();
 523              	 .loc 1 1087 0
 524 002c FFF7FEFF 	 bl prvInitialiseTaskLists
 525 0030 0DE0     	 b .L24
 526              	.L23:
1088:../Dave/Generated/FREERTOS/tasks.c ****             }
1089:../Dave/Generated/FREERTOS/tasks.c ****             else
1090:../Dave/Generated/FREERTOS/tasks.c ****             {
1091:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1092:../Dave/Generated/FREERTOS/tasks.c ****             }
1093:../Dave/Generated/FREERTOS/tasks.c ****         }
1094:../Dave/Generated/FREERTOS/tasks.c ****         else
1095:../Dave/Generated/FREERTOS/tasks.c ****         {
1096:../Dave/Generated/FREERTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1097:../Dave/Generated/FREERTOS/tasks.c ****              * current task if it is the highest priority task to be created
1098:../Dave/Generated/FREERTOS/tasks.c ****              * so far. */
1099:../Dave/Generated/FREERTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
 527              	 .loc 1 1099 0
 528 0032 224B     	 ldr r3,.L27+8
 529 0034 1B68     	 ldr r3,[r3]
 530 0036 002B     	 cmp r3,#0
 531 0038 09D1     	 bne .L24
1100:../Dave/Generated/FREERTOS/tasks.c ****             {
1101:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 532              	 .loc 1 1101 0
 533 003a 1F4B     	 ldr r3,.L27+4
 534 003c 1B68     	 ldr r3,[r3]
 535 003e DA6A     	 ldr r2,[r3,#44]
 536 0040 7B68     	 ldr r3,[r7,#4]
 537 0042 DB6A     	 ldr r3,[r3,#44]
 538 0044 9A42     	 cmp r2,r3
 539 0046 02D8     	 bhi .L24
1102:../Dave/Generated/FREERTOS/tasks.c ****                 {
1103:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
 540              	 .loc 1 1103 0
 541 0048 1B4B     	 ldr r3,.L27+4
 542 004a 7A68     	 ldr r2,[r7,#4]
 543 004c 1A60     	 str r2,[r3]
 544              	.L24:
1104:../Dave/Generated/FREERTOS/tasks.c ****                 }
1105:../Dave/Generated/FREERTOS/tasks.c ****                 else
1106:../Dave/Generated/FREERTOS/tasks.c ****                 {
1107:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1108:../Dave/Generated/FREERTOS/tasks.c ****                 }
1109:../Dave/Generated/FREERTOS/tasks.c ****             }
1110:../Dave/Generated/FREERTOS/tasks.c ****             else
1111:../Dave/Generated/FREERTOS/tasks.c ****             {
1112:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1113:../Dave/Generated/FREERTOS/tasks.c ****             }
1114:../Dave/Generated/FREERTOS/tasks.c ****         }
1115:../Dave/Generated/FREERTOS/tasks.c **** 
1116:../Dave/Generated/FREERTOS/tasks.c ****         uxTaskNumber++;
 545              	 .loc 1 1116 0
 546 004e 1C4B     	 ldr r3,.L27+12
 547 0050 1B68     	 ldr r3,[r3]
 548 0052 5A1C     	 add r2,r3,#1
 549 0054 1A4B     	 ldr r3,.L27+12
 550 0056 1A60     	 str r2,[r3]
1117:../Dave/Generated/FREERTOS/tasks.c **** 
1118:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:../Dave/Generated/FREERTOS/tasks.c ****             {
1120:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add a counter into the TCB for tracing only. */
1121:../Dave/Generated/FREERTOS/tasks.c ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 551              	 .loc 1 1121 0
 552 0058 194B     	 ldr r3,.L27+12
 553 005a 1A68     	 ldr r2,[r3]
 554 005c 7B68     	 ldr r3,[r7,#4]
 555 005e 5A64     	 str r2,[r3,#68]
1122:../Dave/Generated/FREERTOS/tasks.c ****             }
1123:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1124:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1125:../Dave/Generated/FREERTOS/tasks.c **** 
1126:../Dave/Generated/FREERTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
 556              	 .loc 1 1126 0
 557 0060 7B68     	 ldr r3,[r7,#4]
 558 0062 DA6A     	 ldr r2,[r3,#44]
 559 0064 174B     	 ldr r3,.L27+16
 560 0066 1B68     	 ldr r3,[r3]
 561 0068 9A42     	 cmp r2,r3
 562 006a 03D9     	 bls .L25
 563              	 .loc 1 1126 0 is_stmt 0 discriminator 1
 564 006c 7B68     	 ldr r3,[r7,#4]
 565 006e DA6A     	 ldr r2,[r3,#44]
 566 0070 144B     	 ldr r3,.L27+16
 567 0072 1A60     	 str r2,[r3]
 568              	.L25:
 569              	 .loc 1 1126 0 discriminator 3
 570 0074 7B68     	 ldr r3,[r7,#4]
 571 0076 DA6A     	 ldr r2,[r3,#44]
 572 0078 131C     	 mov r3,r2
 573 007a 9B00     	 lsl r3,r3,#2
 574 007c 9B18     	 add r3,r3,r2
 575 007e 9B00     	 lsl r3,r3,#2
 576 0080 114A     	 ldr r2,.L27+20
 577 0082 9A18     	 add r2,r3,r2
 578 0084 7B68     	 ldr r3,[r7,#4]
 579 0086 0433     	 add r3,r3,#4
 580 0088 101C     	 mov r0,r2
 581 008a 191C     	 mov r1,r3
 582 008c FFF7FEFF 	 bl vListInsertEnd
1127:../Dave/Generated/FREERTOS/tasks.c **** 
1128:../Dave/Generated/FREERTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1129:../Dave/Generated/FREERTOS/tasks.c ****     }
1130:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 583              	 .loc 1 1130 0 is_stmt 1 discriminator 3
 584 0090 FFF7FEFF 	 bl vPortExitCritical
1131:../Dave/Generated/FREERTOS/tasks.c **** 
1132:../Dave/Generated/FREERTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
 585              	 .loc 1 1132 0 discriminator 3
 586 0094 094B     	 ldr r3,.L27+8
 587 0096 1B68     	 ldr r3,[r3]
 588 0098 002B     	 cmp r3,#0
 589 009a 08D0     	 beq .L22
1133:../Dave/Generated/FREERTOS/tasks.c ****     {
1134:../Dave/Generated/FREERTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1135:../Dave/Generated/FREERTOS/tasks.c ****          * then it should run now. */
1136:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 590              	 .loc 1 1136 0
 591 009c 064B     	 ldr r3,.L27+4
 592 009e 1B68     	 ldr r3,[r3]
 593 00a0 DA6A     	 ldr r2,[r3,#44]
 594 00a2 7B68     	 ldr r3,[r7,#4]
 595 00a4 DB6A     	 ldr r3,[r3,#44]
 596 00a6 9A42     	 cmp r2,r3
 597 00a8 01D2     	 bcs .L22
1137:../Dave/Generated/FREERTOS/tasks.c ****         {
1138:../Dave/Generated/FREERTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
 598              	 .loc 1 1138 0
 599 00aa FFF7FEFF 	 bl vPortYield
 600              	.L22:
1139:../Dave/Generated/FREERTOS/tasks.c ****         }
1140:../Dave/Generated/FREERTOS/tasks.c ****         else
1141:../Dave/Generated/FREERTOS/tasks.c ****         {
1142:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1143:../Dave/Generated/FREERTOS/tasks.c ****         }
1144:../Dave/Generated/FREERTOS/tasks.c ****     }
1145:../Dave/Generated/FREERTOS/tasks.c ****     else
1146:../Dave/Generated/FREERTOS/tasks.c ****     {
1147:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1148:../Dave/Generated/FREERTOS/tasks.c ****     }
1149:../Dave/Generated/FREERTOS/tasks.c **** }
 601              	 .loc 1 1149 0
 602 00ae BD46     	 mov sp,r7
 603 00b0 02B0     	 add sp,sp,#8
 604              	 
 605 00b2 80BD     	 pop {r7,pc}
 606              	.L28:
 607              	 .align 2
 608              	.L27:
 609 00b4 00000000 	 .word uxCurrentNumberOfTasks
 610 00b8 00000000 	 .word pxCurrentTCB
 611 00bc 00000000 	 .word xSchedulerRunning
 612 00c0 00000000 	 .word uxTaskNumber
 613 00c4 00000000 	 .word uxTopReadyPriority
 614 00c8 00000000 	 .word pxReadyTasksLists
 615              	 .cfi_endproc
 616              	.LFE44:
 618              	 .section .text.vTaskDelete,"ax",%progbits
 619              	 .align 2
 620              	 .global vTaskDelete
 621              	 .code 16
 622              	 .thumb_func
 624              	vTaskDelete:
 625              	.LFB45:
1150:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1151:../Dave/Generated/FREERTOS/tasks.c **** 
1152:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1153:../Dave/Generated/FREERTOS/tasks.c **** 
1154:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:../Dave/Generated/FREERTOS/tasks.c ****     {
 626              	 .loc 1 1155 0
 627              	 .cfi_startproc
 628 0000 80B5     	 push {r7,lr}
 629              	.LCFI9:
 630              	 .cfi_def_cfa_offset 8
 631              	 .cfi_offset 7,-8
 632              	 .cfi_offset 14,-4
 633 0002 84B0     	 sub sp,sp,#16
 634              	.LCFI10:
 635              	 .cfi_def_cfa_offset 24
 636 0004 00AF     	 add r7,sp,#0
 637              	.LCFI11:
 638              	 .cfi_def_cfa_register 7
 639 0006 7860     	 str r0,[r7,#4]
1156:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1157:../Dave/Generated/FREERTOS/tasks.c **** 
1158:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 640              	 .loc 1 1158 0
 641 0008 FFF7FEFF 	 bl vPortEnterCritical
1159:../Dave/Generated/FREERTOS/tasks.c ****         {
1160:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1161:../Dave/Generated/FREERTOS/tasks.c ****              * being deleted. */
1162:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 642              	 .loc 1 1162 0
 643 000c 7B68     	 ldr r3,[r7,#4]
 644 000e 002B     	 cmp r3,#0
 645 0010 02D1     	 bne .L30
 646              	 .loc 1 1162 0 is_stmt 0 discriminator 1
 647 0012 254B     	 ldr r3,.L38
 648 0014 1B68     	 ldr r3,[r3]
 649 0016 00E0     	 b .L31
 650              	.L30:
 651              	 .loc 1 1162 0 discriminator 2
 652 0018 7B68     	 ldr r3,[r7,#4]
 653              	.L31:
 654              	 .loc 1 1162 0 discriminator 4
 655 001a FB60     	 str r3,[r7,#12]
1163:../Dave/Generated/FREERTOS/tasks.c **** 
1164:../Dave/Generated/FREERTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1165:../Dave/Generated/FREERTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 656              	 .loc 1 1165 0 is_stmt 1 discriminator 4
 657 001c FB68     	 ldr r3,[r7,#12]
 658 001e 0433     	 add r3,r3,#4
 659 0020 181C     	 mov r0,r3
 660 0022 FFF7FEFF 	 bl uxListRemove
1166:../Dave/Generated/FREERTOS/tasks.c ****             {
1167:../Dave/Generated/FREERTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1168:../Dave/Generated/FREERTOS/tasks.c ****             }
1169:../Dave/Generated/FREERTOS/tasks.c ****             else
1170:../Dave/Generated/FREERTOS/tasks.c ****             {
1171:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1172:../Dave/Generated/FREERTOS/tasks.c ****             }
1173:../Dave/Generated/FREERTOS/tasks.c **** 
1174:../Dave/Generated/FREERTOS/tasks.c ****             /* Is the task waiting on an event also? */
1175:../Dave/Generated/FREERTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 661              	 .loc 1 1175 0 discriminator 4
 662 0026 FB68     	 ldr r3,[r7,#12]
 663 0028 9B6A     	 ldr r3,[r3,#40]
 664 002a 002B     	 cmp r3,#0
 665 002c 04D0     	 beq .L32
1176:../Dave/Generated/FREERTOS/tasks.c ****             {
1177:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 666              	 .loc 1 1177 0
 667 002e FB68     	 ldr r3,[r7,#12]
 668 0030 1833     	 add r3,r3,#24
 669 0032 181C     	 mov r0,r3
 670 0034 FFF7FEFF 	 bl uxListRemove
 671              	.L32:
1178:../Dave/Generated/FREERTOS/tasks.c ****             }
1179:../Dave/Generated/FREERTOS/tasks.c ****             else
1180:../Dave/Generated/FREERTOS/tasks.c ****             {
1181:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1182:../Dave/Generated/FREERTOS/tasks.c ****             }
1183:../Dave/Generated/FREERTOS/tasks.c **** 
1184:../Dave/Generated/FREERTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:../Dave/Generated/FREERTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1186:../Dave/Generated/FREERTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:../Dave/Generated/FREERTOS/tasks.c ****              * not return. */
1188:../Dave/Generated/FREERTOS/tasks.c ****             uxTaskNumber++;
 672              	 .loc 1 1188 0
 673 0038 1C4B     	 ldr r3,.L38+4
 674 003a 1B68     	 ldr r3,[r3]
 675 003c 5A1C     	 add r2,r3,#1
 676 003e 1B4B     	 ldr r3,.L38+4
 677 0040 1A60     	 str r2,[r3]
1189:../Dave/Generated/FREERTOS/tasks.c **** 
1190:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 678              	 .loc 1 1190 0
 679 0042 194B     	 ldr r3,.L38
 680 0044 1B68     	 ldr r3,[r3]
 681 0046 FA68     	 ldr r2,[r7,#12]
 682 0048 9A42     	 cmp r2,r3
 683 004a 0CD1     	 bne .L33
1191:../Dave/Generated/FREERTOS/tasks.c ****             {
1192:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1193:../Dave/Generated/FREERTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1194:../Dave/Generated/FREERTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1195:../Dave/Generated/FREERTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1196:../Dave/Generated/FREERTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 684              	 .loc 1 1197 0
 685 004c FB68     	 ldr r3,[r7,#12]
 686 004e 0433     	 add r3,r3,#4
 687 0050 174A     	 ldr r2,.L38+8
 688 0052 101C     	 mov r0,r2
 689 0054 191C     	 mov r1,r3
 690 0056 FFF7FEFF 	 bl vListInsertEnd
1198:../Dave/Generated/FREERTOS/tasks.c **** 
1199:../Dave/Generated/FREERTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:../Dave/Generated/FREERTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1201:../Dave/Generated/FREERTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1202:../Dave/Generated/FREERTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
 691              	 .loc 1 1202 0
 692 005a 164B     	 ldr r3,.L38+12
 693 005c 1B68     	 ldr r3,[r3]
 694 005e 5A1C     	 add r2,r3,#1
 695 0060 144B     	 ldr r3,.L38+12
 696 0062 1A60     	 str r2,[r3]
 697 0064 0AE0     	 b .L34
 698              	.L33:
1203:../Dave/Generated/FREERTOS/tasks.c **** 
1204:../Dave/Generated/FREERTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:../Dave/Generated/FREERTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1207:../Dave/Generated/FREERTOS/tasks.c **** 
1208:../Dave/Generated/FREERTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:../Dave/Generated/FREERTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1210:../Dave/Generated/FREERTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1211:../Dave/Generated/FREERTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1212:../Dave/Generated/FREERTOS/tasks.c ****                  * required. */
1213:../Dave/Generated/FREERTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:../Dave/Generated/FREERTOS/tasks.c ****             }
1215:../Dave/Generated/FREERTOS/tasks.c ****             else
1216:../Dave/Generated/FREERTOS/tasks.c ****             {
1217:../Dave/Generated/FREERTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 699              	 .loc 1 1217 0
 700 0066 144B     	 ldr r3,.L38+16
 701 0068 1B68     	 ldr r3,[r3]
 702 006a 5A1E     	 sub r2,r3,#1
 703 006c 124B     	 ldr r3,.L38+16
 704 006e 1A60     	 str r2,[r3]
1218:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1219:../Dave/Generated/FREERTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 705              	 .loc 1 1219 0
 706 0070 FB68     	 ldr r3,[r7,#12]
 707 0072 181C     	 mov r0,r3
 708 0074 FFF7FEFF 	 bl prvDeleteTCB
1220:../Dave/Generated/FREERTOS/tasks.c **** 
1221:../Dave/Generated/FREERTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1222:../Dave/Generated/FREERTOS/tasks.c ****                  * the task that has just been deleted. */
1223:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 709              	 .loc 1 1223 0
 710 0078 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 711              	.L34:
1224:../Dave/Generated/FREERTOS/tasks.c ****             }
1225:../Dave/Generated/FREERTOS/tasks.c ****         }
1226:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 712              	 .loc 1 1226 0
 713 007c FFF7FEFF 	 bl vPortExitCritical
1227:../Dave/Generated/FREERTOS/tasks.c **** 
1228:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1229:../Dave/Generated/FREERTOS/tasks.c ****          * been deleted. */
1230:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 714              	 .loc 1 1230 0
 715 0080 0E4B     	 ldr r3,.L38+20
 716 0082 1B68     	 ldr r3,[r3]
 717 0084 002B     	 cmp r3,#0
 718 0086 0CD0     	 beq .L29
1231:../Dave/Generated/FREERTOS/tasks.c ****         {
1232:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 719              	 .loc 1 1232 0
 720 0088 074B     	 ldr r3,.L38
 721 008a 1B68     	 ldr r3,[r3]
 722 008c FA68     	 ldr r2,[r7,#12]
 723 008e 9A42     	 cmp r2,r3
 724 0090 07D1     	 bne .L29
1233:../Dave/Generated/FREERTOS/tasks.c ****             {
1234:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 725              	 .loc 1 1234 0
 726 0092 0B4B     	 ldr r3,.L38+24
 727 0094 1B68     	 ldr r3,[r3]
 728 0096 002B     	 cmp r3,#0
 729 0098 01D0     	 beq .L36
 730              	 .loc 1 1234 0 is_stmt 0 discriminator 1
 731              	
 732 009a 72B6     	 cpsid i
 733              	
 734              	 .code 16
 735              	.L37:
 736 009c FEE7     	 b .L37
 737              	.L36:
1235:../Dave/Generated/FREERTOS/tasks.c ****                 portYIELD_WITHIN_API();
 738              	 .loc 1 1235 0 is_stmt 1
 739 009e FFF7FEFF 	 bl vPortYield
 740              	.L29:
1236:../Dave/Generated/FREERTOS/tasks.c ****             }
1237:../Dave/Generated/FREERTOS/tasks.c ****             else
1238:../Dave/Generated/FREERTOS/tasks.c ****             {
1239:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1240:../Dave/Generated/FREERTOS/tasks.c ****             }
1241:../Dave/Generated/FREERTOS/tasks.c ****         }
1242:../Dave/Generated/FREERTOS/tasks.c ****     }
 741              	 .loc 1 1242 0
 742 00a2 BD46     	 mov sp,r7
 743 00a4 04B0     	 add sp,sp,#16
 744              	 
 745 00a6 80BD     	 pop {r7,pc}
 746              	.L39:
 747              	 .align 2
 748              	.L38:
 749 00a8 00000000 	 .word pxCurrentTCB
 750 00ac 00000000 	 .word uxTaskNumber
 751 00b0 00000000 	 .word xTasksWaitingTermination
 752 00b4 00000000 	 .word uxDeletedTasksWaitingCleanUp
 753 00b8 00000000 	 .word uxCurrentNumberOfTasks
 754 00bc 00000000 	 .word xSchedulerRunning
 755 00c0 00000000 	 .word uxSchedulerSuspended
 756              	 .cfi_endproc
 757              	.LFE45:
 759              	 .section .text.xTaskDelayUntil,"ax",%progbits
 760              	 .align 2
 761              	 .global xTaskDelayUntil
 762              	 .code 16
 763              	 .thumb_func
 765              	xTaskDelayUntil:
 766              	.LFB46:
1243:../Dave/Generated/FREERTOS/tasks.c **** 
1244:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1246:../Dave/Generated/FREERTOS/tasks.c **** 
1247:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1248:../Dave/Generated/FREERTOS/tasks.c **** 
1249:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1250:../Dave/Generated/FREERTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1251:../Dave/Generated/FREERTOS/tasks.c ****     {
 767              	 .loc 1 1251 0
 768              	 .cfi_startproc
 769 0000 80B5     	 push {r7,lr}
 770              	.LCFI12:
 771              	 .cfi_def_cfa_offset 8
 772              	 .cfi_offset 7,-8
 773              	 .cfi_offset 14,-4
 774 0002 86B0     	 sub sp,sp,#24
 775              	.LCFI13:
 776              	 .cfi_def_cfa_offset 32
 777 0004 00AF     	 add r7,sp,#0
 778              	.LCFI14:
 779              	 .cfi_def_cfa_register 7
 780 0006 7860     	 str r0,[r7,#4]
 781 0008 3960     	 str r1,[r7]
1252:../Dave/Generated/FREERTOS/tasks.c ****         TickType_t xTimeToWake;
1253:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 782              	 .loc 1 1253 0
 783 000a 0023     	 mov r3,#0
 784 000c 7B61     	 str r3,[r7,#20]
1254:../Dave/Generated/FREERTOS/tasks.c **** 
1255:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
 785              	 .loc 1 1255 0
 786 000e 7B68     	 ldr r3,[r7,#4]
 787 0010 002B     	 cmp r3,#0
 788 0012 01D1     	 bne .L41
 789              	 .loc 1 1255 0 is_stmt 0 discriminator 1
 790              	
 791 0014 72B6     	 cpsid i
 792              	
 793              	 .code 16
 794              	.L42:
 795 0016 FEE7     	 b .L42
 796              	.L41:
1256:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 797              	 .loc 1 1256 0 is_stmt 1
 798 0018 3B68     	 ldr r3,[r7]
 799 001a 002B     	 cmp r3,#0
 800 001c 01D1     	 bne .L43
 801              	 .loc 1 1256 0 is_stmt 0 discriminator 1
 802              	
 803 001e 72B6     	 cpsid i
 804              	
 805              	 .code 16
 806              	.L44:
 807              	 .loc 1 1256 0 discriminator 2
 808 0020 FEE7     	 b .L44
 809              	.L43:
1257:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 810              	 .loc 1 1257 0 is_stmt 1
 811 0022 234B     	 ldr r3,.L53
 812 0024 1B68     	 ldr r3,[r3]
 813 0026 002B     	 cmp r3,#0
 814 0028 01D0     	 beq .L45
 815              	 .loc 1 1257 0 is_stmt 0 discriminator 1
 816              	
 817 002a 72B6     	 cpsid i
 818              	
 819              	 .code 16
 820              	.L46:
 821              	 .loc 1 1257 0 discriminator 3
 822 002c FEE7     	 b .L46
 823              	.L45:
1258:../Dave/Generated/FREERTOS/tasks.c **** 
1259:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 824              	 .loc 1 1259 0 is_stmt 1
 825 002e FFF7FEFF 	 bl vTaskSuspendAll
 826              	.LBB3:
1260:../Dave/Generated/FREERTOS/tasks.c ****         {
1261:../Dave/Generated/FREERTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1262:../Dave/Generated/FREERTOS/tasks.c ****              * block. */
1263:../Dave/Generated/FREERTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
 827              	 .loc 1 1263 0
 828 0032 204B     	 ldr r3,.L53+4
 829 0034 1B68     	 ldr r3,[r3]
 830 0036 3B61     	 str r3,[r7,#16]
1264:../Dave/Generated/FREERTOS/tasks.c **** 
1265:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1266:../Dave/Generated/FREERTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 831              	 .loc 1 1266 0
 832 0038 7B68     	 ldr r3,[r7,#4]
 833 003a 1A68     	 ldr r2,[r3]
 834 003c 3B68     	 ldr r3,[r7]
 835 003e D318     	 add r3,r2,r3
 836 0040 FB60     	 str r3,[r7,#12]
1267:../Dave/Generated/FREERTOS/tasks.c **** 
1268:../Dave/Generated/FREERTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
 837              	 .loc 1 1268 0
 838 0042 7B68     	 ldr r3,[r7,#4]
 839 0044 1A68     	 ldr r2,[r3]
 840 0046 3B69     	 ldr r3,[r7,#16]
 841 0048 9A42     	 cmp r2,r3
 842 004a 0BD9     	 bls .L47
1269:../Dave/Generated/FREERTOS/tasks.c ****             {
1270:../Dave/Generated/FREERTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1271:../Dave/Generated/FREERTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1272:../Dave/Generated/FREERTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1273:../Dave/Generated/FREERTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1274:../Dave/Generated/FREERTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1275:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 843              	 .loc 1 1275 0
 844 004c 7B68     	 ldr r3,[r7,#4]
 845 004e 1A68     	 ldr r2,[r3]
 846 0050 FB68     	 ldr r3,[r7,#12]
 847 0052 9A42     	 cmp r2,r3
 848 0054 11D9     	 bls .L48
 849              	 .loc 1 1275 0 is_stmt 0 discriminator 1
 850 0056 FA68     	 ldr r2,[r7,#12]
 851 0058 3B69     	 ldr r3,[r7,#16]
 852 005a 9A42     	 cmp r2,r3
 853 005c 0DD9     	 bls .L48
1276:../Dave/Generated/FREERTOS/tasks.c ****                 {
1277:../Dave/Generated/FREERTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 854              	 .loc 1 1277 0 is_stmt 1
 855 005e 0123     	 mov r3,#1
 856 0060 7B61     	 str r3,[r7,#20]
 857 0062 0AE0     	 b .L48
 858              	.L47:
1278:../Dave/Generated/FREERTOS/tasks.c ****                 }
1279:../Dave/Generated/FREERTOS/tasks.c ****                 else
1280:../Dave/Generated/FREERTOS/tasks.c ****                 {
1281:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1282:../Dave/Generated/FREERTOS/tasks.c ****                 }
1283:../Dave/Generated/FREERTOS/tasks.c ****             }
1284:../Dave/Generated/FREERTOS/tasks.c ****             else
1285:../Dave/Generated/FREERTOS/tasks.c ****             {
1286:../Dave/Generated/FREERTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1287:../Dave/Generated/FREERTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1288:../Dave/Generated/FREERTOS/tasks.c ****                  * tick time is less than the wake time. */
1289:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 859              	 .loc 1 1289 0
 860 0064 7B68     	 ldr r3,[r7,#4]
 861 0066 1A68     	 ldr r2,[r3]
 862 0068 FB68     	 ldr r3,[r7,#12]
 863 006a 9A42     	 cmp r2,r3
 864 006c 03D8     	 bhi .L49
 865              	 .loc 1 1289 0 is_stmt 0 discriminator 1
 866 006e FA68     	 ldr r2,[r7,#12]
 867 0070 3B69     	 ldr r3,[r7,#16]
 868 0072 9A42     	 cmp r2,r3
 869 0074 01D9     	 bls .L48
 870              	.L49:
1290:../Dave/Generated/FREERTOS/tasks.c ****                 {
1291:../Dave/Generated/FREERTOS/tasks.c ****                     xShouldDelay = pdTRUE;
 871              	 .loc 1 1291 0 is_stmt 1
 872 0076 0123     	 mov r3,#1
 873 0078 7B61     	 str r3,[r7,#20]
 874              	.L48:
1292:../Dave/Generated/FREERTOS/tasks.c ****                 }
1293:../Dave/Generated/FREERTOS/tasks.c ****                 else
1294:../Dave/Generated/FREERTOS/tasks.c ****                 {
1295:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1296:../Dave/Generated/FREERTOS/tasks.c ****                 }
1297:../Dave/Generated/FREERTOS/tasks.c ****             }
1298:../Dave/Generated/FREERTOS/tasks.c **** 
1299:../Dave/Generated/FREERTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1300:../Dave/Generated/FREERTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
 875              	 .loc 1 1300 0
 876 007a 7B68     	 ldr r3,[r7,#4]
 877 007c FA68     	 ldr r2,[r7,#12]
 878 007e 1A60     	 str r2,[r3]
1301:../Dave/Generated/FREERTOS/tasks.c **** 
1302:../Dave/Generated/FREERTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
 879              	 .loc 1 1302 0
 880 0080 7B69     	 ldr r3,[r7,#20]
 881 0082 002B     	 cmp r3,#0
 882 0084 06D0     	 beq .L50
1303:../Dave/Generated/FREERTOS/tasks.c ****             {
1304:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1305:../Dave/Generated/FREERTOS/tasks.c **** 
1306:../Dave/Generated/FREERTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1307:../Dave/Generated/FREERTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1308:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 883              	 .loc 1 1308 0
 884 0086 FA68     	 ldr r2,[r7,#12]
 885 0088 3B69     	 ldr r3,[r7,#16]
 886 008a D31A     	 sub r3,r2,r3
 887 008c 181C     	 mov r0,r3
 888 008e 0021     	 mov r1,#0
 889 0090 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 890              	.L50:
 891              	.LBE3:
1309:../Dave/Generated/FREERTOS/tasks.c ****             }
1310:../Dave/Generated/FREERTOS/tasks.c ****             else
1311:../Dave/Generated/FREERTOS/tasks.c ****             {
1312:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1313:../Dave/Generated/FREERTOS/tasks.c ****             }
1314:../Dave/Generated/FREERTOS/tasks.c ****         }
1315:../Dave/Generated/FREERTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
 892              	 .loc 1 1315 0
 893 0094 FFF7FEFF 	 bl xTaskResumeAll
 894 0098 031C     	 mov r3,r0
 895 009a BB60     	 str r3,[r7,#8]
1316:../Dave/Generated/FREERTOS/tasks.c **** 
1317:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1318:../Dave/Generated/FREERTOS/tasks.c ****          * have put ourselves to sleep. */
1319:../Dave/Generated/FREERTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 896              	 .loc 1 1319 0
 897 009c BB68     	 ldr r3,[r7,#8]
 898 009e 002B     	 cmp r3,#0
 899 00a0 01D1     	 bne .L51
1320:../Dave/Generated/FREERTOS/tasks.c ****         {
1321:../Dave/Generated/FREERTOS/tasks.c ****             portYIELD_WITHIN_API();
 900              	 .loc 1 1321 0
 901 00a2 FFF7FEFF 	 bl vPortYield
 902              	.L51:
1322:../Dave/Generated/FREERTOS/tasks.c ****         }
1323:../Dave/Generated/FREERTOS/tasks.c ****         else
1324:../Dave/Generated/FREERTOS/tasks.c ****         {
1325:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1326:../Dave/Generated/FREERTOS/tasks.c ****         }
1327:../Dave/Generated/FREERTOS/tasks.c **** 
1328:../Dave/Generated/FREERTOS/tasks.c ****         return xShouldDelay;
 903              	 .loc 1 1328 0
 904 00a6 7B69     	 ldr r3,[r7,#20]
1329:../Dave/Generated/FREERTOS/tasks.c ****     }
 905              	 .loc 1 1329 0
 906 00a8 181C     	 mov r0,r3
 907 00aa BD46     	 mov sp,r7
 908 00ac 06B0     	 add sp,sp,#24
 909              	 
 910 00ae 80BD     	 pop {r7,pc}
 911              	.L54:
 912              	 .align 2
 913              	.L53:
 914 00b0 00000000 	 .word uxSchedulerSuspended
 915 00b4 00000000 	 .word xTickCount
 916              	 .cfi_endproc
 917              	.LFE46:
 919              	 .section .text.vTaskDelay,"ax",%progbits
 920              	 .align 2
 921              	 .global vTaskDelay
 922              	 .code 16
 923              	 .thumb_func
 925              	vTaskDelay:
 926              	.LFB47:
1330:../Dave/Generated/FREERTOS/tasks.c **** 
1331:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1332:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1333:../Dave/Generated/FREERTOS/tasks.c **** 
1334:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1335:../Dave/Generated/FREERTOS/tasks.c **** 
1336:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1337:../Dave/Generated/FREERTOS/tasks.c ****     {
 927              	 .loc 1 1337 0
 928              	 .cfi_startproc
 929 0000 80B5     	 push {r7,lr}
 930              	.LCFI15:
 931              	 .cfi_def_cfa_offset 8
 932              	 .cfi_offset 7,-8
 933              	 .cfi_offset 14,-4
 934 0002 84B0     	 sub sp,sp,#16
 935              	.LCFI16:
 936              	 .cfi_def_cfa_offset 24
 937 0004 00AF     	 add r7,sp,#0
 938              	.LCFI17:
 939              	 .cfi_def_cfa_register 7
 940 0006 7860     	 str r0,[r7,#4]
1338:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 941              	 .loc 1 1338 0
 942 0008 0023     	 mov r3,#0
 943 000a FB60     	 str r3,[r7,#12]
1339:../Dave/Generated/FREERTOS/tasks.c **** 
1340:../Dave/Generated/FREERTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1341:../Dave/Generated/FREERTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
 944              	 .loc 1 1341 0
 945 000c 7B68     	 ldr r3,[r7,#4]
 946 000e 002B     	 cmp r3,#0
 947 0010 10D0     	 beq .L56
1342:../Dave/Generated/FREERTOS/tasks.c ****         {
1343:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
 948              	 .loc 1 1343 0
 949 0012 0C4B     	 ldr r3,.L60
 950 0014 1B68     	 ldr r3,[r3]
 951 0016 002B     	 cmp r3,#0
 952 0018 01D0     	 beq .L57
 953              	 .loc 1 1343 0 is_stmt 0 discriminator 1
 954              	
 955 001a 72B6     	 cpsid i
 956              	
 957              	 .code 16
 958              	.L58:
 959 001c FEE7     	 b .L58
 960              	.L57:
1344:../Dave/Generated/FREERTOS/tasks.c ****             vTaskSuspendAll();
 961              	 .loc 1 1344 0 is_stmt 1
 962 001e FFF7FEFF 	 bl vTaskSuspendAll
1345:../Dave/Generated/FREERTOS/tasks.c ****             {
1346:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_DELAY();
1347:../Dave/Generated/FREERTOS/tasks.c **** 
1348:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task that is removed from the event list while the
1349:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1350:../Dave/Generated/FREERTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1351:../Dave/Generated/FREERTOS/tasks.c ****                  * is resumed.
1352:../Dave/Generated/FREERTOS/tasks.c ****                  *
1353:../Dave/Generated/FREERTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1354:../Dave/Generated/FREERTOS/tasks.c ****                  * executing task. */
1355:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 963              	 .loc 1 1355 0
 964 0022 7B68     	 ldr r3,[r7,#4]
 965 0024 181C     	 mov r0,r3
 966 0026 0021     	 mov r1,#0
 967 0028 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
1356:../Dave/Generated/FREERTOS/tasks.c ****             }
1357:../Dave/Generated/FREERTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
 968              	 .loc 1 1357 0
 969 002c FFF7FEFF 	 bl xTaskResumeAll
 970 0030 031C     	 mov r3,r0
 971 0032 FB60     	 str r3,[r7,#12]
 972              	.L56:
1358:../Dave/Generated/FREERTOS/tasks.c ****         }
1359:../Dave/Generated/FREERTOS/tasks.c ****         else
1360:../Dave/Generated/FREERTOS/tasks.c ****         {
1361:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1362:../Dave/Generated/FREERTOS/tasks.c ****         }
1363:../Dave/Generated/FREERTOS/tasks.c **** 
1364:../Dave/Generated/FREERTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1365:../Dave/Generated/FREERTOS/tasks.c ****          * have put ourselves to sleep. */
1366:../Dave/Generated/FREERTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
 973              	 .loc 1 1366 0
 974 0034 FB68     	 ldr r3,[r7,#12]
 975 0036 002B     	 cmp r3,#0
 976 0038 01D1     	 bne .L55
1367:../Dave/Generated/FREERTOS/tasks.c ****         {
1368:../Dave/Generated/FREERTOS/tasks.c ****             portYIELD_WITHIN_API();
 977              	 .loc 1 1368 0
 978 003a FFF7FEFF 	 bl vPortYield
 979              	.L55:
1369:../Dave/Generated/FREERTOS/tasks.c ****         }
1370:../Dave/Generated/FREERTOS/tasks.c ****         else
1371:../Dave/Generated/FREERTOS/tasks.c ****         {
1372:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1373:../Dave/Generated/FREERTOS/tasks.c ****         }
1374:../Dave/Generated/FREERTOS/tasks.c ****     }
 980              	 .loc 1 1374 0
 981 003e BD46     	 mov sp,r7
 982 0040 04B0     	 add sp,sp,#16
 983              	 
 984 0042 80BD     	 pop {r7,pc}
 985              	.L61:
 986              	 .align 2
 987              	.L60:
 988 0044 00000000 	 .word uxSchedulerSuspended
 989              	 .cfi_endproc
 990              	.LFE47:
 992              	 .section .text.eTaskGetState,"ax",%progbits
 993              	 .align 2
 994              	 .global eTaskGetState
 995              	 .code 16
 996              	 .thumb_func
 998              	eTaskGetState:
 999              	.LFB48:
1375:../Dave/Generated/FREERTOS/tasks.c **** 
1376:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1377:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1378:../Dave/Generated/FREERTOS/tasks.c **** 
1379:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1380:../Dave/Generated/FREERTOS/tasks.c **** 
1381:../Dave/Generated/FREERTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1382:../Dave/Generated/FREERTOS/tasks.c ****     {
 1000              	 .loc 1 1382 0
 1001              	 .cfi_startproc
 1002 0000 80B5     	 push {r7,lr}
 1003              	.LCFI18:
 1004              	 .cfi_def_cfa_offset 8
 1005              	 .cfi_offset 7,-8
 1006              	 .cfi_offset 14,-4
 1007 0002 88B0     	 sub sp,sp,#32
 1008              	.LCFI19:
 1009              	 .cfi_def_cfa_offset 40
 1010 0004 00AF     	 add r7,sp,#0
 1011              	.LCFI20:
 1012              	 .cfi_def_cfa_register 7
 1013 0006 7860     	 str r0,[r7,#4]
1383:../Dave/Generated/FREERTOS/tasks.c ****         eTaskState eReturn;
1384:../Dave/Generated/FREERTOS/tasks.c ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1385:../Dave/Generated/FREERTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1014              	 .loc 1 1385 0
 1015 0008 7B68     	 ldr r3,[r7,#4]
 1016 000a 7B61     	 str r3,[r7,#20]
1386:../Dave/Generated/FREERTOS/tasks.c **** 
1387:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTCB );
 1017              	 .loc 1 1387 0
 1018 000c 7B69     	 ldr r3,[r7,#20]
 1019 000e 002B     	 cmp r3,#0
 1020 0010 01D1     	 bne .L63
 1021              	 .loc 1 1387 0 is_stmt 0 discriminator 1
 1022              	
 1023 0012 72B6     	 cpsid i
 1024              	
 1025              	 .code 16
 1026              	.L64:
 1027 0014 FEE7     	 b .L64
 1028              	.L63:
1388:../Dave/Generated/FREERTOS/tasks.c **** 
1389:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1029              	 .loc 1 1389 0 is_stmt 1
 1030 0016 324B     	 ldr r3,.L79
 1031 0018 1B68     	 ldr r3,[r3]
 1032 001a 7A69     	 ldr r2,[r7,#20]
 1033 001c 9A42     	 cmp r2,r3
 1034 001e 04D1     	 bne .L65
1390:../Dave/Generated/FREERTOS/tasks.c ****         {
1391:../Dave/Generated/FREERTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1392:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eRunning;
 1035              	 .loc 1 1392 0
 1036 0020 1F23     	 mov r3,#31
 1037 0022 FB18     	 add r3,r7,r3
 1038 0024 0022     	 mov r2,#0
 1039 0026 1A70     	 strb r2,[r3]
 1040 0028 52E0     	 b .L66
 1041              	.L65:
1393:../Dave/Generated/FREERTOS/tasks.c ****         }
1394:../Dave/Generated/FREERTOS/tasks.c ****         else
1395:../Dave/Generated/FREERTOS/tasks.c ****         {
1396:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1042              	 .loc 1 1396 0
 1043 002a FFF7FEFF 	 bl vPortEnterCritical
1397:../Dave/Generated/FREERTOS/tasks.c ****             {
1398:../Dave/Generated/FREERTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1044              	 .loc 1 1398 0
 1045 002e 7B69     	 ldr r3,[r7,#20]
 1046 0030 5B69     	 ldr r3,[r3,#20]
 1047 0032 3B61     	 str r3,[r7,#16]
1399:../Dave/Generated/FREERTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 1048              	 .loc 1 1399 0
 1049 0034 2B4B     	 ldr r3,.L79+4
 1050 0036 1B68     	 ldr r3,[r3]
 1051 0038 FB60     	 str r3,[r7,#12]
1400:../Dave/Generated/FREERTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1052              	 .loc 1 1400 0
 1053 003a 2B4B     	 ldr r3,.L79+8
 1054 003c 1B68     	 ldr r3,[r3]
 1055 003e BB60     	 str r3,[r7,#8]
1401:../Dave/Generated/FREERTOS/tasks.c ****             }
1402:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1056              	 .loc 1 1402 0
 1057 0040 FFF7FEFF 	 bl vPortExitCritical
1403:../Dave/Generated/FREERTOS/tasks.c **** 
1404:../Dave/Generated/FREERTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1058              	 .loc 1 1404 0
 1059 0044 3A69     	 ldr r2,[r7,#16]
 1060 0046 FB68     	 ldr r3,[r7,#12]
 1061 0048 9A42     	 cmp r2,r3
 1062 004a 03D0     	 beq .L67
 1063              	 .loc 1 1404 0 is_stmt 0 discriminator 1
 1064 004c 3A69     	 ldr r2,[r7,#16]
 1065 004e BB68     	 ldr r3,[r7,#8]
 1066 0050 9A42     	 cmp r2,r3
 1067 0052 04D1     	 bne .L68
 1068              	.L67:
1405:../Dave/Generated/FREERTOS/tasks.c ****             {
1406:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1407:../Dave/Generated/FREERTOS/tasks.c ****                  * lists. */
1408:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eBlocked;
 1069              	 .loc 1 1408 0 is_stmt 1
 1070 0054 1F23     	 mov r3,#31
 1071 0056 FB18     	 add r3,r7,r3
 1072 0058 0222     	 mov r2,#2
 1073 005a 1A70     	 strb r2,[r3]
 1074 005c 38E0     	 b .L66
 1075              	.L68:
1409:../Dave/Generated/FREERTOS/tasks.c ****             }
1410:../Dave/Generated/FREERTOS/tasks.c **** 
1411:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1412:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
 1076              	 .loc 1 1412 0
 1077 005e 3A69     	 ldr r2,[r7,#16]
 1078 0060 224B     	 ldr r3,.L79+12
 1079 0062 9A42     	 cmp r2,r3
 1080 0064 24D1     	 bne .L69
1413:../Dave/Generated/FREERTOS/tasks.c ****                 {
1414:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1415:../Dave/Generated/FREERTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1416:../Dave/Generated/FREERTOS/tasks.c ****                      * indefinitely? */
1417:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1081              	 .loc 1 1417 0
 1082 0066 7B69     	 ldr r3,[r7,#20]
 1083 0068 9B6A     	 ldr r3,[r3,#40]
 1084 006a 002B     	 cmp r3,#0
 1085 006c 1BD1     	 bne .L70
 1086              	.LBB4:
1418:../Dave/Generated/FREERTOS/tasks.c ****                     {
1419:../Dave/Generated/FREERTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1420:../Dave/Generated/FREERTOS/tasks.c ****                             {
1421:../Dave/Generated/FREERTOS/tasks.c ****                                 BaseType_t x;
1422:../Dave/Generated/FREERTOS/tasks.c **** 
1423:../Dave/Generated/FREERTOS/tasks.c ****                                 /* The task does not appear on the event list item of
1424:../Dave/Generated/FREERTOS/tasks.c ****                                  * and of the RTOS objects, but could still be in the
1425:../Dave/Generated/FREERTOS/tasks.c ****                                  * blocked state if it is waiting on its notification
1426:../Dave/Generated/FREERTOS/tasks.c ****                                  * rather than waiting on an object.  If not, is
1427:../Dave/Generated/FREERTOS/tasks.c ****                                  * suspended. */
1428:../Dave/Generated/FREERTOS/tasks.c ****                                 eReturn = eSuspended;
 1087              	 .loc 1 1428 0
 1088 006e 1F23     	 mov r3,#31
 1089 0070 FB18     	 add r3,r7,r3
 1090 0072 0322     	 mov r2,#3
 1091 0074 1A70     	 strb r2,[r3]
1429:../Dave/Generated/FREERTOS/tasks.c **** 
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1092              	 .loc 1 1430 0
 1093 0076 0023     	 mov r3,#0
 1094 0078 BB61     	 str r3,[r7,#24]
 1095 007a 10E0     	 b .L71
 1096              	.L74:
1431:../Dave/Generated/FREERTOS/tasks.c ****                                 {
1432:../Dave/Generated/FREERTOS/tasks.c ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1097              	 .loc 1 1432 0
 1098 007c 7A69     	 ldr r2,[r7,#20]
 1099 007e 6821     	 mov r1,#104
 1100 0080 BB69     	 ldr r3,[r7,#24]
 1101 0082 D318     	 add r3,r2,r3
 1102 0084 5B18     	 add r3,r3,r1
 1103 0086 1B79     	 ldrb r3,[r3,#4]
 1104 0088 DBB2     	 uxtb r3,r3
 1105 008a 012B     	 cmp r3,#1
 1106 008c 04D1     	 bne .L72
1433:../Dave/Generated/FREERTOS/tasks.c ****                                     {
1434:../Dave/Generated/FREERTOS/tasks.c ****                                         eReturn = eBlocked;
 1107              	 .loc 1 1434 0
 1108 008e 1F23     	 mov r3,#31
 1109 0090 FB18     	 add r3,r7,r3
 1110 0092 0222     	 mov r2,#2
 1111 0094 1A70     	 strb r2,[r3]
1435:../Dave/Generated/FREERTOS/tasks.c ****                                         break;
 1112              	 .loc 1 1435 0
 1113 0096 05E0     	 b .L73
 1114              	.L72:
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 {
 1115              	 .loc 1 1430 0 discriminator 2
 1116 0098 BB69     	 ldr r3,[r7,#24]
 1117 009a 0133     	 add r3,r3,#1
 1118 009c BB61     	 str r3,[r7,#24]
 1119              	.L71:
1430:../Dave/Generated/FREERTOS/tasks.c ****                                 {
 1120              	 .loc 1 1430 0 is_stmt 0 discriminator 1
 1121 009e BB69     	 ldr r3,[r7,#24]
 1122 00a0 002B     	 cmp r3,#0
 1123 00a2 EBDD     	 ble .L74
 1124              	.L73:
 1125              	.LBE4:
 1126 00a4 14E0     	 b .L66
 1127              	.L70:
1436:../Dave/Generated/FREERTOS/tasks.c ****                                     }
1437:../Dave/Generated/FREERTOS/tasks.c ****                                 }
1438:../Dave/Generated/FREERTOS/tasks.c ****                             }
1439:../Dave/Generated/FREERTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1440:../Dave/Generated/FREERTOS/tasks.c ****                             {
1441:../Dave/Generated/FREERTOS/tasks.c ****                                 eReturn = eSuspended;
1442:../Dave/Generated/FREERTOS/tasks.c ****                             }
1443:../Dave/Generated/FREERTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1444:../Dave/Generated/FREERTOS/tasks.c ****                     }
1445:../Dave/Generated/FREERTOS/tasks.c ****                     else
1446:../Dave/Generated/FREERTOS/tasks.c ****                     {
1447:../Dave/Generated/FREERTOS/tasks.c ****                         eReturn = eBlocked;
 1128              	 .loc 1 1447 0 is_stmt 1
 1129 00a6 1F23     	 mov r3,#31
 1130 00a8 FB18     	 add r3,r7,r3
 1131 00aa 0222     	 mov r2,#2
 1132 00ac 1A70     	 strb r2,[r3]
 1133 00ae 0FE0     	 b .L66
 1134              	.L69:
1448:../Dave/Generated/FREERTOS/tasks.c ****                     }
1449:../Dave/Generated/FREERTOS/tasks.c ****                 }
1450:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1451:../Dave/Generated/FREERTOS/tasks.c **** 
1452:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1453:../Dave/Generated/FREERTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1135              	 .loc 1 1453 0
 1136 00b0 3A69     	 ldr r2,[r7,#16]
 1137 00b2 0F4B     	 ldr r3,.L79+16
 1138 00b4 9A42     	 cmp r2,r3
 1139 00b6 02D0     	 beq .L76
 1140              	 .loc 1 1453 0 is_stmt 0 discriminator 1
 1141 00b8 3B69     	 ldr r3,[r7,#16]
 1142 00ba 002B     	 cmp r3,#0
 1143 00bc 04D1     	 bne .L77
 1144              	.L76:
1454:../Dave/Generated/FREERTOS/tasks.c ****                 {
1455:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1456:../Dave/Generated/FREERTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1457:../Dave/Generated/FREERTOS/tasks.c ****                      * all. */
1458:../Dave/Generated/FREERTOS/tasks.c ****                     eReturn = eDeleted;
 1145              	 .loc 1 1458 0 is_stmt 1
 1146 00be 1F23     	 mov r3,#31
 1147 00c0 FB18     	 add r3,r7,r3
 1148 00c2 0422     	 mov r2,#4
 1149 00c4 1A70     	 strb r2,[r3]
 1150 00c6 03E0     	 b .L66
 1151              	.L77:
1459:../Dave/Generated/FREERTOS/tasks.c ****                 }
1460:../Dave/Generated/FREERTOS/tasks.c ****             #endif
1461:../Dave/Generated/FREERTOS/tasks.c **** 
1462:../Dave/Generated/FREERTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1463:../Dave/Generated/FREERTOS/tasks.c ****             {
1464:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1465:../Dave/Generated/FREERTOS/tasks.c ****                  * Ready (including pending ready) state. */
1466:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eReady;
 1152              	 .loc 1 1466 0
 1153 00c8 1F23     	 mov r3,#31
 1154 00ca FB18     	 add r3,r7,r3
 1155 00cc 0122     	 mov r2,#1
 1156 00ce 1A70     	 strb r2,[r3]
 1157              	.L66:
1467:../Dave/Generated/FREERTOS/tasks.c ****             }
1468:../Dave/Generated/FREERTOS/tasks.c ****         }
1469:../Dave/Generated/FREERTOS/tasks.c **** 
1470:../Dave/Generated/FREERTOS/tasks.c ****         return eReturn;
 1158              	 .loc 1 1470 0
 1159 00d0 1F23     	 mov r3,#31
 1160 00d2 FB18     	 add r3,r7,r3
 1161 00d4 1B78     	 ldrb r3,[r3]
1471:../Dave/Generated/FREERTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1162              	 .loc 1 1471 0
 1163 00d6 181C     	 mov r0,r3
 1164 00d8 BD46     	 mov sp,r7
 1165 00da 08B0     	 add sp,sp,#32
 1166              	 
 1167 00dc 80BD     	 pop {r7,pc}
 1168              	.L80:
 1169 00de C046     	 .align 2
 1170              	.L79:
 1171 00e0 00000000 	 .word pxCurrentTCB
 1172 00e4 00000000 	 .word pxDelayedTaskList
 1173 00e8 00000000 	 .word pxOverflowDelayedTaskList
 1174 00ec 00000000 	 .word xSuspendedTaskList
 1175 00f0 00000000 	 .word xTasksWaitingTermination
 1176              	 .cfi_endproc
 1177              	.LFE48:
 1179              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1180              	 .align 2
 1181              	 .global uxTaskPriorityGet
 1182              	 .code 16
 1183              	 .thumb_func
 1185              	uxTaskPriorityGet:
 1186              	.LFB49:
1472:../Dave/Generated/FREERTOS/tasks.c **** 
1473:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1475:../Dave/Generated/FREERTOS/tasks.c **** 
1476:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:../Dave/Generated/FREERTOS/tasks.c **** 
1478:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:../Dave/Generated/FREERTOS/tasks.c ****     {
 1187              	 .loc 1 1479 0
 1188              	 .cfi_startproc
 1189 0000 80B5     	 push {r7,lr}
 1190              	.LCFI21:
 1191              	 .cfi_def_cfa_offset 8
 1192              	 .cfi_offset 7,-8
 1193              	 .cfi_offset 14,-4
 1194 0002 84B0     	 sub sp,sp,#16
 1195              	.LCFI22:
 1196              	 .cfi_def_cfa_offset 24
 1197 0004 00AF     	 add r7,sp,#0
 1198              	.LCFI23:
 1199              	 .cfi_def_cfa_register 7
 1200 0006 7860     	 str r0,[r7,#4]
1480:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
1481:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
1482:../Dave/Generated/FREERTOS/tasks.c **** 
1483:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1201              	 .loc 1 1483 0
 1202 0008 FFF7FEFF 	 bl vPortEnterCritical
1484:../Dave/Generated/FREERTOS/tasks.c ****         {
1485:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1486:../Dave/Generated/FREERTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1487:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1203              	 .loc 1 1487 0
 1204 000c 7B68     	 ldr r3,[r7,#4]
 1205 000e 002B     	 cmp r3,#0
 1206 0010 02D1     	 bne .L82
 1207              	 .loc 1 1487 0 is_stmt 0 discriminator 1
 1208 0012 074B     	 ldr r3,.L85
 1209 0014 1B68     	 ldr r3,[r3]
 1210 0016 00E0     	 b .L83
 1211              	.L82:
 1212              	 .loc 1 1487 0 discriminator 2
 1213 0018 7B68     	 ldr r3,[r7,#4]
 1214              	.L83:
 1215              	 .loc 1 1487 0 discriminator 4
 1216 001a FB60     	 str r3,[r7,#12]
1488:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1217              	 .loc 1 1488 0 is_stmt 1 discriminator 4
 1218 001c FB68     	 ldr r3,[r7,#12]
 1219 001e DB6A     	 ldr r3,[r3,#44]
 1220 0020 BB60     	 str r3,[r7,#8]
1489:../Dave/Generated/FREERTOS/tasks.c ****         }
1490:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1221              	 .loc 1 1490 0 discriminator 4
 1222 0022 FFF7FEFF 	 bl vPortExitCritical
1491:../Dave/Generated/FREERTOS/tasks.c **** 
1492:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 1223              	 .loc 1 1492 0 discriminator 4
 1224 0026 BB68     	 ldr r3,[r7,#8]
1493:../Dave/Generated/FREERTOS/tasks.c ****     }
 1225              	 .loc 1 1493 0 discriminator 4
 1226 0028 181C     	 mov r0,r3
 1227 002a BD46     	 mov sp,r7
 1228 002c 04B0     	 add sp,sp,#16
 1229              	 
 1230 002e 80BD     	 pop {r7,pc}
 1231              	.L86:
 1232              	 .align 2
 1233              	.L85:
 1234 0030 00000000 	 .word pxCurrentTCB
 1235              	 .cfi_endproc
 1236              	.LFE49:
 1238              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1239              	 .align 2
 1240              	 .global uxTaskPriorityGetFromISR
 1241              	 .code 16
 1242              	 .thumb_func
 1244              	uxTaskPriorityGetFromISR:
 1245              	.LFB50:
1494:../Dave/Generated/FREERTOS/tasks.c **** 
1495:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1497:../Dave/Generated/FREERTOS/tasks.c **** 
1498:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:../Dave/Generated/FREERTOS/tasks.c **** 
1500:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:../Dave/Generated/FREERTOS/tasks.c ****     {
 1246              	 .loc 1 1501 0
 1247              	 .cfi_startproc
 1248 0000 80B5     	 push {r7,lr}
 1249              	.LCFI24:
 1250              	 .cfi_def_cfa_offset 8
 1251              	 .cfi_offset 7,-8
 1252              	 .cfi_offset 14,-4
 1253 0002 86B0     	 sub sp,sp,#24
 1254              	.LCFI25:
 1255              	 .cfi_def_cfa_offset 32
 1256 0004 00AF     	 add r7,sp,#0
 1257              	.LCFI26:
 1258              	 .cfi_def_cfa_register 7
 1259 0006 7860     	 str r0,[r7,#4]
1502:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
1503:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1504:../Dave/Generated/FREERTOS/tasks.c **** 
1505:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1506:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1507:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1508:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1509:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1511:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1513:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1514:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1515:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1516:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1518:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1519:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
1520:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1521:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:../Dave/Generated/FREERTOS/tasks.c **** 
1523:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1260              	 .loc 1 1523 0
 1261 0008 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 1262 000c 031C     	 mov r3,r0
 1263 000e 7B61     	 str r3,[r7,#20]
1524:../Dave/Generated/FREERTOS/tasks.c ****         {
1525:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1526:../Dave/Generated/FREERTOS/tasks.c ****              * task that is being queried. */
1527:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1264              	 .loc 1 1527 0
 1265 0010 7B68     	 ldr r3,[r7,#4]
 1266 0012 002B     	 cmp r3,#0
 1267 0014 02D1     	 bne .L88
 1268              	 .loc 1 1527 0 is_stmt 0 discriminator 1
 1269 0016 084B     	 ldr r3,.L91
 1270 0018 1B68     	 ldr r3,[r3]
 1271 001a 00E0     	 b .L89
 1272              	.L88:
 1273              	 .loc 1 1527 0 discriminator 2
 1274 001c 7B68     	 ldr r3,[r7,#4]
 1275              	.L89:
 1276              	 .loc 1 1527 0 discriminator 4
 1277 001e 3B61     	 str r3,[r7,#16]
1528:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1278              	 .loc 1 1528 0 is_stmt 1 discriminator 4
 1279 0020 3B69     	 ldr r3,[r7,#16]
 1280 0022 DB6A     	 ldr r3,[r3,#44]
 1281 0024 FB60     	 str r3,[r7,#12]
1529:../Dave/Generated/FREERTOS/tasks.c ****         }
1530:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 1282              	 .loc 1 1530 0 discriminator 4
 1283 0026 7B69     	 ldr r3,[r7,#20]
 1284 0028 181C     	 mov r0,r3
 1285 002a FFF7FEFF 	 bl vClearInterruptMaskFromISR
1531:../Dave/Generated/FREERTOS/tasks.c **** 
1532:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 1286              	 .loc 1 1532 0 discriminator 4
 1287 002e FB68     	 ldr r3,[r7,#12]
1533:../Dave/Generated/FREERTOS/tasks.c ****     }
 1288              	 .loc 1 1533 0 discriminator 4
 1289 0030 181C     	 mov r0,r3
 1290 0032 BD46     	 mov sp,r7
 1291 0034 06B0     	 add sp,sp,#24
 1292              	 
 1293 0036 80BD     	 pop {r7,pc}
 1294              	.L92:
 1295              	 .align 2
 1296              	.L91:
 1297 0038 00000000 	 .word pxCurrentTCB
 1298              	 .cfi_endproc
 1299              	.LFE50:
 1301              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1302              	 .align 2
 1303              	 .global vTaskPrioritySet
 1304              	 .code 16
 1305              	 .thumb_func
 1307              	vTaskPrioritySet:
 1308              	.LFB51:
1534:../Dave/Generated/FREERTOS/tasks.c **** 
1535:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1537:../Dave/Generated/FREERTOS/tasks.c **** 
1538:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:../Dave/Generated/FREERTOS/tasks.c **** 
1540:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1541:../Dave/Generated/FREERTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1542:../Dave/Generated/FREERTOS/tasks.c ****     {
 1309              	 .loc 1 1542 0
 1310              	 .cfi_startproc
 1311 0000 80B5     	 push {r7,lr}
 1312              	.LCFI27:
 1313              	 .cfi_def_cfa_offset 8
 1314              	 .cfi_offset 7,-8
 1315              	 .cfi_offset 14,-4
 1316 0002 86B0     	 sub sp,sp,#24
 1317              	.LCFI28:
 1318              	 .cfi_def_cfa_offset 32
 1319 0004 00AF     	 add r7,sp,#0
 1320              	.LCFI29:
 1321              	 .cfi_def_cfa_register 7
 1322 0006 7860     	 str r0,[r7,#4]
 1323 0008 3960     	 str r1,[r7]
1543:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1544:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1545:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1324              	 .loc 1 1545 0
 1325 000a 0023     	 mov r3,#0
 1326 000c 7B61     	 str r3,[r7,#20]
1546:../Dave/Generated/FREERTOS/tasks.c **** 
1547:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1327              	 .loc 1 1547 0
 1328 000e 3B68     	 ldr r3,[r7]
 1329 0010 042B     	 cmp r3,#4
 1330 0012 01D9     	 bls .L94
 1331              	 .loc 1 1547 0 is_stmt 0 discriminator 1
 1332              	
 1333 0014 72B6     	 cpsid i
 1334              	
 1335              	 .code 16
 1336              	.L95:
 1337 0016 FEE7     	 b .L95
 1338              	.L94:
1548:../Dave/Generated/FREERTOS/tasks.c **** 
1549:../Dave/Generated/FREERTOS/tasks.c ****         /* Ensure the new priority is valid. */
1550:../Dave/Generated/FREERTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1339              	 .loc 1 1550 0 is_stmt 1
 1340 0018 3B68     	 ldr r3,[r7]
 1341 001a 042B     	 cmp r3,#4
 1342 001c 01D9     	 bls .L96
1551:../Dave/Generated/FREERTOS/tasks.c ****         {
1552:../Dave/Generated/FREERTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1343              	 .loc 1 1552 0
 1344 001e 0423     	 mov r3,#4
 1345 0020 3B60     	 str r3,[r7]
 1346              	.L96:
1553:../Dave/Generated/FREERTOS/tasks.c ****         }
1554:../Dave/Generated/FREERTOS/tasks.c ****         else
1555:../Dave/Generated/FREERTOS/tasks.c ****         {
1556:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1557:../Dave/Generated/FREERTOS/tasks.c ****         }
1558:../Dave/Generated/FREERTOS/tasks.c **** 
1559:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1347              	 .loc 1 1559 0
 1348 0022 FFF7FEFF 	 bl vPortEnterCritical
1560:../Dave/Generated/FREERTOS/tasks.c ****         {
1561:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1562:../Dave/Generated/FREERTOS/tasks.c ****              * task that is being changed. */
1563:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
 1349              	 .loc 1 1563 0
 1350 0026 7B68     	 ldr r3,[r7,#4]
 1351 0028 002B     	 cmp r3,#0
 1352 002a 02D1     	 bne .L97
 1353              	 .loc 1 1563 0 is_stmt 0 discriminator 1
 1354 002c 374B     	 ldr r3,.L106
 1355 002e 1B68     	 ldr r3,[r3]
 1356 0030 00E0     	 b .L98
 1357              	.L97:
 1358              	 .loc 1 1563 0 discriminator 2
 1359 0032 7B68     	 ldr r3,[r7,#4]
 1360              	.L98:
 1361              	 .loc 1 1563 0 discriminator 4
 1362 0034 3B61     	 str r3,[r7,#16]
1564:../Dave/Generated/FREERTOS/tasks.c **** 
1565:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1566:../Dave/Generated/FREERTOS/tasks.c **** 
1567:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1568:../Dave/Generated/FREERTOS/tasks.c ****                 {
1569:../Dave/Generated/FREERTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
 1363              	 .loc 1 1569 0 is_stmt 1 discriminator 4
 1364 0036 3B69     	 ldr r3,[r7,#16]
 1365 0038 DB6C     	 ldr r3,[r3,#76]
 1366 003a FB60     	 str r3,[r7,#12]
1570:../Dave/Generated/FREERTOS/tasks.c ****                 }
1571:../Dave/Generated/FREERTOS/tasks.c ****             #else
1572:../Dave/Generated/FREERTOS/tasks.c ****                 {
1573:../Dave/Generated/FREERTOS/tasks.c ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1574:../Dave/Generated/FREERTOS/tasks.c ****                 }
1575:../Dave/Generated/FREERTOS/tasks.c ****             #endif
1576:../Dave/Generated/FREERTOS/tasks.c **** 
1577:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
 1367              	 .loc 1 1577 0 discriminator 4
 1368 003c FA68     	 ldr r2,[r7,#12]
 1369 003e 3B68     	 ldr r3,[r7]
 1370 0040 9A42     	 cmp r2,r3
 1371 0042 5DD0     	 beq .L99
1578:../Dave/Generated/FREERTOS/tasks.c ****             {
1579:../Dave/Generated/FREERTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1580:../Dave/Generated/FREERTOS/tasks.c ****                  * priority than the calling task. */
1581:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
 1372              	 .loc 1 1581 0
 1373 0044 3A68     	 ldr r2,[r7]
 1374 0046 FB68     	 ldr r3,[r7,#12]
 1375 0048 9A42     	 cmp r2,r3
 1376 004a 0DD9     	 bls .L100
1582:../Dave/Generated/FREERTOS/tasks.c ****                 {
1583:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
 1377              	 .loc 1 1583 0
 1378 004c 2F4B     	 ldr r3,.L106
 1379 004e 1B68     	 ldr r3,[r3]
 1380 0050 3A69     	 ldr r2,[r7,#16]
 1381 0052 9A42     	 cmp r2,r3
 1382 0054 0FD0     	 beq .L101
1584:../Dave/Generated/FREERTOS/tasks.c ****                     {
1585:../Dave/Generated/FREERTOS/tasks.c ****                         /* The priority of a task other than the currently
1586:../Dave/Generated/FREERTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1587:../Dave/Generated/FREERTOS/tasks.c ****                          * raised above that of the running task? */
1588:../Dave/Generated/FREERTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1383              	 .loc 1 1588 0
 1384 0056 2D4B     	 ldr r3,.L106
 1385 0058 1B68     	 ldr r3,[r3]
 1386 005a DA6A     	 ldr r2,[r3,#44]
 1387 005c 3B68     	 ldr r3,[r7]
 1388 005e 9A42     	 cmp r2,r3
 1389 0060 09D8     	 bhi .L101
1589:../Dave/Generated/FREERTOS/tasks.c ****                         {
1590:../Dave/Generated/FREERTOS/tasks.c ****                             xYieldRequired = pdTRUE;
 1390              	 .loc 1 1590 0
 1391 0062 0123     	 mov r3,#1
 1392 0064 7B61     	 str r3,[r7,#20]
 1393 0066 06E0     	 b .L101
 1394              	.L100:
1591:../Dave/Generated/FREERTOS/tasks.c ****                         }
1592:../Dave/Generated/FREERTOS/tasks.c ****                         else
1593:../Dave/Generated/FREERTOS/tasks.c ****                         {
1594:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1595:../Dave/Generated/FREERTOS/tasks.c ****                         }
1596:../Dave/Generated/FREERTOS/tasks.c ****                     }
1597:../Dave/Generated/FREERTOS/tasks.c ****                     else
1598:../Dave/Generated/FREERTOS/tasks.c ****                     {
1599:../Dave/Generated/FREERTOS/tasks.c ****                         /* The priority of the running task is being raised,
1600:../Dave/Generated/FREERTOS/tasks.c ****                          * but the running task must already be the highest
1601:../Dave/Generated/FREERTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1602:../Dave/Generated/FREERTOS/tasks.c ****                     }
1603:../Dave/Generated/FREERTOS/tasks.c ****                 }
1604:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
 1395              	 .loc 1 1604 0
 1396 0068 284B     	 ldr r3,.L106
 1397 006a 1B68     	 ldr r3,[r3]
 1398 006c 3A69     	 ldr r2,[r7,#16]
 1399 006e 9A42     	 cmp r2,r3
 1400 0070 01D1     	 bne .L101
1605:../Dave/Generated/FREERTOS/tasks.c ****                 {
1606:../Dave/Generated/FREERTOS/tasks.c ****                     /* Setting the priority of the running task down means
1607:../Dave/Generated/FREERTOS/tasks.c ****                      * there may now be another task of higher priority that
1608:../Dave/Generated/FREERTOS/tasks.c ****                      * is ready to execute. */
1609:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldRequired = pdTRUE;
 1401              	 .loc 1 1609 0
 1402 0072 0123     	 mov r3,#1
 1403 0074 7B61     	 str r3,[r7,#20]
 1404              	.L101:
1610:../Dave/Generated/FREERTOS/tasks.c ****                 }
1611:../Dave/Generated/FREERTOS/tasks.c ****                 else
1612:../Dave/Generated/FREERTOS/tasks.c ****                 {
1613:../Dave/Generated/FREERTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1614:../Dave/Generated/FREERTOS/tasks.c ****                      * require a yield as the running task must be above the
1615:../Dave/Generated/FREERTOS/tasks.c ****                      * new priority of the task being modified. */
1616:../Dave/Generated/FREERTOS/tasks.c ****                 }
1617:../Dave/Generated/FREERTOS/tasks.c **** 
1618:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1619:../Dave/Generated/FREERTOS/tasks.c ****                  * before its uxPriority member is changed so the
1620:../Dave/Generated/FREERTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1621:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1405              	 .loc 1 1621 0
 1406 0076 3B69     	 ldr r3,[r7,#16]
 1407 0078 DB6A     	 ldr r3,[r3,#44]
 1408 007a BB60     	 str r3,[r7,#8]
1622:../Dave/Generated/FREERTOS/tasks.c **** 
1623:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1624:../Dave/Generated/FREERTOS/tasks.c ****                     {
1625:../Dave/Generated/FREERTOS/tasks.c ****                         /* Only change the priority being used if the task is not
1626:../Dave/Generated/FREERTOS/tasks.c ****                          * currently using an inherited priority. */
1627:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1409              	 .loc 1 1627 0
 1410 007c 3B69     	 ldr r3,[r7,#16]
 1411 007e DA6C     	 ldr r2,[r3,#76]
 1412 0080 3B69     	 ldr r3,[r7,#16]
 1413 0082 DB6A     	 ldr r3,[r3,#44]
 1414 0084 9A42     	 cmp r2,r3
 1415 0086 02D1     	 bne .L102
1628:../Dave/Generated/FREERTOS/tasks.c ****                         {
1629:../Dave/Generated/FREERTOS/tasks.c ****                             pxTCB->uxPriority = uxNewPriority;
 1416              	 .loc 1 1629 0
 1417 0088 3B69     	 ldr r3,[r7,#16]
 1418 008a 3A68     	 ldr r2,[r7]
 1419 008c DA62     	 str r2,[r3,#44]
 1420              	.L102:
1630:../Dave/Generated/FREERTOS/tasks.c ****                         }
1631:../Dave/Generated/FREERTOS/tasks.c ****                         else
1632:../Dave/Generated/FREERTOS/tasks.c ****                         {
1633:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1634:../Dave/Generated/FREERTOS/tasks.c ****                         }
1635:../Dave/Generated/FREERTOS/tasks.c **** 
1636:../Dave/Generated/FREERTOS/tasks.c ****                         /* The base priority gets set whatever. */
1637:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->uxBasePriority = uxNewPriority;
 1421              	 .loc 1 1637 0
 1422 008e 3B69     	 ldr r3,[r7,#16]
 1423 0090 3A68     	 ldr r2,[r7]
 1424 0092 DA64     	 str r2,[r3,#76]
1638:../Dave/Generated/FREERTOS/tasks.c ****                     }
1639:../Dave/Generated/FREERTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1640:../Dave/Generated/FREERTOS/tasks.c ****                     {
1641:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1642:../Dave/Generated/FREERTOS/tasks.c ****                     }
1643:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1644:../Dave/Generated/FREERTOS/tasks.c **** 
1645:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1646:../Dave/Generated/FREERTOS/tasks.c ****                  * being used for anything else. */
1647:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
 1425              	 .loc 1 1647 0
 1426 0094 3B69     	 ldr r3,[r7,#16]
 1427 0096 9B69     	 ldr r3,[r3,#24]
 1428 0098 002B     	 cmp r3,#0
 1429 009a 04DB     	 blt .L103
1648:../Dave/Generated/FREERTOS/tasks.c ****                 {
1649:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
 1430              	 .loc 1 1649 0
 1431 009c 3B68     	 ldr r3,[r7]
 1432 009e 0522     	 mov r2,#5
 1433 00a0 D21A     	 sub r2,r2,r3
 1434 00a2 3B69     	 ldr r3,[r7,#16]
 1435 00a4 9A61     	 str r2,[r3,#24]
 1436              	.L103:
1650:../Dave/Generated/FREERTOS/tasks.c ****                 }
1651:../Dave/Generated/FREERTOS/tasks.c ****                 else
1652:../Dave/Generated/FREERTOS/tasks.c ****                 {
1653:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1654:../Dave/Generated/FREERTOS/tasks.c ****                 }
1655:../Dave/Generated/FREERTOS/tasks.c **** 
1656:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1657:../Dave/Generated/FREERTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1658:../Dave/Generated/FREERTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1659:../Dave/Generated/FREERTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1660:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
 1437              	 .loc 1 1660 0
 1438 00a6 3B69     	 ldr r3,[r7,#16]
 1439 00a8 5969     	 ldr r1,[r3,#20]
 1440 00aa BA68     	 ldr r2,[r7,#8]
 1441 00ac 131C     	 mov r3,r2
 1442 00ae 9B00     	 lsl r3,r3,#2
 1443 00b0 9B18     	 add r3,r3,r2
 1444 00b2 9B00     	 lsl r3,r3,#2
 1445 00b4 164A     	 ldr r2,.L106+4
 1446 00b6 9B18     	 add r3,r3,r2
 1447 00b8 9942     	 cmp r1,r3
 1448 00ba 1CD1     	 bne .L104
1661:../Dave/Generated/FREERTOS/tasks.c ****                 {
1662:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1663:../Dave/Generated/FREERTOS/tasks.c ****                      * adding it to it's new ready list.  As we are in a critical
1664:../Dave/Generated/FREERTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1665:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1449              	 .loc 1 1665 0
 1450 00bc 3B69     	 ldr r3,[r7,#16]
 1451 00be 0433     	 add r3,r3,#4
 1452 00c0 181C     	 mov r0,r3
 1453 00c2 FFF7FEFF 	 bl uxListRemove
1666:../Dave/Generated/FREERTOS/tasks.c ****                     {
1667:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1668:../Dave/Generated/FREERTOS/tasks.c ****                          * there is no need to check again and the port level
1669:../Dave/Generated/FREERTOS/tasks.c ****                          * reset macro can be called directly. */
1670:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1671:../Dave/Generated/FREERTOS/tasks.c ****                     }
1672:../Dave/Generated/FREERTOS/tasks.c ****                     else
1673:../Dave/Generated/FREERTOS/tasks.c ****                     {
1674:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1675:../Dave/Generated/FREERTOS/tasks.c ****                     }
1676:../Dave/Generated/FREERTOS/tasks.c **** 
1677:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1454              	 .loc 1 1677 0
 1455 00c6 3B69     	 ldr r3,[r7,#16]
 1456 00c8 DA6A     	 ldr r2,[r3,#44]
 1457 00ca 124B     	 ldr r3,.L106+8
 1458 00cc 1B68     	 ldr r3,[r3]
 1459 00ce 9A42     	 cmp r2,r3
 1460 00d0 03D9     	 bls .L105
 1461              	 .loc 1 1677 0 is_stmt 0 discriminator 1
 1462 00d2 3B69     	 ldr r3,[r7,#16]
 1463 00d4 DA6A     	 ldr r2,[r3,#44]
 1464 00d6 0F4B     	 ldr r3,.L106+8
 1465 00d8 1A60     	 str r2,[r3]
 1466              	.L105:
 1467              	 .loc 1 1677 0 discriminator 3
 1468 00da 3B69     	 ldr r3,[r7,#16]
 1469 00dc DA6A     	 ldr r2,[r3,#44]
 1470 00de 131C     	 mov r3,r2
 1471 00e0 9B00     	 lsl r3,r3,#2
 1472 00e2 9B18     	 add r3,r3,r2
 1473 00e4 9B00     	 lsl r3,r3,#2
 1474 00e6 0A4A     	 ldr r2,.L106+4
 1475 00e8 9A18     	 add r2,r3,r2
 1476 00ea 3B69     	 ldr r3,[r7,#16]
 1477 00ec 0433     	 add r3,r3,#4
 1478 00ee 101C     	 mov r0,r2
 1479 00f0 191C     	 mov r1,r3
 1480 00f2 FFF7FEFF 	 bl vListInsertEnd
 1481              	.L104:
1678:../Dave/Generated/FREERTOS/tasks.c ****                 }
1679:../Dave/Generated/FREERTOS/tasks.c ****                 else
1680:../Dave/Generated/FREERTOS/tasks.c ****                 {
1681:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1682:../Dave/Generated/FREERTOS/tasks.c ****                 }
1683:../Dave/Generated/FREERTOS/tasks.c **** 
1684:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
 1482              	 .loc 1 1684 0 is_stmt 1
 1483 00f6 7B69     	 ldr r3,[r7,#20]
 1484 00f8 002B     	 cmp r3,#0
 1485 00fa 01D0     	 beq .L99
1685:../Dave/Generated/FREERTOS/tasks.c ****                 {
1686:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 1486              	 .loc 1 1686 0
 1487 00fc FFF7FEFF 	 bl vPortYield
 1488              	.L99:
1687:../Dave/Generated/FREERTOS/tasks.c ****                 }
1688:../Dave/Generated/FREERTOS/tasks.c ****                 else
1689:../Dave/Generated/FREERTOS/tasks.c ****                 {
1690:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1691:../Dave/Generated/FREERTOS/tasks.c ****                 }
1692:../Dave/Generated/FREERTOS/tasks.c **** 
1693:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1694:../Dave/Generated/FREERTOS/tasks.c ****                  * optimised task selection is not being used. */
1695:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1696:../Dave/Generated/FREERTOS/tasks.c ****             }
1697:../Dave/Generated/FREERTOS/tasks.c ****         }
1698:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1489              	 .loc 1 1698 0
 1490 0100 FFF7FEFF 	 bl vPortExitCritical
1699:../Dave/Generated/FREERTOS/tasks.c ****     }
 1491              	 .loc 1 1699 0
 1492 0104 BD46     	 mov sp,r7
 1493 0106 06B0     	 add sp,sp,#24
 1494              	 
 1495 0108 80BD     	 pop {r7,pc}
 1496              	.L107:
 1497 010a C046     	 .align 2
 1498              	.L106:
 1499 010c 00000000 	 .word pxCurrentTCB
 1500 0110 00000000 	 .word pxReadyTasksLists
 1501 0114 00000000 	 .word uxTopReadyPriority
 1502              	 .cfi_endproc
 1503              	.LFE51:
 1505              	 .section .text.vTaskSuspend,"ax",%progbits
 1506              	 .align 2
 1507              	 .global vTaskSuspend
 1508              	 .code 16
 1509              	 .thumb_func
 1511              	vTaskSuspend:
 1512              	.LFB52:
1700:../Dave/Generated/FREERTOS/tasks.c **** 
1701:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1702:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1703:../Dave/Generated/FREERTOS/tasks.c **** 
1704:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1705:../Dave/Generated/FREERTOS/tasks.c **** 
1706:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1707:../Dave/Generated/FREERTOS/tasks.c ****     {
 1513              	 .loc 1 1707 0
 1514              	 .cfi_startproc
 1515 0000 80B5     	 push {r7,lr}
 1516              	.LCFI30:
 1517              	 .cfi_def_cfa_offset 8
 1518              	 .cfi_offset 7,-8
 1519              	 .cfi_offset 14,-4
 1520 0002 84B0     	 sub sp,sp,#16
 1521              	.LCFI31:
 1522              	 .cfi_def_cfa_offset 24
 1523 0004 00AF     	 add r7,sp,#0
 1524              	.LCFI32:
 1525              	 .cfi_def_cfa_register 7
 1526 0006 7860     	 str r0,[r7,#4]
1708:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
1709:../Dave/Generated/FREERTOS/tasks.c **** 
1710:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 1527              	 .loc 1 1710 0
 1528 0008 FFF7FEFF 	 bl vPortEnterCritical
1711:../Dave/Generated/FREERTOS/tasks.c ****         {
1712:../Dave/Generated/FREERTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1713:../Dave/Generated/FREERTOS/tasks.c ****              * being suspended. */
1714:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1529              	 .loc 1 1714 0
 1530 000c 7B68     	 ldr r3,[r7,#4]
 1531 000e 002B     	 cmp r3,#0
 1532 0010 02D1     	 bne .L109
 1533              	 .loc 1 1714 0 is_stmt 0 discriminator 1
 1534 0012 304B     	 ldr r3,.L122
 1535 0014 1B68     	 ldr r3,[r3]
 1536 0016 00E0     	 b .L110
 1537              	.L109:
 1538              	 .loc 1 1714 0 discriminator 2
 1539 0018 7B68     	 ldr r3,[r7,#4]
 1540              	.L110:
 1541              	 .loc 1 1714 0 discriminator 4
 1542 001a BB60     	 str r3,[r7,#8]
1715:../Dave/Generated/FREERTOS/tasks.c **** 
1716:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1717:../Dave/Generated/FREERTOS/tasks.c **** 
1718:../Dave/Generated/FREERTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1719:../Dave/Generated/FREERTOS/tasks.c ****              * suspended list. */
1720:../Dave/Generated/FREERTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1543              	 .loc 1 1720 0 is_stmt 1 discriminator 4
 1544 001c BB68     	 ldr r3,[r7,#8]
 1545 001e 0433     	 add r3,r3,#4
 1546 0020 181C     	 mov r0,r3
 1547 0022 FFF7FEFF 	 bl uxListRemove
1721:../Dave/Generated/FREERTOS/tasks.c ****             {
1722:../Dave/Generated/FREERTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1723:../Dave/Generated/FREERTOS/tasks.c ****             }
1724:../Dave/Generated/FREERTOS/tasks.c ****             else
1725:../Dave/Generated/FREERTOS/tasks.c ****             {
1726:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1727:../Dave/Generated/FREERTOS/tasks.c ****             }
1728:../Dave/Generated/FREERTOS/tasks.c **** 
1729:../Dave/Generated/FREERTOS/tasks.c ****             /* Is the task waiting on an event also? */
1730:../Dave/Generated/FREERTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1548              	 .loc 1 1730 0 discriminator 4
 1549 0026 BB68     	 ldr r3,[r7,#8]
 1550 0028 9B6A     	 ldr r3,[r3,#40]
 1551 002a 002B     	 cmp r3,#0
 1552 002c 04D0     	 beq .L111
1731:../Dave/Generated/FREERTOS/tasks.c ****             {
1732:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1553              	 .loc 1 1732 0
 1554 002e BB68     	 ldr r3,[r7,#8]
 1555 0030 1833     	 add r3,r3,#24
 1556 0032 181C     	 mov r0,r3
 1557 0034 FFF7FEFF 	 bl uxListRemove
 1558              	.L111:
1733:../Dave/Generated/FREERTOS/tasks.c ****             }
1734:../Dave/Generated/FREERTOS/tasks.c ****             else
1735:../Dave/Generated/FREERTOS/tasks.c ****             {
1736:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1737:../Dave/Generated/FREERTOS/tasks.c ****             }
1738:../Dave/Generated/FREERTOS/tasks.c **** 
1739:../Dave/Generated/FREERTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1559              	 .loc 1 1739 0
 1560 0038 BB68     	 ldr r3,[r7,#8]
 1561 003a 0433     	 add r3,r3,#4
 1562 003c 264A     	 ldr r2,.L122+4
 1563 003e 101C     	 mov r0,r2
 1564 0040 191C     	 mov r1,r3
 1565 0042 FFF7FEFF 	 bl vListInsertEnd
 1566              	.LBB5:
1740:../Dave/Generated/FREERTOS/tasks.c **** 
1741:../Dave/Generated/FREERTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1742:../Dave/Generated/FREERTOS/tasks.c ****                 {
1743:../Dave/Generated/FREERTOS/tasks.c ****                     BaseType_t x;
1744:../Dave/Generated/FREERTOS/tasks.c **** 
1745:../Dave/Generated/FREERTOS/tasks.c ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 1567              	 .loc 1 1745 0
 1568 0046 0023     	 mov r3,#0
 1569 0048 FB60     	 str r3,[r7,#12]
 1570 004a 12E0     	 b .L112
 1571              	.L114:
1746:../Dave/Generated/FREERTOS/tasks.c ****                     {
1747:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 1572              	 .loc 1 1747 0
 1573 004c BA68     	 ldr r2,[r7,#8]
 1574 004e 6821     	 mov r1,#104
 1575 0050 FB68     	 ldr r3,[r7,#12]
 1576 0052 D318     	 add r3,r2,r3
 1577 0054 5B18     	 add r3,r3,r1
 1578 0056 1B79     	 ldrb r3,[r3,#4]
 1579 0058 DBB2     	 uxtb r3,r3
 1580 005a 012B     	 cmp r3,#1
 1581 005c 06D1     	 bne .L113
1748:../Dave/Generated/FREERTOS/tasks.c ****                         {
1749:../Dave/Generated/FREERTOS/tasks.c ****                             /* The task was blocked to wait for a notification, but is
1750:../Dave/Generated/FREERTOS/tasks.c ****                              * now suspended, so no notification was received. */
1751:../Dave/Generated/FREERTOS/tasks.c ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 1582              	 .loc 1 1751 0
 1583 005e BA68     	 ldr r2,[r7,#8]
 1584 0060 6821     	 mov r1,#104
 1585 0062 FB68     	 ldr r3,[r7,#12]
 1586 0064 D318     	 add r3,r2,r3
 1587 0066 5B18     	 add r3,r3,r1
 1588 0068 0022     	 mov r2,#0
 1589 006a 1A71     	 strb r2,[r3,#4]
 1590              	.L113:
1745:../Dave/Generated/FREERTOS/tasks.c ****                     {
 1591              	 .loc 1 1745 0 discriminator 2
 1592 006c FB68     	 ldr r3,[r7,#12]
 1593 006e 0133     	 add r3,r3,#1
 1594 0070 FB60     	 str r3,[r7,#12]
 1595              	.L112:
1745:../Dave/Generated/FREERTOS/tasks.c ****                     {
 1596              	 .loc 1 1745 0 is_stmt 0 discriminator 1
 1597 0072 FB68     	 ldr r3,[r7,#12]
 1598 0074 002B     	 cmp r3,#0
 1599 0076 E9DD     	 ble .L114
 1600              	.LBE5:
1752:../Dave/Generated/FREERTOS/tasks.c ****                         }
1753:../Dave/Generated/FREERTOS/tasks.c ****                     }
1754:../Dave/Generated/FREERTOS/tasks.c ****                 }
1755:../Dave/Generated/FREERTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1756:../Dave/Generated/FREERTOS/tasks.c ****         }
1757:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 1601              	 .loc 1 1757 0 is_stmt 1
 1602 0078 FFF7FEFF 	 bl vPortExitCritical
1758:../Dave/Generated/FREERTOS/tasks.c **** 
1759:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
 1603              	 .loc 1 1759 0
 1604 007c 174B     	 ldr r3,.L122+8
 1605 007e 1B68     	 ldr r3,[r3]
 1606 0080 002B     	 cmp r3,#0
 1607 0082 05D0     	 beq .L115
1760:../Dave/Generated/FREERTOS/tasks.c ****         {
1761:../Dave/Generated/FREERTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1762:../Dave/Generated/FREERTOS/tasks.c ****              * task that is now in the Suspended state. */
1763:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1608              	 .loc 1 1763 0
 1609 0084 FFF7FEFF 	 bl vPortEnterCritical
1764:../Dave/Generated/FREERTOS/tasks.c ****             {
1765:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
 1610              	 .loc 1 1765 0
 1611 0088 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
1766:../Dave/Generated/FREERTOS/tasks.c ****             }
1767:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1612              	 .loc 1 1767 0
 1613 008c FFF7FEFF 	 bl vPortExitCritical
 1614              	.L115:
1768:../Dave/Generated/FREERTOS/tasks.c ****         }
1769:../Dave/Generated/FREERTOS/tasks.c ****         else
1770:../Dave/Generated/FREERTOS/tasks.c ****         {
1771:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1772:../Dave/Generated/FREERTOS/tasks.c ****         }
1773:../Dave/Generated/FREERTOS/tasks.c **** 
1774:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
 1615              	 .loc 1 1774 0
 1616 0090 104B     	 ldr r3,.L122
 1617 0092 1B68     	 ldr r3,[r3]
 1618 0094 BA68     	 ldr r2,[r7,#8]
 1619 0096 9A42     	 cmp r2,r3
 1620 0098 18D1     	 bne .L108
1775:../Dave/Generated/FREERTOS/tasks.c ****         {
1776:../Dave/Generated/FREERTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
 1621              	 .loc 1 1776 0
 1622 009a 104B     	 ldr r3,.L122+8
 1623 009c 1B68     	 ldr r3,[r3]
 1624 009e 002B     	 cmp r3,#0
 1625 00a0 08D0     	 beq .L117
1777:../Dave/Generated/FREERTOS/tasks.c ****             {
1778:../Dave/Generated/FREERTOS/tasks.c ****                 /* The current task has just been suspended. */
1779:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
 1626              	 .loc 1 1779 0
 1627 00a2 0F4B     	 ldr r3,.L122+12
 1628 00a4 1B68     	 ldr r3,[r3]
 1629 00a6 002B     	 cmp r3,#0
 1630 00a8 01D0     	 beq .L118
 1631              	 .loc 1 1779 0 is_stmt 0 discriminator 1
 1632              	
 1633 00aa 72B6     	 cpsid i
 1634              	
 1635              	 .code 16
 1636              	.L119:
 1637 00ac FEE7     	 b .L119
 1638              	.L118:
1780:../Dave/Generated/FREERTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1639              	 .loc 1 1780 0 is_stmt 1
 1640 00ae FFF7FEFF 	 bl vPortYield
 1641 00b2 0BE0     	 b .L108
 1642              	.L117:
1781:../Dave/Generated/FREERTOS/tasks.c ****             }
1782:../Dave/Generated/FREERTOS/tasks.c ****             else
1783:../Dave/Generated/FREERTOS/tasks.c ****             {
1784:../Dave/Generated/FREERTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1785:../Dave/Generated/FREERTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:../Dave/Generated/FREERTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1787:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
 1643              	 .loc 1 1787 0
 1644 00b4 084B     	 ldr r3,.L122+4
 1645 00b6 1A68     	 ldr r2,[r3]
 1646 00b8 0A4B     	 ldr r3,.L122+16
 1647 00ba 1B68     	 ldr r3,[r3]
 1648 00bc 9A42     	 cmp r2,r3
 1649 00be 03D1     	 bne .L121
1788:../Dave/Generated/FREERTOS/tasks.c ****                 {
1789:../Dave/Generated/FREERTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1790:../Dave/Generated/FREERTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1791:../Dave/Generated/FREERTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1792:../Dave/Generated/FREERTOS/tasks.c ****                      * is. */
1793:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB = NULL;
 1650              	 .loc 1 1793 0
 1651 00c0 044B     	 ldr r3,.L122
 1652 00c2 0022     	 mov r2,#0
 1653 00c4 1A60     	 str r2,[r3]
 1654 00c6 01E0     	 b .L108
 1655              	.L121:
1794:../Dave/Generated/FREERTOS/tasks.c ****                 }
1795:../Dave/Generated/FREERTOS/tasks.c ****                 else
1796:../Dave/Generated/FREERTOS/tasks.c ****                 {
1797:../Dave/Generated/FREERTOS/tasks.c ****                     vTaskSwitchContext();
 1656              	 .loc 1 1797 0
 1657 00c8 FFF7FEFF 	 bl vTaskSwitchContext
 1658              	.L108:
1798:../Dave/Generated/FREERTOS/tasks.c ****                 }
1799:../Dave/Generated/FREERTOS/tasks.c ****             }
1800:../Dave/Generated/FREERTOS/tasks.c ****         }
1801:../Dave/Generated/FREERTOS/tasks.c ****         else
1802:../Dave/Generated/FREERTOS/tasks.c ****         {
1803:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1804:../Dave/Generated/FREERTOS/tasks.c ****         }
1805:../Dave/Generated/FREERTOS/tasks.c ****     }
 1659              	 .loc 1 1805 0
 1660 00cc BD46     	 mov sp,r7
 1661 00ce 04B0     	 add sp,sp,#16
 1662              	 
 1663 00d0 80BD     	 pop {r7,pc}
 1664              	.L123:
 1665 00d2 C046     	 .align 2
 1666              	.L122:
 1667 00d4 00000000 	 .word pxCurrentTCB
 1668 00d8 00000000 	 .word xSuspendedTaskList
 1669 00dc 00000000 	 .word xSchedulerRunning
 1670 00e0 00000000 	 .word uxSchedulerSuspended
 1671 00e4 00000000 	 .word uxCurrentNumberOfTasks
 1672              	 .cfi_endproc
 1673              	.LFE52:
 1675              	 .section .text.prvTaskIsTaskSuspended,"ax",%progbits
 1676              	 .align 2
 1677              	 .code 16
 1678              	 .thumb_func
 1680              	prvTaskIsTaskSuspended:
 1681              	.LFB53:
1806:../Dave/Generated/FREERTOS/tasks.c **** 
1807:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1808:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:../Dave/Generated/FREERTOS/tasks.c **** 
1810:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:../Dave/Generated/FREERTOS/tasks.c **** 
1812:../Dave/Generated/FREERTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:../Dave/Generated/FREERTOS/tasks.c ****     {
 1682              	 .loc 1 1813 0
 1683              	 .cfi_startproc
 1684 0000 80B5     	 push {r7,lr}
 1685              	.LCFI33:
 1686              	 .cfi_def_cfa_offset 8
 1687              	 .cfi_offset 7,-8
 1688              	 .cfi_offset 14,-4
 1689 0002 84B0     	 sub sp,sp,#16
 1690              	.LCFI34:
 1691              	 .cfi_def_cfa_offset 24
 1692 0004 00AF     	 add r7,sp,#0
 1693              	.LCFI35:
 1694              	 .cfi_def_cfa_register 7
 1695 0006 7860     	 str r0,[r7,#4]
1814:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 1696              	 .loc 1 1814 0
 1697 0008 0023     	 mov r3,#0
 1698 000a FB60     	 str r3,[r7,#12]
1815:../Dave/Generated/FREERTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
 1699              	 .loc 1 1815 0
 1700 000c 7B68     	 ldr r3,[r7,#4]
 1701 000e BB60     	 str r3,[r7,#8]
1816:../Dave/Generated/FREERTOS/tasks.c **** 
1817:../Dave/Generated/FREERTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1818:../Dave/Generated/FREERTOS/tasks.c ****          * section. */
1819:../Dave/Generated/FREERTOS/tasks.c **** 
1820:../Dave/Generated/FREERTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1821:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTask );
 1702              	 .loc 1 1821 0
 1703 0010 7B68     	 ldr r3,[r7,#4]
 1704 0012 002B     	 cmp r3,#0
 1705 0014 01D1     	 bne .L125
 1706              	 .loc 1 1821 0 is_stmt 0 discriminator 1
 1707              	
 1708 0016 72B6     	 cpsid i
 1709              	
 1710              	 .code 16
 1711              	.L126:
 1712 0018 FEE7     	 b .L126
 1713              	.L125:
1822:../Dave/Generated/FREERTOS/tasks.c **** 
1823:../Dave/Generated/FREERTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1824:../Dave/Generated/FREERTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1714              	 .loc 1 1824 0 is_stmt 1
 1715 001a BB68     	 ldr r3,[r7,#8]
 1716 001c 5A69     	 ldr r2,[r3,#20]
 1717 001e 094B     	 ldr r3,.L129
 1718 0020 9A42     	 cmp r2,r3
 1719 0022 0AD1     	 bne .L127
1825:../Dave/Generated/FREERTOS/tasks.c ****         {
1826:../Dave/Generated/FREERTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1827:../Dave/Generated/FREERTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
 1720              	 .loc 1 1827 0
 1721 0024 BB68     	 ldr r3,[r7,#8]
 1722 0026 9A6A     	 ldr r2,[r3,#40]
 1723 0028 074B     	 ldr r3,.L129+4
 1724 002a 9A42     	 cmp r2,r3
 1725 002c 05D0     	 beq .L127
1828:../Dave/Generated/FREERTOS/tasks.c ****             {
1829:../Dave/Generated/FREERTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1830:../Dave/Generated/FREERTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1831:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
 1726              	 .loc 1 1831 0
 1727 002e BB68     	 ldr r3,[r7,#8]
 1728 0030 9B6A     	 ldr r3,[r3,#40]
 1729 0032 002B     	 cmp r3,#0
 1730 0034 01D1     	 bne .L127
1832:../Dave/Generated/FREERTOS/tasks.c ****                 {
1833:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 1731              	 .loc 1 1833 0
 1732 0036 0123     	 mov r3,#1
 1733 0038 FB60     	 str r3,[r7,#12]
 1734              	.L127:
1834:../Dave/Generated/FREERTOS/tasks.c ****                 }
1835:../Dave/Generated/FREERTOS/tasks.c ****                 else
1836:../Dave/Generated/FREERTOS/tasks.c ****                 {
1837:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1838:../Dave/Generated/FREERTOS/tasks.c ****                 }
1839:../Dave/Generated/FREERTOS/tasks.c ****             }
1840:../Dave/Generated/FREERTOS/tasks.c ****             else
1841:../Dave/Generated/FREERTOS/tasks.c ****             {
1842:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1843:../Dave/Generated/FREERTOS/tasks.c ****             }
1844:../Dave/Generated/FREERTOS/tasks.c ****         }
1845:../Dave/Generated/FREERTOS/tasks.c ****         else
1846:../Dave/Generated/FREERTOS/tasks.c ****         {
1847:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1848:../Dave/Generated/FREERTOS/tasks.c ****         }
1849:../Dave/Generated/FREERTOS/tasks.c **** 
1850:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 1735              	 .loc 1 1850 0
 1736 003a FB68     	 ldr r3,[r7,#12]
1851:../Dave/Generated/FREERTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1737              	 .loc 1 1851 0
 1738 003c 181C     	 mov r0,r3
 1739 003e BD46     	 mov sp,r7
 1740 0040 04B0     	 add sp,sp,#16
 1741              	 
 1742 0042 80BD     	 pop {r7,pc}
 1743              	.L130:
 1744              	 .align 2
 1745              	.L129:
 1746 0044 00000000 	 .word xSuspendedTaskList
 1747 0048 00000000 	 .word xPendingReadyList
 1748              	 .cfi_endproc
 1749              	.LFE53:
 1751              	 .section .text.vTaskResume,"ax",%progbits
 1752              	 .align 2
 1753              	 .global vTaskResume
 1754              	 .code 16
 1755              	 .thumb_func
 1757              	vTaskResume:
 1758              	.LFB54:
1852:../Dave/Generated/FREERTOS/tasks.c **** 
1853:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1854:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1855:../Dave/Generated/FREERTOS/tasks.c **** 
1856:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:../Dave/Generated/FREERTOS/tasks.c **** 
1858:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1859:../Dave/Generated/FREERTOS/tasks.c ****     {
 1759              	 .loc 1 1859 0
 1760              	 .cfi_startproc
 1761 0000 80B5     	 push {r7,lr}
 1762              	.LCFI36:
 1763              	 .cfi_def_cfa_offset 8
 1764              	 .cfi_offset 7,-8
 1765              	 .cfi_offset 14,-4
 1766 0002 84B0     	 sub sp,sp,#16
 1767              	.LCFI37:
 1768              	 .cfi_def_cfa_offset 24
 1769 0004 00AF     	 add r7,sp,#0
 1770              	.LCFI38:
 1771              	 .cfi_def_cfa_register 7
 1772 0006 7860     	 str r0,[r7,#4]
1860:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1773              	 .loc 1 1860 0
 1774 0008 7B68     	 ldr r3,[r7,#4]
 1775 000a FB60     	 str r3,[r7,#12]
1861:../Dave/Generated/FREERTOS/tasks.c **** 
1862:../Dave/Generated/FREERTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1863:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToResume );
 1776              	 .loc 1 1863 0
 1777 000c 7B68     	 ldr r3,[r7,#4]
 1778 000e 002B     	 cmp r3,#0
 1779 0010 01D1     	 bne .L132
 1780              	 .loc 1 1863 0 is_stmt 0 discriminator 1
 1781              	
 1782 0012 72B6     	 cpsid i
 1783              	
 1784              	 .code 16
 1785              	.L133:
 1786 0014 FEE7     	 b .L133
 1787              	.L132:
1864:../Dave/Generated/FREERTOS/tasks.c **** 
1865:../Dave/Generated/FREERTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1866:../Dave/Generated/FREERTOS/tasks.c ****          * currently executing task. */
1867:../Dave/Generated/FREERTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1788              	 .loc 1 1867 0 is_stmt 1
 1789 0016 1D4B     	 ldr r3,.L137
 1790 0018 1B68     	 ldr r3,[r3]
 1791 001a FA68     	 ldr r2,[r7,#12]
 1792 001c 9A42     	 cmp r2,r3
 1793 001e 32D0     	 beq .L131
 1794              	 .loc 1 1867 0 is_stmt 0 discriminator 1
 1795 0020 FB68     	 ldr r3,[r7,#12]
 1796 0022 002B     	 cmp r3,#0
 1797 0024 2FD0     	 beq .L131
1868:../Dave/Generated/FREERTOS/tasks.c ****         {
1869:../Dave/Generated/FREERTOS/tasks.c ****             taskENTER_CRITICAL();
 1798              	 .loc 1 1869 0 is_stmt 1
 1799 0026 FFF7FEFF 	 bl vPortEnterCritical
1870:../Dave/Generated/FREERTOS/tasks.c ****             {
1871:../Dave/Generated/FREERTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1800              	 .loc 1 1871 0
 1801 002a FB68     	 ldr r3,[r7,#12]
 1802 002c 181C     	 mov r0,r3
 1803 002e FFF7FEFF 	 bl prvTaskIsTaskSuspended
 1804 0032 031E     	 sub r3,r0,#0
 1805 0034 25D0     	 beq .L135
1872:../Dave/Generated/FREERTOS/tasks.c ****                 {
1873:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1874:../Dave/Generated/FREERTOS/tasks.c **** 
1875:../Dave/Generated/FREERTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1876:../Dave/Generated/FREERTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1877:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1806              	 .loc 1 1877 0
 1807 0036 FB68     	 ldr r3,[r7,#12]
 1808 0038 0433     	 add r3,r3,#4
 1809 003a 181C     	 mov r0,r3
 1810 003c FFF7FEFF 	 bl uxListRemove
1878:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1811              	 .loc 1 1878 0
 1812 0040 FB68     	 ldr r3,[r7,#12]
 1813 0042 DA6A     	 ldr r2,[r3,#44]
 1814 0044 124B     	 ldr r3,.L137+4
 1815 0046 1B68     	 ldr r3,[r3]
 1816 0048 9A42     	 cmp r2,r3
 1817 004a 03D9     	 bls .L136
 1818              	 .loc 1 1878 0 is_stmt 0 discriminator 1
 1819 004c FB68     	 ldr r3,[r7,#12]
 1820 004e DA6A     	 ldr r2,[r3,#44]
 1821 0050 0F4B     	 ldr r3,.L137+4
 1822 0052 1A60     	 str r2,[r3]
 1823              	.L136:
 1824              	 .loc 1 1878 0 discriminator 3
 1825 0054 FB68     	 ldr r3,[r7,#12]
 1826 0056 DA6A     	 ldr r2,[r3,#44]
 1827 0058 131C     	 mov r3,r2
 1828 005a 9B00     	 lsl r3,r3,#2
 1829 005c 9B18     	 add r3,r3,r2
 1830 005e 9B00     	 lsl r3,r3,#2
 1831 0060 0C4A     	 ldr r2,.L137+8
 1832 0062 9A18     	 add r2,r3,r2
 1833 0064 FB68     	 ldr r3,[r7,#12]
 1834 0066 0433     	 add r3,r3,#4
 1835 0068 101C     	 mov r0,r2
 1836 006a 191C     	 mov r1,r3
 1837 006c FFF7FEFF 	 bl vListInsertEnd
1879:../Dave/Generated/FREERTOS/tasks.c **** 
1880:../Dave/Generated/FREERTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1881:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1838              	 .loc 1 1881 0 is_stmt 1 discriminator 3
 1839 0070 FB68     	 ldr r3,[r7,#12]
 1840 0072 DA6A     	 ldr r2,[r3,#44]
 1841 0074 054B     	 ldr r3,.L137
 1842 0076 1B68     	 ldr r3,[r3]
 1843 0078 DB6A     	 ldr r3,[r3,#44]
 1844 007a 9A42     	 cmp r2,r3
 1845 007c 01D3     	 bcc .L135
1882:../Dave/Generated/FREERTOS/tasks.c ****                     {
1883:../Dave/Generated/FREERTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1884:../Dave/Generated/FREERTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1885:../Dave/Generated/FREERTOS/tasks.c ****                          * next yield. */
1886:../Dave/Generated/FREERTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
 1846              	 .loc 1 1886 0
 1847 007e FFF7FEFF 	 bl vPortYield
 1848              	.L135:
1887:../Dave/Generated/FREERTOS/tasks.c ****                     }
1888:../Dave/Generated/FREERTOS/tasks.c ****                     else
1889:../Dave/Generated/FREERTOS/tasks.c ****                     {
1890:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1891:../Dave/Generated/FREERTOS/tasks.c ****                     }
1892:../Dave/Generated/FREERTOS/tasks.c ****                 }
1893:../Dave/Generated/FREERTOS/tasks.c ****                 else
1894:../Dave/Generated/FREERTOS/tasks.c ****                 {
1895:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1896:../Dave/Generated/FREERTOS/tasks.c ****                 }
1897:../Dave/Generated/FREERTOS/tasks.c ****             }
1898:../Dave/Generated/FREERTOS/tasks.c ****             taskEXIT_CRITICAL();
 1849              	 .loc 1 1898 0
 1850 0082 FFF7FEFF 	 bl vPortExitCritical
 1851              	.L131:
1899:../Dave/Generated/FREERTOS/tasks.c ****         }
1900:../Dave/Generated/FREERTOS/tasks.c ****         else
1901:../Dave/Generated/FREERTOS/tasks.c ****         {
1902:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1903:../Dave/Generated/FREERTOS/tasks.c ****         }
1904:../Dave/Generated/FREERTOS/tasks.c ****     }
 1852              	 .loc 1 1904 0
 1853 0086 BD46     	 mov sp,r7
 1854 0088 04B0     	 add sp,sp,#16
 1855              	 
 1856 008a 80BD     	 pop {r7,pc}
 1857              	.L138:
 1858              	 .align 2
 1859              	.L137:
 1860 008c 00000000 	 .word pxCurrentTCB
 1861 0090 00000000 	 .word uxTopReadyPriority
 1862 0094 00000000 	 .word pxReadyTasksLists
 1863              	 .cfi_endproc
 1864              	.LFE54:
 1866              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 1867              	 .align 2
 1868              	 .global xTaskResumeFromISR
 1869              	 .code 16
 1870              	 .thumb_func
 1872              	xTaskResumeFromISR:
 1873              	.LFB55:
1905:../Dave/Generated/FREERTOS/tasks.c **** 
1906:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1907:../Dave/Generated/FREERTOS/tasks.c **** 
1908:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1909:../Dave/Generated/FREERTOS/tasks.c **** 
1910:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:../Dave/Generated/FREERTOS/tasks.c **** 
1912:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:../Dave/Generated/FREERTOS/tasks.c ****     {
 1874              	 .loc 1 1913 0
 1875              	 .cfi_startproc
 1876 0000 80B5     	 push {r7,lr}
 1877              	.LCFI39:
 1878              	 .cfi_def_cfa_offset 8
 1879              	 .cfi_offset 7,-8
 1880              	 .cfi_offset 14,-4
 1881 0002 86B0     	 sub sp,sp,#24
 1882              	.LCFI40:
 1883              	 .cfi_def_cfa_offset 32
 1884 0004 00AF     	 add r7,sp,#0
 1885              	.LCFI41:
 1886              	 .cfi_def_cfa_register 7
 1887 0006 7860     	 str r0,[r7,#4]
1914:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1888              	 .loc 1 1914 0
 1889 0008 0023     	 mov r3,#0
 1890 000a 7B61     	 str r3,[r7,#20]
1915:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1891              	 .loc 1 1915 0
 1892 000c 7B68     	 ldr r3,[r7,#4]
 1893 000e 3B61     	 str r3,[r7,#16]
1916:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1917:../Dave/Generated/FREERTOS/tasks.c **** 
1918:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToResume );
 1894              	 .loc 1 1918 0
 1895 0010 7B68     	 ldr r3,[r7,#4]
 1896 0012 002B     	 cmp r3,#0
 1897 0014 01D1     	 bne .L140
 1898              	 .loc 1 1918 0 is_stmt 0 discriminator 1
 1899              	
 1900 0016 72B6     	 cpsid i
 1901              	
 1902              	 .code 16
 1903              	.L141:
 1904 0018 FEE7     	 b .L141
 1905              	.L140:
1919:../Dave/Generated/FREERTOS/tasks.c **** 
1920:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1921:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1922:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1923:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1924:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1926:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1928:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1929:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1930:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1931:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1933:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1934:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
1935:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1936:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1937:../Dave/Generated/FREERTOS/tasks.c **** 
1938:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1906              	 .loc 1 1938 0 is_stmt 1
 1907 001a FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 1908 001e 031C     	 mov r3,r0
 1909 0020 FB60     	 str r3,[r7,#12]
1939:../Dave/Generated/FREERTOS/tasks.c ****         {
1940:../Dave/Generated/FREERTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1910              	 .loc 1 1940 0
 1911 0022 3B69     	 ldr r3,[r7,#16]
 1912 0024 181C     	 mov r0,r3
 1913 0026 FFF7FEFF 	 bl prvTaskIsTaskSuspended
 1914 002a 031E     	 sub r3,r0,#0
 1915 002c 34D0     	 beq .L142
1941:../Dave/Generated/FREERTOS/tasks.c ****             {
1942:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1943:../Dave/Generated/FREERTOS/tasks.c **** 
1944:../Dave/Generated/FREERTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1945:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1916              	 .loc 1 1945 0
 1917 002e 1F4B     	 ldr r3,.L148
 1918 0030 1B68     	 ldr r3,[r3]
 1919 0032 002B     	 cmp r3,#0
 1920 0034 29D1     	 bne .L143
1946:../Dave/Generated/FREERTOS/tasks.c ****                 {
1947:../Dave/Generated/FREERTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1948:../Dave/Generated/FREERTOS/tasks.c ****                      * suspended list to the ready list directly. */
1949:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1921              	 .loc 1 1949 0
 1922 0036 3B69     	 ldr r3,[r7,#16]
 1923 0038 DA6A     	 ldr r2,[r3,#44]
 1924 003a 1D4B     	 ldr r3,.L148+4
 1925 003c 1B68     	 ldr r3,[r3]
 1926 003e DB6A     	 ldr r3,[r3,#44]
 1927 0040 9A42     	 cmp r2,r3
 1928 0042 04D3     	 bcc .L144
1950:../Dave/Generated/FREERTOS/tasks.c ****                     {
1951:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldRequired = pdTRUE;
 1929              	 .loc 1 1951 0
 1930 0044 0123     	 mov r3,#1
 1931 0046 7B61     	 str r3,[r7,#20]
1952:../Dave/Generated/FREERTOS/tasks.c **** 
1953:../Dave/Generated/FREERTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1954:../Dave/Generated/FREERTOS/tasks.c ****                          * using the return value to initiate a context switch
1955:../Dave/Generated/FREERTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1956:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldPending = pdTRUE;
 1932              	 .loc 1 1956 0
 1933 0048 1A4B     	 ldr r3,.L148+8
 1934 004a 0122     	 mov r2,#1
 1935 004c 1A60     	 str r2,[r3]
 1936              	.L144:
1957:../Dave/Generated/FREERTOS/tasks.c ****                     }
1958:../Dave/Generated/FREERTOS/tasks.c ****                     else
1959:../Dave/Generated/FREERTOS/tasks.c ****                     {
1960:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1961:../Dave/Generated/FREERTOS/tasks.c ****                     }
1962:../Dave/Generated/FREERTOS/tasks.c **** 
1963:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1937              	 .loc 1 1963 0
 1938 004e 3B69     	 ldr r3,[r7,#16]
 1939 0050 0433     	 add r3,r3,#4
 1940 0052 181C     	 mov r0,r3
 1941 0054 FFF7FEFF 	 bl uxListRemove
1964:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1942              	 .loc 1 1964 0
 1943 0058 3B69     	 ldr r3,[r7,#16]
 1944 005a DA6A     	 ldr r2,[r3,#44]
 1945 005c 164B     	 ldr r3,.L148+12
 1946 005e 1B68     	 ldr r3,[r3]
 1947 0060 9A42     	 cmp r2,r3
 1948 0062 03D9     	 bls .L145
 1949              	 .loc 1 1964 0 is_stmt 0 discriminator 1
 1950 0064 3B69     	 ldr r3,[r7,#16]
 1951 0066 DA6A     	 ldr r2,[r3,#44]
 1952 0068 134B     	 ldr r3,.L148+12
 1953 006a 1A60     	 str r2,[r3]
 1954              	.L145:
 1955              	 .loc 1 1964 0 discriminator 3
 1956 006c 3B69     	 ldr r3,[r7,#16]
 1957 006e DA6A     	 ldr r2,[r3,#44]
 1958 0070 131C     	 mov r3,r2
 1959 0072 9B00     	 lsl r3,r3,#2
 1960 0074 9B18     	 add r3,r3,r2
 1961 0076 9B00     	 lsl r3,r3,#2
 1962 0078 104A     	 ldr r2,.L148+16
 1963 007a 9A18     	 add r2,r3,r2
 1964 007c 3B69     	 ldr r3,[r7,#16]
 1965 007e 0433     	 add r3,r3,#4
 1966 0080 101C     	 mov r0,r2
 1967 0082 191C     	 mov r1,r3
 1968 0084 FFF7FEFF 	 bl vListInsertEnd
 1969 0088 06E0     	 b .L142
 1970              	.L143:
1965:../Dave/Generated/FREERTOS/tasks.c ****                 }
1966:../Dave/Generated/FREERTOS/tasks.c ****                 else
1967:../Dave/Generated/FREERTOS/tasks.c ****                 {
1968:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1969:../Dave/Generated/FREERTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1970:../Dave/Generated/FREERTOS/tasks.c ****                      * unsuspended. */
1971:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1971              	 .loc 1 1971 0 is_stmt 1
 1972 008a 3B69     	 ldr r3,[r7,#16]
 1973 008c 1833     	 add r3,r3,#24
 1974 008e 0C4A     	 ldr r2,.L148+20
 1975 0090 101C     	 mov r0,r2
 1976 0092 191C     	 mov r1,r3
 1977 0094 FFF7FEFF 	 bl vListInsertEnd
 1978              	.L142:
1972:../Dave/Generated/FREERTOS/tasks.c ****                 }
1973:../Dave/Generated/FREERTOS/tasks.c ****             }
1974:../Dave/Generated/FREERTOS/tasks.c ****             else
1975:../Dave/Generated/FREERTOS/tasks.c ****             {
1976:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1977:../Dave/Generated/FREERTOS/tasks.c ****             }
1978:../Dave/Generated/FREERTOS/tasks.c ****         }
1979:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1979              	 .loc 1 1979 0
 1980 0098 FB68     	 ldr r3,[r7,#12]
 1981 009a 181C     	 mov r0,r3
 1982 009c FFF7FEFF 	 bl vClearInterruptMaskFromISR
1980:../Dave/Generated/FREERTOS/tasks.c **** 
1981:../Dave/Generated/FREERTOS/tasks.c ****         return xYieldRequired;
 1983              	 .loc 1 1981 0
 1984 00a0 7B69     	 ldr r3,[r7,#20]
1982:../Dave/Generated/FREERTOS/tasks.c ****     }
 1985              	 .loc 1 1982 0
 1986 00a2 181C     	 mov r0,r3
 1987 00a4 BD46     	 mov sp,r7
 1988 00a6 06B0     	 add sp,sp,#24
 1989              	 
 1990 00a8 80BD     	 pop {r7,pc}
 1991              	.L149:
 1992 00aa C046     	 .align 2
 1993              	.L148:
 1994 00ac 00000000 	 .word uxSchedulerSuspended
 1995 00b0 00000000 	 .word pxCurrentTCB
 1996 00b4 00000000 	 .word xYieldPending
 1997 00b8 00000000 	 .word uxTopReadyPriority
 1998 00bc 00000000 	 .word pxReadyTasksLists
 1999 00c0 00000000 	 .word xPendingReadyList
 2000              	 .cfi_endproc
 2001              	.LFE55:
 2003              	 .section .rodata
 2004              	 .align 2
 2005              	.LC43:
 2006 0000 49444C45 	 .ascii "IDLE\000"
 2006      00
 2007              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2008              	 .align 2
 2009              	 .global vTaskStartScheduler
 2010              	 .code 16
 2011              	 .thumb_func
 2013              	vTaskStartScheduler:
 2014              	.LFB56:
1983:../Dave/Generated/FREERTOS/tasks.c **** 
1984:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1985:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1986:../Dave/Generated/FREERTOS/tasks.c **** 
1987:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1988:../Dave/Generated/FREERTOS/tasks.c **** {
 2015              	 .loc 1 1988 0
 2016              	 .cfi_startproc
 2017 0000 80B5     	 push {r7,lr}
 2018              	.LCFI42:
 2019              	 .cfi_def_cfa_offset 8
 2020              	 .cfi_offset 7,-8
 2021              	 .cfi_offset 14,-4
 2022 0002 84B0     	 sub sp,sp,#16
 2023              	.LCFI43:
 2024              	 .cfi_def_cfa_offset 24
 2025 0004 02AF     	 add r7,sp,#8
 2026              	.LCFI44:
 2027              	 .cfi_def_cfa 7,16
1989:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
1990:../Dave/Generated/FREERTOS/tasks.c **** 
1991:../Dave/Generated/FREERTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1992:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1993:../Dave/Generated/FREERTOS/tasks.c ****         {
1994:../Dave/Generated/FREERTOS/tasks.c ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1995:../Dave/Generated/FREERTOS/tasks.c ****             StackType_t * pxIdleTaskStackBuffer = NULL;
1996:../Dave/Generated/FREERTOS/tasks.c ****             uint32_t ulIdleTaskStackSize;
1997:../Dave/Generated/FREERTOS/tasks.c **** 
1998:../Dave/Generated/FREERTOS/tasks.c ****             /* The Idle task is created using user provided RAM - obtain the
1999:../Dave/Generated/FREERTOS/tasks.c ****              * address of the RAM then create the idle task. */
2000:../Dave/Generated/FREERTOS/tasks.c ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2001:../Dave/Generated/FREERTOS/tasks.c ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2002:../Dave/Generated/FREERTOS/tasks.c ****                                                  configIDLE_TASK_NAME,
2003:../Dave/Generated/FREERTOS/tasks.c ****                                                  ulIdleTaskStackSize,
2004:../Dave/Generated/FREERTOS/tasks.c ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2005:../Dave/Generated/FREERTOS/tasks.c ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2006:../Dave/Generated/FREERTOS/tasks.c ****                                                  pxIdleTaskStackBuffer,
2007:../Dave/Generated/FREERTOS/tasks.c ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2008:../Dave/Generated/FREERTOS/tasks.c **** 
2009:../Dave/Generated/FREERTOS/tasks.c ****             if( xIdleTaskHandle != NULL )
2010:../Dave/Generated/FREERTOS/tasks.c ****             {
2011:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
2012:../Dave/Generated/FREERTOS/tasks.c ****             }
2013:../Dave/Generated/FREERTOS/tasks.c ****             else
2014:../Dave/Generated/FREERTOS/tasks.c ****             {
2015:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
2016:../Dave/Generated/FREERTOS/tasks.c ****             }
2017:../Dave/Generated/FREERTOS/tasks.c ****         }
2018:../Dave/Generated/FREERTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2019:../Dave/Generated/FREERTOS/tasks.c ****         {
2020:../Dave/Generated/FREERTOS/tasks.c ****             /* The Idle task is being created using dynamically allocated RAM. */
2021:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xTaskCreate( prvIdleTask,
 2028              	 .loc 1 2021 0
 2029 0006 1849     	 ldr r1,.L155
 2030 0008 184A     	 ldr r2,.L155+4
 2031 000a 0023     	 mov r3,#0
 2032 000c 0093     	 str r3,[sp]
 2033 000e 184B     	 ldr r3,.L155+8
 2034 0010 0193     	 str r3,[sp,#4]
 2035 0012 081C     	 mov r0,r1
 2036 0014 111C     	 mov r1,r2
 2037 0016 3C22     	 mov r2,#60
 2038 0018 0023     	 mov r3,#0
 2039 001a FFF7FEFF 	 bl xTaskCreate
 2040 001e 031C     	 mov r3,r0
 2041 0020 7B60     	 str r3,[r7,#4]
2022:../Dave/Generated/FREERTOS/tasks.c ****                                    configIDLE_TASK_NAME,
2023:../Dave/Generated/FREERTOS/tasks.c ****                                    configMINIMAL_STACK_SIZE,
2024:../Dave/Generated/FREERTOS/tasks.c ****                                    ( void * ) NULL,
2025:../Dave/Generated/FREERTOS/tasks.c ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2026:../Dave/Generated/FREERTOS/tasks.c ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2027:../Dave/Generated/FREERTOS/tasks.c ****         }
2028:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2029:../Dave/Generated/FREERTOS/tasks.c **** 
2030:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2031:../Dave/Generated/FREERTOS/tasks.c ****         {
2032:../Dave/Generated/FREERTOS/tasks.c ****             if( xReturn == pdPASS )
 2042              	 .loc 1 2032 0
 2043 0022 7B68     	 ldr r3,[r7,#4]
 2044 0024 012B     	 cmp r3,#1
 2045 0026 03D1     	 bne .L151
2033:../Dave/Generated/FREERTOS/tasks.c ****             {
2034:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = xTimerCreateTimerTask();
 2046              	 .loc 1 2034 0
 2047 0028 FFF7FEFF 	 bl xTimerCreateTimerTask
 2048 002c 031C     	 mov r3,r0
 2049 002e 7B60     	 str r3,[r7,#4]
 2050              	.L151:
2035:../Dave/Generated/FREERTOS/tasks.c ****             }
2036:../Dave/Generated/FREERTOS/tasks.c ****             else
2037:../Dave/Generated/FREERTOS/tasks.c ****             {
2038:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2039:../Dave/Generated/FREERTOS/tasks.c ****             }
2040:../Dave/Generated/FREERTOS/tasks.c ****         }
2041:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2042:../Dave/Generated/FREERTOS/tasks.c **** 
2043:../Dave/Generated/FREERTOS/tasks.c ****     if( xReturn == pdPASS )
 2051              	 .loc 1 2043 0
 2052 0030 7B68     	 ldr r3,[r7,#4]
 2053 0032 012B     	 cmp r3,#1
 2054 0034 0DD1     	 bne .L152
2044:../Dave/Generated/FREERTOS/tasks.c ****     {
2045:../Dave/Generated/FREERTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2046:../Dave/Generated/FREERTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2047:../Dave/Generated/FREERTOS/tasks.c ****          * the only macro called by the function. */
2048:../Dave/Generated/FREERTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2049:../Dave/Generated/FREERTOS/tasks.c ****             {
2050:../Dave/Generated/FREERTOS/tasks.c ****                 freertos_tasks_c_additions_init();
2051:../Dave/Generated/FREERTOS/tasks.c ****             }
2052:../Dave/Generated/FREERTOS/tasks.c ****         #endif
2053:../Dave/Generated/FREERTOS/tasks.c **** 
2054:../Dave/Generated/FREERTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2055:../Dave/Generated/FREERTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2056:../Dave/Generated/FREERTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2057:../Dave/Generated/FREERTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2058:../Dave/Generated/FREERTOS/tasks.c ****          * starts to run. */
2059:../Dave/Generated/FREERTOS/tasks.c ****         portDISABLE_INTERRUPTS();
 2055              	 .loc 1 2059 0
 2056              	
 2057 0036 72B6     	 cpsid i
 2058              	
2060:../Dave/Generated/FREERTOS/tasks.c **** 
2061:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2062:../Dave/Generated/FREERTOS/tasks.c ****             {
2063:../Dave/Generated/FREERTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2064:../Dave/Generated/FREERTOS/tasks.c ****                  * structure specific to the task that will run first.
2065:../Dave/Generated/FREERTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2066:../Dave/Generated/FREERTOS/tasks.c ****                  * for additional information. */
2067:../Dave/Generated/FREERTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2068:../Dave/Generated/FREERTOS/tasks.c ****             }
2069:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
2070:../Dave/Generated/FREERTOS/tasks.c **** 
2071:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 2059              	 .loc 1 2071 0
 2060              	 .code 16
 2061 0038 0E4B     	 ldr r3,.L155+12
 2062 003a 0122     	 mov r2,#1
 2063 003c 5242     	 neg r2,r2
 2064 003e 1A60     	 str r2,[r3]
2072:../Dave/Generated/FREERTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2065              	 .loc 1 2072 0
 2066 0040 0D4B     	 ldr r3,.L155+16
 2067 0042 0122     	 mov r2,#1
 2068 0044 1A60     	 str r2,[r3]
2073:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2069              	 .loc 1 2073 0
 2070 0046 0D4B     	 ldr r3,.L155+20
 2071 0048 0022     	 mov r2,#0
 2072 004a 1A60     	 str r2,[r3]
2074:../Dave/Generated/FREERTOS/tasks.c **** 
2075:../Dave/Generated/FREERTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2076:../Dave/Generated/FREERTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2077:../Dave/Generated/FREERTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2078:../Dave/Generated/FREERTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2079:../Dave/Generated/FREERTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2080:../Dave/Generated/FREERTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2081:../Dave/Generated/FREERTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2082:../Dave/Generated/FREERTOS/tasks.c **** 
2083:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2084:../Dave/Generated/FREERTOS/tasks.c **** 
2085:../Dave/Generated/FREERTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2086:../Dave/Generated/FREERTOS/tasks.c ****          * portable interface. */
2087:../Dave/Generated/FREERTOS/tasks.c ****         if( xPortStartScheduler() != pdFALSE )
 2073              	 .loc 1 2087 0
 2074 004c FFF7FEFF 	 bl xPortStartScheduler
 2075 0050 04E0     	 b .L153
 2076              	.L152:
2088:../Dave/Generated/FREERTOS/tasks.c ****         {
2089:../Dave/Generated/FREERTOS/tasks.c ****             /* Should not reach here as if the scheduler is running the
2090:../Dave/Generated/FREERTOS/tasks.c ****              * function will not return. */
2091:../Dave/Generated/FREERTOS/tasks.c ****         }
2092:../Dave/Generated/FREERTOS/tasks.c ****         else
2093:../Dave/Generated/FREERTOS/tasks.c ****         {
2094:../Dave/Generated/FREERTOS/tasks.c ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2095:../Dave/Generated/FREERTOS/tasks.c ****         }
2096:../Dave/Generated/FREERTOS/tasks.c ****     }
2097:../Dave/Generated/FREERTOS/tasks.c ****     else
2098:../Dave/Generated/FREERTOS/tasks.c ****     {
2099:../Dave/Generated/FREERTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2100:../Dave/Generated/FREERTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2101:../Dave/Generated/FREERTOS/tasks.c ****          * or the timer task. */
2102:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 2077              	 .loc 1 2102 0
 2078 0052 7B68     	 ldr r3,[r7,#4]
 2079 0054 0133     	 add r3,r3,#1
 2080 0056 01D1     	 bne .L153
 2081              	 .loc 1 2102 0 is_stmt 0 discriminator 1
 2082              	
 2083 0058 72B6     	 cpsid i
 2084              	
 2085              	 .code 16
 2086              	.L154:
 2087              	 .loc 1 2102 0 discriminator 2
 2088 005a FEE7     	 b .L154
 2089              	.L153:
2103:../Dave/Generated/FREERTOS/tasks.c ****     }
2104:../Dave/Generated/FREERTOS/tasks.c **** 
2105:../Dave/Generated/FREERTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2106:../Dave/Generated/FREERTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2107:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2108:../Dave/Generated/FREERTOS/tasks.c **** 
2109:../Dave/Generated/FREERTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2110:../Dave/Generated/FREERTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2111:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxTopUsedPriority;
 2090              	 .loc 1 2111 0 is_stmt 1
 2091 005c 084B     	 ldr r3,.L155+24
 2092 005e 1B68     	 ldr r3,[r3]
2112:../Dave/Generated/FREERTOS/tasks.c **** }
 2093              	 .loc 1 2112 0
 2094 0060 BD46     	 mov sp,r7
 2095 0062 02B0     	 add sp,sp,#8
 2096              	 
 2097 0064 80BD     	 pop {r7,pc}
 2098              	.L156:
 2099 0066 C046     	 .align 2
 2100              	.L155:
 2101 0068 00000000 	 .word prvIdleTask
 2102 006c 00000000 	 .word .LC43
 2103 0070 00000000 	 .word xIdleTaskHandle
 2104 0074 00000000 	 .word xNextTaskUnblockTime
 2105 0078 00000000 	 .word xSchedulerRunning
 2106 007c 00000000 	 .word xTickCount
 2107 0080 00000000 	 .word uxTopUsedPriority
 2108              	 .cfi_endproc
 2109              	.LFE56:
 2111              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2112              	 .align 2
 2113              	 .global vTaskEndScheduler
 2114              	 .code 16
 2115              	 .thumb_func
 2117              	vTaskEndScheduler:
 2118              	.LFB57:
2113:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2114:../Dave/Generated/FREERTOS/tasks.c **** 
2115:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
2116:../Dave/Generated/FREERTOS/tasks.c **** {
 2119              	 .loc 1 2116 0
 2120              	 .cfi_startproc
 2121 0000 80B5     	 push {r7,lr}
 2122              	.LCFI45:
 2123              	 .cfi_def_cfa_offset 8
 2124              	 .cfi_offset 7,-8
 2125              	 .cfi_offset 14,-4
 2126 0002 00AF     	 add r7,sp,#0
 2127              	.LCFI46:
 2128              	 .cfi_def_cfa_register 7
2117:../Dave/Generated/FREERTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2118:../Dave/Generated/FREERTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2119:../Dave/Generated/FREERTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2120:../Dave/Generated/FREERTOS/tasks.c ****     portDISABLE_INTERRUPTS();
 2129              	 .loc 1 2120 0
 2130              	
 2131 0004 72B6     	 cpsid i
 2132              	
2121:../Dave/Generated/FREERTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2133              	 .loc 1 2121 0
 2134              	 .code 16
 2135 0006 034B     	 ldr r3,.L158
 2136 0008 0022     	 mov r2,#0
 2137 000a 1A60     	 str r2,[r3]
2122:../Dave/Generated/FREERTOS/tasks.c ****     vPortEndScheduler();
 2138              	 .loc 1 2122 0
 2139 000c FFF7FEFF 	 bl vPortEndScheduler
2123:../Dave/Generated/FREERTOS/tasks.c **** }
 2140              	 .loc 1 2123 0
 2141 0010 BD46     	 mov sp,r7
 2142              	 
 2143 0012 80BD     	 pop {r7,pc}
 2144              	.L159:
 2145              	 .align 2
 2146              	.L158:
 2147 0014 00000000 	 .word xSchedulerRunning
 2148              	 .cfi_endproc
 2149              	.LFE57:
 2151              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2152              	 .align 2
 2153              	 .global vTaskSuspendAll
 2154              	 .code 16
 2155              	 .thumb_func
 2157              	vTaskSuspendAll:
 2158              	.LFB58:
2124:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2125:../Dave/Generated/FREERTOS/tasks.c **** 
2126:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
2127:../Dave/Generated/FREERTOS/tasks.c **** {
 2159              	 .loc 1 2127 0
 2160              	 .cfi_startproc
 2161 0000 80B5     	 push {r7,lr}
 2162              	.LCFI47:
 2163              	 .cfi_def_cfa_offset 8
 2164              	 .cfi_offset 7,-8
 2165              	 .cfi_offset 14,-4
 2166 0002 00AF     	 add r7,sp,#0
 2167              	.LCFI48:
 2168              	 .cfi_def_cfa_register 7
2128:../Dave/Generated/FREERTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2129:../Dave/Generated/FREERTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2130:../Dave/Generated/FREERTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2131:../Dave/Generated/FREERTOS/tasks.c ****      * https://goo.gl/wu4acr */
2132:../Dave/Generated/FREERTOS/tasks.c **** 
2133:../Dave/Generated/FREERTOS/tasks.c ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2134:../Dave/Generated/FREERTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2135:../Dave/Generated/FREERTOS/tasks.c ****     portSOFTWARE_BARRIER();
2136:../Dave/Generated/FREERTOS/tasks.c **** 
2137:../Dave/Generated/FREERTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2138:../Dave/Generated/FREERTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2139:../Dave/Generated/FREERTOS/tasks.c ****     ++uxSchedulerSuspended;
 2169              	 .loc 1 2139 0
 2170 0004 034B     	 ldr r3,.L161
 2171 0006 1B68     	 ldr r3,[r3]
 2172 0008 5A1C     	 add r2,r3,#1
 2173 000a 024B     	 ldr r3,.L161
 2174 000c 1A60     	 str r2,[r3]
2140:../Dave/Generated/FREERTOS/tasks.c **** 
2141:../Dave/Generated/FREERTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2142:../Dave/Generated/FREERTOS/tasks.c ****      * the above increment elsewhere. */
2143:../Dave/Generated/FREERTOS/tasks.c ****     portMEMORY_BARRIER();
 2175              	 .loc 1 2143 0
2144:../Dave/Generated/FREERTOS/tasks.c **** }
 2176              	 .loc 1 2144 0
 2177 000e BD46     	 mov sp,r7
 2178              	 
 2179 0010 80BD     	 pop {r7,pc}
 2180              	.L162:
 2181 0012 C046     	 .align 2
 2182              	.L161:
 2183 0014 00000000 	 .word uxSchedulerSuspended
 2184              	 .cfi_endproc
 2185              	.LFE58:
 2187              	 .section .text.xTaskResumeAll,"ax",%progbits
 2188              	 .align 2
 2189              	 .global xTaskResumeAll
 2190              	 .code 16
 2191              	 .thumb_func
 2193              	xTaskResumeAll:
 2194              	.LFB59:
2145:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2146:../Dave/Generated/FREERTOS/tasks.c **** 
2147:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2148:../Dave/Generated/FREERTOS/tasks.c **** 
2149:../Dave/Generated/FREERTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2150:../Dave/Generated/FREERTOS/tasks.c ****     {
2151:../Dave/Generated/FREERTOS/tasks.c ****         TickType_t xReturn;
2152:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2153:../Dave/Generated/FREERTOS/tasks.c **** 
2154:../Dave/Generated/FREERTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2155:../Dave/Generated/FREERTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2156:../Dave/Generated/FREERTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2157:../Dave/Generated/FREERTOS/tasks.c ****          * running. */
2158:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2159:../Dave/Generated/FREERTOS/tasks.c ****             {
2160:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2161:../Dave/Generated/FREERTOS/tasks.c ****                 {
2162:../Dave/Generated/FREERTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2163:../Dave/Generated/FREERTOS/tasks.c ****                 }
2164:../Dave/Generated/FREERTOS/tasks.c ****             }
2165:../Dave/Generated/FREERTOS/tasks.c ****         #else
2166:../Dave/Generated/FREERTOS/tasks.c ****             {
2167:../Dave/Generated/FREERTOS/tasks.c ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2168:../Dave/Generated/FREERTOS/tasks.c **** 
2169:../Dave/Generated/FREERTOS/tasks.c ****                 /* When port optimised task selection is used the uxTopReadyPriority
2170:../Dave/Generated/FREERTOS/tasks.c ****                  * variable is used as a bit map.  If bits other than the least
2171:../Dave/Generated/FREERTOS/tasks.c ****                  * significant bit are set then there are tasks that have a priority
2172:../Dave/Generated/FREERTOS/tasks.c ****                  * above the idle priority that are in the Ready state.  This takes
2173:../Dave/Generated/FREERTOS/tasks.c ****                  * care of the case where the co-operative scheduler is in use. */
2174:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2175:../Dave/Generated/FREERTOS/tasks.c ****                 {
2176:../Dave/Generated/FREERTOS/tasks.c ****                     uxHigherPriorityReadyTasks = pdTRUE;
2177:../Dave/Generated/FREERTOS/tasks.c ****                 }
2178:../Dave/Generated/FREERTOS/tasks.c ****             }
2179:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2180:../Dave/Generated/FREERTOS/tasks.c **** 
2181:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2182:../Dave/Generated/FREERTOS/tasks.c ****         {
2183:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2184:../Dave/Generated/FREERTOS/tasks.c ****         }
2185:../Dave/Generated/FREERTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2186:../Dave/Generated/FREERTOS/tasks.c ****         {
2187:../Dave/Generated/FREERTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2188:../Dave/Generated/FREERTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2189:../Dave/Generated/FREERTOS/tasks.c ****              * processed. */
2190:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2191:../Dave/Generated/FREERTOS/tasks.c ****         }
2192:../Dave/Generated/FREERTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2193:../Dave/Generated/FREERTOS/tasks.c ****         {
2194:../Dave/Generated/FREERTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2195:../Dave/Generated/FREERTOS/tasks.c ****              * idle priority.  This path can only be reached if
2196:../Dave/Generated/FREERTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2197:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = 0;
2198:../Dave/Generated/FREERTOS/tasks.c ****         }
2199:../Dave/Generated/FREERTOS/tasks.c ****         else
2200:../Dave/Generated/FREERTOS/tasks.c ****         {
2201:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2202:../Dave/Generated/FREERTOS/tasks.c ****         }
2203:../Dave/Generated/FREERTOS/tasks.c **** 
2204:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2205:../Dave/Generated/FREERTOS/tasks.c ****     }
2206:../Dave/Generated/FREERTOS/tasks.c **** 
2207:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2208:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2209:../Dave/Generated/FREERTOS/tasks.c **** 
2210:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2211:../Dave/Generated/FREERTOS/tasks.c **** {
 2195              	 .loc 1 2211 0
 2196              	 .cfi_startproc
 2197 0000 80B5     	 push {r7,lr}
 2198              	.LCFI49:
 2199              	 .cfi_def_cfa_offset 8
 2200              	 .cfi_offset 7,-8
 2201              	 .cfi_offset 14,-4
 2202 0002 84B0     	 sub sp,sp,#16
 2203              	.LCFI50:
 2204              	 .cfi_def_cfa_offset 24
 2205 0004 00AF     	 add r7,sp,#0
 2206              	.LCFI51:
 2207              	 .cfi_def_cfa_register 7
2212:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2208              	 .loc 1 2212 0
 2209 0006 0023     	 mov r3,#0
 2210 0008 FB60     	 str r3,[r7,#12]
2213:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2211              	 .loc 1 2213 0
 2212 000a 0023     	 mov r3,#0
 2213 000c BB60     	 str r3,[r7,#8]
2214:../Dave/Generated/FREERTOS/tasks.c **** 
2215:../Dave/Generated/FREERTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2216:../Dave/Generated/FREERTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
2217:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
 2214              	 .loc 1 2217 0
 2215 000e 3A4B     	 ldr r3,.L175
 2216 0010 1B68     	 ldr r3,[r3]
 2217 0012 002B     	 cmp r3,#0
 2218 0014 01D1     	 bne .L164
 2219              	 .loc 1 2217 0 is_stmt 0 discriminator 1
 2220              	
 2221 0016 72B6     	 cpsid i
 2222              	
 2223              	 .code 16
 2224              	.L165:
 2225 0018 FEE7     	 b .L165
 2226              	.L164:
2218:../Dave/Generated/FREERTOS/tasks.c **** 
2219:../Dave/Generated/FREERTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2220:../Dave/Generated/FREERTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2221:../Dave/Generated/FREERTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2222:../Dave/Generated/FREERTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2223:../Dave/Generated/FREERTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2224:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 2227              	 .loc 1 2224 0 is_stmt 1
 2228 001a FFF7FEFF 	 bl vPortEnterCritical
2225:../Dave/Generated/FREERTOS/tasks.c ****     {
2226:../Dave/Generated/FREERTOS/tasks.c ****         --uxSchedulerSuspended;
 2229              	 .loc 1 2226 0
 2230 001e 364B     	 ldr r3,.L175
 2231 0020 1B68     	 ldr r3,[r3]
 2232 0022 5A1E     	 sub r2,r3,#1
 2233 0024 344B     	 ldr r3,.L175
 2234 0026 1A60     	 str r2,[r3]
2227:../Dave/Generated/FREERTOS/tasks.c **** 
2228:../Dave/Generated/FREERTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2235              	 .loc 1 2228 0
 2236 0028 334B     	 ldr r3,.L175
 2237 002a 1B68     	 ldr r3,[r3]
 2238 002c 002B     	 cmp r3,#0
 2239 002e 5BD1     	 bne .L166
2229:../Dave/Generated/FREERTOS/tasks.c ****         {
2230:../Dave/Generated/FREERTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2240              	 .loc 1 2230 0
 2241 0030 324B     	 ldr r3,.L175+4
 2242 0032 1B68     	 ldr r3,[r3]
 2243 0034 002B     	 cmp r3,#0
 2244 0036 57D0     	 beq .L166
2231:../Dave/Generated/FREERTOS/tasks.c ****             {
2232:../Dave/Generated/FREERTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2233:../Dave/Generated/FREERTOS/tasks.c ****                  * appropriate ready list. */
2234:../Dave/Generated/FREERTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2245              	 .loc 1 2234 0
 2246 0038 2FE0     	 b .L167
 2247              	.L169:
2235:../Dave/Generated/FREERTOS/tasks.c ****                 {
2236:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
 2248              	 .loc 1 2236 0
 2249 003a 314B     	 ldr r3,.L175+8
 2250 003c DB68     	 ldr r3,[r3,#12]
 2251 003e DB68     	 ldr r3,[r3,#12]
 2252 0040 FB60     	 str r3,[r7,#12]
2237:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2253              	 .loc 1 2237 0
 2254 0042 FB68     	 ldr r3,[r7,#12]
 2255 0044 1833     	 add r3,r3,#24
 2256 0046 181C     	 mov r0,r3
 2257 0048 FFF7FEFF 	 bl uxListRemove
2238:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2258              	 .loc 1 2238 0
 2259 004c FB68     	 ldr r3,[r7,#12]
 2260 004e 0433     	 add r3,r3,#4
 2261 0050 181C     	 mov r0,r3
 2262 0052 FFF7FEFF 	 bl uxListRemove
2239:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2263              	 .loc 1 2239 0
 2264 0056 FB68     	 ldr r3,[r7,#12]
 2265 0058 DA6A     	 ldr r2,[r3,#44]
 2266 005a 2A4B     	 ldr r3,.L175+12
 2267 005c 1B68     	 ldr r3,[r3]
 2268 005e 9A42     	 cmp r2,r3
 2269 0060 03D9     	 bls .L168
 2270              	 .loc 1 2239 0 is_stmt 0 discriminator 1
 2271 0062 FB68     	 ldr r3,[r7,#12]
 2272 0064 DA6A     	 ldr r2,[r3,#44]
 2273 0066 274B     	 ldr r3,.L175+12
 2274 0068 1A60     	 str r2,[r3]
 2275              	.L168:
 2276              	 .loc 1 2239 0 discriminator 3
 2277 006a FB68     	 ldr r3,[r7,#12]
 2278 006c DA6A     	 ldr r2,[r3,#44]
 2279 006e 131C     	 mov r3,r2
 2280 0070 9B00     	 lsl r3,r3,#2
 2281 0072 9B18     	 add r3,r3,r2
 2282 0074 9B00     	 lsl r3,r3,#2
 2283 0076 244A     	 ldr r2,.L175+16
 2284 0078 9A18     	 add r2,r3,r2
 2285 007a FB68     	 ldr r3,[r7,#12]
 2286 007c 0433     	 add r3,r3,#4
 2287 007e 101C     	 mov r0,r2
 2288 0080 191C     	 mov r1,r3
 2289 0082 FFF7FEFF 	 bl vListInsertEnd
2240:../Dave/Generated/FREERTOS/tasks.c **** 
2241:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the moved task has a priority higher than the current
2242:../Dave/Generated/FREERTOS/tasks.c ****                      * task then a yield must be performed. */
2243:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2290              	 .loc 1 2243 0 is_stmt 1 discriminator 3
 2291 0086 FB68     	 ldr r3,[r7,#12]
 2292 0088 DA6A     	 ldr r2,[r3,#44]
 2293 008a 204B     	 ldr r3,.L175+20
 2294 008c 1B68     	 ldr r3,[r3]
 2295 008e DB6A     	 ldr r3,[r3,#44]
 2296 0090 9A42     	 cmp r2,r3
 2297 0092 02D3     	 bcc .L167
2244:../Dave/Generated/FREERTOS/tasks.c ****                     {
2245:../Dave/Generated/FREERTOS/tasks.c ****                         xYieldPending = pdTRUE;
 2298              	 .loc 1 2245 0
 2299 0094 1E4B     	 ldr r3,.L175+24
 2300 0096 0122     	 mov r2,#1
 2301 0098 1A60     	 str r2,[r3]
 2302              	.L167:
2234:../Dave/Generated/FREERTOS/tasks.c ****                 {
 2303              	 .loc 1 2234 0
 2304 009a 194B     	 ldr r3,.L175+8
 2305 009c 1B68     	 ldr r3,[r3]
 2306 009e 002B     	 cmp r3,#0
 2307 00a0 CBD1     	 bne .L169
2246:../Dave/Generated/FREERTOS/tasks.c ****                     }
2247:../Dave/Generated/FREERTOS/tasks.c ****                     else
2248:../Dave/Generated/FREERTOS/tasks.c ****                     {
2249:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2250:../Dave/Generated/FREERTOS/tasks.c ****                     }
2251:../Dave/Generated/FREERTOS/tasks.c ****                 }
2252:../Dave/Generated/FREERTOS/tasks.c **** 
2253:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB != NULL )
 2308              	 .loc 1 2253 0
 2309 00a2 FB68     	 ldr r3,[r7,#12]
 2310 00a4 002B     	 cmp r3,#0
 2311 00a6 01D0     	 beq .L170
2254:../Dave/Generated/FREERTOS/tasks.c ****                 {
2255:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2256:../Dave/Generated/FREERTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2257:../Dave/Generated/FREERTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2258:../Dave/Generated/FREERTOS/tasks.c ****                      * important for low power tickless implementations, where
2259:../Dave/Generated/FREERTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2260:../Dave/Generated/FREERTOS/tasks.c ****                      * state. */
2261:../Dave/Generated/FREERTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
 2312              	 .loc 1 2261 0
 2313 00a8 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2314              	.L170:
 2315              	.LBB6:
2262:../Dave/Generated/FREERTOS/tasks.c ****                 }
2263:../Dave/Generated/FREERTOS/tasks.c **** 
2264:../Dave/Generated/FREERTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2265:../Dave/Generated/FREERTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2266:../Dave/Generated/FREERTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2267:../Dave/Generated/FREERTOS/tasks.c ****                  * time. */
2268:../Dave/Generated/FREERTOS/tasks.c ****                 {
2269:../Dave/Generated/FREERTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2316              	 .loc 1 2269 0
 2317 00ac 194B     	 ldr r3,.L175+28
 2318 00ae 1B68     	 ldr r3,[r3]
 2319 00b0 7B60     	 str r3,[r7,#4]
2270:../Dave/Generated/FREERTOS/tasks.c **** 
2271:../Dave/Generated/FREERTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
 2320              	 .loc 1 2271 0
 2321 00b2 7B68     	 ldr r3,[r7,#4]
 2322 00b4 002B     	 cmp r3,#0
 2323 00b6 0FD0     	 beq .L171
 2324              	.L173:
2272:../Dave/Generated/FREERTOS/tasks.c ****                     {
2273:../Dave/Generated/FREERTOS/tasks.c ****                         do
2274:../Dave/Generated/FREERTOS/tasks.c ****                         {
2275:../Dave/Generated/FREERTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
 2325              	 .loc 1 2275 0
 2326 00b8 FFF7FEFF 	 bl xTaskIncrementTick
 2327 00bc 031E     	 sub r3,r0,#0
 2328 00be 02D0     	 beq .L172
2276:../Dave/Generated/FREERTOS/tasks.c ****                             {
2277:../Dave/Generated/FREERTOS/tasks.c ****                                 xYieldPending = pdTRUE;
 2329              	 .loc 1 2277 0
 2330 00c0 134B     	 ldr r3,.L175+24
 2331 00c2 0122     	 mov r2,#1
 2332 00c4 1A60     	 str r2,[r3]
 2333              	.L172:
2278:../Dave/Generated/FREERTOS/tasks.c ****                             }
2279:../Dave/Generated/FREERTOS/tasks.c ****                             else
2280:../Dave/Generated/FREERTOS/tasks.c ****                             {
2281:../Dave/Generated/FREERTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2282:../Dave/Generated/FREERTOS/tasks.c ****                             }
2283:../Dave/Generated/FREERTOS/tasks.c **** 
2284:../Dave/Generated/FREERTOS/tasks.c ****                             --xPendedCounts;
 2334              	 .loc 1 2284 0
 2335 00c6 7B68     	 ldr r3,[r7,#4]
 2336 00c8 013B     	 sub r3,r3,#1
 2337 00ca 7B60     	 str r3,[r7,#4]
2285:../Dave/Generated/FREERTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2338              	 .loc 1 2285 0
 2339 00cc 7B68     	 ldr r3,[r7,#4]
 2340 00ce 002B     	 cmp r3,#0
 2341 00d0 F2D1     	 bne .L173
2286:../Dave/Generated/FREERTOS/tasks.c **** 
2287:../Dave/Generated/FREERTOS/tasks.c ****                         xPendedTicks = 0;
 2342              	 .loc 1 2287 0
 2343 00d2 104B     	 ldr r3,.L175+28
 2344 00d4 0022     	 mov r2,#0
 2345 00d6 1A60     	 str r2,[r3]
 2346              	.L171:
 2347              	.LBE6:
2288:../Dave/Generated/FREERTOS/tasks.c ****                     }
2289:../Dave/Generated/FREERTOS/tasks.c ****                     else
2290:../Dave/Generated/FREERTOS/tasks.c ****                     {
2291:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2292:../Dave/Generated/FREERTOS/tasks.c ****                     }
2293:../Dave/Generated/FREERTOS/tasks.c ****                 }
2294:../Dave/Generated/FREERTOS/tasks.c **** 
2295:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 2348              	 .loc 1 2295 0
 2349 00d8 0D4B     	 ldr r3,.L175+24
 2350 00da 1B68     	 ldr r3,[r3]
 2351 00dc 002B     	 cmp r3,#0
 2352 00de 03D0     	 beq .L166
2296:../Dave/Generated/FREERTOS/tasks.c ****                 {
2297:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2298:../Dave/Generated/FREERTOS/tasks.c ****                         {
2299:../Dave/Generated/FREERTOS/tasks.c ****                             xAlreadyYielded = pdTRUE;
 2353              	 .loc 1 2299 0
 2354 00e0 0123     	 mov r3,#1
 2355 00e2 BB60     	 str r3,[r7,#8]
2300:../Dave/Generated/FREERTOS/tasks.c ****                         }
2301:../Dave/Generated/FREERTOS/tasks.c ****                     #endif
2302:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 2356              	 .loc 1 2302 0
 2357 00e4 FFF7FEFF 	 bl vPortYield
 2358              	.L166:
2303:../Dave/Generated/FREERTOS/tasks.c ****                 }
2304:../Dave/Generated/FREERTOS/tasks.c ****                 else
2305:../Dave/Generated/FREERTOS/tasks.c ****                 {
2306:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2307:../Dave/Generated/FREERTOS/tasks.c ****                 }
2308:../Dave/Generated/FREERTOS/tasks.c ****             }
2309:../Dave/Generated/FREERTOS/tasks.c ****         }
2310:../Dave/Generated/FREERTOS/tasks.c ****         else
2311:../Dave/Generated/FREERTOS/tasks.c ****         {
2312:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2313:../Dave/Generated/FREERTOS/tasks.c ****         }
2314:../Dave/Generated/FREERTOS/tasks.c ****     }
2315:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 2359              	 .loc 1 2315 0
 2360 00e8 FFF7FEFF 	 bl vPortExitCritical
2316:../Dave/Generated/FREERTOS/tasks.c **** 
2317:../Dave/Generated/FREERTOS/tasks.c ****     return xAlreadyYielded;
 2361              	 .loc 1 2317 0
 2362 00ec BB68     	 ldr r3,[r7,#8]
2318:../Dave/Generated/FREERTOS/tasks.c **** }
 2363              	 .loc 1 2318 0
 2364 00ee 181C     	 mov r0,r3
 2365 00f0 BD46     	 mov sp,r7
 2366 00f2 04B0     	 add sp,sp,#16
 2367              	 
 2368 00f4 80BD     	 pop {r7,pc}
 2369              	.L176:
 2370 00f6 C046     	 .align 2
 2371              	.L175:
 2372 00f8 00000000 	 .word uxSchedulerSuspended
 2373 00fc 00000000 	 .word uxCurrentNumberOfTasks
 2374 0100 00000000 	 .word xPendingReadyList
 2375 0104 00000000 	 .word uxTopReadyPriority
 2376 0108 00000000 	 .word pxReadyTasksLists
 2377 010c 00000000 	 .word pxCurrentTCB
 2378 0110 00000000 	 .word xYieldPending
 2379 0114 00000000 	 .word xPendedTicks
 2380              	 .cfi_endproc
 2381              	.LFE59:
 2383              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2384              	 .align 2
 2385              	 .global xTaskGetTickCount
 2386              	 .code 16
 2387              	 .thumb_func
 2389              	xTaskGetTickCount:
 2390              	.LFB60:
2319:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:../Dave/Generated/FREERTOS/tasks.c **** 
2321:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2322:../Dave/Generated/FREERTOS/tasks.c **** {
 2391              	 .loc 1 2322 0
 2392              	 .cfi_startproc
 2393 0000 80B5     	 push {r7,lr}
 2394              	.LCFI52:
 2395              	 .cfi_def_cfa_offset 8
 2396              	 .cfi_offset 7,-8
 2397              	 .cfi_offset 14,-4
 2398 0002 82B0     	 sub sp,sp,#8
 2399              	.LCFI53:
 2400              	 .cfi_def_cfa_offset 16
 2401 0004 00AF     	 add r7,sp,#0
 2402              	.LCFI54:
 2403              	 .cfi_def_cfa_register 7
2323:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xTicks;
2324:../Dave/Generated/FREERTOS/tasks.c **** 
2325:../Dave/Generated/FREERTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2326:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2327:../Dave/Generated/FREERTOS/tasks.c ****     {
2328:../Dave/Generated/FREERTOS/tasks.c ****         xTicks = xTickCount;
 2404              	 .loc 1 2328 0
 2405 0006 044B     	 ldr r3,.L179
 2406 0008 1B68     	 ldr r3,[r3]
 2407 000a 7B60     	 str r3,[r7,#4]
2329:../Dave/Generated/FREERTOS/tasks.c ****     }
2330:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2331:../Dave/Generated/FREERTOS/tasks.c **** 
2332:../Dave/Generated/FREERTOS/tasks.c ****     return xTicks;
 2408              	 .loc 1 2332 0
 2409 000c 7B68     	 ldr r3,[r7,#4]
2333:../Dave/Generated/FREERTOS/tasks.c **** }
 2410              	 .loc 1 2333 0
 2411 000e 181C     	 mov r0,r3
 2412 0010 BD46     	 mov sp,r7
 2413 0012 02B0     	 add sp,sp,#8
 2414              	 
 2415 0014 80BD     	 pop {r7,pc}
 2416              	.L180:
 2417 0016 C046     	 .align 2
 2418              	.L179:
 2419 0018 00000000 	 .word xTickCount
 2420              	 .cfi_endproc
 2421              	.LFE60:
 2423              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2424              	 .align 2
 2425              	 .global xTaskGetTickCountFromISR
 2426              	 .code 16
 2427              	 .thumb_func
 2429              	xTaskGetTickCountFromISR:
 2430              	.LFB61:
2334:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2335:../Dave/Generated/FREERTOS/tasks.c **** 
2336:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2337:../Dave/Generated/FREERTOS/tasks.c **** {
 2431              	 .loc 1 2337 0
 2432              	 .cfi_startproc
 2433 0000 80B5     	 push {r7,lr}
 2434              	.LCFI55:
 2435              	 .cfi_def_cfa_offset 8
 2436              	 .cfi_offset 7,-8
 2437              	 .cfi_offset 14,-4
 2438 0002 82B0     	 sub sp,sp,#8
 2439              	.LCFI56:
 2440              	 .cfi_def_cfa_offset 16
 2441 0004 00AF     	 add r7,sp,#0
 2442              	.LCFI57:
 2443              	 .cfi_def_cfa_register 7
2338:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xReturn;
2339:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2340:../Dave/Generated/FREERTOS/tasks.c **** 
2341:../Dave/Generated/FREERTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2342:../Dave/Generated/FREERTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2343:../Dave/Generated/FREERTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2344:../Dave/Generated/FREERTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2345:../Dave/Generated/FREERTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2346:../Dave/Generated/FREERTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2347:../Dave/Generated/FREERTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2348:../Dave/Generated/FREERTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2349:../Dave/Generated/FREERTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2350:../Dave/Generated/FREERTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2351:../Dave/Generated/FREERTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2352:../Dave/Generated/FREERTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2353:../Dave/Generated/FREERTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2354:../Dave/Generated/FREERTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2355:../Dave/Generated/FREERTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2356:../Dave/Generated/FREERTOS/tasks.c **** 
2357:../Dave/Generated/FREERTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2444              	 .loc 1 2357 0
 2445 0006 0023     	 mov r3,#0
 2446 0008 7B60     	 str r3,[r7,#4]
2358:../Dave/Generated/FREERTOS/tasks.c ****     {
2359:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = xTickCount;
 2447              	 .loc 1 2359 0
 2448 000a 044B     	 ldr r3,.L183
 2449 000c 1B68     	 ldr r3,[r3]
 2450 000e 3B60     	 str r3,[r7]
2360:../Dave/Generated/FREERTOS/tasks.c ****     }
2361:../Dave/Generated/FREERTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2362:../Dave/Generated/FREERTOS/tasks.c **** 
2363:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 2451              	 .loc 1 2363 0
 2452 0010 3B68     	 ldr r3,[r7]
2364:../Dave/Generated/FREERTOS/tasks.c **** }
 2453              	 .loc 1 2364 0
 2454 0012 181C     	 mov r0,r3
 2455 0014 BD46     	 mov sp,r7
 2456 0016 02B0     	 add sp,sp,#8
 2457              	 
 2458 0018 80BD     	 pop {r7,pc}
 2459              	.L184:
 2460 001a C046     	 .align 2
 2461              	.L183:
 2462 001c 00000000 	 .word xTickCount
 2463              	 .cfi_endproc
 2464              	.LFE61:
 2466              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2467              	 .align 2
 2468              	 .global uxTaskGetNumberOfTasks
 2469              	 .code 16
 2470              	 .thumb_func
 2472              	uxTaskGetNumberOfTasks:
 2473              	.LFB62:
2365:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2366:../Dave/Generated/FREERTOS/tasks.c **** 
2367:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2368:../Dave/Generated/FREERTOS/tasks.c **** {
 2474              	 .loc 1 2368 0
 2475              	 .cfi_startproc
 2476 0000 80B5     	 push {r7,lr}
 2477              	.LCFI58:
 2478              	 .cfi_def_cfa_offset 8
 2479              	 .cfi_offset 7,-8
 2480              	 .cfi_offset 14,-4
 2481 0002 00AF     	 add r7,sp,#0
 2482              	.LCFI59:
 2483              	 .cfi_def_cfa_register 7
2369:../Dave/Generated/FREERTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2370:../Dave/Generated/FREERTOS/tasks.c ****      * BaseType_t. */
2371:../Dave/Generated/FREERTOS/tasks.c ****     return uxCurrentNumberOfTasks;
 2484              	 .loc 1 2371 0
 2485 0004 024B     	 ldr r3,.L187
 2486 0006 1B68     	 ldr r3,[r3]
2372:../Dave/Generated/FREERTOS/tasks.c **** }
 2487              	 .loc 1 2372 0
 2488 0008 181C     	 mov r0,r3
 2489 000a BD46     	 mov sp,r7
 2490              	 
 2491 000c 80BD     	 pop {r7,pc}
 2492              	.L188:
 2493 000e C046     	 .align 2
 2494              	.L187:
 2495 0010 00000000 	 .word uxCurrentNumberOfTasks
 2496              	 .cfi_endproc
 2497              	.LFE62:
 2499              	 .section .text.pcTaskGetName,"ax",%progbits
 2500              	 .align 2
 2501              	 .global pcTaskGetName
 2502              	 .code 16
 2503              	 .thumb_func
 2505              	pcTaskGetName:
 2506              	.LFB63:
2373:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2374:../Dave/Generated/FREERTOS/tasks.c **** 
2375:../Dave/Generated/FREERTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2376:../Dave/Generated/FREERTOS/tasks.c **** {
 2507              	 .loc 1 2376 0
 2508              	 .cfi_startproc
 2509 0000 80B5     	 push {r7,lr}
 2510              	.LCFI60:
 2511              	 .cfi_def_cfa_offset 8
 2512              	 .cfi_offset 7,-8
 2513              	 .cfi_offset 14,-4
 2514 0002 84B0     	 sub sp,sp,#16
 2515              	.LCFI61:
 2516              	 .cfi_def_cfa_offset 24
 2517 0004 00AF     	 add r7,sp,#0
 2518              	.LCFI62:
 2519              	 .cfi_def_cfa_register 7
 2520 0006 7860     	 str r0,[r7,#4]
2377:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB;
2378:../Dave/Generated/FREERTOS/tasks.c **** 
2379:../Dave/Generated/FREERTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2380:../Dave/Generated/FREERTOS/tasks.c ****      * queried. */
2381:../Dave/Generated/FREERTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2521              	 .loc 1 2381 0
 2522 0008 7B68     	 ldr r3,[r7,#4]
 2523 000a 002B     	 cmp r3,#0
 2524 000c 02D1     	 bne .L190
 2525              	 .loc 1 2381 0 is_stmt 0 discriminator 1
 2526 000e 084B     	 ldr r3,.L195
 2527 0010 1B68     	 ldr r3,[r3]
 2528 0012 00E0     	 b .L191
 2529              	.L190:
 2530              	 .loc 1 2381 0 discriminator 2
 2531 0014 7B68     	 ldr r3,[r7,#4]
 2532              	.L191:
 2533              	 .loc 1 2381 0 discriminator 4
 2534 0016 FB60     	 str r3,[r7,#12]
2382:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTCB );
 2535              	 .loc 1 2382 0 is_stmt 1 discriminator 4
 2536 0018 FB68     	 ldr r3,[r7,#12]
 2537 001a 002B     	 cmp r3,#0
 2538 001c 01D1     	 bne .L192
 2539              	 .loc 1 2382 0 is_stmt 0 discriminator 1
 2540              	
 2541 001e 72B6     	 cpsid i
 2542              	
 2543              	 .code 16
 2544              	.L193:
 2545 0020 FEE7     	 b .L193
 2546              	.L192:
2383:../Dave/Generated/FREERTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2547              	 .loc 1 2383 0 is_stmt 1
 2548 0022 FB68     	 ldr r3,[r7,#12]
 2549 0024 3433     	 add r3,r3,#52
2384:../Dave/Generated/FREERTOS/tasks.c **** }
 2550              	 .loc 1 2384 0
 2551 0026 181C     	 mov r0,r3
 2552 0028 BD46     	 mov sp,r7
 2553 002a 04B0     	 add sp,sp,#16
 2554              	 
 2555 002c 80BD     	 pop {r7,pc}
 2556              	.L196:
 2557 002e C046     	 .align 2
 2558              	.L195:
 2559 0030 00000000 	 .word pxCurrentTCB
 2560              	 .cfi_endproc
 2561              	.LFE63:
 2563              	 .section .text.prvSearchForNameWithinSingleList,"ax",%progbits
 2564              	 .align 2
 2565              	 .code 16
 2566              	 .thumb_func
 2568              	prvSearchForNameWithinSingleList:
 2569              	.LFB64:
2385:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:../Dave/Generated/FREERTOS/tasks.c **** 
2387:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2388:../Dave/Generated/FREERTOS/tasks.c **** 
2389:../Dave/Generated/FREERTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2390:../Dave/Generated/FREERTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2391:../Dave/Generated/FREERTOS/tasks.c ****     {
 2570              	 .loc 1 2391 0
 2571              	 .cfi_startproc
 2572 0000 80B5     	 push {r7,lr}
 2573              	.LCFI63:
 2574              	 .cfi_def_cfa_offset 8
 2575              	 .cfi_offset 7,-8
 2576              	 .cfi_offset 14,-4
 2577 0002 8AB0     	 sub sp,sp,#40
 2578              	.LCFI64:
 2579              	 .cfi_def_cfa_offset 48
 2580 0004 00AF     	 add r7,sp,#0
 2581              	.LCFI65:
 2582              	 .cfi_def_cfa_register 7
 2583 0006 7860     	 str r0,[r7,#4]
 2584 0008 3960     	 str r1,[r7]
2392:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 2585              	 .loc 1 2392 0
 2586 000a 0023     	 mov r3,#0
 2587 000c 7B62     	 str r3,[r7,#36]
2393:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t x;
2394:../Dave/Generated/FREERTOS/tasks.c ****         char cNextChar;
2395:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xBreakLoop;
2396:../Dave/Generated/FREERTOS/tasks.c **** 
2397:../Dave/Generated/FREERTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2398:../Dave/Generated/FREERTOS/tasks.c **** 
2399:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 2588              	 .loc 1 2399 0
 2589 000e 7B68     	 ldr r3,[r7,#4]
 2590 0010 1B68     	 ldr r3,[r3]
 2591 0012 002B     	 cmp r3,#0
 2592 0014 61D0     	 beq .L198
 2593              	.LBB7:
2400:../Dave/Generated/FREERTOS/tasks.c ****         {
2401:../Dave/Generated/FREERTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 2594              	 .loc 1 2401 0
 2595 0016 7B68     	 ldr r3,[r7,#4]
 2596 0018 BB61     	 str r3,[r7,#24]
 2597 001a BB69     	 ldr r3,[r7,#24]
 2598 001c 5B68     	 ldr r3,[r3,#4]
 2599 001e 5A68     	 ldr r2,[r3,#4]
 2600 0020 BB69     	 ldr r3,[r7,#24]
 2601 0022 5A60     	 str r2,[r3,#4]
 2602 0024 BB69     	 ldr r3,[r7,#24]
 2603 0026 5A68     	 ldr r2,[r3,#4]
 2604 0028 BB69     	 ldr r3,[r7,#24]
 2605 002a 0833     	 add r3,r3,#8
 2606 002c 9A42     	 cmp r2,r3
 2607 002e 04D1     	 bne .L199
 2608              	 .loc 1 2401 0 is_stmt 0 discriminator 1
 2609 0030 BB69     	 ldr r3,[r7,#24]
 2610 0032 5B68     	 ldr r3,[r3,#4]
 2611 0034 5A68     	 ldr r2,[r3,#4]
 2612 0036 BB69     	 ldr r3,[r7,#24]
 2613 0038 5A60     	 str r2,[r3,#4]
 2614              	.L199:
 2615              	 .loc 1 2401 0 discriminator 3
 2616 003a BB69     	 ldr r3,[r7,#24]
 2617 003c 5B68     	 ldr r3,[r3,#4]
 2618 003e DB68     	 ldr r3,[r3,#12]
 2619 0040 7B61     	 str r3,[r7,#20]
 2620              	.L209:
 2621              	.LBE7:
 2622              	.LBB8:
2402:../Dave/Generated/FREERTOS/tasks.c **** 
2403:../Dave/Generated/FREERTOS/tasks.c ****             do
2404:../Dave/Generated/FREERTOS/tasks.c ****             {
2405:../Dave/Generated/FREERTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 2623              	 .loc 1 2405 0 is_stmt 1
 2624 0042 7B68     	 ldr r3,[r7,#4]
 2625 0044 3B61     	 str r3,[r7,#16]
 2626 0046 3B69     	 ldr r3,[r7,#16]
 2627 0048 5B68     	 ldr r3,[r3,#4]
 2628 004a 5A68     	 ldr r2,[r3,#4]
 2629 004c 3B69     	 ldr r3,[r7,#16]
 2630 004e 5A60     	 str r2,[r3,#4]
 2631 0050 3B69     	 ldr r3,[r7,#16]
 2632 0052 5A68     	 ldr r2,[r3,#4]
 2633 0054 3B69     	 ldr r3,[r7,#16]
 2634 0056 0833     	 add r3,r3,#8
 2635 0058 9A42     	 cmp r2,r3
 2636 005a 04D1     	 bne .L200
 2637              	 .loc 1 2405 0 is_stmt 0 discriminator 1
 2638 005c 3B69     	 ldr r3,[r7,#16]
 2639 005e 5B68     	 ldr r3,[r3,#4]
 2640 0060 5A68     	 ldr r2,[r3,#4]
 2641 0062 3B69     	 ldr r3,[r7,#16]
 2642 0064 5A60     	 str r2,[r3,#4]
 2643              	.L200:
 2644              	 .loc 1 2405 0 discriminator 3
 2645 0066 3B69     	 ldr r3,[r7,#16]
 2646 0068 5B68     	 ldr r3,[r3,#4]
 2647 006a DB68     	 ldr r3,[r3,#12]
 2648 006c FB60     	 str r3,[r7,#12]
 2649              	.LBE8:
2406:../Dave/Generated/FREERTOS/tasks.c **** 
2407:../Dave/Generated/FREERTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2408:../Dave/Generated/FREERTOS/tasks.c ****                  * mismatch. */
2409:../Dave/Generated/FREERTOS/tasks.c ****                 xBreakLoop = pdFALSE;
 2650              	 .loc 1 2409 0 is_stmt 1 discriminator 3
 2651 006e 0023     	 mov r3,#0
 2652 0070 FB61     	 str r3,[r7,#28]
2410:../Dave/Generated/FREERTOS/tasks.c **** 
2411:../Dave/Generated/FREERTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 2653              	 .loc 1 2411 0 discriminator 3
 2654 0072 0023     	 mov r3,#0
 2655 0074 3B62     	 str r3,[r7,#32]
 2656 0076 24E0     	 b .L201
 2657              	.L206:
2412:../Dave/Generated/FREERTOS/tasks.c ****                 {
2413:../Dave/Generated/FREERTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
 2658              	 .loc 1 2413 0
 2659 0078 0B23     	 mov r3,#11
 2660 007a FB18     	 add r3,r7,r3
 2661 007c F968     	 ldr r1,[r7,#12]
 2662 007e 3020     	 mov r0,#48
 2663 0080 3A6A     	 ldr r2,[r7,#32]
 2664 0082 8A18     	 add r2,r1,r2
 2665 0084 1218     	 add r2,r2,r0
 2666 0086 1279     	 ldrb r2,[r2,#4]
 2667 0088 1A70     	 strb r2,[r3]
2414:../Dave/Generated/FREERTOS/tasks.c **** 
2415:../Dave/Generated/FREERTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
 2668              	 .loc 1 2415 0
 2669 008a 3A68     	 ldr r2,[r7]
 2670 008c 3B6A     	 ldr r3,[r7,#32]
 2671 008e D318     	 add r3,r2,r3
 2672 0090 1B78     	 ldrb r3,[r3]
 2673 0092 0B22     	 mov r2,#11
 2674 0094 BA18     	 add r2,r7,r2
 2675 0096 1278     	 ldrb r2,[r2]
 2676 0098 9A42     	 cmp r2,r3
 2677 009a 02D0     	 beq .L202
2416:../Dave/Generated/FREERTOS/tasks.c ****                     {
2417:../Dave/Generated/FREERTOS/tasks.c ****                         /* Characters didn't match. */
2418:../Dave/Generated/FREERTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 2678              	 .loc 1 2418 0
 2679 009c 0123     	 mov r3,#1
 2680 009e FB61     	 str r3,[r7,#28]
 2681 00a0 08E0     	 b .L203
 2682              	.L202:
2419:../Dave/Generated/FREERTOS/tasks.c ****                     }
2420:../Dave/Generated/FREERTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
 2683              	 .loc 1 2420 0
 2684 00a2 0B23     	 mov r3,#11
 2685 00a4 FB18     	 add r3,r7,r3
 2686 00a6 1B78     	 ldrb r3,[r3]
 2687 00a8 002B     	 cmp r3,#0
 2688 00aa 03D1     	 bne .L203
2421:../Dave/Generated/FREERTOS/tasks.c ****                     {
2422:../Dave/Generated/FREERTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2423:../Dave/Generated/FREERTOS/tasks.c ****                          * found. */
2424:../Dave/Generated/FREERTOS/tasks.c ****                         pxReturn = pxNextTCB;
 2689              	 .loc 1 2424 0
 2690 00ac FB68     	 ldr r3,[r7,#12]
 2691 00ae 7B62     	 str r3,[r7,#36]
2425:../Dave/Generated/FREERTOS/tasks.c ****                         xBreakLoop = pdTRUE;
 2692              	 .loc 1 2425 0
 2693 00b0 0123     	 mov r3,#1
 2694 00b2 FB61     	 str r3,[r7,#28]
 2695              	.L203:
2426:../Dave/Generated/FREERTOS/tasks.c ****                     }
2427:../Dave/Generated/FREERTOS/tasks.c ****                     else
2428:../Dave/Generated/FREERTOS/tasks.c ****                     {
2429:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2430:../Dave/Generated/FREERTOS/tasks.c ****                     }
2431:../Dave/Generated/FREERTOS/tasks.c **** 
2432:../Dave/Generated/FREERTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
 2696              	 .loc 1 2432 0
 2697 00b4 FB69     	 ldr r3,[r7,#28]
 2698 00b6 002B     	 cmp r3,#0
 2699 00b8 00D0     	 beq .L204
2433:../Dave/Generated/FREERTOS/tasks.c ****                     {
2434:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 2700              	 .loc 1 2434 0
 2701 00ba 05E0     	 b .L205
 2702              	.L204:
2411:../Dave/Generated/FREERTOS/tasks.c ****                 {
 2703              	 .loc 1 2411 0 discriminator 2
 2704 00bc 3B6A     	 ldr r3,[r7,#32]
 2705 00be 0133     	 add r3,r3,#1
 2706 00c0 3B62     	 str r3,[r7,#32]
 2707              	.L201:
2411:../Dave/Generated/FREERTOS/tasks.c ****                 {
 2708              	 .loc 1 2411 0 is_stmt 0 discriminator 1
 2709 00c2 3B6A     	 ldr r3,[r7,#32]
 2710 00c4 0F2B     	 cmp r3,#15
 2711 00c6 D7D9     	 bls .L206
 2712              	.L205:
2435:../Dave/Generated/FREERTOS/tasks.c ****                     }
2436:../Dave/Generated/FREERTOS/tasks.c ****                 }
2437:../Dave/Generated/FREERTOS/tasks.c **** 
2438:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxReturn != NULL )
 2713              	 .loc 1 2438 0 is_stmt 1
 2714 00c8 7B6A     	 ldr r3,[r7,#36]
 2715 00ca 002B     	 cmp r3,#0
 2716 00cc 01D0     	 beq .L207
2439:../Dave/Generated/FREERTOS/tasks.c ****                 {
2440:../Dave/Generated/FREERTOS/tasks.c ****                     /* The handle has been found. */
2441:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 2717              	 .loc 1 2441 0
 2718 00ce C046     	 mov r8,r8
 2719 00d0 03E0     	 b .L198
 2720              	.L207:
2442:../Dave/Generated/FREERTOS/tasks.c ****                 }
2443:../Dave/Generated/FREERTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 2721              	 .loc 1 2443 0
 2722 00d2 FA68     	 ldr r2,[r7,#12]
 2723 00d4 7B69     	 ldr r3,[r7,#20]
 2724 00d6 9A42     	 cmp r2,r3
 2725 00d8 B3D1     	 bne .L209
 2726              	.L198:
2444:../Dave/Generated/FREERTOS/tasks.c ****         }
2445:../Dave/Generated/FREERTOS/tasks.c ****         else
2446:../Dave/Generated/FREERTOS/tasks.c ****         {
2447:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2448:../Dave/Generated/FREERTOS/tasks.c ****         }
2449:../Dave/Generated/FREERTOS/tasks.c **** 
2450:../Dave/Generated/FREERTOS/tasks.c ****         return pxReturn;
 2727              	 .loc 1 2450 0
 2728 00da 7B6A     	 ldr r3,[r7,#36]
2451:../Dave/Generated/FREERTOS/tasks.c ****     }
 2729              	 .loc 1 2451 0
 2730 00dc 181C     	 mov r0,r3
 2731 00de BD46     	 mov sp,r7
 2732 00e0 0AB0     	 add sp,sp,#40
 2733              	 
 2734 00e2 80BD     	 pop {r7,pc}
 2735              	 .cfi_endproc
 2736              	.LFE64:
 2738              	 .section .text.xTaskGetHandle,"ax",%progbits
 2739              	 .align 2
 2740              	 .global xTaskGetHandle
 2741              	 .code 16
 2742              	 .thumb_func
 2744              	xTaskGetHandle:
 2745              	.LFB65:
2452:../Dave/Generated/FREERTOS/tasks.c **** 
2453:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2454:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2455:../Dave/Generated/FREERTOS/tasks.c **** 
2456:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2457:../Dave/Generated/FREERTOS/tasks.c **** 
2458:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2459:../Dave/Generated/FREERTOS/tasks.c ****     {
 2746              	 .loc 1 2459 0
 2747              	 .cfi_startproc
 2748 0000 80B5     	 push {r7,lr}
 2749              	.LCFI66:
 2750              	 .cfi_def_cfa_offset 8
 2751              	 .cfi_offset 7,-8
 2752              	 .cfi_offset 14,-4
 2753 0002 84B0     	 sub sp,sp,#16
 2754              	.LCFI67:
 2755              	 .cfi_def_cfa_offset 24
 2756 0004 00AF     	 add r7,sp,#0
 2757              	.LCFI68:
 2758              	 .cfi_def_cfa_register 7
 2759 0006 7860     	 str r0,[r7,#4]
2460:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
 2760              	 .loc 1 2460 0
 2761 0008 0523     	 mov r3,#5
 2762 000a FB60     	 str r3,[r7,#12]
2461:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2462:../Dave/Generated/FREERTOS/tasks.c **** 
2463:../Dave/Generated/FREERTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2464:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 2763              	 .loc 1 2464 0
 2764 000c 7B68     	 ldr r3,[r7,#4]
 2765 000e 181C     	 mov r0,r3
 2766 0010 FFF7FEFF 	 bl strlen
 2767 0014 031E     	 sub r3,r0,#0
 2768 0016 0F2B     	 cmp r3,#15
 2769 0018 01D9     	 bls .L212
 2770              	 .loc 1 2464 0 is_stmt 0 discriminator 1
 2771              	
 2772 001a 72B6     	 cpsid i
 2773              	
 2774              	 .code 16
 2775              	.L213:
 2776 001c FEE7     	 b .L213
 2777              	.L212:
2465:../Dave/Generated/FREERTOS/tasks.c **** 
2466:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 2778              	 .loc 1 2466 0 is_stmt 1
 2779 001e FFF7FEFF 	 bl vTaskSuspendAll
 2780              	.L216:
2467:../Dave/Generated/FREERTOS/tasks.c ****         {
2468:../Dave/Generated/FREERTOS/tasks.c ****             /* Search the ready lists. */
2469:../Dave/Generated/FREERTOS/tasks.c ****             do
2470:../Dave/Generated/FREERTOS/tasks.c ****             {
2471:../Dave/Generated/FREERTOS/tasks.c ****                 uxQueue--;
 2781              	 .loc 1 2471 0
 2782 0022 FB68     	 ldr r3,[r7,#12]
 2783 0024 013B     	 sub r3,r3,#1
 2784 0026 FB60     	 str r3,[r7,#12]
2472:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
 2785              	 .loc 1 2472 0
 2786 0028 FA68     	 ldr r2,[r7,#12]
 2787 002a 131C     	 mov r3,r2
 2788 002c 9B00     	 lsl r3,r3,#2
 2789 002e 9B18     	 add r3,r3,r2
 2790 0030 9B00     	 lsl r3,r3,#2
 2791 0032 224A     	 ldr r2,.L222
 2792 0034 9A18     	 add r2,r3,r2
 2793 0036 7B68     	 ldr r3,[r7,#4]
 2794 0038 101C     	 mov r0,r2
 2795 003a 191C     	 mov r1,r3
 2796 003c FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 2797 0040 031C     	 mov r3,r0
 2798 0042 BB60     	 str r3,[r7,#8]
2473:../Dave/Generated/FREERTOS/tasks.c **** 
2474:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB != NULL )
 2799              	 .loc 1 2474 0
 2800 0044 BB68     	 ldr r3,[r7,#8]
 2801 0046 002B     	 cmp r3,#0
 2802 0048 00D0     	 beq .L214
2475:../Dave/Generated/FREERTOS/tasks.c ****                 {
2476:../Dave/Generated/FREERTOS/tasks.c ****                     /* Found the handle. */
2477:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 2803              	 .loc 1 2477 0
 2804 004a 02E0     	 b .L215
 2805              	.L214:
2478:../Dave/Generated/FREERTOS/tasks.c ****                 }
2479:../Dave/Generated/FREERTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
 2806              	 .loc 1 2479 0
 2807 004c FB68     	 ldr r3,[r7,#12]
 2808 004e 002B     	 cmp r3,#0
 2809 0050 E7D1     	 bne .L216
 2810              	.L215:
2480:../Dave/Generated/FREERTOS/tasks.c **** 
2481:../Dave/Generated/FREERTOS/tasks.c ****             /* Search the delayed lists. */
2482:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == NULL )
 2811              	 .loc 1 2482 0
 2812 0052 BB68     	 ldr r3,[r7,#8]
 2813 0054 002B     	 cmp r3,#0
 2814 0056 08D1     	 bne .L217
2483:../Dave/Generated/FREERTOS/tasks.c ****             {
2484:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
 2815              	 .loc 1 2484 0
 2816 0058 194B     	 ldr r3,.L222+4
 2817 005a 1A68     	 ldr r2,[r3]
 2818 005c 7B68     	 ldr r3,[r7,#4]
 2819 005e 101C     	 mov r0,r2
 2820 0060 191C     	 mov r1,r3
 2821 0062 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 2822 0066 031C     	 mov r3,r0
 2823 0068 BB60     	 str r3,[r7,#8]
 2824              	.L217:
2485:../Dave/Generated/FREERTOS/tasks.c ****             }
2486:../Dave/Generated/FREERTOS/tasks.c **** 
2487:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == NULL )
 2825              	 .loc 1 2487 0
 2826 006a BB68     	 ldr r3,[r7,#8]
 2827 006c 002B     	 cmp r3,#0
 2828 006e 08D1     	 bne .L218
2488:../Dave/Generated/FREERTOS/tasks.c ****             {
2489:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
 2829              	 .loc 1 2489 0
 2830 0070 144B     	 ldr r3,.L222+8
 2831 0072 1A68     	 ldr r2,[r3]
 2832 0074 7B68     	 ldr r3,[r7,#4]
 2833 0076 101C     	 mov r0,r2
 2834 0078 191C     	 mov r1,r3
 2835 007a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 2836 007e 031C     	 mov r3,r0
 2837 0080 BB60     	 str r3,[r7,#8]
 2838              	.L218:
2490:../Dave/Generated/FREERTOS/tasks.c ****             }
2491:../Dave/Generated/FREERTOS/tasks.c **** 
2492:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2493:../Dave/Generated/FREERTOS/tasks.c ****                 {
2494:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB == NULL )
 2839              	 .loc 1 2494 0
 2840 0082 BB68     	 ldr r3,[r7,#8]
 2841 0084 002B     	 cmp r3,#0
 2842 0086 07D1     	 bne .L219
2495:../Dave/Generated/FREERTOS/tasks.c ****                     {
2496:../Dave/Generated/FREERTOS/tasks.c ****                         /* Search the suspended list. */
2497:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
 2843              	 .loc 1 2497 0
 2844 0088 0F4A     	 ldr r2,.L222+12
 2845 008a 7B68     	 ldr r3,[r7,#4]
 2846 008c 101C     	 mov r0,r2
 2847 008e 191C     	 mov r1,r3
 2848 0090 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 2849 0094 031C     	 mov r3,r0
 2850 0096 BB60     	 str r3,[r7,#8]
 2851              	.L219:
2498:../Dave/Generated/FREERTOS/tasks.c ****                     }
2499:../Dave/Generated/FREERTOS/tasks.c ****                 }
2500:../Dave/Generated/FREERTOS/tasks.c ****             #endif
2501:../Dave/Generated/FREERTOS/tasks.c **** 
2502:../Dave/Generated/FREERTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2503:../Dave/Generated/FREERTOS/tasks.c ****                 {
2504:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxTCB == NULL )
 2852              	 .loc 1 2504 0
 2853 0098 BB68     	 ldr r3,[r7,#8]
 2854 009a 002B     	 cmp r3,#0
 2855 009c 07D1     	 bne .L220
2505:../Dave/Generated/FREERTOS/tasks.c ****                     {
2506:../Dave/Generated/FREERTOS/tasks.c ****                         /* Search the deleted list. */
2507:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
 2856              	 .loc 1 2507 0
 2857 009e 0B4A     	 ldr r2,.L222+16
 2858 00a0 7B68     	 ldr r3,[r7,#4]
 2859 00a2 101C     	 mov r0,r2
 2860 00a4 191C     	 mov r1,r3
 2861 00a6 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 2862 00aa 031C     	 mov r3,r0
 2863 00ac BB60     	 str r3,[r7,#8]
 2864              	.L220:
2508:../Dave/Generated/FREERTOS/tasks.c ****                     }
2509:../Dave/Generated/FREERTOS/tasks.c ****                 }
2510:../Dave/Generated/FREERTOS/tasks.c ****             #endif
2511:../Dave/Generated/FREERTOS/tasks.c ****         }
2512:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 2865              	 .loc 1 2512 0
 2866 00ae FFF7FEFF 	 bl xTaskResumeAll
2513:../Dave/Generated/FREERTOS/tasks.c **** 
2514:../Dave/Generated/FREERTOS/tasks.c ****         return pxTCB;
 2867              	 .loc 1 2514 0
 2868 00b2 BB68     	 ldr r3,[r7,#8]
2515:../Dave/Generated/FREERTOS/tasks.c ****     }
 2869              	 .loc 1 2515 0
 2870 00b4 181C     	 mov r0,r3
 2871 00b6 BD46     	 mov sp,r7
 2872 00b8 04B0     	 add sp,sp,#16
 2873              	 
 2874 00ba 80BD     	 pop {r7,pc}
 2875              	.L223:
 2876              	 .align 2
 2877              	.L222:
 2878 00bc 00000000 	 .word pxReadyTasksLists
 2879 00c0 00000000 	 .word pxDelayedTaskList
 2880 00c4 00000000 	 .word pxOverflowDelayedTaskList
 2881 00c8 00000000 	 .word xSuspendedTaskList
 2882 00cc 00000000 	 .word xTasksWaitingTermination
 2883              	 .cfi_endproc
 2884              	.LFE65:
 2886              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 2887              	 .align 2
 2888              	 .global uxTaskGetSystemState
 2889              	 .code 16
 2890              	 .thumb_func
 2892              	uxTaskGetSystemState:
 2893              	.LFB66:
2516:../Dave/Generated/FREERTOS/tasks.c **** 
2517:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2518:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2519:../Dave/Generated/FREERTOS/tasks.c **** 
2520:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2521:../Dave/Generated/FREERTOS/tasks.c **** 
2522:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2523:../Dave/Generated/FREERTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2524:../Dave/Generated/FREERTOS/tasks.c ****                                       uint32_t * const pulTotalRunTime )
2525:../Dave/Generated/FREERTOS/tasks.c ****     {
 2894              	 .loc 1 2525 0
 2895              	 .cfi_startproc
 2896 0000 80B5     	 push {r7,lr}
 2897              	.LCFI69:
 2898              	 .cfi_def_cfa_offset 8
 2899              	 .cfi_offset 7,-8
 2900              	 .cfi_offset 14,-4
 2901 0002 86B0     	 sub sp,sp,#24
 2902              	.LCFI70:
 2903              	 .cfi_def_cfa_offset 32
 2904 0004 00AF     	 add r7,sp,#0
 2905              	.LCFI71:
 2906              	 .cfi_def_cfa_register 7
 2907 0006 F860     	 str r0,[r7,#12]
 2908 0008 B960     	 str r1,[r7,#8]
 2909 000a 7A60     	 str r2,[r7,#4]
2526:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2910              	 .loc 1 2526 0
 2911 000c 0023     	 mov r3,#0
 2912 000e 7B61     	 str r3,[r7,#20]
 2913 0010 0523     	 mov r3,#5
 2914 0012 3B61     	 str r3,[r7,#16]
2527:../Dave/Generated/FREERTOS/tasks.c **** 
2528:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 2915              	 .loc 1 2528 0
 2916 0014 FFF7FEFF 	 bl vTaskSuspendAll
2529:../Dave/Generated/FREERTOS/tasks.c ****         {
2530:../Dave/Generated/FREERTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2531:../Dave/Generated/FREERTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
 2917              	 .loc 1 2531 0
 2918 0018 3C4B     	 ldr r3,.L229
 2919 001a 1B68     	 ldr r3,[r3]
 2920 001c BA68     	 ldr r2,[r7,#8]
 2921 001e 9A42     	 cmp r2,r3
 2922 0020 6DD3     	 bcc .L225
 2923              	.L226:
2532:../Dave/Generated/FREERTOS/tasks.c ****             {
2533:../Dave/Generated/FREERTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2534:../Dave/Generated/FREERTOS/tasks.c ****                  * task in the Ready state. */
2535:../Dave/Generated/FREERTOS/tasks.c ****                 do
2536:../Dave/Generated/FREERTOS/tasks.c ****                 {
2537:../Dave/Generated/FREERTOS/tasks.c ****                     uxQueue--;
 2924              	 .loc 1 2537 0 discriminator 1
 2925 0022 3B69     	 ldr r3,[r7,#16]
 2926 0024 013B     	 sub r3,r3,#1
 2927 0026 3B61     	 str r3,[r7,#16]
2538:../Dave/Generated/FREERTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 2928              	 .loc 1 2538 0 discriminator 1
 2929 0028 7A69     	 ldr r2,[r7,#20]
 2930 002a 131C     	 mov r3,r2
 2931 002c DB00     	 lsl r3,r3,#3
 2932 002e 9B18     	 add r3,r3,r2
 2933 0030 9B00     	 lsl r3,r3,#2
 2934 0032 1A1C     	 mov r2,r3
 2935 0034 FB68     	 ldr r3,[r7,#12]
 2936 0036 9918     	 add r1,r3,r2
 2937 0038 3A69     	 ldr r2,[r7,#16]
 2938 003a 131C     	 mov r3,r2
 2939 003c 9B00     	 lsl r3,r3,#2
 2940 003e 9B18     	 add r3,r3,r2
 2941 0040 9B00     	 lsl r3,r3,#2
 2942 0042 334A     	 ldr r2,.L229+4
 2943 0044 9B18     	 add r3,r3,r2
 2944 0046 081C     	 mov r0,r1
 2945 0048 191C     	 mov r1,r3
 2946 004a 0122     	 mov r2,#1
 2947 004c FFF7FEFF 	 bl prvListTasksWithinSingleList
 2948 0050 021C     	 mov r2,r0
 2949 0052 7B69     	 ldr r3,[r7,#20]
 2950 0054 9B18     	 add r3,r3,r2
 2951 0056 7B61     	 str r3,[r7,#20]
2539:../Dave/Generated/FREERTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 2952              	 .loc 1 2539 0 discriminator 1
 2953 0058 3B69     	 ldr r3,[r7,#16]
 2954 005a 002B     	 cmp r3,#0
 2955 005c E1D1     	 bne .L226
2540:../Dave/Generated/FREERTOS/tasks.c **** 
2541:../Dave/Generated/FREERTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2542:../Dave/Generated/FREERTOS/tasks.c ****                  * task in the Blocked state. */
2543:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 2956              	 .loc 1 2543 0
 2957 005e 7A69     	 ldr r2,[r7,#20]
 2958 0060 131C     	 mov r3,r2
 2959 0062 DB00     	 lsl r3,r3,#3
 2960 0064 9B18     	 add r3,r3,r2
 2961 0066 9B00     	 lsl r3,r3,#2
 2962 0068 1A1C     	 mov r2,r3
 2963 006a FB68     	 ldr r3,[r7,#12]
 2964 006c 9A18     	 add r2,r3,r2
 2965 006e 294B     	 ldr r3,.L229+8
 2966 0070 1B68     	 ldr r3,[r3]
 2967 0072 101C     	 mov r0,r2
 2968 0074 191C     	 mov r1,r3
 2969 0076 0222     	 mov r2,#2
 2970 0078 FFF7FEFF 	 bl prvListTasksWithinSingleList
 2971 007c 021C     	 mov r2,r0
 2972 007e 7B69     	 ldr r3,[r7,#20]
 2973 0080 9B18     	 add r3,r3,r2
 2974 0082 7B61     	 str r3,[r7,#20]
2544:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 2975              	 .loc 1 2544 0
 2976 0084 7A69     	 ldr r2,[r7,#20]
 2977 0086 131C     	 mov r3,r2
 2978 0088 DB00     	 lsl r3,r3,#3
 2979 008a 9B18     	 add r3,r3,r2
 2980 008c 9B00     	 lsl r3,r3,#2
 2981 008e 1A1C     	 mov r2,r3
 2982 0090 FB68     	 ldr r3,[r7,#12]
 2983 0092 9A18     	 add r2,r3,r2
 2984 0094 204B     	 ldr r3,.L229+12
 2985 0096 1B68     	 ldr r3,[r3]
 2986 0098 101C     	 mov r0,r2
 2987 009a 191C     	 mov r1,r3
 2988 009c 0222     	 mov r2,#2
 2989 009e FFF7FEFF 	 bl prvListTasksWithinSingleList
 2990 00a2 021C     	 mov r2,r0
 2991 00a4 7B69     	 ldr r3,[r7,#20]
 2992 00a6 9B18     	 add r3,r3,r2
 2993 00a8 7B61     	 str r3,[r7,#20]
2545:../Dave/Generated/FREERTOS/tasks.c **** 
2546:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2547:../Dave/Generated/FREERTOS/tasks.c ****                     {
2548:../Dave/Generated/FREERTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2549:../Dave/Generated/FREERTOS/tasks.c ****                          * each task that has been deleted but not yet cleaned up. */
2550:../Dave/Generated/FREERTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 2994              	 .loc 1 2550 0
 2995 00aa 7A69     	 ldr r2,[r7,#20]
 2996 00ac 131C     	 mov r3,r2
 2997 00ae DB00     	 lsl r3,r3,#3
 2998 00b0 9B18     	 add r3,r3,r2
 2999 00b2 9B00     	 lsl r3,r3,#2
 3000 00b4 1A1C     	 mov r2,r3
 3001 00b6 FB68     	 ldr r3,[r7,#12]
 3002 00b8 9A18     	 add r2,r3,r2
 3003 00ba 184B     	 ldr r3,.L229+16
 3004 00bc 101C     	 mov r0,r2
 3005 00be 191C     	 mov r1,r3
 3006 00c0 0422     	 mov r2,#4
 3007 00c2 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3008 00c6 021C     	 mov r2,r0
 3009 00c8 7B69     	 ldr r3,[r7,#20]
 3010 00ca 9B18     	 add r3,r3,r2
 3011 00cc 7B61     	 str r3,[r7,#20]
2551:../Dave/Generated/FREERTOS/tasks.c ****                     }
2552:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
2553:../Dave/Generated/FREERTOS/tasks.c **** 
2554:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2555:../Dave/Generated/FREERTOS/tasks.c ****                     {
2556:../Dave/Generated/FREERTOS/tasks.c ****                         /* Fill in an TaskStatus_t structure with information on
2557:../Dave/Generated/FREERTOS/tasks.c ****                          * each task in the Suspended state. */
2558:../Dave/Generated/FREERTOS/tasks.c ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
 3012              	 .loc 1 2558 0
 3013 00ce 7A69     	 ldr r2,[r7,#20]
 3014 00d0 131C     	 mov r3,r2
 3015 00d2 DB00     	 lsl r3,r3,#3
 3016 00d4 9B18     	 add r3,r3,r2
 3017 00d6 9B00     	 lsl r3,r3,#2
 3018 00d8 1A1C     	 mov r2,r3
 3019 00da FB68     	 ldr r3,[r7,#12]
 3020 00dc 9A18     	 add r2,r3,r2
 3021 00de 104B     	 ldr r3,.L229+20
 3022 00e0 101C     	 mov r0,r2
 3023 00e2 191C     	 mov r1,r3
 3024 00e4 0322     	 mov r2,#3
 3025 00e6 FFF7FEFF 	 bl prvListTasksWithinSingleList
 3026 00ea 021C     	 mov r2,r0
 3027 00ec 7B69     	 ldr r3,[r7,#20]
 3028 00ee 9B18     	 add r3,r3,r2
 3029 00f0 7B61     	 str r3,[r7,#20]
2559:../Dave/Generated/FREERTOS/tasks.c ****                     }
2560:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
2561:../Dave/Generated/FREERTOS/tasks.c **** 
2562:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2563:../Dave/Generated/FREERTOS/tasks.c ****                     {
2564:../Dave/Generated/FREERTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
2565:../Dave/Generated/FREERTOS/tasks.c ****                         {
2566:../Dave/Generated/FREERTOS/tasks.c ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2567:../Dave/Generated/FREERTOS/tasks.c ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2568:../Dave/Generated/FREERTOS/tasks.c ****                             #else
2569:../Dave/Generated/FREERTOS/tasks.c ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2570:../Dave/Generated/FREERTOS/tasks.c ****                             #endif
2571:../Dave/Generated/FREERTOS/tasks.c ****                         }
2572:../Dave/Generated/FREERTOS/tasks.c ****                     }
2573:../Dave/Generated/FREERTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2574:../Dave/Generated/FREERTOS/tasks.c ****                     {
2575:../Dave/Generated/FREERTOS/tasks.c ****                         if( pulTotalRunTime != NULL )
 3030              	 .loc 1 2575 0
 3031 00f2 7B68     	 ldr r3,[r7,#4]
 3032 00f4 002B     	 cmp r3,#0
 3033 00f6 02D0     	 beq .L225
2576:../Dave/Generated/FREERTOS/tasks.c ****                         {
2577:../Dave/Generated/FREERTOS/tasks.c ****                             *pulTotalRunTime = 0;
 3034              	 .loc 1 2577 0
 3035 00f8 7B68     	 ldr r3,[r7,#4]
 3036 00fa 0022     	 mov r2,#0
 3037 00fc 1A60     	 str r2,[r3]
 3038              	.L225:
2578:../Dave/Generated/FREERTOS/tasks.c ****                         }
2579:../Dave/Generated/FREERTOS/tasks.c ****                     }
2580:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:../Dave/Generated/FREERTOS/tasks.c ****             }
2582:../Dave/Generated/FREERTOS/tasks.c ****             else
2583:../Dave/Generated/FREERTOS/tasks.c ****             {
2584:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2585:../Dave/Generated/FREERTOS/tasks.c ****             }
2586:../Dave/Generated/FREERTOS/tasks.c ****         }
2587:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3039              	 .loc 1 2587 0
 3040 00fe FFF7FEFF 	 bl xTaskResumeAll
2588:../Dave/Generated/FREERTOS/tasks.c **** 
2589:../Dave/Generated/FREERTOS/tasks.c ****         return uxTask;
 3041              	 .loc 1 2589 0
 3042 0102 7B69     	 ldr r3,[r7,#20]
2590:../Dave/Generated/FREERTOS/tasks.c ****     }
 3043              	 .loc 1 2590 0
 3044 0104 181C     	 mov r0,r3
 3045 0106 BD46     	 mov sp,r7
 3046 0108 06B0     	 add sp,sp,#24
 3047              	 
 3048 010a 80BD     	 pop {r7,pc}
 3049              	.L230:
 3050              	 .align 2
 3051              	.L229:
 3052 010c 00000000 	 .word uxCurrentNumberOfTasks
 3053 0110 00000000 	 .word pxReadyTasksLists
 3054 0114 00000000 	 .word pxDelayedTaskList
 3055 0118 00000000 	 .word pxOverflowDelayedTaskList
 3056 011c 00000000 	 .word xTasksWaitingTermination
 3057 0120 00000000 	 .word xSuspendedTaskList
 3058              	 .cfi_endproc
 3059              	.LFE66:
 3061              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 3062              	 .align 2
 3063              	 .global xTaskGetIdleTaskHandle
 3064              	 .code 16
 3065              	 .thumb_func
 3067              	xTaskGetIdleTaskHandle:
 3068              	.LFB67:
2591:../Dave/Generated/FREERTOS/tasks.c **** 
2592:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2593:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2594:../Dave/Generated/FREERTOS/tasks.c **** 
2595:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2596:../Dave/Generated/FREERTOS/tasks.c **** 
2597:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2598:../Dave/Generated/FREERTOS/tasks.c ****     {
 3069              	 .loc 1 2598 0
 3070              	 .cfi_startproc
 3071 0000 80B5     	 push {r7,lr}
 3072              	.LCFI72:
 3073              	 .cfi_def_cfa_offset 8
 3074              	 .cfi_offset 7,-8
 3075              	 .cfi_offset 14,-4
 3076 0002 00AF     	 add r7,sp,#0
 3077              	.LCFI73:
 3078              	 .cfi_def_cfa_register 7
2599:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2600:../Dave/Generated/FREERTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2601:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
 3079              	 .loc 1 2601 0
 3080 0004 054B     	 ldr r3,.L235
 3081 0006 1B68     	 ldr r3,[r3]
 3082 0008 002B     	 cmp r3,#0
 3083 000a 01D1     	 bne .L232
 3084              	 .loc 1 2601 0 is_stmt 0 discriminator 1
 3085              	
 3086 000c 72B6     	 cpsid i
 3087              	
 3088              	 .code 16
 3089              	.L233:
 3090 000e FEE7     	 b .L233
 3091              	.L232:
2602:../Dave/Generated/FREERTOS/tasks.c ****         return xIdleTaskHandle;
 3092              	 .loc 1 2602 0 is_stmt 1
 3093 0010 024B     	 ldr r3,.L235
 3094 0012 1B68     	 ldr r3,[r3]
2603:../Dave/Generated/FREERTOS/tasks.c ****     }
 3095              	 .loc 1 2603 0
 3096 0014 181C     	 mov r0,r3
 3097 0016 BD46     	 mov sp,r7
 3098              	 
 3099 0018 80BD     	 pop {r7,pc}
 3100              	.L236:
 3101 001a C046     	 .align 2
 3102              	.L235:
 3103 001c 00000000 	 .word xIdleTaskHandle
 3104              	 .cfi_endproc
 3105              	.LFE67:
 3107              	 .section .text.xTaskCatchUpTicks,"ax",%progbits
 3108              	 .align 2
 3109              	 .global xTaskCatchUpTicks
 3110              	 .code 16
 3111              	 .thumb_func
 3113              	xTaskCatchUpTicks:
 3114              	.LFB68:
2604:../Dave/Generated/FREERTOS/tasks.c **** 
2605:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2606:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2607:../Dave/Generated/FREERTOS/tasks.c **** 
2608:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2609:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2610:../Dave/Generated/FREERTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2611:../Dave/Generated/FREERTOS/tasks.c ****  * 1. */
2612:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2613:../Dave/Generated/FREERTOS/tasks.c **** 
2614:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskStepTick( const TickType_t xTicksToJump )
2615:../Dave/Generated/FREERTOS/tasks.c ****     {
2616:../Dave/Generated/FREERTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2617:../Dave/Generated/FREERTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2618:../Dave/Generated/FREERTOS/tasks.c ****          * each stepped tick. */
2619:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2620:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount += xTicksToJump;
2621:../Dave/Generated/FREERTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2622:../Dave/Generated/FREERTOS/tasks.c ****     }
2623:../Dave/Generated/FREERTOS/tasks.c **** 
2624:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2625:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2626:../Dave/Generated/FREERTOS/tasks.c **** 
2627:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2628:../Dave/Generated/FREERTOS/tasks.c **** {
 3115              	 .loc 1 2628 0
 3116              	 .cfi_startproc
 3117 0000 80B5     	 push {r7,lr}
 3118              	.LCFI74:
 3119              	 .cfi_def_cfa_offset 8
 3120              	 .cfi_offset 7,-8
 3121              	 .cfi_offset 14,-4
 3122 0002 84B0     	 sub sp,sp,#16
 3123              	.LCFI75:
 3124              	 .cfi_def_cfa_offset 24
 3125 0004 00AF     	 add r7,sp,#0
 3126              	.LCFI76:
 3127              	 .cfi_def_cfa_register 7
 3128 0006 7860     	 str r0,[r7,#4]
2629:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xYieldOccurred;
2630:../Dave/Generated/FREERTOS/tasks.c **** 
2631:../Dave/Generated/FREERTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2632:../Dave/Generated/FREERTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2633:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
 3129              	 .loc 1 2633 0
 3130 0008 0B4B     	 ldr r3,.L241
 3131 000a 1B68     	 ldr r3,[r3]
 3132 000c 002B     	 cmp r3,#0
 3133 000e 01D0     	 beq .L238
 3134              	 .loc 1 2633 0 is_stmt 0 discriminator 1
 3135              	
 3136 0010 72B6     	 cpsid i
 3137              	
 3138              	 .code 16
 3139              	.L239:
 3140 0012 FEE7     	 b .L239
 3141              	.L238:
2634:../Dave/Generated/FREERTOS/tasks.c **** 
2635:../Dave/Generated/FREERTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2636:../Dave/Generated/FREERTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2637:../Dave/Generated/FREERTOS/tasks.c ****     vTaskSuspendAll();
 3142              	 .loc 1 2637 0 is_stmt 1
 3143 0014 FFF7FEFF 	 bl vTaskSuspendAll
2638:../Dave/Generated/FREERTOS/tasks.c ****     xPendedTicks += xTicksToCatchUp;
 3144              	 .loc 1 2638 0
 3145 0018 084B     	 ldr r3,.L241+4
 3146 001a 1A68     	 ldr r2,[r3]
 3147 001c 7B68     	 ldr r3,[r7,#4]
 3148 001e D218     	 add r2,r2,r3
 3149 0020 064B     	 ldr r3,.L241+4
 3150 0022 1A60     	 str r2,[r3]
2639:../Dave/Generated/FREERTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3151              	 .loc 1 2639 0
 3152 0024 FFF7FEFF 	 bl xTaskResumeAll
 3153 0028 031C     	 mov r3,r0
 3154 002a FB60     	 str r3,[r7,#12]
2640:../Dave/Generated/FREERTOS/tasks.c **** 
2641:../Dave/Generated/FREERTOS/tasks.c ****     return xYieldOccurred;
 3155              	 .loc 1 2641 0
 3156 002c FB68     	 ldr r3,[r7,#12]
2642:../Dave/Generated/FREERTOS/tasks.c **** }
 3157              	 .loc 1 2642 0
 3158 002e 181C     	 mov r0,r3
 3159 0030 BD46     	 mov sp,r7
 3160 0032 04B0     	 add sp,sp,#16
 3161              	 
 3162 0034 80BD     	 pop {r7,pc}
 3163              	.L242:
 3164 0036 C046     	 .align 2
 3165              	.L241:
 3166 0038 00000000 	 .word uxSchedulerSuspended
 3167 003c 00000000 	 .word xPendedTicks
 3168              	 .cfi_endproc
 3169              	.LFE68:
 3171              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3172              	 .align 2
 3173              	 .global xTaskAbortDelay
 3174              	 .code 16
 3175              	 .thumb_func
 3177              	xTaskAbortDelay:
 3178              	.LFB69:
2643:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2644:../Dave/Generated/FREERTOS/tasks.c **** 
2645:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2646:../Dave/Generated/FREERTOS/tasks.c **** 
2647:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2648:../Dave/Generated/FREERTOS/tasks.c ****     {
 3179              	 .loc 1 2648 0
 3180              	 .cfi_startproc
 3181 0000 80B5     	 push {r7,lr}
 3182              	.LCFI77:
 3183              	 .cfi_def_cfa_offset 8
 3184              	 .cfi_offset 7,-8
 3185              	 .cfi_offset 14,-4
 3186 0002 84B0     	 sub sp,sp,#16
 3187              	.LCFI78:
 3188              	 .cfi_def_cfa_offset 24
 3189 0004 00AF     	 add r7,sp,#0
 3190              	.LCFI79:
 3191              	 .cfi_def_cfa_register 7
 3192 0006 7860     	 str r0,[r7,#4]
2649:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB = xTask;
 3193              	 .loc 1 2649 0
 3194 0008 7B68     	 ldr r3,[r7,#4]
 3195 000a BB60     	 str r3,[r7,#8]
2650:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
2651:../Dave/Generated/FREERTOS/tasks.c **** 
2652:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxTCB );
 3196              	 .loc 1 2652 0
 3197 000c BB68     	 ldr r3,[r7,#8]
 3198 000e 002B     	 cmp r3,#0
 3199 0010 01D1     	 bne .L244
 3200              	 .loc 1 2652 0 is_stmt 0 discriminator 1
 3201              	
 3202 0012 72B6     	 cpsid i
 3203              	
 3204              	 .code 16
 3205              	.L245:
 3206 0014 FEE7     	 b .L245
 3207              	.L244:
2653:../Dave/Generated/FREERTOS/tasks.c **** 
2654:../Dave/Generated/FREERTOS/tasks.c ****         vTaskSuspendAll();
 3208              	 .loc 1 2654 0 is_stmt 1
 3209 0016 FFF7FEFF 	 bl vTaskSuspendAll
2655:../Dave/Generated/FREERTOS/tasks.c ****         {
2656:../Dave/Generated/FREERTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2657:../Dave/Generated/FREERTOS/tasks.c ****              * it is actually in the Blocked state. */
2658:../Dave/Generated/FREERTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
 3210              	 .loc 1 2658 0
 3211 001a 7B68     	 ldr r3,[r7,#4]
 3212 001c 181C     	 mov r0,r3
 3213 001e FFF7FEFF 	 bl eTaskGetState
 3214 0022 031E     	 sub r3,r0,#0
 3215 0024 022B     	 cmp r3,#2
 3216 0026 3AD1     	 bne .L246
2659:../Dave/Generated/FREERTOS/tasks.c ****             {
2660:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 3217              	 .loc 1 2660 0
 3218 0028 0123     	 mov r3,#1
 3219 002a FB60     	 str r3,[r7,#12]
2661:../Dave/Generated/FREERTOS/tasks.c **** 
2662:../Dave/Generated/FREERTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2663:../Dave/Generated/FREERTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2664:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler is suspended. */
2665:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3220              	 .loc 1 2665 0
 3221 002c BB68     	 ldr r3,[r7,#8]
 3222 002e 0433     	 add r3,r3,#4
 3223 0030 181C     	 mov r0,r3
 3224 0032 FFF7FEFF 	 bl uxListRemove
2666:../Dave/Generated/FREERTOS/tasks.c **** 
2667:../Dave/Generated/FREERTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2668:../Dave/Generated/FREERTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2669:../Dave/Generated/FREERTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2670:../Dave/Generated/FREERTOS/tasks.c ****                  * is used. */
2671:../Dave/Generated/FREERTOS/tasks.c ****                 taskENTER_CRITICAL();
 3225              	 .loc 1 2671 0
 3226 0036 FFF7FEFF 	 bl vPortEnterCritical
2672:../Dave/Generated/FREERTOS/tasks.c ****                 {
2673:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3227              	 .loc 1 2673 0
 3228 003a BB68     	 ldr r3,[r7,#8]
 3229 003c 9B6A     	 ldr r3,[r3,#40]
 3230 003e 002B     	 cmp r3,#0
 3231 0040 08D0     	 beq .L247
2674:../Dave/Generated/FREERTOS/tasks.c ****                     {
2675:../Dave/Generated/FREERTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3232              	 .loc 1 2675 0
 3233 0042 BB68     	 ldr r3,[r7,#8]
 3234 0044 1833     	 add r3,r3,#24
 3235 0046 181C     	 mov r0,r3
 3236 0048 FFF7FEFF 	 bl uxListRemove
2676:../Dave/Generated/FREERTOS/tasks.c **** 
2677:../Dave/Generated/FREERTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2678:../Dave/Generated/FREERTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2679:../Dave/Generated/FREERTOS/tasks.c ****                          * then block again. */
2680:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
 3237              	 .loc 1 2680 0
 3238 004c BB68     	 ldr r3,[r7,#8]
 3239 004e 6D22     	 mov r2,#109
 3240 0050 0121     	 mov r1,#1
 3241 0052 9954     	 strb r1,[r3,r2]
 3242              	.L247:
2681:../Dave/Generated/FREERTOS/tasks.c ****                     }
2682:../Dave/Generated/FREERTOS/tasks.c ****                     else
2683:../Dave/Generated/FREERTOS/tasks.c ****                     {
2684:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2685:../Dave/Generated/FREERTOS/tasks.c ****                     }
2686:../Dave/Generated/FREERTOS/tasks.c ****                 }
2687:../Dave/Generated/FREERTOS/tasks.c ****                 taskEXIT_CRITICAL();
 3243              	 .loc 1 2687 0
 3244 0054 FFF7FEFF 	 bl vPortExitCritical
2688:../Dave/Generated/FREERTOS/tasks.c **** 
2689:../Dave/Generated/FREERTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2690:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 3245              	 .loc 1 2690 0
 3246 0058 BB68     	 ldr r3,[r7,#8]
 3247 005a DA6A     	 ldr r2,[r3,#44]
 3248 005c 144B     	 ldr r3,.L251
 3249 005e 1B68     	 ldr r3,[r3]
 3250 0060 9A42     	 cmp r2,r3
 3251 0062 03D9     	 bls .L248
 3252              	 .loc 1 2690 0 is_stmt 0 discriminator 1
 3253 0064 BB68     	 ldr r3,[r7,#8]
 3254 0066 DA6A     	 ldr r2,[r3,#44]
 3255 0068 114B     	 ldr r3,.L251
 3256 006a 1A60     	 str r2,[r3]
 3257              	.L248:
 3258              	 .loc 1 2690 0 discriminator 3
 3259 006c BB68     	 ldr r3,[r7,#8]
 3260 006e DA6A     	 ldr r2,[r3,#44]
 3261 0070 131C     	 mov r3,r2
 3262 0072 9B00     	 lsl r3,r3,#2
 3263 0074 9B18     	 add r3,r3,r2
 3264 0076 9B00     	 lsl r3,r3,#2
 3265 0078 0E4A     	 ldr r2,.L251+4
 3266 007a 9A18     	 add r2,r3,r2
 3267 007c BB68     	 ldr r3,[r7,#8]
 3268 007e 0433     	 add r3,r3,#4
 3269 0080 101C     	 mov r0,r2
 3270 0082 191C     	 mov r1,r3
 3271 0084 FFF7FEFF 	 bl vListInsertEnd
2691:../Dave/Generated/FREERTOS/tasks.c **** 
2692:../Dave/Generated/FREERTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2693:../Dave/Generated/FREERTOS/tasks.c ****                  * switch if preemption is turned off. */
2694:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2695:../Dave/Generated/FREERTOS/tasks.c ****                     {
2696:../Dave/Generated/FREERTOS/tasks.c ****                         /* Preemption is on, but a context switch should only be
2697:../Dave/Generated/FREERTOS/tasks.c ****                          *  performed if the unblocked task has a priority that is
2698:../Dave/Generated/FREERTOS/tasks.c ****                          *  equal to or higher than the currently executing task. */
2699:../Dave/Generated/FREERTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 3272              	 .loc 1 2699 0 is_stmt 1 discriminator 3
 3273 0088 BB68     	 ldr r3,[r7,#8]
 3274 008a DA6A     	 ldr r2,[r3,#44]
 3275 008c 0A4B     	 ldr r3,.L251+8
 3276 008e 1B68     	 ldr r3,[r3]
 3277 0090 DB6A     	 ldr r3,[r3,#44]
 3278 0092 9A42     	 cmp r2,r3
 3279 0094 05D9     	 bls .L249
2700:../Dave/Generated/FREERTOS/tasks.c ****                         {
2701:../Dave/Generated/FREERTOS/tasks.c ****                             /* Pend the yield to be performed when the scheduler
2702:../Dave/Generated/FREERTOS/tasks.c ****                              * is unsuspended. */
2703:../Dave/Generated/FREERTOS/tasks.c ****                             xYieldPending = pdTRUE;
 3280              	 .loc 1 2703 0
 3281 0096 094B     	 ldr r3,.L251+12
 3282 0098 0122     	 mov r2,#1
 3283 009a 1A60     	 str r2,[r3]
 3284 009c 01E0     	 b .L249
 3285              	.L246:
2704:../Dave/Generated/FREERTOS/tasks.c ****                         }
2705:../Dave/Generated/FREERTOS/tasks.c ****                         else
2706:../Dave/Generated/FREERTOS/tasks.c ****                         {
2707:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2708:../Dave/Generated/FREERTOS/tasks.c ****                         }
2709:../Dave/Generated/FREERTOS/tasks.c ****                     }
2710:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2711:../Dave/Generated/FREERTOS/tasks.c ****             }
2712:../Dave/Generated/FREERTOS/tasks.c ****             else
2713:../Dave/Generated/FREERTOS/tasks.c ****             {
2714:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 3286              	 .loc 1 2714 0
 3287 009e 0023     	 mov r3,#0
 3288 00a0 FB60     	 str r3,[r7,#12]
 3289              	.L249:
2715:../Dave/Generated/FREERTOS/tasks.c ****             }
2716:../Dave/Generated/FREERTOS/tasks.c ****         }
2717:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) xTaskResumeAll();
 3290              	 .loc 1 2717 0
 3291 00a2 FFF7FEFF 	 bl xTaskResumeAll
2718:../Dave/Generated/FREERTOS/tasks.c **** 
2719:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 3292              	 .loc 1 2719 0
 3293 00a6 FB68     	 ldr r3,[r7,#12]
2720:../Dave/Generated/FREERTOS/tasks.c ****     }
 3294              	 .loc 1 2720 0
 3295 00a8 181C     	 mov r0,r3
 3296 00aa BD46     	 mov sp,r7
 3297 00ac 04B0     	 add sp,sp,#16
 3298              	 
 3299 00ae 80BD     	 pop {r7,pc}
 3300              	.L252:
 3301              	 .align 2
 3302              	.L251:
 3303 00b0 00000000 	 .word uxTopReadyPriority
 3304 00b4 00000000 	 .word pxReadyTasksLists
 3305 00b8 00000000 	 .word pxCurrentTCB
 3306 00bc 00000000 	 .word xYieldPending
 3307              	 .cfi_endproc
 3308              	.LFE69:
 3310              	 .section .text.xTaskIncrementTick,"ax",%progbits
 3311              	 .align 2
 3312              	 .global xTaskIncrementTick
 3313              	 .code 16
 3314              	 .thumb_func
 3316              	xTaskIncrementTick:
 3317              	.LFB70:
2721:../Dave/Generated/FREERTOS/tasks.c **** 
2722:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2723:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2724:../Dave/Generated/FREERTOS/tasks.c **** 
2725:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2726:../Dave/Generated/FREERTOS/tasks.c **** {
 3318              	 .loc 1 2726 0
 3319              	 .cfi_startproc
 3320 0000 80B5     	 push {r7,lr}
 3321              	.LCFI80:
 3322              	 .cfi_def_cfa_offset 8
 3323              	 .cfi_offset 7,-8
 3324              	 .cfi_offset 14,-4
 3325 0002 86B0     	 sub sp,sp,#24
 3326              	.LCFI81:
 3327              	 .cfi_def_cfa_offset 32
 3328 0004 00AF     	 add r7,sp,#0
 3329              	.LCFI82:
 3330              	 .cfi_def_cfa_register 7
2727:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxTCB;
2728:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xItemValue;
2729:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 3331              	 .loc 1 2729 0
 3332 0006 0023     	 mov r3,#0
 3333 0008 7B61     	 str r3,[r7,#20]
2730:../Dave/Generated/FREERTOS/tasks.c **** 
2731:../Dave/Generated/FREERTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2732:../Dave/Generated/FREERTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2733:../Dave/Generated/FREERTOS/tasks.c ****      * tasks to be unblocked. */
2734:../Dave/Generated/FREERTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2735:../Dave/Generated/FREERTOS/tasks.c **** 
2736:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3334              	 .loc 1 2736 0
 3335 000a 4A4B     	 ldr r3,.L269
 3336 000c 1B68     	 ldr r3,[r3]
 3337 000e 002B     	 cmp r3,#0
 3338 0010 00D0     	 beq .LCB2837
 3339 0012 84E0     	 b .L254
 3340              	.LCB2837:
 3341              	.LBB9:
2737:../Dave/Generated/FREERTOS/tasks.c ****     {
2738:../Dave/Generated/FREERTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2739:../Dave/Generated/FREERTOS/tasks.c ****          * block. */
2740:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3342              	 .loc 1 2740 0
 3343 0014 484B     	 ldr r3,.L269+4
 3344 0016 1B68     	 ldr r3,[r3]
 3345 0018 0133     	 add r3,r3,#1
 3346 001a 3B61     	 str r3,[r7,#16]
2741:../Dave/Generated/FREERTOS/tasks.c **** 
2742:../Dave/Generated/FREERTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2743:../Dave/Generated/FREERTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2744:../Dave/Generated/FREERTOS/tasks.c ****         xTickCount = xConstTickCount;
 3347              	 .loc 1 2744 0
 3348 001c 464B     	 ldr r3,.L269+4
 3349 001e 3A69     	 ldr r2,[r7,#16]
 3350 0020 1A60     	 str r2,[r3]
2745:../Dave/Generated/FREERTOS/tasks.c **** 
2746:../Dave/Generated/FREERTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
 3351              	 .loc 1 2746 0
 3352 0022 3B69     	 ldr r3,[r7,#16]
 3353 0024 002B     	 cmp r3,#0
 3354 0026 17D1     	 bne .L255
 3355              	.LBB10:
2747:../Dave/Generated/FREERTOS/tasks.c ****         {
2748:../Dave/Generated/FREERTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
 3356              	 .loc 1 2748 0
 3357 0028 444B     	 ldr r3,.L269+8
 3358 002a 1B68     	 ldr r3,[r3]
 3359 002c 1B68     	 ldr r3,[r3]
 3360 002e 002B     	 cmp r3,#0
 3361 0030 01D0     	 beq .L256
 3362              	 .loc 1 2748 0 is_stmt 0 discriminator 1
 3363              	
 3364 0032 72B6     	 cpsid i
 3365              	
 3366              	 .code 16
 3367              	.L257:
 3368 0034 FEE7     	 b .L257
 3369              	.L256:
 3370              	 .loc 1 2748 0 discriminator 2
 3371 0036 414B     	 ldr r3,.L269+8
 3372 0038 1B68     	 ldr r3,[r3]
 3373 003a FB60     	 str r3,[r7,#12]
 3374 003c 404B     	 ldr r3,.L269+12
 3375 003e 1A68     	 ldr r2,[r3]
 3376 0040 3E4B     	 ldr r3,.L269+8
 3377 0042 1A60     	 str r2,[r3]
 3378 0044 3E4B     	 ldr r3,.L269+12
 3379 0046 FA68     	 ldr r2,[r7,#12]
 3380 0048 1A60     	 str r2,[r3]
 3381 004a 3E4B     	 ldr r3,.L269+16
 3382 004c 1B68     	 ldr r3,[r3]
 3383 004e 5A1C     	 add r2,r3,#1
 3384 0050 3C4B     	 ldr r3,.L269+16
 3385 0052 1A60     	 str r2,[r3]
 3386 0054 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 3387              	.L255:
 3388              	.LBE10:
2749:../Dave/Generated/FREERTOS/tasks.c ****         }
2750:../Dave/Generated/FREERTOS/tasks.c ****         else
2751:../Dave/Generated/FREERTOS/tasks.c ****         {
2752:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2753:../Dave/Generated/FREERTOS/tasks.c ****         }
2754:../Dave/Generated/FREERTOS/tasks.c **** 
2755:../Dave/Generated/FREERTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2756:../Dave/Generated/FREERTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2757:../Dave/Generated/FREERTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2758:../Dave/Generated/FREERTOS/tasks.c ****          * look any further down the list. */
2759:../Dave/Generated/FREERTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
 3389              	 .loc 1 2759 0 is_stmt 1
 3390 0058 3B4B     	 ldr r3,.L269+20
 3391 005a 1B68     	 ldr r3,[r3]
 3392 005c 3A69     	 ldr r2,[r7,#16]
 3393 005e 9A42     	 cmp r2,r3
 3394 0060 49D3     	 bcc .L258
 3395              	.L264:
2760:../Dave/Generated/FREERTOS/tasks.c ****         {
2761:../Dave/Generated/FREERTOS/tasks.c ****             for( ; ; )
2762:../Dave/Generated/FREERTOS/tasks.c ****             {
2763:../Dave/Generated/FREERTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3396              	 .loc 1 2763 0
 3397 0062 364B     	 ldr r3,.L269+8
 3398 0064 1B68     	 ldr r3,[r3]
 3399 0066 1B68     	 ldr r3,[r3]
 3400 0068 002B     	 cmp r3,#0
 3401 006a 04D1     	 bne .L259
2764:../Dave/Generated/FREERTOS/tasks.c ****                 {
2765:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2766:../Dave/Generated/FREERTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2767:../Dave/Generated/FREERTOS/tasks.c ****                      * unlikely that the
2768:../Dave/Generated/FREERTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2769:../Dave/Generated/FREERTOS/tasks.c ****                      * next time through. */
2770:../Dave/Generated/FREERTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
 3402              	 .loc 1 2770 0
 3403 006c 364B     	 ldr r3,.L269+20
 3404 006e 0122     	 mov r2,#1
 3405 0070 5242     	 neg r2,r2
 3406 0072 1A60     	 str r2,[r3]
2771:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 3407              	 .loc 1 2771 0
 3408 0074 3FE0     	 b .L258
 3409              	.L259:
2772:../Dave/Generated/FREERTOS/tasks.c ****                 }
2773:../Dave/Generated/FREERTOS/tasks.c ****                 else
2774:../Dave/Generated/FREERTOS/tasks.c ****                 {
2775:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2776:../Dave/Generated/FREERTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2777:../Dave/Generated/FREERTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2778:../Dave/Generated/FREERTOS/tasks.c ****                      * be removed from the Blocked state. */
2779:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
 3410              	 .loc 1 2779 0
 3411 0076 314B     	 ldr r3,.L269+8
 3412 0078 1B68     	 ldr r3,[r3]
 3413 007a DB68     	 ldr r3,[r3,#12]
 3414 007c DB68     	 ldr r3,[r3,#12]
 3415 007e BB60     	 str r3,[r7,#8]
2780:../Dave/Generated/FREERTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3416              	 .loc 1 2780 0
 3417 0080 BB68     	 ldr r3,[r7,#8]
 3418 0082 5B68     	 ldr r3,[r3,#4]
 3419 0084 7B60     	 str r3,[r7,#4]
2781:../Dave/Generated/FREERTOS/tasks.c **** 
2782:../Dave/Generated/FREERTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
 3420              	 .loc 1 2782 0
 3421 0086 3A69     	 ldr r2,[r7,#16]
 3422 0088 7B68     	 ldr r3,[r7,#4]
 3423 008a 9A42     	 cmp r2,r3
 3424 008c 03D2     	 bcs .L260
2783:../Dave/Generated/FREERTOS/tasks.c ****                     {
2784:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2785:../Dave/Generated/FREERTOS/tasks.c ****                          * item value is the time at which the task at the head
2786:../Dave/Generated/FREERTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2787:../Dave/Generated/FREERTOS/tasks.c ****                          * state -  so record the item value in
2788:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2789:../Dave/Generated/FREERTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
 3425              	 .loc 1 2789 0
 3426 008e 2E4B     	 ldr r3,.L269+20
 3427 0090 7A68     	 ldr r2,[r7,#4]
 3428 0092 1A60     	 str r2,[r3]
2790:../Dave/Generated/FREERTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deedmed easier to understand wi
 3429              	 .loc 1 2790 0
 3430 0094 2FE0     	 b .L258
 3431              	.L260:
2791:../Dave/Generated/FREERTOS/tasks.c ****                     }
2792:../Dave/Generated/FREERTOS/tasks.c ****                     else
2793:../Dave/Generated/FREERTOS/tasks.c ****                     {
2794:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2795:../Dave/Generated/FREERTOS/tasks.c ****                     }
2796:../Dave/Generated/FREERTOS/tasks.c **** 
2797:../Dave/Generated/FREERTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2798:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3432              	 .loc 1 2798 0
 3433 0096 BB68     	 ldr r3,[r7,#8]
 3434 0098 0433     	 add r3,r3,#4
 3435 009a 181C     	 mov r0,r3
 3436 009c FFF7FEFF 	 bl uxListRemove
2799:../Dave/Generated/FREERTOS/tasks.c **** 
2800:../Dave/Generated/FREERTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2801:../Dave/Generated/FREERTOS/tasks.c ****                      * it from the event list. */
2802:../Dave/Generated/FREERTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3437              	 .loc 1 2802 0
 3438 00a0 BB68     	 ldr r3,[r7,#8]
 3439 00a2 9B6A     	 ldr r3,[r3,#40]
 3440 00a4 002B     	 cmp r3,#0
 3441 00a6 04D0     	 beq .L261
2803:../Dave/Generated/FREERTOS/tasks.c ****                     {
2804:../Dave/Generated/FREERTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3442              	 .loc 1 2804 0
 3443 00a8 BB68     	 ldr r3,[r7,#8]
 3444 00aa 1833     	 add r3,r3,#24
 3445 00ac 181C     	 mov r0,r3
 3446 00ae FFF7FEFF 	 bl uxListRemove
 3447              	.L261:
2805:../Dave/Generated/FREERTOS/tasks.c ****                     }
2806:../Dave/Generated/FREERTOS/tasks.c ****                     else
2807:../Dave/Generated/FREERTOS/tasks.c ****                     {
2808:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2809:../Dave/Generated/FREERTOS/tasks.c ****                     }
2810:../Dave/Generated/FREERTOS/tasks.c **** 
2811:../Dave/Generated/FREERTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2812:../Dave/Generated/FREERTOS/tasks.c ****                      * list. */
2813:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3448              	 .loc 1 2813 0
 3449 00b2 BB68     	 ldr r3,[r7,#8]
 3450 00b4 DA6A     	 ldr r2,[r3,#44]
 3451 00b6 254B     	 ldr r3,.L269+24
 3452 00b8 1B68     	 ldr r3,[r3]
 3453 00ba 9A42     	 cmp r2,r3
 3454 00bc 03D9     	 bls .L262
 3455              	 .loc 1 2813 0 is_stmt 0 discriminator 1
 3456 00be BB68     	 ldr r3,[r7,#8]
 3457 00c0 DA6A     	 ldr r2,[r3,#44]
 3458 00c2 224B     	 ldr r3,.L269+24
 3459 00c4 1A60     	 str r2,[r3]
 3460              	.L262:
 3461              	 .loc 1 2813 0 discriminator 3
 3462 00c6 BB68     	 ldr r3,[r7,#8]
 3463 00c8 DA6A     	 ldr r2,[r3,#44]
 3464 00ca 131C     	 mov r3,r2
 3465 00cc 9B00     	 lsl r3,r3,#2
 3466 00ce 9B18     	 add r3,r3,r2
 3467 00d0 9B00     	 lsl r3,r3,#2
 3468 00d2 1F4A     	 ldr r2,.L269+28
 3469 00d4 9A18     	 add r2,r3,r2
 3470 00d6 BB68     	 ldr r3,[r7,#8]
 3471 00d8 0433     	 add r3,r3,#4
 3472 00da 101C     	 mov r0,r2
 3473 00dc 191C     	 mov r1,r3
 3474 00de FFF7FEFF 	 bl vListInsertEnd
2814:../Dave/Generated/FREERTOS/tasks.c **** 
2815:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2816:../Dave/Generated/FREERTOS/tasks.c ****                      * context switch if preemption is turned off. */
2817:../Dave/Generated/FREERTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2818:../Dave/Generated/FREERTOS/tasks.c ****                         {
2819:../Dave/Generated/FREERTOS/tasks.c ****                             /* Preemption is on, but a context switch should
2820:../Dave/Generated/FREERTOS/tasks.c ****                              * only be performed if the unblocked task has a
2821:../Dave/Generated/FREERTOS/tasks.c ****                              * priority that is equal to or higher than the
2822:../Dave/Generated/FREERTOS/tasks.c ****                              * currently executing task. */
2823:../Dave/Generated/FREERTOS/tasks.c ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3475              	 .loc 1 2823 0 is_stmt 1 discriminator 3
 3476 00e2 BB68     	 ldr r3,[r7,#8]
 3477 00e4 DA6A     	 ldr r2,[r3,#44]
 3478 00e6 1B4B     	 ldr r3,.L269+32
 3479 00e8 1B68     	 ldr r3,[r3]
 3480 00ea DB6A     	 ldr r3,[r3,#44]
 3481 00ec 9A42     	 cmp r2,r3
 3482 00ee 01D3     	 bcc .L263
2824:../Dave/Generated/FREERTOS/tasks.c ****                             {
2825:../Dave/Generated/FREERTOS/tasks.c ****                                 xSwitchRequired = pdTRUE;
 3483              	 .loc 1 2825 0
 3484 00f0 0123     	 mov r3,#1
 3485 00f2 7B61     	 str r3,[r7,#20]
 3486              	.L263:
2826:../Dave/Generated/FREERTOS/tasks.c ****                             }
2827:../Dave/Generated/FREERTOS/tasks.c ****                             else
2828:../Dave/Generated/FREERTOS/tasks.c ****                             {
2829:../Dave/Generated/FREERTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2830:../Dave/Generated/FREERTOS/tasks.c ****                             }
2831:../Dave/Generated/FREERTOS/tasks.c ****                         }
2832:../Dave/Generated/FREERTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2833:../Dave/Generated/FREERTOS/tasks.c ****                 }
2834:../Dave/Generated/FREERTOS/tasks.c ****             }
 3487              	 .loc 1 2834 0
 3488 00f4 B5E7     	 b .L264
 3489              	.L258:
2835:../Dave/Generated/FREERTOS/tasks.c ****         }
2836:../Dave/Generated/FREERTOS/tasks.c **** 
2837:../Dave/Generated/FREERTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2838:../Dave/Generated/FREERTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2839:../Dave/Generated/FREERTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2840:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2841:../Dave/Generated/FREERTOS/tasks.c ****             {
2842:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
 3490              	 .loc 1 2842 0
 3491 00f6 174B     	 ldr r3,.L269+32
 3492 00f8 1B68     	 ldr r3,[r3]
 3493 00fa DA6A     	 ldr r2,[r3,#44]
 3494 00fc 1449     	 ldr r1,.L269+28
 3495 00fe 131C     	 mov r3,r2
 3496 0100 9B00     	 lsl r3,r3,#2
 3497 0102 9B18     	 add r3,r3,r2
 3498 0104 9B00     	 lsl r3,r3,#2
 3499 0106 5B58     	 ldr r3,[r3,r1]
 3500 0108 012B     	 cmp r3,#1
 3501 010a 01D9     	 bls .L265
2843:../Dave/Generated/FREERTOS/tasks.c ****                 {
2844:../Dave/Generated/FREERTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 3502              	 .loc 1 2844 0
 3503 010c 0123     	 mov r3,#1
 3504 010e 7B61     	 str r3,[r7,#20]
 3505              	.L265:
2845:../Dave/Generated/FREERTOS/tasks.c ****                 }
2846:../Dave/Generated/FREERTOS/tasks.c ****                 else
2847:../Dave/Generated/FREERTOS/tasks.c ****                 {
2848:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2849:../Dave/Generated/FREERTOS/tasks.c ****                 }
2850:../Dave/Generated/FREERTOS/tasks.c ****             }
2851:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2852:../Dave/Generated/FREERTOS/tasks.c **** 
2853:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2854:../Dave/Generated/FREERTOS/tasks.c ****             {
2855:../Dave/Generated/FREERTOS/tasks.c ****                 /* Guard against the tick hook being called when the pended tick
2856:../Dave/Generated/FREERTOS/tasks.c ****                  * count is being unwound (when the scheduler is being unlocked). */
2857:../Dave/Generated/FREERTOS/tasks.c ****                 if( xPendedTicks == ( TickType_t ) 0 )
2858:../Dave/Generated/FREERTOS/tasks.c ****                 {
2859:../Dave/Generated/FREERTOS/tasks.c ****                     vApplicationTickHook();
2860:../Dave/Generated/FREERTOS/tasks.c ****                 }
2861:../Dave/Generated/FREERTOS/tasks.c ****                 else
2862:../Dave/Generated/FREERTOS/tasks.c ****                 {
2863:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2864:../Dave/Generated/FREERTOS/tasks.c ****                 }
2865:../Dave/Generated/FREERTOS/tasks.c ****             }
2866:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2867:../Dave/Generated/FREERTOS/tasks.c **** 
2868:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2869:../Dave/Generated/FREERTOS/tasks.c ****             {
2870:../Dave/Generated/FREERTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
 3506              	 .loc 1 2870 0
 3507 0110 114B     	 ldr r3,.L269+36
 3508 0112 1B68     	 ldr r3,[r3]
 3509 0114 002B     	 cmp r3,#0
 3510 0116 01D0     	 beq .L266
2871:../Dave/Generated/FREERTOS/tasks.c ****                 {
2872:../Dave/Generated/FREERTOS/tasks.c ****                     xSwitchRequired = pdTRUE;
 3511              	 .loc 1 2872 0
 3512 0118 0123     	 mov r3,#1
 3513 011a 7B61     	 str r3,[r7,#20]
 3514              	.L266:
 3515              	.LBE9:
 3516 011c 04E0     	 b .L267
 3517              	.L254:
2873:../Dave/Generated/FREERTOS/tasks.c ****                 }
2874:../Dave/Generated/FREERTOS/tasks.c ****                 else
2875:../Dave/Generated/FREERTOS/tasks.c ****                 {
2876:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2877:../Dave/Generated/FREERTOS/tasks.c ****                 }
2878:../Dave/Generated/FREERTOS/tasks.c ****             }
2879:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2880:../Dave/Generated/FREERTOS/tasks.c ****     }
2881:../Dave/Generated/FREERTOS/tasks.c ****     else
2882:../Dave/Generated/FREERTOS/tasks.c ****     {
2883:../Dave/Generated/FREERTOS/tasks.c ****         ++xPendedTicks;
 3518              	 .loc 1 2883 0
 3519 011e 0F4B     	 ldr r3,.L269+40
 3520 0120 1B68     	 ldr r3,[r3]
 3521 0122 5A1C     	 add r2,r3,#1
 3522 0124 0D4B     	 ldr r3,.L269+40
 3523 0126 1A60     	 str r2,[r3]
 3524              	.L267:
2884:../Dave/Generated/FREERTOS/tasks.c **** 
2885:../Dave/Generated/FREERTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2886:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler is locked. */
2887:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2888:../Dave/Generated/FREERTOS/tasks.c ****             {
2889:../Dave/Generated/FREERTOS/tasks.c ****                 vApplicationTickHook();
2890:../Dave/Generated/FREERTOS/tasks.c ****             }
2891:../Dave/Generated/FREERTOS/tasks.c ****         #endif
2892:../Dave/Generated/FREERTOS/tasks.c ****     }
2893:../Dave/Generated/FREERTOS/tasks.c **** 
2894:../Dave/Generated/FREERTOS/tasks.c ****     return xSwitchRequired;
 3525              	 .loc 1 2894 0
 3526 0128 7B69     	 ldr r3,[r7,#20]
2895:../Dave/Generated/FREERTOS/tasks.c **** }
 3527              	 .loc 1 2895 0
 3528 012a 181C     	 mov r0,r3
 3529 012c BD46     	 mov sp,r7
 3530 012e 06B0     	 add sp,sp,#24
 3531              	 
 3532 0130 80BD     	 pop {r7,pc}
 3533              	.L270:
 3534 0132 C046     	 .align 2
 3535              	.L269:
 3536 0134 00000000 	 .word uxSchedulerSuspended
 3537 0138 00000000 	 .word xTickCount
 3538 013c 00000000 	 .word pxDelayedTaskList
 3539 0140 00000000 	 .word pxOverflowDelayedTaskList
 3540 0144 00000000 	 .word xNumOfOverflows
 3541 0148 00000000 	 .word xNextTaskUnblockTime
 3542 014c 00000000 	 .word uxTopReadyPriority
 3543 0150 00000000 	 .word pxReadyTasksLists
 3544 0154 00000000 	 .word pxCurrentTCB
 3545 0158 00000000 	 .word xYieldPending
 3546 015c 00000000 	 .word xPendedTicks
 3547              	 .cfi_endproc
 3548              	.LFE70:
 3550              	 .section .text.vTaskSwitchContext,"ax",%progbits
 3551              	 .align 2
 3552              	 .global vTaskSwitchContext
 3553              	 .code 16
 3554              	 .thumb_func
 3556              	vTaskSwitchContext:
 3557              	.LFB71:
2896:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2897:../Dave/Generated/FREERTOS/tasks.c **** 
2898:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2899:../Dave/Generated/FREERTOS/tasks.c **** 
2900:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2901:../Dave/Generated/FREERTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2902:../Dave/Generated/FREERTOS/tasks.c ****     {
2903:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * xTCB;
2904:../Dave/Generated/FREERTOS/tasks.c **** 
2905:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2906:../Dave/Generated/FREERTOS/tasks.c ****          * getting set. */
2907:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask == NULL )
2908:../Dave/Generated/FREERTOS/tasks.c ****         {
2909:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2910:../Dave/Generated/FREERTOS/tasks.c ****         }
2911:../Dave/Generated/FREERTOS/tasks.c ****         else
2912:../Dave/Generated/FREERTOS/tasks.c ****         {
2913:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = xTask;
2914:../Dave/Generated/FREERTOS/tasks.c ****         }
2915:../Dave/Generated/FREERTOS/tasks.c **** 
2916:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2917:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2918:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
2919:../Dave/Generated/FREERTOS/tasks.c ****         {
2920:../Dave/Generated/FREERTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2921:../Dave/Generated/FREERTOS/tasks.c ****         }
2922:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
2923:../Dave/Generated/FREERTOS/tasks.c ****     }
2924:../Dave/Generated/FREERTOS/tasks.c **** 
2925:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2926:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2927:../Dave/Generated/FREERTOS/tasks.c **** 
2928:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2929:../Dave/Generated/FREERTOS/tasks.c **** 
2930:../Dave/Generated/FREERTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2931:../Dave/Generated/FREERTOS/tasks.c ****     {
2932:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2933:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t xReturn;
2934:../Dave/Generated/FREERTOS/tasks.c **** 
2935:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2936:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2937:../Dave/Generated/FREERTOS/tasks.c **** 
2938:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2939:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2940:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
2941:../Dave/Generated/FREERTOS/tasks.c ****         {
2942:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2943:../Dave/Generated/FREERTOS/tasks.c ****         }
2944:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
2945:../Dave/Generated/FREERTOS/tasks.c **** 
2946:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2947:../Dave/Generated/FREERTOS/tasks.c ****     }
2948:../Dave/Generated/FREERTOS/tasks.c **** 
2949:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2950:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2951:../Dave/Generated/FREERTOS/tasks.c **** 
2952:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2953:../Dave/Generated/FREERTOS/tasks.c **** 
2954:../Dave/Generated/FREERTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2955:../Dave/Generated/FREERTOS/tasks.c ****     {
2956:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
2957:../Dave/Generated/FREERTOS/tasks.c ****         TaskHookFunction_t xReturn;
2958:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2959:../Dave/Generated/FREERTOS/tasks.c **** 
2960:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2961:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2962:../Dave/Generated/FREERTOS/tasks.c **** 
2963:../Dave/Generated/FREERTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2964:../Dave/Generated/FREERTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2965:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2966:../Dave/Generated/FREERTOS/tasks.c ****         {
2967:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2968:../Dave/Generated/FREERTOS/tasks.c ****         }
2969:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2970:../Dave/Generated/FREERTOS/tasks.c **** 
2971:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
2972:../Dave/Generated/FREERTOS/tasks.c ****     }
2973:../Dave/Generated/FREERTOS/tasks.c **** 
2974:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2975:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2976:../Dave/Generated/FREERTOS/tasks.c **** 
2977:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2978:../Dave/Generated/FREERTOS/tasks.c **** 
2979:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2980:../Dave/Generated/FREERTOS/tasks.c ****                                              void * pvParameter )
2981:../Dave/Generated/FREERTOS/tasks.c ****     {
2982:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * xTCB;
2983:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
2984:../Dave/Generated/FREERTOS/tasks.c **** 
2985:../Dave/Generated/FREERTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2986:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask == NULL )
2987:../Dave/Generated/FREERTOS/tasks.c ****         {
2988:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = pxCurrentTCB;
2989:../Dave/Generated/FREERTOS/tasks.c ****         }
2990:../Dave/Generated/FREERTOS/tasks.c ****         else
2991:../Dave/Generated/FREERTOS/tasks.c ****         {
2992:../Dave/Generated/FREERTOS/tasks.c ****             xTCB = xTask;
2993:../Dave/Generated/FREERTOS/tasks.c ****         }
2994:../Dave/Generated/FREERTOS/tasks.c **** 
2995:../Dave/Generated/FREERTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2996:../Dave/Generated/FREERTOS/tasks.c ****         {
2997:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2998:../Dave/Generated/FREERTOS/tasks.c ****         }
2999:../Dave/Generated/FREERTOS/tasks.c ****         else
3000:../Dave/Generated/FREERTOS/tasks.c ****         {
3001:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdFAIL;
3002:../Dave/Generated/FREERTOS/tasks.c ****         }
3003:../Dave/Generated/FREERTOS/tasks.c **** 
3004:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
3005:../Dave/Generated/FREERTOS/tasks.c ****     }
3006:../Dave/Generated/FREERTOS/tasks.c **** 
3007:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3008:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3009:../Dave/Generated/FREERTOS/tasks.c **** 
3010:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
3011:../Dave/Generated/FREERTOS/tasks.c **** {
 3558              	 .loc 1 3011 0
 3559              	 .cfi_startproc
 3560 0000 80B5     	 push {r7,lr}
 3561              	.LCFI83:
 3562              	 .cfi_def_cfa_offset 8
 3563              	 .cfi_offset 7,-8
 3564              	 .cfi_offset 14,-4
 3565 0002 82B0     	 sub sp,sp,#8
 3566              	.LCFI84:
 3567              	 .cfi_def_cfa_offset 16
 3568 0004 00AF     	 add r7,sp,#0
 3569              	.LCFI85:
 3570              	 .cfi_def_cfa_register 7
3012:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3571              	 .loc 1 3012 0
 3572 0006 214B     	 ldr r3,.L279
 3573 0008 1B68     	 ldr r3,[r3]
 3574 000a 002B     	 cmp r3,#0
 3575 000c 03D0     	 beq .L272
3013:../Dave/Generated/FREERTOS/tasks.c ****     {
3014:../Dave/Generated/FREERTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3015:../Dave/Generated/FREERTOS/tasks.c ****          * switch. */
3016:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 3576              	 .loc 1 3016 0
 3577 000e 204B     	 ldr r3,.L279+4
 3578 0010 0122     	 mov r2,#1
 3579 0012 1A60     	 str r2,[r3]
 3580 0014 37E0     	 b .L271
 3581              	.L272:
3017:../Dave/Generated/FREERTOS/tasks.c ****     }
3018:../Dave/Generated/FREERTOS/tasks.c ****     else
3019:../Dave/Generated/FREERTOS/tasks.c ****     {
3020:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdFALSE;
 3582              	 .loc 1 3020 0
 3583 0016 1E4B     	 ldr r3,.L279+4
 3584 0018 0022     	 mov r2,#0
 3585 001a 1A60     	 str r2,[r3]
 3586              	.LBB11:
3021:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3022:../Dave/Generated/FREERTOS/tasks.c **** 
3023:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3024:../Dave/Generated/FREERTOS/tasks.c ****             {
3025:../Dave/Generated/FREERTOS/tasks.c ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3026:../Dave/Generated/FREERTOS/tasks.c ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3027:../Dave/Generated/FREERTOS/tasks.c ****                 #else
3028:../Dave/Generated/FREERTOS/tasks.c ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3029:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
3030:../Dave/Generated/FREERTOS/tasks.c **** 
3031:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add the amount of time the task has been running to the
3032:../Dave/Generated/FREERTOS/tasks.c ****                  * accumulated time so far.  The time the task started running was
3033:../Dave/Generated/FREERTOS/tasks.c ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3034:../Dave/Generated/FREERTOS/tasks.c ****                  * protection here so count values are only valid until the timer
3035:../Dave/Generated/FREERTOS/tasks.c ****                  * overflows.  The guard against negative values is to protect
3036:../Dave/Generated/FREERTOS/tasks.c ****                  * against suspect run time stat counter implementations - which
3037:../Dave/Generated/FREERTOS/tasks.c ****                  * are provided by the application, not the kernel. */
3038:../Dave/Generated/FREERTOS/tasks.c ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3039:../Dave/Generated/FREERTOS/tasks.c ****                 {
3040:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3041:../Dave/Generated/FREERTOS/tasks.c ****                 }
3042:../Dave/Generated/FREERTOS/tasks.c ****                 else
3043:../Dave/Generated/FREERTOS/tasks.c ****                 {
3044:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3045:../Dave/Generated/FREERTOS/tasks.c ****                 }
3046:../Dave/Generated/FREERTOS/tasks.c **** 
3047:../Dave/Generated/FREERTOS/tasks.c ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3048:../Dave/Generated/FREERTOS/tasks.c ****             }
3049:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3050:../Dave/Generated/FREERTOS/tasks.c **** 
3051:../Dave/Generated/FREERTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3052:../Dave/Generated/FREERTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3053:../Dave/Generated/FREERTOS/tasks.c **** 
3054:../Dave/Generated/FREERTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3055:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3056:../Dave/Generated/FREERTOS/tasks.c ****             {
3057:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3058:../Dave/Generated/FREERTOS/tasks.c ****             }
3059:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3060:../Dave/Generated/FREERTOS/tasks.c **** 
3061:../Dave/Generated/FREERTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3062:../Dave/Generated/FREERTOS/tasks.c ****          * optimised asm code. */
3063:../Dave/Generated/FREERTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
 3587              	 .loc 1 3063 0
 3588 001c 1D4B     	 ldr r3,.L279+8
 3589 001e 1B68     	 ldr r3,[r3]
 3590 0020 7B60     	 str r3,[r7,#4]
 3591 0022 07E0     	 b .L274
 3592              	.L277:
 3593              	 .loc 1 3063 0 is_stmt 0 discriminator 5
 3594 0024 7B68     	 ldr r3,[r7,#4]
 3595 0026 002B     	 cmp r3,#0
 3596 0028 01D1     	 bne .L275
 3597              	 .loc 1 3063 0 discriminator 2
 3598              	
 3599 002a 72B6     	 cpsid i
 3600              	
 3601              	 .code 16
 3602              	.L276:
 3603              	 .loc 1 3063 0 discriminator 1
 3604 002c FEE7     	 b .L276
 3605              	.L275:
 3606              	 .loc 1 3063 0 discriminator 3
 3607 002e 7B68     	 ldr r3,[r7,#4]
 3608 0030 013B     	 sub r3,r3,#1
 3609 0032 7B60     	 str r3,[r7,#4]
 3610              	.L274:
 3611              	 .loc 1 3063 0 discriminator 4
 3612 0034 1849     	 ldr r1,.L279+12
 3613 0036 7A68     	 ldr r2,[r7,#4]
 3614 0038 131C     	 mov r3,r2
 3615 003a 9B00     	 lsl r3,r3,#2
 3616 003c 9B18     	 add r3,r3,r2
 3617 003e 9B00     	 lsl r3,r3,#2
 3618 0040 5B58     	 ldr r3,[r3,r1]
 3619 0042 002B     	 cmp r3,#0
 3620 0044 EED0     	 beq .L277
 3621              	.LBB12:
 3622              	 .loc 1 3063 0 discriminator 6
 3623 0046 7A68     	 ldr r2,[r7,#4]
 3624 0048 131C     	 mov r3,r2
 3625 004a 9B00     	 lsl r3,r3,#2
 3626 004c 9B18     	 add r3,r3,r2
 3627 004e 9B00     	 lsl r3,r3,#2
 3628 0050 114A     	 ldr r2,.L279+12
 3629 0052 9B18     	 add r3,r3,r2
 3630 0054 3B60     	 str r3,[r7]
 3631 0056 3B68     	 ldr r3,[r7]
 3632 0058 5B68     	 ldr r3,[r3,#4]
 3633 005a 5A68     	 ldr r2,[r3,#4]
 3634 005c 3B68     	 ldr r3,[r7]
 3635 005e 5A60     	 str r2,[r3,#4]
 3636 0060 3B68     	 ldr r3,[r7]
 3637 0062 5A68     	 ldr r2,[r3,#4]
 3638 0064 3B68     	 ldr r3,[r7]
 3639 0066 0833     	 add r3,r3,#8
 3640 0068 9A42     	 cmp r2,r3
 3641 006a 04D1     	 bne .L278
 3642              	 .loc 1 3063 0 discriminator 7
 3643 006c 3B68     	 ldr r3,[r7]
 3644 006e 5B68     	 ldr r3,[r3,#4]
 3645 0070 5A68     	 ldr r2,[r3,#4]
 3646 0072 3B68     	 ldr r3,[r7]
 3647 0074 5A60     	 str r2,[r3,#4]
 3648              	.L278:
 3649              	 .loc 1 3063 0 discriminator 9
 3650 0076 3B68     	 ldr r3,[r7]
 3651 0078 5B68     	 ldr r3,[r3,#4]
 3652 007a DA68     	 ldr r2,[r3,#12]
 3653 007c 074B     	 ldr r3,.L279+16
 3654 007e 1A60     	 str r2,[r3]
 3655              	.LBE12:
 3656 0080 044B     	 ldr r3,.L279+8
 3657 0082 7A68     	 ldr r2,[r7,#4]
 3658 0084 1A60     	 str r2,[r3]
 3659              	.L271:
 3660              	.LBE11:
3064:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3065:../Dave/Generated/FREERTOS/tasks.c **** 
3066:../Dave/Generated/FREERTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3067:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3068:../Dave/Generated/FREERTOS/tasks.c ****             {
3069:../Dave/Generated/FREERTOS/tasks.c ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3070:../Dave/Generated/FREERTOS/tasks.c ****             }
3071:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3072:../Dave/Generated/FREERTOS/tasks.c **** 
3073:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3074:../Dave/Generated/FREERTOS/tasks.c ****             {
3075:../Dave/Generated/FREERTOS/tasks.c ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3076:../Dave/Generated/FREERTOS/tasks.c ****                  * structure specific to this task.
3077:../Dave/Generated/FREERTOS/tasks.c ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3078:../Dave/Generated/FREERTOS/tasks.c ****                  * for additional information. */
3079:../Dave/Generated/FREERTOS/tasks.c ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3080:../Dave/Generated/FREERTOS/tasks.c ****             }
3081:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3082:../Dave/Generated/FREERTOS/tasks.c ****     }
3083:../Dave/Generated/FREERTOS/tasks.c **** }
 3661              	 .loc 1 3083 0 is_stmt 1
 3662 0086 BD46     	 mov sp,r7
 3663 0088 02B0     	 add sp,sp,#8
 3664              	 
 3665 008a 80BD     	 pop {r7,pc}
 3666              	.L280:
 3667              	 .align 2
 3668              	.L279:
 3669 008c 00000000 	 .word uxSchedulerSuspended
 3670 0090 00000000 	 .word xYieldPending
 3671 0094 00000000 	 .word uxTopReadyPriority
 3672 0098 00000000 	 .word pxReadyTasksLists
 3673 009c 00000000 	 .word pxCurrentTCB
 3674              	 .cfi_endproc
 3675              	.LFE71:
 3677              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 3678              	 .align 2
 3679              	 .global vTaskPlaceOnEventList
 3680              	 .code 16
 3681              	 .thumb_func
 3683              	vTaskPlaceOnEventList:
 3684              	.LFB72:
3084:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:../Dave/Generated/FREERTOS/tasks.c **** 
3086:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3087:../Dave/Generated/FREERTOS/tasks.c ****                             const TickType_t xTicksToWait )
3088:../Dave/Generated/FREERTOS/tasks.c **** {
 3685              	 .loc 1 3088 0
 3686              	 .cfi_startproc
 3687 0000 80B5     	 push {r7,lr}
 3688              	.LCFI86:
 3689              	 .cfi_def_cfa_offset 8
 3690              	 .cfi_offset 7,-8
 3691              	 .cfi_offset 14,-4
 3692 0002 82B0     	 sub sp,sp,#8
 3693              	.LCFI87:
 3694              	 .cfi_def_cfa_offset 16
 3695 0004 00AF     	 add r7,sp,#0
 3696              	.LCFI88:
 3697              	 .cfi_def_cfa_register 7
 3698 0006 7860     	 str r0,[r7,#4]
 3699 0008 3960     	 str r1,[r7]
3089:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxEventList );
 3700              	 .loc 1 3089 0
 3701 000a 7B68     	 ldr r3,[r7,#4]
 3702 000c 002B     	 cmp r3,#0
 3703 000e 01D1     	 bne .L282
 3704              	 .loc 1 3089 0 is_stmt 0 discriminator 1
 3705              	
 3706 0010 72B6     	 cpsid i
 3707              	
 3708              	 .code 16
 3709              	.L283:
 3710 0012 FEE7     	 b .L283
 3711              	.L282:
3090:../Dave/Generated/FREERTOS/tasks.c **** 
3091:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3092:../Dave/Generated/FREERTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3093:../Dave/Generated/FREERTOS/tasks.c **** 
3094:../Dave/Generated/FREERTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3095:../Dave/Generated/FREERTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3096:../Dave/Generated/FREERTOS/tasks.c ****      * is the first to be woken by the event.  The queue that contains the event
3097:../Dave/Generated/FREERTOS/tasks.c ****      * list is locked, preventing simultaneous access from interrupts. */
3098:../Dave/Generated/FREERTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3712              	 .loc 1 3098 0 is_stmt 1
 3713 0014 074B     	 ldr r3,.L284
 3714 0016 1B68     	 ldr r3,[r3]
 3715 0018 1833     	 add r3,r3,#24
 3716 001a 7A68     	 ldr r2,[r7,#4]
 3717 001c 101C     	 mov r0,r2
 3718 001e 191C     	 mov r1,r3
 3719 0020 FFF7FEFF 	 bl vListInsert
3099:../Dave/Generated/FREERTOS/tasks.c **** 
3100:../Dave/Generated/FREERTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3720              	 .loc 1 3100 0
 3721 0024 3B68     	 ldr r3,[r7]
 3722 0026 181C     	 mov r0,r3
 3723 0028 0121     	 mov r1,#1
 3724 002a FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3101:../Dave/Generated/FREERTOS/tasks.c **** }
 3725              	 .loc 1 3101 0
 3726 002e BD46     	 mov sp,r7
 3727 0030 02B0     	 add sp,sp,#8
 3728              	 
 3729 0032 80BD     	 pop {r7,pc}
 3730              	.L285:
 3731              	 .align 2
 3732              	.L284:
 3733 0034 00000000 	 .word pxCurrentTCB
 3734              	 .cfi_endproc
 3735              	.LFE72:
 3737              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3738              	 .align 2
 3739              	 .global vTaskPlaceOnUnorderedEventList
 3740              	 .code 16
 3741              	 .thumb_func
 3743              	vTaskPlaceOnUnorderedEventList:
 3744              	.LFB73:
3102:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3103:../Dave/Generated/FREERTOS/tasks.c **** 
3104:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3105:../Dave/Generated/FREERTOS/tasks.c ****                                      const TickType_t xItemValue,
3106:../Dave/Generated/FREERTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3107:../Dave/Generated/FREERTOS/tasks.c **** {
 3745              	 .loc 1 3107 0
 3746              	 .cfi_startproc
 3747 0000 80B5     	 push {r7,lr}
 3748              	.LCFI89:
 3749              	 .cfi_def_cfa_offset 8
 3750              	 .cfi_offset 7,-8
 3751              	 .cfi_offset 14,-4
 3752 0002 84B0     	 sub sp,sp,#16
 3753              	.LCFI90:
 3754              	 .cfi_def_cfa_offset 24
 3755 0004 00AF     	 add r7,sp,#0
 3756              	.LCFI91:
 3757              	 .cfi_def_cfa_register 7
 3758 0006 F860     	 str r0,[r7,#12]
 3759 0008 B960     	 str r1,[r7,#8]
 3760 000a 7A60     	 str r2,[r7,#4]
3108:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxEventList );
 3761              	 .loc 1 3108 0
 3762 000c FB68     	 ldr r3,[r7,#12]
 3763 000e 002B     	 cmp r3,#0
 3764 0010 01D1     	 bne .L287
 3765              	 .loc 1 3108 0 is_stmt 0 discriminator 1
 3766              	
 3767 0012 72B6     	 cpsid i
 3768              	
 3769              	 .code 16
 3770              	.L288:
 3771 0014 FEE7     	 b .L288
 3772              	.L287:
3109:../Dave/Generated/FREERTOS/tasks.c **** 
3110:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3111:../Dave/Generated/FREERTOS/tasks.c ****      * the event groups implementation. */
3112:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
 3773              	 .loc 1 3112 0 is_stmt 1
 3774 0016 0E4B     	 ldr r3,.L291
 3775 0018 1B68     	 ldr r3,[r3]
 3776 001a 002B     	 cmp r3,#0
 3777 001c 01D1     	 bne .L289
 3778              	 .loc 1 3112 0 is_stmt 0 discriminator 1
 3779              	
 3780 001e 72B6     	 cpsid i
 3781              	
 3782              	 .code 16
 3783              	.L290:
 3784              	 .loc 1 3112 0 discriminator 2
 3785 0020 FEE7     	 b .L290
 3786              	.L289:
3113:../Dave/Generated/FREERTOS/tasks.c **** 
3114:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3115:../Dave/Generated/FREERTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3116:../Dave/Generated/FREERTOS/tasks.c ****      * task that is not in the Blocked state. */
3117:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
 3787              	 .loc 1 3117 0 is_stmt 1
 3788 0022 0C4B     	 ldr r3,.L291+4
 3789 0024 1B68     	 ldr r3,[r3]
 3790 0026 BA68     	 ldr r2,[r7,#8]
 3791 0028 8021     	 mov r1,#128
 3792 002a 0906     	 lsl r1,r1,#24
 3793 002c 0A43     	 orr r2,r1
 3794 002e 9A61     	 str r2,[r3,#24]
3118:../Dave/Generated/FREERTOS/tasks.c **** 
3119:../Dave/Generated/FREERTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3120:../Dave/Generated/FREERTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3121:../Dave/Generated/FREERTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3122:../Dave/Generated/FREERTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3123:../Dave/Generated/FREERTOS/tasks.c ****      * the task level). */
3124:../Dave/Generated/FREERTOS/tasks.c ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3795              	 .loc 1 3124 0
 3796 0030 084B     	 ldr r3,.L291+4
 3797 0032 1B68     	 ldr r3,[r3]
 3798 0034 1833     	 add r3,r3,#24
 3799 0036 FA68     	 ldr r2,[r7,#12]
 3800 0038 101C     	 mov r0,r2
 3801 003a 191C     	 mov r1,r3
 3802 003c FFF7FEFF 	 bl vListInsertEnd
3125:../Dave/Generated/FREERTOS/tasks.c **** 
3126:../Dave/Generated/FREERTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3803              	 .loc 1 3126 0
 3804 0040 7B68     	 ldr r3,[r7,#4]
 3805 0042 181C     	 mov r0,r3
 3806 0044 0121     	 mov r1,#1
 3807 0046 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3127:../Dave/Generated/FREERTOS/tasks.c **** }
 3808              	 .loc 1 3127 0
 3809 004a BD46     	 mov sp,r7
 3810 004c 04B0     	 add sp,sp,#16
 3811              	 
 3812 004e 80BD     	 pop {r7,pc}
 3813              	.L292:
 3814              	 .align 2
 3815              	.L291:
 3816 0050 00000000 	 .word uxSchedulerSuspended
 3817 0054 00000000 	 .word pxCurrentTCB
 3818              	 .cfi_endproc
 3819              	.LFE73:
 3821              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3822              	 .align 2
 3823              	 .global vTaskPlaceOnEventListRestricted
 3824              	 .code 16
 3825              	 .thumb_func
 3827              	vTaskPlaceOnEventListRestricted:
 3828              	.LFB74:
3128:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3129:../Dave/Generated/FREERTOS/tasks.c **** 
3130:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3131:../Dave/Generated/FREERTOS/tasks.c **** 
3132:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3133:../Dave/Generated/FREERTOS/tasks.c ****                                           TickType_t xTicksToWait,
3134:../Dave/Generated/FREERTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3135:../Dave/Generated/FREERTOS/tasks.c ****     {
 3829              	 .loc 1 3135 0
 3830              	 .cfi_startproc
 3831 0000 80B5     	 push {r7,lr}
 3832              	.LCFI92:
 3833              	 .cfi_def_cfa_offset 8
 3834              	 .cfi_offset 7,-8
 3835              	 .cfi_offset 14,-4
 3836 0002 84B0     	 sub sp,sp,#16
 3837              	.LCFI93:
 3838              	 .cfi_def_cfa_offset 24
 3839 0004 00AF     	 add r7,sp,#0
 3840              	.LCFI94:
 3841              	 .cfi_def_cfa_register 7
 3842 0006 F860     	 str r0,[r7,#12]
 3843 0008 B960     	 str r1,[r7,#8]
 3844 000a 7A60     	 str r2,[r7,#4]
3136:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( pxEventList );
 3845              	 .loc 1 3136 0
 3846 000c FB68     	 ldr r3,[r7,#12]
 3847 000e 002B     	 cmp r3,#0
 3848 0010 01D1     	 bne .L294
 3849              	 .loc 1 3136 0 is_stmt 0 discriminator 1
 3850              	
 3851 0012 72B6     	 cpsid i
 3852              	
 3853              	 .code 16
 3854              	.L295:
 3855 0014 FEE7     	 b .L295
 3856              	.L294:
3137:../Dave/Generated/FREERTOS/tasks.c **** 
3138:../Dave/Generated/FREERTOS/tasks.c ****         /* This function should not be called by application code hence the
3139:../Dave/Generated/FREERTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3140:../Dave/Generated/FREERTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3141:../Dave/Generated/FREERTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3142:../Dave/Generated/FREERTOS/tasks.c **** 
3143:../Dave/Generated/FREERTOS/tasks.c **** 
3144:../Dave/Generated/FREERTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3145:../Dave/Generated/FREERTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
3146:../Dave/Generated/FREERTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3147:../Dave/Generated/FREERTOS/tasks.c ****          * can be used in place of vListInsert. */
3148:../Dave/Generated/FREERTOS/tasks.c ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3857              	 .loc 1 3148 0 is_stmt 1
 3858 0016 0B4B     	 ldr r3,.L297
 3859 0018 1B68     	 ldr r3,[r3]
 3860 001a 1833     	 add r3,r3,#24
 3861 001c FA68     	 ldr r2,[r7,#12]
 3862 001e 101C     	 mov r0,r2
 3863 0020 191C     	 mov r1,r3
 3864 0022 FFF7FEFF 	 bl vListInsertEnd
3149:../Dave/Generated/FREERTOS/tasks.c **** 
3150:../Dave/Generated/FREERTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3151:../Dave/Generated/FREERTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3152:../Dave/Generated/FREERTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3153:../Dave/Generated/FREERTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
 3865              	 .loc 1 3153 0
 3866 0026 7B68     	 ldr r3,[r7,#4]
 3867 0028 002B     	 cmp r3,#0
 3868 002a 02D0     	 beq .L296
3154:../Dave/Generated/FREERTOS/tasks.c ****         {
3155:../Dave/Generated/FREERTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
 3869              	 .loc 1 3155 0
 3870 002c 0123     	 mov r3,#1
 3871 002e 5B42     	 neg r3,r3
 3872 0030 BB60     	 str r3,[r7,#8]
 3873              	.L296:
3156:../Dave/Generated/FREERTOS/tasks.c ****         }
3157:../Dave/Generated/FREERTOS/tasks.c **** 
3158:../Dave/Generated/FREERTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3159:../Dave/Generated/FREERTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3874              	 .loc 1 3159 0
 3875 0032 BA68     	 ldr r2,[r7,#8]
 3876 0034 7B68     	 ldr r3,[r7,#4]
 3877 0036 101C     	 mov r0,r2
 3878 0038 191C     	 mov r1,r3
 3879 003a FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
3160:../Dave/Generated/FREERTOS/tasks.c ****     }
 3880              	 .loc 1 3160 0
 3881 003e BD46     	 mov sp,r7
 3882 0040 04B0     	 add sp,sp,#16
 3883              	 
 3884 0042 80BD     	 pop {r7,pc}
 3885              	.L298:
 3886              	 .align 2
 3887              	.L297:
 3888 0044 00000000 	 .word pxCurrentTCB
 3889              	 .cfi_endproc
 3890              	.LFE74:
 3892              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 3893              	 .align 2
 3894              	 .global xTaskRemoveFromEventList
 3895              	 .code 16
 3896              	 .thumb_func
 3898              	xTaskRemoveFromEventList:
 3899              	.LFB75:
3161:../Dave/Generated/FREERTOS/tasks.c **** 
3162:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
3163:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3164:../Dave/Generated/FREERTOS/tasks.c **** 
3165:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3166:../Dave/Generated/FREERTOS/tasks.c **** {
 3900              	 .loc 1 3166 0
 3901              	 .cfi_startproc
 3902 0000 80B5     	 push {r7,lr}
 3903              	.LCFI95:
 3904              	 .cfi_def_cfa_offset 8
 3905              	 .cfi_offset 7,-8
 3906              	 .cfi_offset 14,-4
 3907 0002 84B0     	 sub sp,sp,#16
 3908              	.LCFI96:
 3909              	 .cfi_def_cfa_offset 24
 3910 0004 00AF     	 add r7,sp,#0
 3911              	.LCFI97:
 3912              	 .cfi_def_cfa_register 7
 3913 0006 7860     	 str r0,[r7,#4]
3167:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3168:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
3169:../Dave/Generated/FREERTOS/tasks.c **** 
3170:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3171:../Dave/Generated/FREERTOS/tasks.c ****      * called from a critical section within an ISR. */
3172:../Dave/Generated/FREERTOS/tasks.c **** 
3173:../Dave/Generated/FREERTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3174:../Dave/Generated/FREERTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3175:../Dave/Generated/FREERTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3176:../Dave/Generated/FREERTOS/tasks.c ****      *
3177:../Dave/Generated/FREERTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3178:../Dave/Generated/FREERTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3179:../Dave/Generated/FREERTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3180:../Dave/Generated/FREERTOS/tasks.c ****      *
3181:../Dave/Generated/FREERTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3182:../Dave/Generated/FREERTOS/tasks.c ****      * pxEventList is not empty. */
3183:../Dave/Generated/FREERTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
 3914              	 .loc 1 3183 0
 3915 0008 7B68     	 ldr r3,[r7,#4]
 3916 000a DB68     	 ldr r3,[r3,#12]
 3917 000c DB68     	 ldr r3,[r3,#12]
 3918 000e BB60     	 str r3,[r7,#8]
3184:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 3919              	 .loc 1 3184 0
 3920 0010 BB68     	 ldr r3,[r7,#8]
 3921 0012 002B     	 cmp r3,#0
 3922 0014 01D1     	 bne .L300
 3923              	 .loc 1 3184 0 is_stmt 0 discriminator 1
 3924              	
 3925 0016 72B6     	 cpsid i
 3926              	
 3927              	 .code 16
 3928              	.L301:
 3929 0018 FEE7     	 b .L301
 3930              	.L300:
3185:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3931              	 .loc 1 3185 0 is_stmt 1
 3932 001a BB68     	 ldr r3,[r7,#8]
 3933 001c 1833     	 add r3,r3,#24
 3934 001e 181C     	 mov r0,r3
 3935 0020 FFF7FEFF 	 bl uxListRemove
3186:../Dave/Generated/FREERTOS/tasks.c **** 
3187:../Dave/Generated/FREERTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3936              	 .loc 1 3187 0
 3937 0024 1E4B     	 ldr r3,.L308
 3938 0026 1B68     	 ldr r3,[r3]
 3939 0028 002B     	 cmp r3,#0
 3940 002a 1DD1     	 bne .L302
3188:../Dave/Generated/FREERTOS/tasks.c ****     {
3189:../Dave/Generated/FREERTOS/tasks.c ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3941              	 .loc 1 3189 0
 3942 002c BB68     	 ldr r3,[r7,#8]
 3943 002e 0433     	 add r3,r3,#4
 3944 0030 181C     	 mov r0,r3
 3945 0032 FFF7FEFF 	 bl uxListRemove
3190:../Dave/Generated/FREERTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3946              	 .loc 1 3190 0
 3947 0036 BB68     	 ldr r3,[r7,#8]
 3948 0038 DA6A     	 ldr r2,[r3,#44]
 3949 003a 1A4B     	 ldr r3,.L308+4
 3950 003c 1B68     	 ldr r3,[r3]
 3951 003e 9A42     	 cmp r2,r3
 3952 0040 03D9     	 bls .L303
 3953              	 .loc 1 3190 0 is_stmt 0 discriminator 1
 3954 0042 BB68     	 ldr r3,[r7,#8]
 3955 0044 DA6A     	 ldr r2,[r3,#44]
 3956 0046 174B     	 ldr r3,.L308+4
 3957 0048 1A60     	 str r2,[r3]
 3958              	.L303:
 3959              	 .loc 1 3190 0 discriminator 3
 3960 004a BB68     	 ldr r3,[r7,#8]
 3961 004c DA6A     	 ldr r2,[r3,#44]
 3962 004e 131C     	 mov r3,r2
 3963 0050 9B00     	 lsl r3,r3,#2
 3964 0052 9B18     	 add r3,r3,r2
 3965 0054 9B00     	 lsl r3,r3,#2
 3966 0056 144A     	 ldr r2,.L308+8
 3967 0058 9A18     	 add r2,r3,r2
 3968 005a BB68     	 ldr r3,[r7,#8]
 3969 005c 0433     	 add r3,r3,#4
 3970 005e 101C     	 mov r0,r2
 3971 0060 191C     	 mov r1,r3
 3972 0062 FFF7FEFF 	 bl vListInsertEnd
 3973 0066 06E0     	 b .L304
 3974              	.L302:
3191:../Dave/Generated/FREERTOS/tasks.c **** 
3192:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3193:../Dave/Generated/FREERTOS/tasks.c ****             {
3194:../Dave/Generated/FREERTOS/tasks.c ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3195:../Dave/Generated/FREERTOS/tasks.c ****                  * might be set to the blocked task's time out time.  If the task is
3196:../Dave/Generated/FREERTOS/tasks.c ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3197:../Dave/Generated/FREERTOS/tasks.c ****                  * normally left unchanged, because it is automatically reset to a new
3198:../Dave/Generated/FREERTOS/tasks.c ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3199:../Dave/Generated/FREERTOS/tasks.c ****                  * tickless idling is used it might be more important to enter sleep mode
3200:../Dave/Generated/FREERTOS/tasks.c ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3201:../Dave/Generated/FREERTOS/tasks.c ****                  * ensure it is updated at the earliest possible time. */
3202:../Dave/Generated/FREERTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
3203:../Dave/Generated/FREERTOS/tasks.c ****             }
3204:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3205:../Dave/Generated/FREERTOS/tasks.c ****     }
3206:../Dave/Generated/FREERTOS/tasks.c ****     else
3207:../Dave/Generated/FREERTOS/tasks.c ****     {
3208:../Dave/Generated/FREERTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3209:../Dave/Generated/FREERTOS/tasks.c ****          * pending until the scheduler is resumed. */
3210:../Dave/Generated/FREERTOS/tasks.c ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3975              	 .loc 1 3210 0 is_stmt 1
 3976 0068 BB68     	 ldr r3,[r7,#8]
 3977 006a 1833     	 add r3,r3,#24
 3978 006c 0F4A     	 ldr r2,.L308+12
 3979 006e 101C     	 mov r0,r2
 3980 0070 191C     	 mov r1,r3
 3981 0072 FFF7FEFF 	 bl vListInsertEnd
 3982              	.L304:
3211:../Dave/Generated/FREERTOS/tasks.c ****     }
3212:../Dave/Generated/FREERTOS/tasks.c **** 
3213:../Dave/Generated/FREERTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3983              	 .loc 1 3213 0
 3984 0076 BB68     	 ldr r3,[r7,#8]
 3985 0078 DA6A     	 ldr r2,[r3,#44]
 3986 007a 0D4B     	 ldr r3,.L308+16
 3987 007c 1B68     	 ldr r3,[r3]
 3988 007e DB6A     	 ldr r3,[r3,#44]
 3989 0080 9A42     	 cmp r2,r3
 3990 0082 05D9     	 bls .L305
3214:../Dave/Generated/FREERTOS/tasks.c ****     {
3215:../Dave/Generated/FREERTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3216:../Dave/Generated/FREERTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3217:../Dave/Generated/FREERTOS/tasks.c ****          * it should force a context switch now. */
3218:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pdTRUE;
 3991              	 .loc 1 3218 0
 3992 0084 0123     	 mov r3,#1
 3993 0086 FB60     	 str r3,[r7,#12]
3219:../Dave/Generated/FREERTOS/tasks.c **** 
3220:../Dave/Generated/FREERTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3221:../Dave/Generated/FREERTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3222:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 3994              	 .loc 1 3222 0
 3995 0088 0A4B     	 ldr r3,.L308+20
 3996 008a 0122     	 mov r2,#1
 3997 008c 1A60     	 str r2,[r3]
 3998 008e 01E0     	 b .L306
 3999              	.L305:
3223:../Dave/Generated/FREERTOS/tasks.c ****     }
3224:../Dave/Generated/FREERTOS/tasks.c ****     else
3225:../Dave/Generated/FREERTOS/tasks.c ****     {
3226:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pdFALSE;
 4000              	 .loc 1 3226 0
 4001 0090 0023     	 mov r3,#0
 4002 0092 FB60     	 str r3,[r7,#12]
 4003              	.L306:
3227:../Dave/Generated/FREERTOS/tasks.c ****     }
3228:../Dave/Generated/FREERTOS/tasks.c **** 
3229:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 4004              	 .loc 1 3229 0
 4005 0094 FB68     	 ldr r3,[r7,#12]
3230:../Dave/Generated/FREERTOS/tasks.c **** }
 4006              	 .loc 1 3230 0
 4007 0096 181C     	 mov r0,r3
 4008 0098 BD46     	 mov sp,r7
 4009 009a 04B0     	 add sp,sp,#16
 4010              	 
 4011 009c 80BD     	 pop {r7,pc}
 4012              	.L309:
 4013 009e C046     	 .align 2
 4014              	.L308:
 4015 00a0 00000000 	 .word uxSchedulerSuspended
 4016 00a4 00000000 	 .word uxTopReadyPriority
 4017 00a8 00000000 	 .word pxReadyTasksLists
 4018 00ac 00000000 	 .word xPendingReadyList
 4019 00b0 00000000 	 .word pxCurrentTCB
 4020 00b4 00000000 	 .word xYieldPending
 4021              	 .cfi_endproc
 4022              	.LFE75:
 4024              	 .section .text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4025              	 .align 2
 4026              	 .global vTaskRemoveFromUnorderedEventList
 4027              	 .code 16
 4028              	 .thumb_func
 4030              	vTaskRemoveFromUnorderedEventList:
 4031              	.LFB76:
3231:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3232:../Dave/Generated/FREERTOS/tasks.c **** 
3233:../Dave/Generated/FREERTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3234:../Dave/Generated/FREERTOS/tasks.c ****                                         const TickType_t xItemValue )
3235:../Dave/Generated/FREERTOS/tasks.c **** {
 4032              	 .loc 1 3235 0
 4033              	 .cfi_startproc
 4034 0000 80B5     	 push {r7,lr}
 4035              	.LCFI98:
 4036              	 .cfi_def_cfa_offset 8
 4037              	 .cfi_offset 7,-8
 4038              	 .cfi_offset 14,-4
 4039 0002 84B0     	 sub sp,sp,#16
 4040              	.LCFI99:
 4041              	 .cfi_def_cfa_offset 24
 4042 0004 00AF     	 add r7,sp,#0
 4043              	.LCFI100:
 4044              	 .cfi_def_cfa_register 7
 4045 0006 7860     	 str r0,[r7,#4]
 4046 0008 3960     	 str r1,[r7]
3236:../Dave/Generated/FREERTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3237:../Dave/Generated/FREERTOS/tasks.c **** 
3238:../Dave/Generated/FREERTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3239:../Dave/Generated/FREERTOS/tasks.c ****      * the event flags implementation. */
3240:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
 4047              	 .loc 1 3240 0
 4048 000a 214B     	 ldr r3,.L317
 4049 000c 1B68     	 ldr r3,[r3]
 4050 000e 002B     	 cmp r3,#0
 4051 0010 01D1     	 bne .L311
 4052              	 .loc 1 3240 0 is_stmt 0 discriminator 1
 4053              	
 4054 0012 72B6     	 cpsid i
 4055              	
 4056              	 .code 16
 4057              	.L312:
 4058 0014 FEE7     	 b .L312
 4059              	.L311:
3241:../Dave/Generated/FREERTOS/tasks.c **** 
3242:../Dave/Generated/FREERTOS/tasks.c ****     /* Store the new item value in the event list. */
3243:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4060              	 .loc 1 3243 0 is_stmt 1
 4061 0016 3B68     	 ldr r3,[r7]
 4062 0018 8022     	 mov r2,#128
 4063 001a 1206     	 lsl r2,r2,#24
 4064 001c 1A43     	 orr r2,r3
 4065 001e 7B68     	 ldr r3,[r7,#4]
 4066 0020 1A60     	 str r2,[r3]
3244:../Dave/Generated/FREERTOS/tasks.c **** 
3245:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3246:../Dave/Generated/FREERTOS/tasks.c ****      * event flags. */
3247:../Dave/Generated/FREERTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
 4067              	 .loc 1 3247 0
 4068 0022 7B68     	 ldr r3,[r7,#4]
 4069 0024 DB68     	 ldr r3,[r3,#12]
 4070 0026 FB60     	 str r3,[r7,#12]
3248:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4071              	 .loc 1 3248 0
 4072 0028 FB68     	 ldr r3,[r7,#12]
 4073 002a 002B     	 cmp r3,#0
 4074 002c 01D1     	 bne .L313
 4075              	 .loc 1 3248 0 is_stmt 0 discriminator 1
 4076              	
 4077 002e 72B6     	 cpsid i
 4078              	
 4079              	 .code 16
 4080              	.L314:
 4081              	 .loc 1 3248 0 discriminator 2
 4082 0030 FEE7     	 b .L314
 4083              	.L313:
3249:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( pxEventListItem );
 4084              	 .loc 1 3249 0 is_stmt 1
 4085 0032 7B68     	 ldr r3,[r7,#4]
 4086 0034 181C     	 mov r0,r3
 4087 0036 FFF7FEFF 	 bl uxListRemove
3250:../Dave/Generated/FREERTOS/tasks.c **** 
3251:../Dave/Generated/FREERTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3252:../Dave/Generated/FREERTOS/tasks.c ****         {
3253:../Dave/Generated/FREERTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3254:../Dave/Generated/FREERTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3255:../Dave/Generated/FREERTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3256:../Dave/Generated/FREERTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3257:../Dave/Generated/FREERTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3258:../Dave/Generated/FREERTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3259:../Dave/Generated/FREERTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3260:../Dave/Generated/FREERTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3261:../Dave/Generated/FREERTOS/tasks.c ****             prvResetNextTaskUnblockTime();
3262:../Dave/Generated/FREERTOS/tasks.c ****         }
3263:../Dave/Generated/FREERTOS/tasks.c ****     #endif
3264:../Dave/Generated/FREERTOS/tasks.c **** 
3265:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3266:../Dave/Generated/FREERTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3267:../Dave/Generated/FREERTOS/tasks.c ****      * lists. */
3268:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4088              	 .loc 1 3268 0
 4089 003a FB68     	 ldr r3,[r7,#12]
 4090 003c 0433     	 add r3,r3,#4
 4091 003e 181C     	 mov r0,r3
 4092 0040 FFF7FEFF 	 bl uxListRemove
3269:../Dave/Generated/FREERTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4093              	 .loc 1 3269 0
 4094 0044 FB68     	 ldr r3,[r7,#12]
 4095 0046 DA6A     	 ldr r2,[r3,#44]
 4096 0048 124B     	 ldr r3,.L317+4
 4097 004a 1B68     	 ldr r3,[r3]
 4098 004c 9A42     	 cmp r2,r3
 4099 004e 03D9     	 bls .L315
 4100              	 .loc 1 3269 0 is_stmt 0 discriminator 1
 4101 0050 FB68     	 ldr r3,[r7,#12]
 4102 0052 DA6A     	 ldr r2,[r3,#44]
 4103 0054 0F4B     	 ldr r3,.L317+4
 4104 0056 1A60     	 str r2,[r3]
 4105              	.L315:
 4106              	 .loc 1 3269 0 discriminator 3
 4107 0058 FB68     	 ldr r3,[r7,#12]
 4108 005a DA6A     	 ldr r2,[r3,#44]
 4109 005c 131C     	 mov r3,r2
 4110 005e 9B00     	 lsl r3,r3,#2
 4111 0060 9B18     	 add r3,r3,r2
 4112 0062 9B00     	 lsl r3,r3,#2
 4113 0064 0C4A     	 ldr r2,.L317+8
 4114 0066 9A18     	 add r2,r3,r2
 4115 0068 FB68     	 ldr r3,[r7,#12]
 4116 006a 0433     	 add r3,r3,#4
 4117 006c 101C     	 mov r0,r2
 4118 006e 191C     	 mov r1,r3
 4119 0070 FFF7FEFF 	 bl vListInsertEnd
3270:../Dave/Generated/FREERTOS/tasks.c **** 
3271:../Dave/Generated/FREERTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4120              	 .loc 1 3271 0 is_stmt 1 discriminator 3
 4121 0074 FB68     	 ldr r3,[r7,#12]
 4122 0076 DA6A     	 ldr r2,[r3,#44]
 4123 0078 084B     	 ldr r3,.L317+12
 4124 007a 1B68     	 ldr r3,[r3]
 4125 007c DB6A     	 ldr r3,[r3,#44]
 4126 007e 9A42     	 cmp r2,r3
 4127 0080 02D9     	 bls .L310
3272:../Dave/Generated/FREERTOS/tasks.c ****     {
3273:../Dave/Generated/FREERTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3274:../Dave/Generated/FREERTOS/tasks.c ****          * a context switch is required.  This function is called with the
3275:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3276:../Dave/Generated/FREERTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3277:../Dave/Generated/FREERTOS/tasks.c ****         xYieldPending = pdTRUE;
 4128              	 .loc 1 3277 0
 4129 0082 074B     	 ldr r3,.L317+16
 4130 0084 0122     	 mov r2,#1
 4131 0086 1A60     	 str r2,[r3]
 4132              	.L310:
3278:../Dave/Generated/FREERTOS/tasks.c ****     }
3279:../Dave/Generated/FREERTOS/tasks.c **** }
 4133              	 .loc 1 3279 0
 4134 0088 BD46     	 mov sp,r7
 4135 008a 04B0     	 add sp,sp,#16
 4136              	 
 4137 008c 80BD     	 pop {r7,pc}
 4138              	.L318:
 4139 008e C046     	 .align 2
 4140              	.L317:
 4141 0090 00000000 	 .word uxSchedulerSuspended
 4142 0094 00000000 	 .word uxTopReadyPriority
 4143 0098 00000000 	 .word pxReadyTasksLists
 4144 009c 00000000 	 .word pxCurrentTCB
 4145 00a0 00000000 	 .word xYieldPending
 4146              	 .cfi_endproc
 4147              	.LFE76:
 4149              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 4150              	 .align 2
 4151              	 .global vTaskSetTimeOutState
 4152              	 .code 16
 4153              	 .thumb_func
 4155              	vTaskSetTimeOutState:
 4156              	.LFB77:
3280:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3281:../Dave/Generated/FREERTOS/tasks.c **** 
3282:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3283:../Dave/Generated/FREERTOS/tasks.c **** {
 4157              	 .loc 1 3283 0
 4158              	 .cfi_startproc
 4159 0000 80B5     	 push {r7,lr}
 4160              	.LCFI101:
 4161              	 .cfi_def_cfa_offset 8
 4162              	 .cfi_offset 7,-8
 4163              	 .cfi_offset 14,-4
 4164 0002 82B0     	 sub sp,sp,#8
 4165              	.LCFI102:
 4166              	 .cfi_def_cfa_offset 16
 4167 0004 00AF     	 add r7,sp,#0
 4168              	.LCFI103:
 4169              	 .cfi_def_cfa_register 7
 4170 0006 7860     	 str r0,[r7,#4]
3284:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTimeOut );
 4171              	 .loc 1 3284 0
 4172 0008 7B68     	 ldr r3,[r7,#4]
 4173 000a 002B     	 cmp r3,#0
 4174 000c 01D1     	 bne .L320
 4175              	 .loc 1 3284 0 is_stmt 0 discriminator 1
 4176              	
 4177 000e 72B6     	 cpsid i
 4178              	
 4179              	 .code 16
 4180              	.L321:
 4181 0010 FEE7     	 b .L321
 4182              	.L320:
3285:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 4183              	 .loc 1 3285 0 is_stmt 1
 4184 0012 FFF7FEFF 	 bl vPortEnterCritical
3286:../Dave/Generated/FREERTOS/tasks.c ****     {
3287:../Dave/Generated/FREERTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
 4185              	 .loc 1 3287 0
 4186 0016 064B     	 ldr r3,.L322
 4187 0018 1A68     	 ldr r2,[r3]
 4188 001a 7B68     	 ldr r3,[r7,#4]
 4189 001c 1A60     	 str r2,[r3]
3288:../Dave/Generated/FREERTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4190              	 .loc 1 3288 0
 4191 001e 054B     	 ldr r3,.L322+4
 4192 0020 1A68     	 ldr r2,[r3]
 4193 0022 7B68     	 ldr r3,[r7,#4]
 4194 0024 5A60     	 str r2,[r3,#4]
3289:../Dave/Generated/FREERTOS/tasks.c ****     }
3290:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 4195              	 .loc 1 3290 0
 4196 0026 FFF7FEFF 	 bl vPortExitCritical
3291:../Dave/Generated/FREERTOS/tasks.c **** }
 4197              	 .loc 1 3291 0
 4198 002a BD46     	 mov sp,r7
 4199 002c 02B0     	 add sp,sp,#8
 4200              	 
 4201 002e 80BD     	 pop {r7,pc}
 4202              	.L323:
 4203              	 .align 2
 4204              	.L322:
 4205 0030 00000000 	 .word xNumOfOverflows
 4206 0034 00000000 	 .word xTickCount
 4207              	 .cfi_endproc
 4208              	.LFE77:
 4210              	 .section .text.vTaskInternalSetTimeOutState,"ax",%progbits
 4211              	 .align 2
 4212              	 .global vTaskInternalSetTimeOutState
 4213              	 .code 16
 4214              	 .thumb_func
 4216              	vTaskInternalSetTimeOutState:
 4217              	.LFB78:
3292:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3293:../Dave/Generated/FREERTOS/tasks.c **** 
3294:../Dave/Generated/FREERTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3295:../Dave/Generated/FREERTOS/tasks.c **** {
 4218              	 .loc 1 3295 0
 4219              	 .cfi_startproc
 4220 0000 80B5     	 push {r7,lr}
 4221              	.LCFI104:
 4222              	 .cfi_def_cfa_offset 8
 4223              	 .cfi_offset 7,-8
 4224              	 .cfi_offset 14,-4
 4225 0002 82B0     	 sub sp,sp,#8
 4226              	.LCFI105:
 4227              	 .cfi_def_cfa_offset 16
 4228 0004 00AF     	 add r7,sp,#0
 4229              	.LCFI106:
 4230              	 .cfi_def_cfa_register 7
 4231 0006 7860     	 str r0,[r7,#4]
3296:../Dave/Generated/FREERTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3297:../Dave/Generated/FREERTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
 4232              	 .loc 1 3297 0
 4233 0008 054B     	 ldr r3,.L325
 4234 000a 1A68     	 ldr r2,[r3]
 4235 000c 7B68     	 ldr r3,[r7,#4]
 4236 000e 1A60     	 str r2,[r3]
3298:../Dave/Generated/FREERTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4237              	 .loc 1 3298 0
 4238 0010 044B     	 ldr r3,.L325+4
 4239 0012 1A68     	 ldr r2,[r3]
 4240 0014 7B68     	 ldr r3,[r7,#4]
 4241 0016 5A60     	 str r2,[r3,#4]
3299:../Dave/Generated/FREERTOS/tasks.c **** }
 4242              	 .loc 1 3299 0
 4243 0018 BD46     	 mov sp,r7
 4244 001a 02B0     	 add sp,sp,#8
 4245              	 
 4246 001c 80BD     	 pop {r7,pc}
 4247              	.L326:
 4248 001e C046     	 .align 2
 4249              	.L325:
 4250 0020 00000000 	 .word xNumOfOverflows
 4251 0024 00000000 	 .word xTickCount
 4252              	 .cfi_endproc
 4253              	.LFE78:
 4255              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 4256              	 .align 2
 4257              	 .global xTaskCheckForTimeOut
 4258              	 .code 16
 4259              	 .thumb_func
 4261              	xTaskCheckForTimeOut:
 4262              	.LFB79:
3300:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3301:../Dave/Generated/FREERTOS/tasks.c **** 
3302:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3303:../Dave/Generated/FREERTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3304:../Dave/Generated/FREERTOS/tasks.c **** {
 4263              	 .loc 1 3304 0
 4264              	 .cfi_startproc
 4265 0000 80B5     	 push {r7,lr}
 4266              	.LCFI107:
 4267              	 .cfi_def_cfa_offset 8
 4268              	 .cfi_offset 7,-8
 4269              	 .cfi_offset 14,-4
 4270 0002 86B0     	 sub sp,sp,#24
 4271              	.LCFI108:
 4272              	 .cfi_def_cfa_offset 32
 4273 0004 00AF     	 add r7,sp,#0
 4274              	.LCFI109:
 4275              	 .cfi_def_cfa_register 7
 4276 0006 7860     	 str r0,[r7,#4]
 4277 0008 3960     	 str r1,[r7]
3305:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xReturn;
3306:../Dave/Generated/FREERTOS/tasks.c **** 
3307:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTimeOut );
 4278              	 .loc 1 3307 0
 4279 000a 7B68     	 ldr r3,[r7,#4]
 4280 000c 002B     	 cmp r3,#0
 4281 000e 01D1     	 bne .L328
 4282              	 .loc 1 3307 0 is_stmt 0 discriminator 1
 4283              	
 4284 0010 72B6     	 cpsid i
 4285              	
 4286              	 .code 16
 4287              	.L329:
 4288 0012 FEE7     	 b .L329
 4289              	.L328:
3308:../Dave/Generated/FREERTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4290              	 .loc 1 3308 0 is_stmt 1
 4291 0014 3B68     	 ldr r3,[r7]
 4292 0016 002B     	 cmp r3,#0
 4293 0018 01D1     	 bne .L330
 4294              	 .loc 1 3308 0 is_stmt 0 discriminator 1
 4295              	
 4296 001a 72B6     	 cpsid i
 4297              	
 4298              	 .code 16
 4299              	.L331:
 4300              	 .loc 1 3308 0 discriminator 2
 4301 001c FEE7     	 b .L331
 4302              	.L330:
3309:../Dave/Generated/FREERTOS/tasks.c **** 
3310:../Dave/Generated/FREERTOS/tasks.c ****     taskENTER_CRITICAL();
 4303              	 .loc 1 3310 0 is_stmt 1
 4304 001e FFF7FEFF 	 bl vPortEnterCritical
 4305              	.LBB13:
3311:../Dave/Generated/FREERTOS/tasks.c ****     {
3312:../Dave/Generated/FREERTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3313:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
 4306              	 .loc 1 3313 0
 4307 0022 264B     	 ldr r3,.L338
 4308 0024 1B68     	 ldr r3,[r3]
 4309 0026 3B61     	 str r3,[r7,#16]
3314:../Dave/Generated/FREERTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4310              	 .loc 1 3314 0
 4311 0028 7B68     	 ldr r3,[r7,#4]
 4312 002a 5B68     	 ldr r3,[r3,#4]
 4313 002c 3A69     	 ldr r2,[r7,#16]
 4314 002e D31A     	 sub r3,r2,r3
 4315 0030 FB60     	 str r3,[r7,#12]
3315:../Dave/Generated/FREERTOS/tasks.c **** 
3316:../Dave/Generated/FREERTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3317:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 4316              	 .loc 1 3317 0
 4317 0032 234B     	 ldr r3,.L338+4
 4318 0034 1B68     	 ldr r3,[r3]
 4319 0036 6D22     	 mov r2,#109
 4320 0038 9B5C     	 ldrb r3,[r3,r2]
 4321 003a 002B     	 cmp r3,#0
 4322 003c 07D0     	 beq .L332
3318:../Dave/Generated/FREERTOS/tasks.c ****             {
3319:../Dave/Generated/FREERTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3320:../Dave/Generated/FREERTOS/tasks.c ****                  * but has the same result. */
3321:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
 4323              	 .loc 1 3321 0
 4324 003e 204B     	 ldr r3,.L338+4
 4325 0040 1B68     	 ldr r3,[r3]
 4326 0042 6D22     	 mov r2,#109
 4327 0044 0021     	 mov r1,#0
 4328 0046 9954     	 strb r1,[r3,r2]
3322:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 4329              	 .loc 1 3322 0
 4330 0048 0123     	 mov r3,#1
 4331 004a 7B61     	 str r3,[r7,#20]
 4332 004c 2EE0     	 b .L333
 4333              	.L332:
3323:../Dave/Generated/FREERTOS/tasks.c ****             }
3324:../Dave/Generated/FREERTOS/tasks.c ****             else
3325:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3326:../Dave/Generated/FREERTOS/tasks.c **** 
3327:../Dave/Generated/FREERTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3328:../Dave/Generated/FREERTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
 4334              	 .loc 1 3328 0
 4335 004e 3B68     	 ldr r3,[r7]
 4336 0050 1B68     	 ldr r3,[r3]
 4337 0052 0133     	 add r3,r3,#1
 4338 0054 02D1     	 bne .L334
3329:../Dave/Generated/FREERTOS/tasks.c ****             {
3330:../Dave/Generated/FREERTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3331:../Dave/Generated/FREERTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3332:../Dave/Generated/FREERTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3333:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFALSE;
 4339              	 .loc 1 3333 0
 4340 0056 0023     	 mov r3,#0
 4341 0058 7B61     	 str r3,[r7,#20]
 4342 005a 27E0     	 b .L333
 4343              	.L334:
3334:../Dave/Generated/FREERTOS/tasks.c ****             }
3335:../Dave/Generated/FREERTOS/tasks.c ****             else
3336:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3337:../Dave/Generated/FREERTOS/tasks.c **** 
3338:../Dave/Generated/FREERTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
 4344              	 .loc 1 3338 0
 4345 005c 7B68     	 ldr r3,[r7,#4]
 4346 005e 1A68     	 ldr r2,[r3]
 4347 0060 184B     	 ldr r3,.L338+8
 4348 0062 1B68     	 ldr r3,[r3]
 4349 0064 9A42     	 cmp r2,r3
 4350 0066 0AD0     	 beq .L335
 4351              	 .loc 1 3338 0 is_stmt 0 discriminator 1
 4352 0068 7B68     	 ldr r3,[r7,#4]
 4353 006a 5A68     	 ldr r2,[r3,#4]
 4354 006c 3B69     	 ldr r3,[r7,#16]
 4355 006e 9A42     	 cmp r2,r3
 4356 0070 05D8     	 bhi .L335
3339:../Dave/Generated/FREERTOS/tasks.c ****         {
3340:../Dave/Generated/FREERTOS/tasks.c ****             /* The tick count is greater than the time at which
3341:../Dave/Generated/FREERTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3342:../Dave/Generated/FREERTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3343:../Dave/Generated/FREERTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3344:../Dave/Generated/FREERTOS/tasks.c ****              * was called. */
3345:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdTRUE;
 4357              	 .loc 1 3345 0 is_stmt 1
 4358 0072 0123     	 mov r3,#1
 4359 0074 7B61     	 str r3,[r7,#20]
3346:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4360              	 .loc 1 3346 0
 4361 0076 3B68     	 ldr r3,[r7]
 4362 0078 0022     	 mov r2,#0
 4363 007a 1A60     	 str r2,[r3]
 4364 007c 16E0     	 b .L333
 4365              	.L335:
3347:../Dave/Generated/FREERTOS/tasks.c ****         }
3348:../Dave/Generated/FREERTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
 4366              	 .loc 1 3348 0
 4367 007e 3B68     	 ldr r3,[r7]
 4368 0080 1A68     	 ldr r2,[r3]
 4369 0082 FB68     	 ldr r3,[r7,#12]
 4370 0084 9A42     	 cmp r2,r3
 4371 0086 0CD9     	 bls .L336
3349:../Dave/Generated/FREERTOS/tasks.c ****         {
3350:../Dave/Generated/FREERTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3351:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
 4372              	 .loc 1 3351 0
 4373 0088 3B68     	 ldr r3,[r7]
 4374 008a 1A68     	 ldr r2,[r3]
 4375 008c FB68     	 ldr r3,[r7,#12]
 4376 008e D21A     	 sub r2,r2,r3
 4377 0090 3B68     	 ldr r3,[r7]
 4378 0092 1A60     	 str r2,[r3]
3352:../Dave/Generated/FREERTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4379              	 .loc 1 3352 0
 4380 0094 7B68     	 ldr r3,[r7,#4]
 4381 0096 181C     	 mov r0,r3
 4382 0098 FFF7FEFF 	 bl vTaskInternalSetTimeOutState
3353:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdFALSE;
 4383              	 .loc 1 3353 0
 4384 009c 0023     	 mov r3,#0
 4385 009e 7B61     	 str r3,[r7,#20]
 4386 00a0 04E0     	 b .L333
 4387              	.L336:
3354:../Dave/Generated/FREERTOS/tasks.c ****         }
3355:../Dave/Generated/FREERTOS/tasks.c ****         else
3356:../Dave/Generated/FREERTOS/tasks.c ****         {
3357:../Dave/Generated/FREERTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4388              	 .loc 1 3357 0
 4389 00a2 3B68     	 ldr r3,[r7]
 4390 00a4 0022     	 mov r2,#0
 4391 00a6 1A60     	 str r2,[r3]
3358:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = pdTRUE;
 4392              	 .loc 1 3358 0
 4393 00a8 0123     	 mov r3,#1
 4394 00aa 7B61     	 str r3,[r7,#20]
 4395              	.L333:
 4396              	.LBE13:
3359:../Dave/Generated/FREERTOS/tasks.c ****         }
3360:../Dave/Generated/FREERTOS/tasks.c ****     }
3361:../Dave/Generated/FREERTOS/tasks.c ****     taskEXIT_CRITICAL();
 4397              	 .loc 1 3361 0
 4398 00ac FFF7FEFF 	 bl vPortExitCritical
3362:../Dave/Generated/FREERTOS/tasks.c **** 
3363:../Dave/Generated/FREERTOS/tasks.c ****     return xReturn;
 4399              	 .loc 1 3363 0
 4400 00b0 7B69     	 ldr r3,[r7,#20]
3364:../Dave/Generated/FREERTOS/tasks.c **** }
 4401              	 .loc 1 3364 0
 4402 00b2 181C     	 mov r0,r3
 4403 00b4 BD46     	 mov sp,r7
 4404 00b6 06B0     	 add sp,sp,#24
 4405              	 
 4406 00b8 80BD     	 pop {r7,pc}
 4407              	.L339:
 4408 00ba C046     	 .align 2
 4409              	.L338:
 4410 00bc 00000000 	 .word xTickCount
 4411 00c0 00000000 	 .word pxCurrentTCB
 4412 00c4 00000000 	 .word xNumOfOverflows
 4413              	 .cfi_endproc
 4414              	.LFE79:
 4416              	 .section .text.vTaskMissedYield,"ax",%progbits
 4417              	 .align 2
 4418              	 .global vTaskMissedYield
 4419              	 .code 16
 4420              	 .thumb_func
 4422              	vTaskMissedYield:
 4423              	.LFB80:
3365:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3366:../Dave/Generated/FREERTOS/tasks.c **** 
3367:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3368:../Dave/Generated/FREERTOS/tasks.c **** {
 4424              	 .loc 1 3368 0
 4425              	 .cfi_startproc
 4426 0000 80B5     	 push {r7,lr}
 4427              	.LCFI110:
 4428              	 .cfi_def_cfa_offset 8
 4429              	 .cfi_offset 7,-8
 4430              	 .cfi_offset 14,-4
 4431 0002 00AF     	 add r7,sp,#0
 4432              	.LCFI111:
 4433              	 .cfi_def_cfa_register 7
3369:../Dave/Generated/FREERTOS/tasks.c ****     xYieldPending = pdTRUE;
 4434              	 .loc 1 3369 0
 4435 0004 024B     	 ldr r3,.L341
 4436 0006 0122     	 mov r2,#1
 4437 0008 1A60     	 str r2,[r3]
3370:../Dave/Generated/FREERTOS/tasks.c **** }
 4438              	 .loc 1 3370 0
 4439 000a BD46     	 mov sp,r7
 4440              	 
 4441 000c 80BD     	 pop {r7,pc}
 4442              	.L342:
 4443 000e C046     	 .align 2
 4444              	.L341:
 4445 0010 00000000 	 .word xYieldPending
 4446              	 .cfi_endproc
 4447              	.LFE80:
 4449              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 4450              	 .align 2
 4451              	 .global uxTaskGetTaskNumber
 4452              	 .code 16
 4453              	 .thumb_func
 4455              	uxTaskGetTaskNumber:
 4456              	.LFB81:
3371:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3372:../Dave/Generated/FREERTOS/tasks.c **** 
3373:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:../Dave/Generated/FREERTOS/tasks.c **** 
3375:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3376:../Dave/Generated/FREERTOS/tasks.c ****     {
 4457              	 .loc 1 3376 0
 4458              	 .cfi_startproc
 4459 0000 80B5     	 push {r7,lr}
 4460              	.LCFI112:
 4461              	 .cfi_def_cfa_offset 8
 4462              	 .cfi_offset 7,-8
 4463              	 .cfi_offset 14,-4
 4464 0002 84B0     	 sub sp,sp,#16
 4465              	.LCFI113:
 4466              	 .cfi_def_cfa_offset 24
 4467 0004 00AF     	 add r7,sp,#0
 4468              	.LCFI114:
 4469              	 .cfi_def_cfa_register 7
 4470 0006 7860     	 str r0,[r7,#4]
3377:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
3378:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t const * pxTCB;
3379:../Dave/Generated/FREERTOS/tasks.c **** 
3380:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask != NULL )
 4471              	 .loc 1 3380 0
 4472 0008 7B68     	 ldr r3,[r7,#4]
 4473 000a 002B     	 cmp r3,#0
 4474 000c 05D0     	 beq .L344
3381:../Dave/Generated/FREERTOS/tasks.c ****         {
3382:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = xTask;
 4475              	 .loc 1 3382 0
 4476 000e 7B68     	 ldr r3,[r7,#4]
 4477 0010 BB60     	 str r3,[r7,#8]
3383:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
 4478              	 .loc 1 3383 0
 4479 0012 BB68     	 ldr r3,[r7,#8]
 4480 0014 9B6C     	 ldr r3,[r3,#72]
 4481 0016 FB60     	 str r3,[r7,#12]
 4482 0018 01E0     	 b .L345
 4483              	.L344:
3384:../Dave/Generated/FREERTOS/tasks.c ****         }
3385:../Dave/Generated/FREERTOS/tasks.c ****         else
3386:../Dave/Generated/FREERTOS/tasks.c ****         {
3387:../Dave/Generated/FREERTOS/tasks.c ****             uxReturn = 0U;
 4484              	 .loc 1 3387 0
 4485 001a 0023     	 mov r3,#0
 4486 001c FB60     	 str r3,[r7,#12]
 4487              	.L345:
3388:../Dave/Generated/FREERTOS/tasks.c ****         }
3389:../Dave/Generated/FREERTOS/tasks.c **** 
3390:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 4488              	 .loc 1 3390 0
 4489 001e FB68     	 ldr r3,[r7,#12]
3391:../Dave/Generated/FREERTOS/tasks.c ****     }
 4490              	 .loc 1 3391 0
 4491 0020 181C     	 mov r0,r3
 4492 0022 BD46     	 mov sp,r7
 4493 0024 04B0     	 add sp,sp,#16
 4494              	 
 4495 0026 80BD     	 pop {r7,pc}
 4496              	 .cfi_endproc
 4497              	.LFE81:
 4499              	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 4500              	 .align 2
 4501              	 .global vTaskSetTaskNumber
 4502              	 .code 16
 4503              	 .thumb_func
 4505              	vTaskSetTaskNumber:
 4506              	.LFB82:
3392:../Dave/Generated/FREERTOS/tasks.c **** 
3393:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3394:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3395:../Dave/Generated/FREERTOS/tasks.c **** 
3396:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3397:../Dave/Generated/FREERTOS/tasks.c **** 
3398:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3399:../Dave/Generated/FREERTOS/tasks.c ****                              const UBaseType_t uxHandle )
3400:../Dave/Generated/FREERTOS/tasks.c ****     {
 4507              	 .loc 1 3400 0
 4508              	 .cfi_startproc
 4509 0000 80B5     	 push {r7,lr}
 4510              	.LCFI115:
 4511              	 .cfi_def_cfa_offset 8
 4512              	 .cfi_offset 7,-8
 4513              	 .cfi_offset 14,-4
 4514 0002 84B0     	 sub sp,sp,#16
 4515              	.LCFI116:
 4516              	 .cfi_def_cfa_offset 24
 4517 0004 00AF     	 add r7,sp,#0
 4518              	.LCFI117:
 4519              	 .cfi_def_cfa_register 7
 4520 0006 7860     	 str r0,[r7,#4]
 4521 0008 3960     	 str r1,[r7]
3401:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3402:../Dave/Generated/FREERTOS/tasks.c **** 
3403:../Dave/Generated/FREERTOS/tasks.c ****         if( xTask != NULL )
 4522              	 .loc 1 3403 0
 4523 000a 7B68     	 ldr r3,[r7,#4]
 4524 000c 002B     	 cmp r3,#0
 4525 000e 04D0     	 beq .L347
3404:../Dave/Generated/FREERTOS/tasks.c ****         {
3405:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = xTask;
 4526              	 .loc 1 3405 0
 4527 0010 7B68     	 ldr r3,[r7,#4]
 4528 0012 FB60     	 str r3,[r7,#12]
3406:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
 4529              	 .loc 1 3406 0
 4530 0014 FB68     	 ldr r3,[r7,#12]
 4531 0016 3A68     	 ldr r2,[r7]
 4532 0018 9A64     	 str r2,[r3,#72]
 4533              	.L347:
3407:../Dave/Generated/FREERTOS/tasks.c ****         }
3408:../Dave/Generated/FREERTOS/tasks.c ****     }
 4534              	 .loc 1 3408 0
 4535 001a BD46     	 mov sp,r7
 4536 001c 04B0     	 add sp,sp,#16
 4537              	 
 4538 001e 80BD     	 pop {r7,pc}
 4539              	 .cfi_endproc
 4540              	.LFE82:
 4542              	 .section .text.prvIdleTask,"ax",%progbits
 4543              	 .align 2
 4544              	 .code 16
 4545              	 .thumb_func
 4547              	prvIdleTask:
 4548              	.LFB83:
3409:../Dave/Generated/FREERTOS/tasks.c **** 
3410:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3411:../Dave/Generated/FREERTOS/tasks.c **** 
3412:../Dave/Generated/FREERTOS/tasks.c **** /*
3413:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3414:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3415:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3416:../Dave/Generated/FREERTOS/tasks.c ****  *
3417:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3418:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3419:../Dave/Generated/FREERTOS/tasks.c ****  *
3420:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3421:../Dave/Generated/FREERTOS/tasks.c ****  *
3422:../Dave/Generated/FREERTOS/tasks.c ****  */
3423:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3424:../Dave/Generated/FREERTOS/tasks.c **** {
 4549              	 .loc 1 3424 0
 4550              	 .cfi_startproc
 4551 0000 80B5     	 push {r7,lr}
 4552              	.LCFI118:
 4553              	 .cfi_def_cfa_offset 8
 4554              	 .cfi_offset 7,-8
 4555              	 .cfi_offset 14,-4
 4556 0002 82B0     	 sub sp,sp,#8
 4557              	.LCFI119:
 4558              	 .cfi_def_cfa_offset 16
 4559 0004 00AF     	 add r7,sp,#0
 4560              	.LCFI120:
 4561              	 .cfi_def_cfa_register 7
 4562 0006 7860     	 str r0,[r7,#4]
 4563              	.L351:
3425:../Dave/Generated/FREERTOS/tasks.c ****     /* Stop warnings. */
3426:../Dave/Generated/FREERTOS/tasks.c ****     ( void ) pvParameters;
3427:../Dave/Generated/FREERTOS/tasks.c **** 
3428:../Dave/Generated/FREERTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3429:../Dave/Generated/FREERTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3430:../Dave/Generated/FREERTOS/tasks.c **** 
3431:../Dave/Generated/FREERTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3432:../Dave/Generated/FREERTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3433:../Dave/Generated/FREERTOS/tasks.c ****      * any. */
3434:../Dave/Generated/FREERTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3435:../Dave/Generated/FREERTOS/tasks.c **** 
3436:../Dave/Generated/FREERTOS/tasks.c ****     for( ; ; )
3437:../Dave/Generated/FREERTOS/tasks.c ****     {
3438:../Dave/Generated/FREERTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3439:../Dave/Generated/FREERTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3440:../Dave/Generated/FREERTOS/tasks.c ****         prvCheckTasksWaitingTermination();
 4564              	 .loc 1 3440 0
 4565 0008 FFF7FEFF 	 bl prvCheckTasksWaitingTermination
3441:../Dave/Generated/FREERTOS/tasks.c **** 
3442:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3443:../Dave/Generated/FREERTOS/tasks.c ****             {
3444:../Dave/Generated/FREERTOS/tasks.c ****                 /* If we are not using preemption we keep forcing a task switch to
3445:../Dave/Generated/FREERTOS/tasks.c ****                  * see if any other task has become available.  If we are using
3446:../Dave/Generated/FREERTOS/tasks.c ****                  * preemption we don't need to do this as any task becoming available
3447:../Dave/Generated/FREERTOS/tasks.c ****                  * will automatically get the processor anyway. */
3448:../Dave/Generated/FREERTOS/tasks.c ****                 taskYIELD();
3449:../Dave/Generated/FREERTOS/tasks.c ****             }
3450:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3451:../Dave/Generated/FREERTOS/tasks.c **** 
3452:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3453:../Dave/Generated/FREERTOS/tasks.c ****             {
3454:../Dave/Generated/FREERTOS/tasks.c ****                 /* When using preemption tasks of equal priority will be
3455:../Dave/Generated/FREERTOS/tasks.c ****                  * timesliced.  If a task that is sharing the idle priority is ready
3456:../Dave/Generated/FREERTOS/tasks.c ****                  * to run then the idle task should yield before the end of the
3457:../Dave/Generated/FREERTOS/tasks.c ****                  * timeslice.
3458:../Dave/Generated/FREERTOS/tasks.c ****                  *
3459:../Dave/Generated/FREERTOS/tasks.c ****                  * A critical region is not required here as we are just reading from
3460:../Dave/Generated/FREERTOS/tasks.c ****                  * the list, and an occasional incorrect value will not matter.  If
3461:../Dave/Generated/FREERTOS/tasks.c ****                  * the ready list at the idle priority contains more than one task
3462:../Dave/Generated/FREERTOS/tasks.c ****                  * then a task other than the idle task is ready to execute. */
3463:../Dave/Generated/FREERTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
 4566              	 .loc 1 3463 0
 4567 000c 034B     	 ldr r3,.L352
 4568 000e 1B68     	 ldr r3,[r3]
 4569 0010 012B     	 cmp r3,#1
 4570 0012 01D9     	 bls .L350
3464:../Dave/Generated/FREERTOS/tasks.c ****                 {
3465:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD();
 4571              	 .loc 1 3465 0
 4572 0014 FFF7FEFF 	 bl vPortYield
 4573              	.L350:
3466:../Dave/Generated/FREERTOS/tasks.c ****                 }
3467:../Dave/Generated/FREERTOS/tasks.c ****                 else
3468:../Dave/Generated/FREERTOS/tasks.c ****                 {
3469:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3470:../Dave/Generated/FREERTOS/tasks.c ****                 }
3471:../Dave/Generated/FREERTOS/tasks.c ****             }
3472:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3473:../Dave/Generated/FREERTOS/tasks.c **** 
3474:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3475:../Dave/Generated/FREERTOS/tasks.c ****             {
3476:../Dave/Generated/FREERTOS/tasks.c ****                 extern void vApplicationIdleHook( void );
3477:../Dave/Generated/FREERTOS/tasks.c **** 
3478:../Dave/Generated/FREERTOS/tasks.c ****                 /* Call the user defined function from within the idle task.  This
3479:../Dave/Generated/FREERTOS/tasks.c ****                  * allows the application designer to add background functionality
3480:../Dave/Generated/FREERTOS/tasks.c ****                  * without the overhead of a separate task.
3481:../Dave/Generated/FREERTOS/tasks.c ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3482:../Dave/Generated/FREERTOS/tasks.c ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3483:../Dave/Generated/FREERTOS/tasks.c ****                 vApplicationIdleHook();
3484:../Dave/Generated/FREERTOS/tasks.c ****             }
3485:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3486:../Dave/Generated/FREERTOS/tasks.c **** 
3487:../Dave/Generated/FREERTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3488:../Dave/Generated/FREERTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3489:../Dave/Generated/FREERTOS/tasks.c ****          * user defined low power mode  implementations require
3490:../Dave/Generated/FREERTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3491:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3492:../Dave/Generated/FREERTOS/tasks.c ****             {
3493:../Dave/Generated/FREERTOS/tasks.c ****                 TickType_t xExpectedIdleTime;
3494:../Dave/Generated/FREERTOS/tasks.c **** 
3495:../Dave/Generated/FREERTOS/tasks.c ****                 /* It is not desirable to suspend then resume the scheduler on
3496:../Dave/Generated/FREERTOS/tasks.c ****                  * each iteration of the idle task.  Therefore, a preliminary
3497:../Dave/Generated/FREERTOS/tasks.c ****                  * test of the expected idle time is performed without the
3498:../Dave/Generated/FREERTOS/tasks.c ****                  * scheduler suspended.  The result here is not necessarily
3499:../Dave/Generated/FREERTOS/tasks.c ****                  * valid. */
3500:../Dave/Generated/FREERTOS/tasks.c ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3501:../Dave/Generated/FREERTOS/tasks.c **** 
3502:../Dave/Generated/FREERTOS/tasks.c ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3503:../Dave/Generated/FREERTOS/tasks.c ****                 {
3504:../Dave/Generated/FREERTOS/tasks.c ****                     vTaskSuspendAll();
3505:../Dave/Generated/FREERTOS/tasks.c ****                     {
3506:../Dave/Generated/FREERTOS/tasks.c ****                         /* Now the scheduler is suspended, the expected idle
3507:../Dave/Generated/FREERTOS/tasks.c ****                          * time can be sampled again, and this time its value can
3508:../Dave/Generated/FREERTOS/tasks.c ****                          * be used. */
3509:../Dave/Generated/FREERTOS/tasks.c ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3510:../Dave/Generated/FREERTOS/tasks.c ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3511:../Dave/Generated/FREERTOS/tasks.c **** 
3512:../Dave/Generated/FREERTOS/tasks.c ****                         /* Define the following macro to set xExpectedIdleTime to 0
3513:../Dave/Generated/FREERTOS/tasks.c ****                          * if the application does not want
3514:../Dave/Generated/FREERTOS/tasks.c ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3515:../Dave/Generated/FREERTOS/tasks.c ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3516:../Dave/Generated/FREERTOS/tasks.c **** 
3517:../Dave/Generated/FREERTOS/tasks.c ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3518:../Dave/Generated/FREERTOS/tasks.c ****                         {
3519:../Dave/Generated/FREERTOS/tasks.c ****                             traceLOW_POWER_IDLE_BEGIN();
3520:../Dave/Generated/FREERTOS/tasks.c ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3521:../Dave/Generated/FREERTOS/tasks.c ****                             traceLOW_POWER_IDLE_END();
3522:../Dave/Generated/FREERTOS/tasks.c ****                         }
3523:../Dave/Generated/FREERTOS/tasks.c ****                         else
3524:../Dave/Generated/FREERTOS/tasks.c ****                         {
3525:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
3526:../Dave/Generated/FREERTOS/tasks.c ****                         }
3527:../Dave/Generated/FREERTOS/tasks.c ****                     }
3528:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) xTaskResumeAll();
3529:../Dave/Generated/FREERTOS/tasks.c ****                 }
3530:../Dave/Generated/FREERTOS/tasks.c ****                 else
3531:../Dave/Generated/FREERTOS/tasks.c ****                 {
3532:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3533:../Dave/Generated/FREERTOS/tasks.c ****                 }
3534:../Dave/Generated/FREERTOS/tasks.c ****             }
3535:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3536:../Dave/Generated/FREERTOS/tasks.c ****     }
 4574              	 .loc 1 3536 0
 4575 0018 F6E7     	 b .L351
 4576              	.L353:
 4577 001a C046     	 .align 2
 4578              	.L352:
 4579 001c 00000000 	 .word pxReadyTasksLists
 4580              	 .cfi_endproc
 4581              	.LFE83:
 4583              	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 4584              	 .align 2
 4585              	 .global vTaskSetThreadLocalStoragePointer
 4586              	 .code 16
 4587              	 .thumb_func
 4589              	vTaskSetThreadLocalStoragePointer:
 4590              	.LFB84:
3537:../Dave/Generated/FREERTOS/tasks.c **** }
3538:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3539:../Dave/Generated/FREERTOS/tasks.c **** 
3540:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3541:../Dave/Generated/FREERTOS/tasks.c **** 
3542:../Dave/Generated/FREERTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3543:../Dave/Generated/FREERTOS/tasks.c ****     {
3544:../Dave/Generated/FREERTOS/tasks.c ****         /* The idle task exists in addition to the application tasks. */
3545:../Dave/Generated/FREERTOS/tasks.c ****         const UBaseType_t uxNonApplicationTasks = 1;
3546:../Dave/Generated/FREERTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3547:../Dave/Generated/FREERTOS/tasks.c **** 
3548:../Dave/Generated/FREERTOS/tasks.c ****         /* This function must be called from a critical section. */
3549:../Dave/Generated/FREERTOS/tasks.c **** 
3550:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3551:../Dave/Generated/FREERTOS/tasks.c ****         {
3552:../Dave/Generated/FREERTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3553:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3554:../Dave/Generated/FREERTOS/tasks.c ****         }
3555:../Dave/Generated/FREERTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3556:../Dave/Generated/FREERTOS/tasks.c ****         {
3557:../Dave/Generated/FREERTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3558:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3559:../Dave/Generated/FREERTOS/tasks.c ****         }
3560:../Dave/Generated/FREERTOS/tasks.c ****         else if( xPendedTicks != 0 )
3561:../Dave/Generated/FREERTOS/tasks.c ****         {
3562:../Dave/Generated/FREERTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3563:../Dave/Generated/FREERTOS/tasks.c ****              * because the scheduler is suspended. */
3564:../Dave/Generated/FREERTOS/tasks.c ****             eReturn = eAbortSleep;
3565:../Dave/Generated/FREERTOS/tasks.c ****         }
3566:../Dave/Generated/FREERTOS/tasks.c ****         else
3567:../Dave/Generated/FREERTOS/tasks.c ****         {
3568:../Dave/Generated/FREERTOS/tasks.c ****             /* If all the tasks are in the suspended list (which might mean they
3569:../Dave/Generated/FREERTOS/tasks.c ****              * have an infinite block time rather than actually being suspended)
3570:../Dave/Generated/FREERTOS/tasks.c ****              * then it is safe to turn all clocks off and just wait for external
3571:../Dave/Generated/FREERTOS/tasks.c ****              * interrupts. */
3572:../Dave/Generated/FREERTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3573:../Dave/Generated/FREERTOS/tasks.c ****             {
3574:../Dave/Generated/FREERTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3575:../Dave/Generated/FREERTOS/tasks.c ****             }
3576:../Dave/Generated/FREERTOS/tasks.c ****             else
3577:../Dave/Generated/FREERTOS/tasks.c ****             {
3578:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3579:../Dave/Generated/FREERTOS/tasks.c ****             }
3580:../Dave/Generated/FREERTOS/tasks.c ****         }
3581:../Dave/Generated/FREERTOS/tasks.c **** 
3582:../Dave/Generated/FREERTOS/tasks.c ****         return eReturn;
3583:../Dave/Generated/FREERTOS/tasks.c ****     }
3584:../Dave/Generated/FREERTOS/tasks.c **** 
3585:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3586:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3587:../Dave/Generated/FREERTOS/tasks.c **** 
3588:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3589:../Dave/Generated/FREERTOS/tasks.c **** 
3590:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3591:../Dave/Generated/FREERTOS/tasks.c ****                                             BaseType_t xIndex,
3592:../Dave/Generated/FREERTOS/tasks.c ****                                             void * pvValue )
3593:../Dave/Generated/FREERTOS/tasks.c ****     {
 4591              	 .loc 1 3593 0
 4592              	 .cfi_startproc
 4593 0000 80B5     	 push {r7,lr}
 4594              	.LCFI121:
 4595              	 .cfi_def_cfa_offset 8
 4596              	 .cfi_offset 7,-8
 4597              	 .cfi_offset 14,-4
 4598 0002 86B0     	 sub sp,sp,#24
 4599              	.LCFI122:
 4600              	 .cfi_def_cfa_offset 32
 4601 0004 00AF     	 add r7,sp,#0
 4602              	.LCFI123:
 4603              	 .cfi_def_cfa_register 7
 4604 0006 F860     	 str r0,[r7,#12]
 4605 0008 B960     	 str r1,[r7,#8]
 4606 000a 7A60     	 str r2,[r7,#4]
3594:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3595:../Dave/Generated/FREERTOS/tasks.c **** 
3596:../Dave/Generated/FREERTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4607              	 .loc 1 3596 0
 4608 000c BB68     	 ldr r3,[r7,#8]
 4609 000e 042B     	 cmp r3,#4
 4610 0010 13DC     	 bgt .L354
3597:../Dave/Generated/FREERTOS/tasks.c ****         {
3598:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
 4611              	 .loc 1 3598 0
 4612 0012 FB68     	 ldr r3,[r7,#12]
 4613 0014 002B     	 cmp r3,#0
 4614 0016 02D1     	 bne .L356
 4615              	 .loc 1 3598 0 is_stmt 0 discriminator 1
 4616 0018 094B     	 ldr r3,.L360
 4617 001a 1B68     	 ldr r3,[r3]
 4618 001c 00E0     	 b .L357
 4619              	.L356:
 4620              	 .loc 1 3598 0 discriminator 2
 4621 001e FB68     	 ldr r3,[r7,#12]
 4622              	.L357:
 4623              	 .loc 1 3598 0 discriminator 4
 4624 0020 7B61     	 str r3,[r7,#20]
3599:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB != NULL );
 4625              	 .loc 1 3599 0 is_stmt 1 discriminator 4
 4626 0022 7B69     	 ldr r3,[r7,#20]
 4627 0024 002B     	 cmp r3,#0
 4628 0026 01D1     	 bne .L358
 4629              	 .loc 1 3599 0 is_stmt 0 discriminator 1
 4630              	
 4631 0028 72B6     	 cpsid i
 4632              	
 4633              	 .code 16
 4634              	.L359:
 4635 002a FEE7     	 b .L359
 4636              	.L358:
3600:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4637              	 .loc 1 3600 0 is_stmt 1
 4638 002c 7A69     	 ldr r2,[r7,#20]
 4639 002e BB68     	 ldr r3,[r7,#8]
 4640 0030 1433     	 add r3,r3,#20
 4641 0032 9B00     	 lsl r3,r3,#2
 4642 0034 D318     	 add r3,r2,r3
 4643 0036 7A68     	 ldr r2,[r7,#4]
 4644 0038 5A60     	 str r2,[r3,#4]
 4645              	.L354:
3601:../Dave/Generated/FREERTOS/tasks.c ****         }
3602:../Dave/Generated/FREERTOS/tasks.c ****     }
 4646              	 .loc 1 3602 0
 4647 003a BD46     	 mov sp,r7
 4648 003c 06B0     	 add sp,sp,#24
 4649              	 
 4650 003e 80BD     	 pop {r7,pc}
 4651              	.L361:
 4652              	 .align 2
 4653              	.L360:
 4654 0040 00000000 	 .word pxCurrentTCB
 4655              	 .cfi_endproc
 4656              	.LFE84:
 4658              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 4659              	 .align 2
 4660              	 .global pvTaskGetThreadLocalStoragePointer
 4661              	 .code 16
 4662              	 .thumb_func
 4664              	pvTaskGetThreadLocalStoragePointer:
 4665              	.LFB85:
3603:../Dave/Generated/FREERTOS/tasks.c **** 
3604:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3605:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3606:../Dave/Generated/FREERTOS/tasks.c **** 
3607:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3608:../Dave/Generated/FREERTOS/tasks.c **** 
3609:../Dave/Generated/FREERTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3610:../Dave/Generated/FREERTOS/tasks.c ****                                                BaseType_t xIndex )
3611:../Dave/Generated/FREERTOS/tasks.c ****     {
 4666              	 .loc 1 3611 0
 4667              	 .cfi_startproc
 4668 0000 80B5     	 push {r7,lr}
 4669              	.LCFI124:
 4670              	 .cfi_def_cfa_offset 8
 4671              	 .cfi_offset 7,-8
 4672              	 .cfi_offset 14,-4
 4673 0002 84B0     	 sub sp,sp,#16
 4674              	.LCFI125:
 4675              	 .cfi_def_cfa_offset 24
 4676 0004 00AF     	 add r7,sp,#0
 4677              	.LCFI126:
 4678              	 .cfi_def_cfa_register 7
 4679 0006 7860     	 str r0,[r7,#4]
 4680 0008 3960     	 str r1,[r7]
3612:../Dave/Generated/FREERTOS/tasks.c ****         void * pvReturn = NULL;
 4681              	 .loc 1 3612 0
 4682 000a 0023     	 mov r3,#0
 4683 000c FB60     	 str r3,[r7,#12]
3613:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3614:../Dave/Generated/FREERTOS/tasks.c **** 
3615:../Dave/Generated/FREERTOS/tasks.c ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4684              	 .loc 1 3615 0
 4685 000e 3B68     	 ldr r3,[r7]
 4686 0010 042B     	 cmp r3,#4
 4687 0012 0FDC     	 bgt .L363
3616:../Dave/Generated/FREERTOS/tasks.c ****         {
3617:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 4688              	 .loc 1 3617 0
 4689 0014 7B68     	 ldr r3,[r7,#4]
 4690 0016 002B     	 cmp r3,#0
 4691 0018 02D1     	 bne .L364
 4692              	 .loc 1 3617 0 is_stmt 0 discriminator 1
 4693 001a 0A4B     	 ldr r3,.L368
 4694 001c 1B68     	 ldr r3,[r3]
 4695 001e 00E0     	 b .L365
 4696              	.L364:
 4697              	 .loc 1 3617 0 discriminator 2
 4698 0020 7B68     	 ldr r3,[r7,#4]
 4699              	.L365:
 4700              	 .loc 1 3617 0 discriminator 4
 4701 0022 BB60     	 str r3,[r7,#8]
3618:../Dave/Generated/FREERTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4702              	 .loc 1 3618 0 is_stmt 1 discriminator 4
 4703 0024 BA68     	 ldr r2,[r7,#8]
 4704 0026 3B68     	 ldr r3,[r7]
 4705 0028 1433     	 add r3,r3,#20
 4706 002a 9B00     	 lsl r3,r3,#2
 4707 002c D318     	 add r3,r2,r3
 4708 002e 5B68     	 ldr r3,[r3,#4]
 4709 0030 FB60     	 str r3,[r7,#12]
 4710 0032 01E0     	 b .L366
 4711              	.L363:
3619:../Dave/Generated/FREERTOS/tasks.c ****         }
3620:../Dave/Generated/FREERTOS/tasks.c ****         else
3621:../Dave/Generated/FREERTOS/tasks.c ****         {
3622:../Dave/Generated/FREERTOS/tasks.c ****             pvReturn = NULL;
 4712              	 .loc 1 3622 0
 4713 0034 0023     	 mov r3,#0
 4714 0036 FB60     	 str r3,[r7,#12]
 4715              	.L366:
3623:../Dave/Generated/FREERTOS/tasks.c ****         }
3624:../Dave/Generated/FREERTOS/tasks.c **** 
3625:../Dave/Generated/FREERTOS/tasks.c ****         return pvReturn;
 4716              	 .loc 1 3625 0
 4717 0038 FB68     	 ldr r3,[r7,#12]
3626:../Dave/Generated/FREERTOS/tasks.c ****     }
 4718              	 .loc 1 3626 0
 4719 003a 181C     	 mov r0,r3
 4720 003c BD46     	 mov sp,r7
 4721 003e 04B0     	 add sp,sp,#16
 4722              	 
 4723 0040 80BD     	 pop {r7,pc}
 4724              	.L369:
 4725 0042 C046     	 .align 2
 4726              	.L368:
 4727 0044 00000000 	 .word pxCurrentTCB
 4728              	 .cfi_endproc
 4729              	.LFE85:
 4731              	 .section .text.prvInitialiseTaskLists,"ax",%progbits
 4732              	 .align 2
 4733              	 .code 16
 4734              	 .thumb_func
 4736              	prvInitialiseTaskLists:
 4737              	.LFB86:
3627:../Dave/Generated/FREERTOS/tasks.c **** 
3628:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3629:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3630:../Dave/Generated/FREERTOS/tasks.c **** 
3631:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3632:../Dave/Generated/FREERTOS/tasks.c **** 
3633:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3634:../Dave/Generated/FREERTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3635:../Dave/Generated/FREERTOS/tasks.c ****     {
3636:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3637:../Dave/Generated/FREERTOS/tasks.c **** 
3638:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3639:../Dave/Generated/FREERTOS/tasks.c ****          * the calling task. */
3640:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3641:../Dave/Generated/FREERTOS/tasks.c **** 
3642:../Dave/Generated/FREERTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3643:../Dave/Generated/FREERTOS/tasks.c ****     }
3644:../Dave/Generated/FREERTOS/tasks.c **** 
3645:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3646:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3647:../Dave/Generated/FREERTOS/tasks.c **** 
3648:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3649:../Dave/Generated/FREERTOS/tasks.c **** {
 4738              	 .loc 1 3649 0
 4739              	 .cfi_startproc
 4740 0000 80B5     	 push {r7,lr}
 4741              	.LCFI127:
 4742              	 .cfi_def_cfa_offset 8
 4743              	 .cfi_offset 7,-8
 4744              	 .cfi_offset 14,-4
 4745 0002 82B0     	 sub sp,sp,#8
 4746              	.LCFI128:
 4747              	 .cfi_def_cfa_offset 16
 4748 0004 00AF     	 add r7,sp,#0
 4749              	.LCFI129:
 4750              	 .cfi_def_cfa_register 7
3650:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxPriority;
3651:../Dave/Generated/FREERTOS/tasks.c **** 
3652:../Dave/Generated/FREERTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
 4751              	 .loc 1 3652 0
 4752 0006 0023     	 mov r3,#0
 4753 0008 7B60     	 str r3,[r7,#4]
 4754 000a 0CE0     	 b .L371
 4755              	.L372:
3653:../Dave/Generated/FREERTOS/tasks.c ****     {
3654:../Dave/Generated/FREERTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4756              	 .loc 1 3654 0 discriminator 3
 4757 000c 7A68     	 ldr r2,[r7,#4]
 4758 000e 131C     	 mov r3,r2
 4759 0010 9B00     	 lsl r3,r3,#2
 4760 0012 9B18     	 add r3,r3,r2
 4761 0014 9B00     	 lsl r3,r3,#2
 4762 0016 144A     	 ldr r2,.L373
 4763 0018 9B18     	 add r3,r3,r2
 4764 001a 181C     	 mov r0,r3
 4765 001c FFF7FEFF 	 bl vListInitialise
3652:../Dave/Generated/FREERTOS/tasks.c ****     {
 4766              	 .loc 1 3652 0 discriminator 3
 4767 0020 7B68     	 ldr r3,[r7,#4]
 4768 0022 0133     	 add r3,r3,#1
 4769 0024 7B60     	 str r3,[r7,#4]
 4770              	.L371:
3652:../Dave/Generated/FREERTOS/tasks.c ****     {
 4771              	 .loc 1 3652 0 is_stmt 0 discriminator 1
 4772 0026 7B68     	 ldr r3,[r7,#4]
 4773 0028 042B     	 cmp r3,#4
 4774 002a EFD9     	 bls .L372
3655:../Dave/Generated/FREERTOS/tasks.c ****     }
3656:../Dave/Generated/FREERTOS/tasks.c **** 
3657:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
 4775              	 .loc 1 3657 0 is_stmt 1
 4776 002c 0F4B     	 ldr r3,.L373+4
 4777 002e 181C     	 mov r0,r3
 4778 0030 FFF7FEFF 	 bl vListInitialise
3658:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 4779              	 .loc 1 3658 0
 4780 0034 0E4B     	 ldr r3,.L373+8
 4781 0036 181C     	 mov r0,r3
 4782 0038 FFF7FEFF 	 bl vListInitialise
3659:../Dave/Generated/FREERTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 4783              	 .loc 1 3659 0
 4784 003c 0D4B     	 ldr r3,.L373+12
 4785 003e 181C     	 mov r0,r3
 4786 0040 FFF7FEFF 	 bl vListInitialise
3660:../Dave/Generated/FREERTOS/tasks.c **** 
3661:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3662:../Dave/Generated/FREERTOS/tasks.c ****         {
3663:../Dave/Generated/FREERTOS/tasks.c ****             vListInitialise( &xTasksWaitingTermination );
 4787              	 .loc 1 3663 0
 4788 0044 0C4B     	 ldr r3,.L373+16
 4789 0046 181C     	 mov r0,r3
 4790 0048 FFF7FEFF 	 bl vListInitialise
3664:../Dave/Generated/FREERTOS/tasks.c ****         }
3665:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3666:../Dave/Generated/FREERTOS/tasks.c **** 
3667:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3668:../Dave/Generated/FREERTOS/tasks.c ****         {
3669:../Dave/Generated/FREERTOS/tasks.c ****             vListInitialise( &xSuspendedTaskList );
 4791              	 .loc 1 3669 0
 4792 004c 0B4B     	 ldr r3,.L373+20
 4793 004e 181C     	 mov r0,r3
 4794 0050 FFF7FEFF 	 bl vListInitialise
3670:../Dave/Generated/FREERTOS/tasks.c ****         }
3671:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3672:../Dave/Generated/FREERTOS/tasks.c **** 
3673:../Dave/Generated/FREERTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3674:../Dave/Generated/FREERTOS/tasks.c ****      * using list2. */
3675:../Dave/Generated/FREERTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
 4795              	 .loc 1 3675 0
 4796 0054 0A4B     	 ldr r3,.L373+24
 4797 0056 054A     	 ldr r2,.L373+4
 4798 0058 1A60     	 str r2,[r3]
3676:../Dave/Generated/FREERTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4799              	 .loc 1 3676 0
 4800 005a 0A4B     	 ldr r3,.L373+28
 4801 005c 044A     	 ldr r2,.L373+8
 4802 005e 1A60     	 str r2,[r3]
3677:../Dave/Generated/FREERTOS/tasks.c **** }
 4803              	 .loc 1 3677 0
 4804 0060 BD46     	 mov sp,r7
 4805 0062 02B0     	 add sp,sp,#8
 4806              	 
 4807 0064 80BD     	 pop {r7,pc}
 4808              	.L374:
 4809 0066 C046     	 .align 2
 4810              	.L373:
 4811 0068 00000000 	 .word pxReadyTasksLists
 4812 006c 00000000 	 .word xDelayedTaskList1
 4813 0070 00000000 	 .word xDelayedTaskList2
 4814 0074 00000000 	 .word xPendingReadyList
 4815 0078 00000000 	 .word xTasksWaitingTermination
 4816 007c 00000000 	 .word xSuspendedTaskList
 4817 0080 00000000 	 .word pxDelayedTaskList
 4818 0084 00000000 	 .word pxOverflowDelayedTaskList
 4819              	 .cfi_endproc
 4820              	.LFE86:
 4822              	 .section .text.prvCheckTasksWaitingTermination,"ax",%progbits
 4823              	 .align 2
 4824              	 .code 16
 4825              	 .thumb_func
 4827              	prvCheckTasksWaitingTermination:
 4828              	.LFB87:
3678:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3679:../Dave/Generated/FREERTOS/tasks.c **** 
3680:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3681:../Dave/Generated/FREERTOS/tasks.c **** {
 4829              	 .loc 1 3681 0
 4830              	 .cfi_startproc
 4831 0000 80B5     	 push {r7,lr}
 4832              	.LCFI130:
 4833              	 .cfi_def_cfa_offset 8
 4834              	 .cfi_offset 7,-8
 4835              	 .cfi_offset 14,-4
 4836 0002 82B0     	 sub sp,sp,#8
 4837              	.LCFI131:
 4838              	 .cfi_def_cfa_offset 16
 4839 0004 00AF     	 add r7,sp,#0
 4840              	.LCFI132:
 4841              	 .cfi_def_cfa_register 7
 4842              	.LBB14:
3682:../Dave/Generated/FREERTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3683:../Dave/Generated/FREERTOS/tasks.c **** 
3684:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3685:../Dave/Generated/FREERTOS/tasks.c ****         {
3686:../Dave/Generated/FREERTOS/tasks.c ****             TCB_t * pxTCB;
3687:../Dave/Generated/FREERTOS/tasks.c **** 
3688:../Dave/Generated/FREERTOS/tasks.c ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3689:../Dave/Generated/FREERTOS/tasks.c ****              * being called too often in the idle task. */
3690:../Dave/Generated/FREERTOS/tasks.c ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4843              	 .loc 1 3690 0
 4844 0006 1AE0     	 b .L376
 4845              	.L377:
3691:../Dave/Generated/FREERTOS/tasks.c ****             {
3692:../Dave/Generated/FREERTOS/tasks.c ****                 taskENTER_CRITICAL();
 4846              	 .loc 1 3692 0
 4847 0008 FFF7FEFF 	 bl vPortEnterCritical
3693:../Dave/Generated/FREERTOS/tasks.c ****                 {
3694:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
 4848              	 .loc 1 3694 0
 4849 000c 0F4B     	 ldr r3,.L378
 4850 000e DB68     	 ldr r3,[r3,#12]
 4851 0010 DB68     	 ldr r3,[r3,#12]
 4852 0012 7B60     	 str r3,[r7,#4]
3695:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4853              	 .loc 1 3695 0
 4854 0014 7B68     	 ldr r3,[r7,#4]
 4855 0016 0433     	 add r3,r3,#4
 4856 0018 181C     	 mov r0,r3
 4857 001a FFF7FEFF 	 bl uxListRemove
3696:../Dave/Generated/FREERTOS/tasks.c ****                     --uxCurrentNumberOfTasks;
 4858              	 .loc 1 3696 0
 4859 001e 0C4B     	 ldr r3,.L378+4
 4860 0020 1B68     	 ldr r3,[r3]
 4861 0022 5A1E     	 sub r2,r3,#1
 4862 0024 0A4B     	 ldr r3,.L378+4
 4863 0026 1A60     	 str r2,[r3]
3697:../Dave/Generated/FREERTOS/tasks.c ****                     --uxDeletedTasksWaitingCleanUp;
 4864              	 .loc 1 3697 0
 4865 0028 0A4B     	 ldr r3,.L378+8
 4866 002a 1B68     	 ldr r3,[r3]
 4867 002c 5A1E     	 sub r2,r3,#1
 4868 002e 094B     	 ldr r3,.L378+8
 4869 0030 1A60     	 str r2,[r3]
3698:../Dave/Generated/FREERTOS/tasks.c ****                 }
3699:../Dave/Generated/FREERTOS/tasks.c ****                 taskEXIT_CRITICAL();
 4870              	 .loc 1 3699 0
 4871 0032 FFF7FEFF 	 bl vPortExitCritical
3700:../Dave/Generated/FREERTOS/tasks.c **** 
3701:../Dave/Generated/FREERTOS/tasks.c ****                 prvDeleteTCB( pxTCB );
 4872              	 .loc 1 3701 0
 4873 0036 7B68     	 ldr r3,[r7,#4]
 4874 0038 181C     	 mov r0,r3
 4875 003a FFF7FEFF 	 bl prvDeleteTCB
 4876              	.L376:
3690:../Dave/Generated/FREERTOS/tasks.c ****             {
 4877              	 .loc 1 3690 0
 4878 003e 054B     	 ldr r3,.L378+8
 4879 0040 1B68     	 ldr r3,[r3]
 4880 0042 002B     	 cmp r3,#0
 4881 0044 E0D1     	 bne .L377
 4882              	.LBE14:
3702:../Dave/Generated/FREERTOS/tasks.c ****             }
3703:../Dave/Generated/FREERTOS/tasks.c ****         }
3704:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3705:../Dave/Generated/FREERTOS/tasks.c **** }
 4883              	 .loc 1 3705 0
 4884 0046 BD46     	 mov sp,r7
 4885 0048 02B0     	 add sp,sp,#8
 4886              	 
 4887 004a 80BD     	 pop {r7,pc}
 4888              	.L379:
 4889              	 .align 2
 4890              	.L378:
 4891 004c 00000000 	 .word xTasksWaitingTermination
 4892 0050 00000000 	 .word uxCurrentNumberOfTasks
 4893 0054 00000000 	 .word uxDeletedTasksWaitingCleanUp
 4894              	 .cfi_endproc
 4895              	.LFE87:
 4897              	 .section .text.vTaskGetInfo,"ax",%progbits
 4898              	 .align 2
 4899              	 .global vTaskGetInfo
 4900              	 .code 16
 4901              	 .thumb_func
 4903              	vTaskGetInfo:
 4904              	.LFB88:
3706:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3707:../Dave/Generated/FREERTOS/tasks.c **** 
3708:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3709:../Dave/Generated/FREERTOS/tasks.c **** 
3710:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3711:../Dave/Generated/FREERTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3712:../Dave/Generated/FREERTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3713:../Dave/Generated/FREERTOS/tasks.c ****                        eTaskState eState )
3714:../Dave/Generated/FREERTOS/tasks.c ****     {
 4905              	 .loc 1 3714 0
 4906              	 .cfi_startproc
 4907 0000 80B5     	 push {r7,lr}
 4908              	.LCFI133:
 4909              	 .cfi_def_cfa_offset 8
 4910              	 .cfi_offset 7,-8
 4911              	 .cfi_offset 14,-4
 4912 0002 86B0     	 sub sp,sp,#24
 4913              	.LCFI134:
 4914              	 .cfi_def_cfa_offset 32
 4915 0004 00AF     	 add r7,sp,#0
 4916              	.LCFI135:
 4917              	 .cfi_def_cfa_register 7
 4918 0006 F860     	 str r0,[r7,#12]
 4919 0008 B960     	 str r1,[r7,#8]
 4920 000a 7A60     	 str r2,[r7,#4]
 4921 000c 1A1C     	 mov r2,r3
 4922 000e FB1C     	 add r3,r7,#3
 4923 0010 1A70     	 strb r2,[r3]
3715:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3716:../Dave/Generated/FREERTOS/tasks.c **** 
3717:../Dave/Generated/FREERTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3718:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 4924              	 .loc 1 3718 0
 4925 0012 FB68     	 ldr r3,[r7,#12]
 4926 0014 002B     	 cmp r3,#0
 4927 0016 02D1     	 bne .L381
 4928              	 .loc 1 3718 0 is_stmt 0 discriminator 1
 4929 0018 2D4B     	 ldr r3,.L390
 4930 001a 1B68     	 ldr r3,[r3]
 4931 001c 00E0     	 b .L382
 4932              	.L381:
 4933              	 .loc 1 3718 0 discriminator 2
 4934 001e FB68     	 ldr r3,[r7,#12]
 4935              	.L382:
 4936              	 .loc 1 3718 0 discriminator 4
 4937 0020 7B61     	 str r3,[r7,#20]
3719:../Dave/Generated/FREERTOS/tasks.c **** 
3720:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4938              	 .loc 1 3720 0 is_stmt 1 discriminator 4
 4939 0022 BB68     	 ldr r3,[r7,#8]
 4940 0024 7A69     	 ldr r2,[r7,#20]
 4941 0026 1A60     	 str r2,[r3]
3721:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 4942              	 .loc 1 3721 0 discriminator 4
 4943 0028 7B69     	 ldr r3,[r7,#20]
 4944 002a 3433     	 add r3,r3,#52
 4945 002c 1A1C     	 mov r2,r3
 4946 002e BB68     	 ldr r3,[r7,#8]
 4947 0030 5A60     	 str r2,[r3,#4]
3722:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4948              	 .loc 1 3722 0 discriminator 4
 4949 0032 7B69     	 ldr r3,[r7,#20]
 4950 0034 DA6A     	 ldr r2,[r3,#44]
 4951 0036 BB68     	 ldr r3,[r7,#8]
 4952 0038 1A61     	 str r2,[r3,#16]
3723:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4953              	 .loc 1 3723 0 discriminator 4
 4954 003a 7B69     	 ldr r3,[r7,#20]
 4955 003c 1A6B     	 ldr r2,[r3,#48]
 4956 003e BB68     	 ldr r3,[r7,#8]
 4957 0040 DA61     	 str r2,[r3,#28]
3724:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4958              	 .loc 1 3724 0 discriminator 4
 4959 0042 7B69     	 ldr r3,[r7,#20]
 4960 0044 5A6C     	 ldr r2,[r3,#68]
 4961 0046 BB68     	 ldr r3,[r7,#8]
 4962 0048 9A60     	 str r2,[r3,#8]
3725:../Dave/Generated/FREERTOS/tasks.c **** 
3726:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3727:../Dave/Generated/FREERTOS/tasks.c ****             {
3728:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 4963              	 .loc 1 3728 0 discriminator 4
 4964 004a 7B69     	 ldr r3,[r7,#20]
 4965 004c DA6C     	 ldr r2,[r3,#76]
 4966 004e BB68     	 ldr r3,[r7,#8]
 4967 0050 5A61     	 str r2,[r3,#20]
3729:../Dave/Generated/FREERTOS/tasks.c ****             }
3730:../Dave/Generated/FREERTOS/tasks.c ****         #else
3731:../Dave/Generated/FREERTOS/tasks.c ****             {
3732:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->uxBasePriority = 0;
3733:../Dave/Generated/FREERTOS/tasks.c ****             }
3734:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3735:../Dave/Generated/FREERTOS/tasks.c **** 
3736:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3737:../Dave/Generated/FREERTOS/tasks.c ****             {
3738:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3739:../Dave/Generated/FREERTOS/tasks.c ****             }
3740:../Dave/Generated/FREERTOS/tasks.c ****         #else
3741:../Dave/Generated/FREERTOS/tasks.c ****             {
3742:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->ulRunTimeCounter = 0;
 4968              	 .loc 1 3742 0 discriminator 4
 4969 0052 BB68     	 ldr r3,[r7,#8]
 4970 0054 0022     	 mov r2,#0
 4971 0056 9A61     	 str r2,[r3,#24]
3743:../Dave/Generated/FREERTOS/tasks.c ****             }
3744:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3745:../Dave/Generated/FREERTOS/tasks.c **** 
3746:../Dave/Generated/FREERTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3747:../Dave/Generated/FREERTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3748:../Dave/Generated/FREERTOS/tasks.c ****          * state is just set to whatever is passed in. */
3749:../Dave/Generated/FREERTOS/tasks.c ****         if( eState != eInvalid )
 4972              	 .loc 1 3749 0 discriminator 4
 4973 0058 FB1C     	 add r3,r7,#3
 4974 005a 1B78     	 ldrb r3,[r3]
 4975 005c 052B     	 cmp r3,#5
 4976 005e 1CD0     	 beq .L383
3750:../Dave/Generated/FREERTOS/tasks.c ****         {
3751:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
 4977              	 .loc 1 3751 0
 4978 0060 1B4B     	 ldr r3,.L390
 4979 0062 1B68     	 ldr r3,[r3]
 4980 0064 7A69     	 ldr r2,[r7,#20]
 4981 0066 9A42     	 cmp r2,r3
 4982 0068 03D1     	 bne .L384
3752:../Dave/Generated/FREERTOS/tasks.c ****             {
3753:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
 4983              	 .loc 1 3753 0
 4984 006a BB68     	 ldr r3,[r7,#8]
 4985 006c 0022     	 mov r2,#0
 4986 006e 1A73     	 strb r2,[r3,#12]
 4987 0070 1BE0     	 b .L387
 4988              	.L384:
3754:../Dave/Generated/FREERTOS/tasks.c ****             }
3755:../Dave/Generated/FREERTOS/tasks.c ****             else
3756:../Dave/Generated/FREERTOS/tasks.c ****             {
3757:../Dave/Generated/FREERTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
 4989              	 .loc 1 3757 0
 4990 0072 BB68     	 ldr r3,[r7,#8]
 4991 0074 FA1C     	 add r2,r7,#3
 4992 0076 1278     	 ldrb r2,[r2]
 4993 0078 1A73     	 strb r2,[r3,#12]
3758:../Dave/Generated/FREERTOS/tasks.c **** 
3759:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3760:../Dave/Generated/FREERTOS/tasks.c ****                     {
3761:../Dave/Generated/FREERTOS/tasks.c ****                         /* If the task is in the suspended list then there is a
3762:../Dave/Generated/FREERTOS/tasks.c ****                          *  chance it is actually just blocked indefinitely - so really
3763:../Dave/Generated/FREERTOS/tasks.c ****                          *  it should be reported as being in the Blocked state. */
3764:../Dave/Generated/FREERTOS/tasks.c ****                         if( eState == eSuspended )
 4994              	 .loc 1 3764 0
 4995 007a FB1C     	 add r3,r7,#3
 4996 007c 1B78     	 ldrb r3,[r3]
 4997 007e 032B     	 cmp r3,#3
 4998 0080 13D1     	 bne .L387
3765:../Dave/Generated/FREERTOS/tasks.c ****                         {
3766:../Dave/Generated/FREERTOS/tasks.c ****                             vTaskSuspendAll();
 4999              	 .loc 1 3766 0
 5000 0082 FFF7FEFF 	 bl vTaskSuspendAll
3767:../Dave/Generated/FREERTOS/tasks.c ****                             {
3768:../Dave/Generated/FREERTOS/tasks.c ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5001              	 .loc 1 3768 0
 5002 0086 7B69     	 ldr r3,[r7,#20]
 5003 0088 9B6A     	 ldr r3,[r3,#40]
 5004 008a 002B     	 cmp r3,#0
 5005 008c 02D0     	 beq .L386
3769:../Dave/Generated/FREERTOS/tasks.c ****                                 {
3770:../Dave/Generated/FREERTOS/tasks.c ****                                     pxTaskStatus->eCurrentState = eBlocked;
 5006              	 .loc 1 3770 0
 5007 008e BB68     	 ldr r3,[r7,#8]
 5008 0090 0222     	 mov r2,#2
 5009 0092 1A73     	 strb r2,[r3,#12]
 5010              	.L386:
3771:../Dave/Generated/FREERTOS/tasks.c ****                                 }
3772:../Dave/Generated/FREERTOS/tasks.c ****                             }
3773:../Dave/Generated/FREERTOS/tasks.c ****                             ( void ) xTaskResumeAll();
 5011              	 .loc 1 3773 0
 5012 0094 FFF7FEFF 	 bl xTaskResumeAll
 5013 0098 07E0     	 b .L387
 5014              	.L383:
3774:../Dave/Generated/FREERTOS/tasks.c ****                         }
3775:../Dave/Generated/FREERTOS/tasks.c ****                     }
3776:../Dave/Generated/FREERTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3777:../Dave/Generated/FREERTOS/tasks.c ****             }
3778:../Dave/Generated/FREERTOS/tasks.c ****         }
3779:../Dave/Generated/FREERTOS/tasks.c ****         else
3780:../Dave/Generated/FREERTOS/tasks.c ****         {
3781:../Dave/Generated/FREERTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5015              	 .loc 1 3781 0
 5016 009a 7B69     	 ldr r3,[r7,#20]
 5017 009c 181C     	 mov r0,r3
 5018 009e FFF7FEFF 	 bl eTaskGetState
 5019 00a2 031C     	 mov r3,r0
 5020 00a4 1A1C     	 mov r2,r3
 5021 00a6 BB68     	 ldr r3,[r7,#8]
 5022 00a8 1A73     	 strb r2,[r3,#12]
 5023              	.L387:
3782:../Dave/Generated/FREERTOS/tasks.c ****         }
3783:../Dave/Generated/FREERTOS/tasks.c **** 
3784:../Dave/Generated/FREERTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3785:../Dave/Generated/FREERTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3786:../Dave/Generated/FREERTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
 5024              	 .loc 1 3786 0
 5025 00aa 7B68     	 ldr r3,[r7,#4]
 5026 00ac 002B     	 cmp r3,#0
 5027 00ae 09D0     	 beq .L388
3787:../Dave/Generated/FREERTOS/tasks.c ****         {
3788:../Dave/Generated/FREERTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3789:../Dave/Generated/FREERTOS/tasks.c ****                 {
3790:../Dave/Generated/FREERTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3791:../Dave/Generated/FREERTOS/tasks.c ****                 }
3792:../Dave/Generated/FREERTOS/tasks.c ****             #else
3793:../Dave/Generated/FREERTOS/tasks.c ****                 {
3794:../Dave/Generated/FREERTOS/tasks.c ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
 5028              	 .loc 1 3794 0
 5029 00b0 7B69     	 ldr r3,[r7,#20]
 5030 00b2 1B6B     	 ldr r3,[r3,#48]
 5031 00b4 181C     	 mov r0,r3
 5032 00b6 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5033 00ba 031C     	 mov r3,r0
 5034 00bc 1A1C     	 mov r2,r3
 5035 00be BB68     	 ldr r3,[r7,#8]
 5036 00c0 1A84     	 strh r2,[r3,#32]
 5037 00c2 02E0     	 b .L380
 5038              	.L388:
3795:../Dave/Generated/FREERTOS/tasks.c ****                 }
3796:../Dave/Generated/FREERTOS/tasks.c ****             #endif
3797:../Dave/Generated/FREERTOS/tasks.c ****         }
3798:../Dave/Generated/FREERTOS/tasks.c ****         else
3799:../Dave/Generated/FREERTOS/tasks.c ****         {
3800:../Dave/Generated/FREERTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
 5039              	 .loc 1 3800 0
 5040 00c4 BB68     	 ldr r3,[r7,#8]
 5041 00c6 0022     	 mov r2,#0
 5042 00c8 1A84     	 strh r2,[r3,#32]
 5043              	.L380:
3801:../Dave/Generated/FREERTOS/tasks.c ****         }
3802:../Dave/Generated/FREERTOS/tasks.c ****     }
 5044              	 .loc 1 3802 0
 5045 00ca BD46     	 mov sp,r7
 5046 00cc 06B0     	 add sp,sp,#24
 5047              	 
 5048 00ce 80BD     	 pop {r7,pc}
 5049              	.L391:
 5050              	 .align 2
 5051              	.L390:
 5052 00d0 00000000 	 .word pxCurrentTCB
 5053              	 .cfi_endproc
 5054              	.LFE88:
 5056              	 .section .text.prvListTasksWithinSingleList,"ax",%progbits
 5057              	 .align 2
 5058              	 .code 16
 5059              	 .thumb_func
 5061              	prvListTasksWithinSingleList:
 5062              	.LFB89:
3803:../Dave/Generated/FREERTOS/tasks.c **** 
3804:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3805:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3806:../Dave/Generated/FREERTOS/tasks.c **** 
3807:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3808:../Dave/Generated/FREERTOS/tasks.c **** 
3809:../Dave/Generated/FREERTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3810:../Dave/Generated/FREERTOS/tasks.c ****                                                      List_t * pxList,
3811:../Dave/Generated/FREERTOS/tasks.c ****                                                      eTaskState eState )
3812:../Dave/Generated/FREERTOS/tasks.c ****     {
 5063              	 .loc 1 3812 0
 5064              	 .cfi_startproc
 5065 0000 80B5     	 push {r7,lr}
 5066              	.LCFI136:
 5067              	 .cfi_def_cfa_offset 8
 5068              	 .cfi_offset 7,-8
 5069              	 .cfi_offset 14,-4
 5070 0002 8AB0     	 sub sp,sp,#40
 5071              	.LCFI137:
 5072              	 .cfi_def_cfa_offset 48
 5073 0004 00AF     	 add r7,sp,#0
 5074              	.LCFI138:
 5075              	 .cfi_def_cfa_register 7
 5076 0006 F860     	 str r0,[r7,#12]
 5077 0008 B960     	 str r1,[r7,#8]
 5078 000a FB1D     	 add r3,r7,#7
 5079 000c 1A70     	 strb r2,[r3]
3813:../Dave/Generated/FREERTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3814:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxTask = 0;
 5080              	 .loc 1 3814 0
 5081 000e 0023     	 mov r3,#0
 5082 0010 7B62     	 str r3,[r7,#36]
3815:../Dave/Generated/FREERTOS/tasks.c **** 
3816:../Dave/Generated/FREERTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5083              	 .loc 1 3816 0
 5084 0012 BB68     	 ldr r3,[r7,#8]
 5085 0014 1B68     	 ldr r3,[r3]
 5086 0016 002B     	 cmp r3,#0
 5087 0018 42D0     	 beq .L393
 5088              	.LBB15:
3817:../Dave/Generated/FREERTOS/tasks.c ****         {
3818:../Dave/Generated/FREERTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
 5089              	 .loc 1 3818 0
 5090 001a BB68     	 ldr r3,[r7,#8]
 5091 001c 3B62     	 str r3,[r7,#32]
 5092 001e 3B6A     	 ldr r3,[r7,#32]
 5093 0020 5B68     	 ldr r3,[r3,#4]
 5094 0022 5A68     	 ldr r2,[r3,#4]
 5095 0024 3B6A     	 ldr r3,[r7,#32]
 5096 0026 5A60     	 str r2,[r3,#4]
 5097 0028 3B6A     	 ldr r3,[r7,#32]
 5098 002a 5A68     	 ldr r2,[r3,#4]
 5099 002c 3B6A     	 ldr r3,[r7,#32]
 5100 002e 0833     	 add r3,r3,#8
 5101 0030 9A42     	 cmp r2,r3
 5102 0032 04D1     	 bne .L394
 5103              	 .loc 1 3818 0 is_stmt 0 discriminator 1
 5104 0034 3B6A     	 ldr r3,[r7,#32]
 5105 0036 5B68     	 ldr r3,[r3,#4]
 5106 0038 5A68     	 ldr r2,[r3,#4]
 5107 003a 3B6A     	 ldr r3,[r7,#32]
 5108 003c 5A60     	 str r2,[r3,#4]
 5109              	.L394:
 5110              	 .loc 1 3818 0 discriminator 3
 5111 003e 3B6A     	 ldr r3,[r7,#32]
 5112 0040 5B68     	 ldr r3,[r3,#4]
 5113 0042 DB68     	 ldr r3,[r3,#12]
 5114 0044 FB61     	 str r3,[r7,#28]
 5115              	.L396:
 5116              	.LBE15:
 5117              	.LBB16:
3819:../Dave/Generated/FREERTOS/tasks.c **** 
3820:../Dave/Generated/FREERTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3821:../Dave/Generated/FREERTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3822:../Dave/Generated/FREERTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3823:../Dave/Generated/FREERTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3824:../Dave/Generated/FREERTOS/tasks.c ****             do
3825:../Dave/Generated/FREERTOS/tasks.c ****             {
3826:../Dave/Generated/FREERTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
 5118              	 .loc 1 3826 0 is_stmt 1
 5119 0046 BB68     	 ldr r3,[r7,#8]
 5120 0048 BB61     	 str r3,[r7,#24]
 5121 004a BB69     	 ldr r3,[r7,#24]
 5122 004c 5B68     	 ldr r3,[r3,#4]
 5123 004e 5A68     	 ldr r2,[r3,#4]
 5124 0050 BB69     	 ldr r3,[r7,#24]
 5125 0052 5A60     	 str r2,[r3,#4]
 5126 0054 BB69     	 ldr r3,[r7,#24]
 5127 0056 5A68     	 ldr r2,[r3,#4]
 5128 0058 BB69     	 ldr r3,[r7,#24]
 5129 005a 0833     	 add r3,r3,#8
 5130 005c 9A42     	 cmp r2,r3
 5131 005e 04D1     	 bne .L395
 5132              	 .loc 1 3826 0 is_stmt 0 discriminator 1
 5133 0060 BB69     	 ldr r3,[r7,#24]
 5134 0062 5B68     	 ldr r3,[r3,#4]
 5135 0064 5A68     	 ldr r2,[r3,#4]
 5136 0066 BB69     	 ldr r3,[r7,#24]
 5137 0068 5A60     	 str r2,[r3,#4]
 5138              	.L395:
 5139              	 .loc 1 3826 0 discriminator 3
 5140 006a BB69     	 ldr r3,[r7,#24]
 5141 006c 5B68     	 ldr r3,[r3,#4]
 5142 006e DB68     	 ldr r3,[r3,#12]
 5143 0070 7B61     	 str r3,[r7,#20]
 5144              	.LBE16:
3827:../Dave/Generated/FREERTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5145              	 .loc 1 3827 0 is_stmt 1 discriminator 3
 5146 0072 7A6A     	 ldr r2,[r7,#36]
 5147 0074 131C     	 mov r3,r2
 5148 0076 DB00     	 lsl r3,r3,#3
 5149 0078 9B18     	 add r3,r3,r2
 5150 007a 9B00     	 lsl r3,r3,#2
 5151 007c 1A1C     	 mov r2,r3
 5152 007e FB68     	 ldr r3,[r7,#12]
 5153 0080 9A18     	 add r2,r3,r2
 5154 0082 7969     	 ldr r1,[r7,#20]
 5155 0084 FB1D     	 add r3,r7,#7
 5156 0086 1B78     	 ldrb r3,[r3]
 5157 0088 081C     	 mov r0,r1
 5158 008a 111C     	 mov r1,r2
 5159 008c 0122     	 mov r2,#1
 5160 008e FFF7FEFF 	 bl vTaskGetInfo
3828:../Dave/Generated/FREERTOS/tasks.c ****                 uxTask++;
 5161              	 .loc 1 3828 0 discriminator 3
 5162 0092 7B6A     	 ldr r3,[r7,#36]
 5163 0094 0133     	 add r3,r3,#1
 5164 0096 7B62     	 str r3,[r7,#36]
3829:../Dave/Generated/FREERTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
 5165              	 .loc 1 3829 0 discriminator 3
 5166 0098 7A69     	 ldr r2,[r7,#20]
 5167 009a FB69     	 ldr r3,[r7,#28]
 5168 009c 9A42     	 cmp r2,r3
 5169 009e D2D1     	 bne .L396
 5170              	.L393:
3830:../Dave/Generated/FREERTOS/tasks.c ****         }
3831:../Dave/Generated/FREERTOS/tasks.c ****         else
3832:../Dave/Generated/FREERTOS/tasks.c ****         {
3833:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3834:../Dave/Generated/FREERTOS/tasks.c ****         }
3835:../Dave/Generated/FREERTOS/tasks.c **** 
3836:../Dave/Generated/FREERTOS/tasks.c ****         return uxTask;
 5171              	 .loc 1 3836 0
 5172 00a0 7B6A     	 ldr r3,[r7,#36]
3837:../Dave/Generated/FREERTOS/tasks.c ****     }
 5173              	 .loc 1 3837 0
 5174 00a2 181C     	 mov r0,r3
 5175 00a4 BD46     	 mov sp,r7
 5176 00a6 0AB0     	 add sp,sp,#40
 5177              	 
 5178 00a8 80BD     	 pop {r7,pc}
 5179              	 .cfi_endproc
 5180              	.LFE89:
 5182 00aa C046     	 .section .text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5183              	 .align 2
 5184              	 .code 16
 5185              	 .thumb_func
 5187              	prvTaskCheckFreeStackSpace:
 5188              	.LFB90:
3838:../Dave/Generated/FREERTOS/tasks.c **** 
3839:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3840:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3841:../Dave/Generated/FREERTOS/tasks.c **** 
3842:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3843:../Dave/Generated/FREERTOS/tasks.c **** 
3844:../Dave/Generated/FREERTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3845:../Dave/Generated/FREERTOS/tasks.c ****     {
 5189              	 .loc 1 3845 0
 5190              	 .cfi_startproc
 5191 0000 80B5     	 push {r7,lr}
 5192              	.LCFI139:
 5193              	 .cfi_def_cfa_offset 8
 5194              	 .cfi_offset 7,-8
 5195              	 .cfi_offset 14,-4
 5196 0002 84B0     	 sub sp,sp,#16
 5197              	.LCFI140:
 5198              	 .cfi_def_cfa_offset 24
 5199 0004 00AF     	 add r7,sp,#0
 5200              	.LCFI141:
 5201              	 .cfi_def_cfa_register 7
 5202 0006 7860     	 str r0,[r7,#4]
3846:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulCount = 0U;
 5203              	 .loc 1 3846 0
 5204 0008 0023     	 mov r3,#0
 5205 000a FB60     	 str r3,[r7,#12]
3847:../Dave/Generated/FREERTOS/tasks.c **** 
3848:../Dave/Generated/FREERTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5206              	 .loc 1 3848 0
 5207 000c 05E0     	 b .L399
 5208              	.L400:
3849:../Dave/Generated/FREERTOS/tasks.c ****         {
3850:../Dave/Generated/FREERTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
 5209              	 .loc 1 3850 0
 5210 000e 7B68     	 ldr r3,[r7,#4]
 5211 0010 0133     	 add r3,r3,#1
 5212 0012 7B60     	 str r3,[r7,#4]
3851:../Dave/Generated/FREERTOS/tasks.c ****             ulCount++;
 5213              	 .loc 1 3851 0
 5214 0014 FB68     	 ldr r3,[r7,#12]
 5215 0016 0133     	 add r3,r3,#1
 5216 0018 FB60     	 str r3,[r7,#12]
 5217              	.L399:
3848:../Dave/Generated/FREERTOS/tasks.c ****         {
 5218              	 .loc 1 3848 0
 5219 001a 7B68     	 ldr r3,[r7,#4]
 5220 001c 1B78     	 ldrb r3,[r3]
 5221 001e A52B     	 cmp r3,#165
 5222 0020 F5D0     	 beq .L400
3852:../Dave/Generated/FREERTOS/tasks.c ****         }
3853:../Dave/Generated/FREERTOS/tasks.c **** 
3854:../Dave/Generated/FREERTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 5223              	 .loc 1 3854 0
 5224 0022 FB68     	 ldr r3,[r7,#12]
 5225 0024 9B08     	 lsr r3,r3,#2
 5226 0026 FB60     	 str r3,[r7,#12]
3855:../Dave/Generated/FREERTOS/tasks.c **** 
3856:../Dave/Generated/FREERTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 5227              	 .loc 1 3856 0
 5228 0028 FB68     	 ldr r3,[r7,#12]
 5229 002a 9BB2     	 uxth r3,r3
3857:../Dave/Generated/FREERTOS/tasks.c ****     }
 5230              	 .loc 1 3857 0
 5231 002c 181C     	 mov r0,r3
 5232 002e BD46     	 mov sp,r7
 5233 0030 04B0     	 add sp,sp,#16
 5234              	 
 5235 0032 80BD     	 pop {r7,pc}
 5236              	 .cfi_endproc
 5237              	.LFE90:
 5239              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5240              	 .align 2
 5241              	 .global uxTaskGetStackHighWaterMark
 5242              	 .code 16
 5243              	 .thumb_func
 5245              	uxTaskGetStackHighWaterMark:
 5246              	.LFB91:
3858:../Dave/Generated/FREERTOS/tasks.c **** 
3859:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3860:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3861:../Dave/Generated/FREERTOS/tasks.c **** 
3862:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3863:../Dave/Generated/FREERTOS/tasks.c **** 
3864:../Dave/Generated/FREERTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3865:../Dave/Generated/FREERTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3866:../Dave/Generated/FREERTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3867:../Dave/Generated/FREERTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3868:../Dave/Generated/FREERTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3869:../Dave/Generated/FREERTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3870:../Dave/Generated/FREERTOS/tasks.c ****     {
3871:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3872:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t * pucEndOfStack;
3873:../Dave/Generated/FREERTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3874:../Dave/Generated/FREERTOS/tasks.c **** 
3875:../Dave/Generated/FREERTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3876:../Dave/Generated/FREERTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3877:../Dave/Generated/FREERTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3878:../Dave/Generated/FREERTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3879:../Dave/Generated/FREERTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3880:../Dave/Generated/FREERTOS/tasks.c ****          * type. */
3881:../Dave/Generated/FREERTOS/tasks.c **** 
3882:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3883:../Dave/Generated/FREERTOS/tasks.c **** 
3884:../Dave/Generated/FREERTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3885:../Dave/Generated/FREERTOS/tasks.c ****             {
3886:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3887:../Dave/Generated/FREERTOS/tasks.c ****             }
3888:../Dave/Generated/FREERTOS/tasks.c ****         #else
3889:../Dave/Generated/FREERTOS/tasks.c ****             {
3890:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3891:../Dave/Generated/FREERTOS/tasks.c ****             }
3892:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3893:../Dave/Generated/FREERTOS/tasks.c **** 
3894:../Dave/Generated/FREERTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3895:../Dave/Generated/FREERTOS/tasks.c **** 
3896:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
3897:../Dave/Generated/FREERTOS/tasks.c ****     }
3898:../Dave/Generated/FREERTOS/tasks.c **** 
3899:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3900:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3901:../Dave/Generated/FREERTOS/tasks.c **** 
3902:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3903:../Dave/Generated/FREERTOS/tasks.c **** 
3904:../Dave/Generated/FREERTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3905:../Dave/Generated/FREERTOS/tasks.c ****     {
 5247              	 .loc 1 3905 0
 5248              	 .cfi_startproc
 5249 0000 80B5     	 push {r7,lr}
 5250              	.LCFI142:
 5251              	 .cfi_def_cfa_offset 8
 5252              	 .cfi_offset 7,-8
 5253              	 .cfi_offset 14,-4
 5254 0002 86B0     	 sub sp,sp,#24
 5255              	.LCFI143:
 5256              	 .cfi_def_cfa_offset 32
 5257 0004 00AF     	 add r7,sp,#0
 5258              	.LCFI144:
 5259              	 .cfi_def_cfa_register 7
 5260 0006 7860     	 str r0,[r7,#4]
3906:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
3907:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t * pucEndOfStack;
3908:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxReturn;
3909:../Dave/Generated/FREERTOS/tasks.c **** 
3910:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 5261              	 .loc 1 3910 0
 5262 0008 7B68     	 ldr r3,[r7,#4]
 5263 000a 002B     	 cmp r3,#0
 5264 000c 02D1     	 bne .L403
 5265              	 .loc 1 3910 0 is_stmt 0 discriminator 1
 5266 000e 094B     	 ldr r3,.L406
 5267 0010 1B68     	 ldr r3,[r3]
 5268 0012 00E0     	 b .L404
 5269              	.L403:
 5270              	 .loc 1 3910 0 discriminator 2
 5271 0014 7B68     	 ldr r3,[r7,#4]
 5272              	.L404:
 5273              	 .loc 1 3910 0 discriminator 4
 5274 0016 7B61     	 str r3,[r7,#20]
3911:../Dave/Generated/FREERTOS/tasks.c **** 
3912:../Dave/Generated/FREERTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3913:../Dave/Generated/FREERTOS/tasks.c ****             {
3914:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5275              	 .loc 1 3914 0 is_stmt 1 discriminator 4
 5276 0018 7B69     	 ldr r3,[r7,#20]
 5277 001a 1B6B     	 ldr r3,[r3,#48]
 5278 001c 3B61     	 str r3,[r7,#16]
3915:../Dave/Generated/FREERTOS/tasks.c ****             }
3916:../Dave/Generated/FREERTOS/tasks.c ****         #else
3917:../Dave/Generated/FREERTOS/tasks.c ****             {
3918:../Dave/Generated/FREERTOS/tasks.c ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3919:../Dave/Generated/FREERTOS/tasks.c ****             }
3920:../Dave/Generated/FREERTOS/tasks.c ****         #endif
3921:../Dave/Generated/FREERTOS/tasks.c **** 
3922:../Dave/Generated/FREERTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5279              	 .loc 1 3922 0 discriminator 4
 5280 001e 3B69     	 ldr r3,[r7,#16]
 5281 0020 181C     	 mov r0,r3
 5282 0022 FFF7FEFF 	 bl prvTaskCheckFreeStackSpace
 5283 0026 031C     	 mov r3,r0
 5284 0028 FB60     	 str r3,[r7,#12]
3923:../Dave/Generated/FREERTOS/tasks.c **** 
3924:../Dave/Generated/FREERTOS/tasks.c ****         return uxReturn;
 5285              	 .loc 1 3924 0 discriminator 4
 5286 002a FB68     	 ldr r3,[r7,#12]
3925:../Dave/Generated/FREERTOS/tasks.c ****     }
 5287              	 .loc 1 3925 0 discriminator 4
 5288 002c 181C     	 mov r0,r3
 5289 002e BD46     	 mov sp,r7
 5290 0030 06B0     	 add sp,sp,#24
 5291              	 
 5292 0032 80BD     	 pop {r7,pc}
 5293              	.L407:
 5294              	 .align 2
 5295              	.L406:
 5296 0034 00000000 	 .word pxCurrentTCB
 5297              	 .cfi_endproc
 5298              	.LFE91:
 5300              	 .section .text.prvDeleteTCB,"ax",%progbits
 5301              	 .align 2
 5302              	 .code 16
 5303              	 .thumb_func
 5305              	prvDeleteTCB:
 5306              	.LFB92:
3926:../Dave/Generated/FREERTOS/tasks.c **** 
3927:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3928:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3929:../Dave/Generated/FREERTOS/tasks.c **** 
3930:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3931:../Dave/Generated/FREERTOS/tasks.c **** 
3932:../Dave/Generated/FREERTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3933:../Dave/Generated/FREERTOS/tasks.c ****     {
 5307              	 .loc 1 3933 0
 5308              	 .cfi_startproc
 5309 0000 80B5     	 push {r7,lr}
 5310              	.LCFI145:
 5311              	 .cfi_def_cfa_offset 8
 5312              	 .cfi_offset 7,-8
 5313              	 .cfi_offset 14,-4
 5314 0002 82B0     	 sub sp,sp,#8
 5315              	.LCFI146:
 5316              	 .cfi_def_cfa_offset 16
 5317 0004 00AF     	 add r7,sp,#0
 5318              	.LCFI147:
 5319              	 .cfi_def_cfa_register 7
 5320 0006 7860     	 str r0,[r7,#4]
3934:../Dave/Generated/FREERTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3935:../Dave/Generated/FREERTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3936:../Dave/Generated/FREERTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3937:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3938:../Dave/Generated/FREERTOS/tasks.c **** 
3939:../Dave/Generated/FREERTOS/tasks.c ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3940:../Dave/Generated/FREERTOS/tasks.c ****          * to the task to free any memory allocated at the application level.
3941:../Dave/Generated/FREERTOS/tasks.c ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3942:../Dave/Generated/FREERTOS/tasks.c ****          * for additional information. */
3943:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3944:../Dave/Generated/FREERTOS/tasks.c ****             {
3945:../Dave/Generated/FREERTOS/tasks.c ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3946:../Dave/Generated/FREERTOS/tasks.c ****             }
3947:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configUSE_NEWLIB_REENTRANT */
3948:../Dave/Generated/FREERTOS/tasks.c **** 
3949:../Dave/Generated/FREERTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3950:../Dave/Generated/FREERTOS/tasks.c ****             {
3951:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task can only have been allocated dynamically - free both
3952:../Dave/Generated/FREERTOS/tasks.c ****                  * the stack and TCB. */
3953:../Dave/Generated/FREERTOS/tasks.c ****                 vPortFree( pxTCB->pxStack );
 5321              	 .loc 1 3953 0
 5322 0008 7B68     	 ldr r3,[r7,#4]
 5323 000a 1B6B     	 ldr r3,[r3,#48]
 5324 000c 181C     	 mov r0,r3
 5325 000e FFF7FEFF 	 bl vPortFree
3954:../Dave/Generated/FREERTOS/tasks.c ****                 vPortFree( pxTCB );
 5326              	 .loc 1 3954 0
 5327 0012 7B68     	 ldr r3,[r7,#4]
 5328 0014 181C     	 mov r0,r3
 5329 0016 FFF7FEFF 	 bl vPortFree
3955:../Dave/Generated/FREERTOS/tasks.c ****             }
3956:../Dave/Generated/FREERTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3957:../Dave/Generated/FREERTOS/tasks.c ****             {
3958:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task could have been allocated statically or dynamically, so
3959:../Dave/Generated/FREERTOS/tasks.c ****                  * check what was statically allocated before trying to free the
3960:../Dave/Generated/FREERTOS/tasks.c ****                  * memory. */
3961:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3962:../Dave/Generated/FREERTOS/tasks.c ****                 {
3963:../Dave/Generated/FREERTOS/tasks.c ****                     /* Both the stack and TCB were allocated dynamically, so both
3964:../Dave/Generated/FREERTOS/tasks.c ****                      * must be freed. */
3965:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB->pxStack );
3966:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB );
3967:../Dave/Generated/FREERTOS/tasks.c ****                 }
3968:../Dave/Generated/FREERTOS/tasks.c ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3969:../Dave/Generated/FREERTOS/tasks.c ****                 {
3970:../Dave/Generated/FREERTOS/tasks.c ****                     /* Only the stack was statically allocated, so the TCB is the
3971:../Dave/Generated/FREERTOS/tasks.c ****                      * only memory that must be freed. */
3972:../Dave/Generated/FREERTOS/tasks.c ****                     vPortFree( pxTCB );
3973:../Dave/Generated/FREERTOS/tasks.c ****                 }
3974:../Dave/Generated/FREERTOS/tasks.c ****                 else
3975:../Dave/Generated/FREERTOS/tasks.c ****                 {
3976:../Dave/Generated/FREERTOS/tasks.c ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3977:../Dave/Generated/FREERTOS/tasks.c ****                      * nothing needs to be freed. */
3978:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3979:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
3980:../Dave/Generated/FREERTOS/tasks.c ****                 }
3981:../Dave/Generated/FREERTOS/tasks.c ****             }
3982:../Dave/Generated/FREERTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3983:../Dave/Generated/FREERTOS/tasks.c ****     }
 5330              	 .loc 1 3983 0
 5331 001a BD46     	 mov sp,r7
 5332 001c 02B0     	 add sp,sp,#8
 5333              	 
 5334 001e 80BD     	 pop {r7,pc}
 5335              	 .cfi_endproc
 5336              	.LFE92:
 5338              	 .section .text.prvResetNextTaskUnblockTime,"ax",%progbits
 5339              	 .align 2
 5340              	 .code 16
 5341              	 .thumb_func
 5343              	prvResetNextTaskUnblockTime:
 5344              	.LFB93:
3984:../Dave/Generated/FREERTOS/tasks.c **** 
3985:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3986:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3987:../Dave/Generated/FREERTOS/tasks.c **** 
3988:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3989:../Dave/Generated/FREERTOS/tasks.c **** {
 5345              	 .loc 1 3989 0
 5346              	 .cfi_startproc
 5347 0000 80B5     	 push {r7,lr}
 5348              	.LCFI148:
 5349              	 .cfi_def_cfa_offset 8
 5350              	 .cfi_offset 7,-8
 5351              	 .cfi_offset 14,-4
 5352 0002 00AF     	 add r7,sp,#0
 5353              	.LCFI149:
 5354              	 .cfi_def_cfa_register 7
3990:../Dave/Generated/FREERTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5355              	 .loc 1 3990 0
 5356 0004 084B     	 ldr r3,.L412
 5357 0006 1B68     	 ldr r3,[r3]
 5358 0008 1B68     	 ldr r3,[r3]
 5359 000a 002B     	 cmp r3,#0
 5360 000c 04D1     	 bne .L410
3991:../Dave/Generated/FREERTOS/tasks.c ****     {
3992:../Dave/Generated/FREERTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3993:../Dave/Generated/FREERTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
3994:../Dave/Generated/FREERTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3995:../Dave/Generated/FREERTOS/tasks.c ****          * there is an item in the delayed list. */
3996:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 5361              	 .loc 1 3996 0
 5362 000e 074B     	 ldr r3,.L412+4
 5363 0010 0122     	 mov r2,#1
 5364 0012 5242     	 neg r2,r2
 5365 0014 1A60     	 str r2,[r3]
 5366 0016 05E0     	 b .L409
 5367              	.L410:
3997:../Dave/Generated/FREERTOS/tasks.c ****     }
3998:../Dave/Generated/FREERTOS/tasks.c ****     else
3999:../Dave/Generated/FREERTOS/tasks.c ****     {
4000:../Dave/Generated/FREERTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4001:../Dave/Generated/FREERTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4002:../Dave/Generated/FREERTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4003:../Dave/Generated/FREERTOS/tasks.c ****          * from the Blocked state. */
4004:../Dave/Generated/FREERTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 5368              	 .loc 1 4004 0
 5369 0018 034B     	 ldr r3,.L412
 5370 001a 1B68     	 ldr r3,[r3]
 5371 001c DB68     	 ldr r3,[r3,#12]
 5372 001e 1A68     	 ldr r2,[r3]
 5373 0020 024B     	 ldr r3,.L412+4
 5374 0022 1A60     	 str r2,[r3]
 5375              	.L409:
4005:../Dave/Generated/FREERTOS/tasks.c ****     }
4006:../Dave/Generated/FREERTOS/tasks.c **** }
 5376              	 .loc 1 4006 0
 5377 0024 BD46     	 mov sp,r7
 5378              	 
 5379 0026 80BD     	 pop {r7,pc}
 5380              	.L413:
 5381              	 .align 2
 5382              	.L412:
 5383 0028 00000000 	 .word pxDelayedTaskList
 5384 002c 00000000 	 .word xNextTaskUnblockTime
 5385              	 .cfi_endproc
 5386              	.LFE93:
 5388              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5389              	 .align 2
 5390              	 .global xTaskGetCurrentTaskHandle
 5391              	 .code 16
 5392              	 .thumb_func
 5394              	xTaskGetCurrentTaskHandle:
 5395              	.LFB94:
4007:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4008:../Dave/Generated/FREERTOS/tasks.c **** 
4009:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4010:../Dave/Generated/FREERTOS/tasks.c **** 
4011:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4012:../Dave/Generated/FREERTOS/tasks.c ****     {
 5396              	 .loc 1 4012 0
 5397              	 .cfi_startproc
 5398 0000 80B5     	 push {r7,lr}
 5399              	.LCFI150:
 5400              	 .cfi_def_cfa_offset 8
 5401              	 .cfi_offset 7,-8
 5402              	 .cfi_offset 14,-4
 5403 0002 82B0     	 sub sp,sp,#8
 5404              	.LCFI151:
 5405              	 .cfi_def_cfa_offset 16
 5406 0004 00AF     	 add r7,sp,#0
 5407              	.LCFI152:
 5408              	 .cfi_def_cfa_register 7
4013:../Dave/Generated/FREERTOS/tasks.c ****         TaskHandle_t xReturn;
4014:../Dave/Generated/FREERTOS/tasks.c **** 
4015:../Dave/Generated/FREERTOS/tasks.c ****         /* A critical section is not required as this is not called from
4016:../Dave/Generated/FREERTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4017:../Dave/Generated/FREERTOS/tasks.c ****          * individual execution thread. */
4018:../Dave/Generated/FREERTOS/tasks.c ****         xReturn = pxCurrentTCB;
 5409              	 .loc 1 4018 0
 5410 0006 044B     	 ldr r3,.L416
 5411 0008 1B68     	 ldr r3,[r3]
 5412 000a 7B60     	 str r3,[r7,#4]
4019:../Dave/Generated/FREERTOS/tasks.c **** 
4020:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 5413              	 .loc 1 4020 0
 5414 000c 7B68     	 ldr r3,[r7,#4]
4021:../Dave/Generated/FREERTOS/tasks.c ****     }
 5415              	 .loc 1 4021 0
 5416 000e 181C     	 mov r0,r3
 5417 0010 BD46     	 mov sp,r7
 5418 0012 02B0     	 add sp,sp,#8
 5419              	 
 5420 0014 80BD     	 pop {r7,pc}
 5421              	.L417:
 5422 0016 C046     	 .align 2
 5423              	.L416:
 5424 0018 00000000 	 .word pxCurrentTCB
 5425              	 .cfi_endproc
 5426              	.LFE94:
 5428              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 5429              	 .align 2
 5430              	 .global xTaskGetSchedulerState
 5431              	 .code 16
 5432              	 .thumb_func
 5434              	xTaskGetSchedulerState:
 5435              	.LFB95:
4022:../Dave/Generated/FREERTOS/tasks.c **** 
4023:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4024:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4025:../Dave/Generated/FREERTOS/tasks.c **** 
4026:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4027:../Dave/Generated/FREERTOS/tasks.c **** 
4028:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4029:../Dave/Generated/FREERTOS/tasks.c ****     {
 5436              	 .loc 1 4029 0
 5437              	 .cfi_startproc
 5438 0000 80B5     	 push {r7,lr}
 5439              	.LCFI153:
 5440              	 .cfi_def_cfa_offset 8
 5441              	 .cfi_offset 7,-8
 5442              	 .cfi_offset 14,-4
 5443 0002 82B0     	 sub sp,sp,#8
 5444              	.LCFI154:
 5445              	 .cfi_def_cfa_offset 16
 5446 0004 00AF     	 add r7,sp,#0
 5447              	.LCFI155:
 5448              	 .cfi_def_cfa_register 7
4030:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
4031:../Dave/Generated/FREERTOS/tasks.c **** 
4032:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
 5449              	 .loc 1 4032 0
 5450 0006 0A4B     	 ldr r3,.L423
 5451 0008 1B68     	 ldr r3,[r3]
 5452 000a 002B     	 cmp r3,#0
 5453 000c 02D1     	 bne .L419
4033:../Dave/Generated/FREERTOS/tasks.c ****         {
4034:../Dave/Generated/FREERTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
 5454              	 .loc 1 4034 0
 5455 000e 0123     	 mov r3,#1
 5456 0010 7B60     	 str r3,[r7,#4]
 5457 0012 08E0     	 b .L420
 5458              	.L419:
4035:../Dave/Generated/FREERTOS/tasks.c ****         }
4036:../Dave/Generated/FREERTOS/tasks.c ****         else
4037:../Dave/Generated/FREERTOS/tasks.c ****         {
4038:../Dave/Generated/FREERTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5459              	 .loc 1 4038 0
 5460 0014 074B     	 ldr r3,.L423+4
 5461 0016 1B68     	 ldr r3,[r3]
 5462 0018 002B     	 cmp r3,#0
 5463 001a 02D1     	 bne .L421
4039:../Dave/Generated/FREERTOS/tasks.c ****             {
4040:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
 5464              	 .loc 1 4040 0
 5465 001c 0223     	 mov r3,#2
 5466 001e 7B60     	 str r3,[r7,#4]
 5467 0020 01E0     	 b .L420
 5468              	.L421:
4041:../Dave/Generated/FREERTOS/tasks.c ****             }
4042:../Dave/Generated/FREERTOS/tasks.c ****             else
4043:../Dave/Generated/FREERTOS/tasks.c ****             {
4044:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
 5469              	 .loc 1 4044 0
 5470 0022 0023     	 mov r3,#0
 5471 0024 7B60     	 str r3,[r7,#4]
 5472              	.L420:
4045:../Dave/Generated/FREERTOS/tasks.c ****             }
4046:../Dave/Generated/FREERTOS/tasks.c ****         }
4047:../Dave/Generated/FREERTOS/tasks.c **** 
4048:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 5473              	 .loc 1 4048 0
 5474 0026 7B68     	 ldr r3,[r7,#4]
4049:../Dave/Generated/FREERTOS/tasks.c ****     }
 5475              	 .loc 1 4049 0
 5476 0028 181C     	 mov r0,r3
 5477 002a BD46     	 mov sp,r7
 5478 002c 02B0     	 add sp,sp,#8
 5479              	 
 5480 002e 80BD     	 pop {r7,pc}
 5481              	.L424:
 5482              	 .align 2
 5483              	.L423:
 5484 0030 00000000 	 .word xSchedulerRunning
 5485 0034 00000000 	 .word uxSchedulerSuspended
 5486              	 .cfi_endproc
 5487              	.LFE95:
 5489              	 .section .text.xTaskPriorityInherit,"ax",%progbits
 5490              	 .align 2
 5491              	 .global xTaskPriorityInherit
 5492              	 .code 16
 5493              	 .thumb_func
 5495              	xTaskPriorityInherit:
 5496              	.LFB96:
4050:../Dave/Generated/FREERTOS/tasks.c **** 
4051:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4052:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4053:../Dave/Generated/FREERTOS/tasks.c **** 
4054:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4055:../Dave/Generated/FREERTOS/tasks.c **** 
4056:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4057:../Dave/Generated/FREERTOS/tasks.c ****     {
 5497              	 .loc 1 4057 0
 5498              	 .cfi_startproc
 5499 0000 80B5     	 push {r7,lr}
 5500              	.LCFI156:
 5501              	 .cfi_def_cfa_offset 8
 5502              	 .cfi_offset 7,-8
 5503              	 .cfi_offset 14,-4
 5504 0002 84B0     	 sub sp,sp,#16
 5505              	.LCFI157:
 5506              	 .cfi_def_cfa_offset 24
 5507 0004 00AF     	 add r7,sp,#0
 5508              	.LCFI158:
 5509              	 .cfi_def_cfa_register 7
 5510 0006 7860     	 str r0,[r7,#4]
4058:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5511              	 .loc 1 4058 0
 5512 0008 7B68     	 ldr r3,[r7,#4]
 5513 000a BB60     	 str r3,[r7,#8]
4059:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5514              	 .loc 1 4059 0
 5515 000c 0023     	 mov r3,#0
 5516 000e FB60     	 str r3,[r7,#12]
4060:../Dave/Generated/FREERTOS/tasks.c **** 
4061:../Dave/Generated/FREERTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4062:../Dave/Generated/FREERTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4063:../Dave/Generated/FREERTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4064:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 5517              	 .loc 1 4064 0
 5518 0010 7B68     	 ldr r3,[r7,#4]
 5519 0012 002B     	 cmp r3,#0
 5520 0014 51D0     	 beq .L426
4065:../Dave/Generated/FREERTOS/tasks.c ****         {
4066:../Dave/Generated/FREERTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4067:../Dave/Generated/FREERTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4068:../Dave/Generated/FREERTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4069:../Dave/Generated/FREERTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 5521              	 .loc 1 4069 0
 5522 0016 BB68     	 ldr r3,[r7,#8]
 5523 0018 DA6A     	 ldr r2,[r3,#44]
 5524 001a 2A4B     	 ldr r3,.L433
 5525 001c 1B68     	 ldr r3,[r3]
 5526 001e DB6A     	 ldr r3,[r3,#44]
 5527 0020 9A42     	 cmp r2,r3
 5528 0022 41D2     	 bcs .L427
4070:../Dave/Generated/FREERTOS/tasks.c ****             {
4071:../Dave/Generated/FREERTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4072:../Dave/Generated/FREERTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4073:../Dave/Generated/FREERTOS/tasks.c ****                  * not being used for anything else. */
4074:../Dave/Generated/FREERTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
 5529              	 .loc 1 4074 0
 5530 0024 BB68     	 ldr r3,[r7,#8]
 5531 0026 9B69     	 ldr r3,[r3,#24]
 5532 0028 002B     	 cmp r3,#0
 5533 002a 06DB     	 blt .L428
4075:../Dave/Generated/FREERTOS/tasks.c ****                 {
4076:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
 5534              	 .loc 1 4076 0
 5535 002c 254B     	 ldr r3,.L433
 5536 002e 1B68     	 ldr r3,[r3]
 5537 0030 DB6A     	 ldr r3,[r3,#44]
 5538 0032 0522     	 mov r2,#5
 5539 0034 D21A     	 sub r2,r2,r3
 5540 0036 BB68     	 ldr r3,[r7,#8]
 5541 0038 9A61     	 str r2,[r3,#24]
 5542              	.L428:
4077:../Dave/Generated/FREERTOS/tasks.c ****                 }
4078:../Dave/Generated/FREERTOS/tasks.c ****                 else
4079:../Dave/Generated/FREERTOS/tasks.c ****                 {
4080:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4081:../Dave/Generated/FREERTOS/tasks.c ****                 }
4082:../Dave/Generated/FREERTOS/tasks.c **** 
4083:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4084:../Dave/Generated/FREERTOS/tasks.c ****                  * to be moved into a new list. */
4085:../Dave/Generated/FREERTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
 5543              	 .loc 1 4085 0
 5544 003a BB68     	 ldr r3,[r7,#8]
 5545 003c 5969     	 ldr r1,[r3,#20]
 5546 003e BB68     	 ldr r3,[r7,#8]
 5547 0040 DA6A     	 ldr r2,[r3,#44]
 5548 0042 131C     	 mov r3,r2
 5549 0044 9B00     	 lsl r3,r3,#2
 5550 0046 9B18     	 add r3,r3,r2
 5551 0048 9B00     	 lsl r3,r3,#2
 5552 004a 1F4A     	 ldr r2,.L433+4
 5553 004c 9B18     	 add r3,r3,r2
 5554 004e 9942     	 cmp r1,r3
 5555 0050 22D1     	 bne .L429
4086:../Dave/Generated/FREERTOS/tasks.c ****                 {
4087:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
 5556              	 .loc 1 4087 0
 5557 0052 BB68     	 ldr r3,[r7,#8]
 5558 0054 0433     	 add r3,r3,#4
 5559 0056 181C     	 mov r0,r3
 5560 0058 FFF7FEFF 	 bl uxListRemove
4088:../Dave/Generated/FREERTOS/tasks.c ****                     {
4089:../Dave/Generated/FREERTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4090:../Dave/Generated/FREERTOS/tasks.c ****                          * there is no need to check again and the port level
4091:../Dave/Generated/FREERTOS/tasks.c ****                          * reset macro can be called directly. */
4092:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4093:../Dave/Generated/FREERTOS/tasks.c ****                     }
4094:../Dave/Generated/FREERTOS/tasks.c ****                     else
4095:../Dave/Generated/FREERTOS/tasks.c ****                     {
4096:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4097:../Dave/Generated/FREERTOS/tasks.c ****                     }
4098:../Dave/Generated/FREERTOS/tasks.c **** 
4099:../Dave/Generated/FREERTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4100:../Dave/Generated/FREERTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5561              	 .loc 1 4100 0
 5562 005c 194B     	 ldr r3,.L433
 5563 005e 1B68     	 ldr r3,[r3]
 5564 0060 DA6A     	 ldr r2,[r3,#44]
 5565 0062 BB68     	 ldr r3,[r7,#8]
 5566 0064 DA62     	 str r2,[r3,#44]
4101:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 5567              	 .loc 1 4101 0
 5568 0066 BB68     	 ldr r3,[r7,#8]
 5569 0068 DA6A     	 ldr r2,[r3,#44]
 5570 006a 184B     	 ldr r3,.L433+8
 5571 006c 1B68     	 ldr r3,[r3]
 5572 006e 9A42     	 cmp r2,r3
 5573 0070 03D9     	 bls .L430
 5574              	 .loc 1 4101 0 is_stmt 0 discriminator 1
 5575 0072 BB68     	 ldr r3,[r7,#8]
 5576 0074 DA6A     	 ldr r2,[r3,#44]
 5577 0076 154B     	 ldr r3,.L433+8
 5578 0078 1A60     	 str r2,[r3]
 5579              	.L430:
 5580              	 .loc 1 4101 0 discriminator 3
 5581 007a BB68     	 ldr r3,[r7,#8]
 5582 007c DA6A     	 ldr r2,[r3,#44]
 5583 007e 131C     	 mov r3,r2
 5584 0080 9B00     	 lsl r3,r3,#2
 5585 0082 9B18     	 add r3,r3,r2
 5586 0084 9B00     	 lsl r3,r3,#2
 5587 0086 104A     	 ldr r2,.L433+4
 5588 0088 9A18     	 add r2,r3,r2
 5589 008a BB68     	 ldr r3,[r7,#8]
 5590 008c 0433     	 add r3,r3,#4
 5591 008e 101C     	 mov r0,r2
 5592 0090 191C     	 mov r1,r3
 5593 0092 FFF7FEFF 	 bl vListInsertEnd
 5594 0096 04E0     	 b .L431
 5595              	.L429:
4102:../Dave/Generated/FREERTOS/tasks.c ****                 }
4103:../Dave/Generated/FREERTOS/tasks.c ****                 else
4104:../Dave/Generated/FREERTOS/tasks.c ****                 {
4105:../Dave/Generated/FREERTOS/tasks.c ****                     /* Just inherit the priority. */
4106:../Dave/Generated/FREERTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 5596              	 .loc 1 4106 0 is_stmt 1
 5597 0098 0A4B     	 ldr r3,.L433
 5598 009a 1B68     	 ldr r3,[r3]
 5599 009c DA6A     	 ldr r2,[r3,#44]
 5600 009e BB68     	 ldr r3,[r7,#8]
 5601 00a0 DA62     	 str r2,[r3,#44]
 5602              	.L431:
4107:../Dave/Generated/FREERTOS/tasks.c ****                 }
4108:../Dave/Generated/FREERTOS/tasks.c **** 
4109:../Dave/Generated/FREERTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4110:../Dave/Generated/FREERTOS/tasks.c **** 
4111:../Dave/Generated/FREERTOS/tasks.c ****                 /* Inheritance occurred. */
4112:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 5603              	 .loc 1 4112 0
 5604 00a2 0123     	 mov r3,#1
 5605 00a4 FB60     	 str r3,[r7,#12]
 5606 00a6 08E0     	 b .L426
 5607              	.L427:
4113:../Dave/Generated/FREERTOS/tasks.c ****             }
4114:../Dave/Generated/FREERTOS/tasks.c ****             else
4115:../Dave/Generated/FREERTOS/tasks.c ****             {
4116:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 5608              	 .loc 1 4116 0
 5609 00a8 BB68     	 ldr r3,[r7,#8]
 5610 00aa DA6C     	 ldr r2,[r3,#76]
 5611 00ac 054B     	 ldr r3,.L433
 5612 00ae 1B68     	 ldr r3,[r3]
 5613 00b0 DB6A     	 ldr r3,[r3,#44]
 5614 00b2 9A42     	 cmp r2,r3
 5615 00b4 01D2     	 bcs .L426
4117:../Dave/Generated/FREERTOS/tasks.c ****                 {
4118:../Dave/Generated/FREERTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4119:../Dave/Generated/FREERTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4120:../Dave/Generated/FREERTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4121:../Dave/Generated/FREERTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4122:../Dave/Generated/FREERTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4123:../Dave/Generated/FREERTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4124:../Dave/Generated/FREERTOS/tasks.c ****                      * not been the case. */
4125:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 5616              	 .loc 1 4125 0
 5617 00b6 0123     	 mov r3,#1
 5618 00b8 FB60     	 str r3,[r7,#12]
 5619              	.L426:
4126:../Dave/Generated/FREERTOS/tasks.c ****                 }
4127:../Dave/Generated/FREERTOS/tasks.c ****                 else
4128:../Dave/Generated/FREERTOS/tasks.c ****                 {
4129:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4130:../Dave/Generated/FREERTOS/tasks.c ****                 }
4131:../Dave/Generated/FREERTOS/tasks.c ****             }
4132:../Dave/Generated/FREERTOS/tasks.c ****         }
4133:../Dave/Generated/FREERTOS/tasks.c ****         else
4134:../Dave/Generated/FREERTOS/tasks.c ****         {
4135:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4136:../Dave/Generated/FREERTOS/tasks.c ****         }
4137:../Dave/Generated/FREERTOS/tasks.c **** 
4138:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 5620              	 .loc 1 4138 0
 5621 00ba FB68     	 ldr r3,[r7,#12]
4139:../Dave/Generated/FREERTOS/tasks.c ****     }
 5622              	 .loc 1 4139 0
 5623 00bc 181C     	 mov r0,r3
 5624 00be BD46     	 mov sp,r7
 5625 00c0 04B0     	 add sp,sp,#16
 5626              	 
 5627 00c2 80BD     	 pop {r7,pc}
 5628              	.L434:
 5629              	 .align 2
 5630              	.L433:
 5631 00c4 00000000 	 .word pxCurrentTCB
 5632 00c8 00000000 	 .word pxReadyTasksLists
 5633 00cc 00000000 	 .word uxTopReadyPriority
 5634              	 .cfi_endproc
 5635              	.LFE96:
 5637              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 5638              	 .align 2
 5639              	 .global xTaskPriorityDisinherit
 5640              	 .code 16
 5641              	 .thumb_func
 5643              	xTaskPriorityDisinherit:
 5644              	.LFB97:
4140:../Dave/Generated/FREERTOS/tasks.c **** 
4141:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4142:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4143:../Dave/Generated/FREERTOS/tasks.c **** 
4144:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4145:../Dave/Generated/FREERTOS/tasks.c **** 
4146:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4147:../Dave/Generated/FREERTOS/tasks.c ****     {
 5645              	 .loc 1 4147 0
 5646              	 .cfi_startproc
 5647 0000 80B5     	 push {r7,lr}
 5648              	.LCFI159:
 5649              	 .cfi_def_cfa_offset 8
 5650              	 .cfi_offset 7,-8
 5651              	 .cfi_offset 14,-4
 5652 0002 84B0     	 sub sp,sp,#16
 5653              	.LCFI160:
 5654              	 .cfi_def_cfa_offset 24
 5655 0004 00AF     	 add r7,sp,#0
 5656              	.LCFI161:
 5657              	 .cfi_def_cfa_register 7
 5658 0006 7860     	 str r0,[r7,#4]
4148:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5659              	 .loc 1 4148 0
 5660 0008 7B68     	 ldr r3,[r7,#4]
 5661 000a BB60     	 str r3,[r7,#8]
4149:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
 5662              	 .loc 1 4149 0
 5663 000c 0023     	 mov r3,#0
 5664 000e FB60     	 str r3,[r7,#12]
4150:../Dave/Generated/FREERTOS/tasks.c **** 
4151:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 5665              	 .loc 1 4151 0
 5666 0010 7B68     	 ldr r3,[r7,#4]
 5667 0012 002B     	 cmp r3,#0
 5668 0014 44D0     	 beq .L436
4152:../Dave/Generated/FREERTOS/tasks.c ****         {
4153:../Dave/Generated/FREERTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4154:../Dave/Generated/FREERTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4155:../Dave/Generated/FREERTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4156:../Dave/Generated/FREERTOS/tasks.c ****              * be the running state task. */
4157:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
 5669              	 .loc 1 4157 0
 5670 0016 254B     	 ldr r3,.L443
 5671 0018 1B68     	 ldr r3,[r3]
 5672 001a BA68     	 ldr r2,[r7,#8]
 5673 001c 9A42     	 cmp r2,r3
 5674 001e 01D0     	 beq .L437
 5675              	 .loc 1 4157 0 is_stmt 0 discriminator 1
 5676              	
 5677 0020 72B6     	 cpsid i
 5678              	
 5679              	 .code 16
 5680              	.L438:
 5681 0022 FEE7     	 b .L438
 5682              	.L437:
4158:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5683              	 .loc 1 4158 0 is_stmt 1
 5684 0024 BB68     	 ldr r3,[r7,#8]
 5685 0026 1B6D     	 ldr r3,[r3,#80]
 5686 0028 002B     	 cmp r3,#0
 5687 002a 01D1     	 bne .L439
 5688              	 .loc 1 4158 0 is_stmt 0 discriminator 1
 5689              	
 5690 002c 72B6     	 cpsid i
 5691              	
 5692              	 .code 16
 5693              	.L440:
 5694              	 .loc 1 4158 0 discriminator 2
 5695 002e FEE7     	 b .L440
 5696              	.L439:
4159:../Dave/Generated/FREERTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
 5697              	 .loc 1 4159 0 is_stmt 1
 5698 0030 BB68     	 ldr r3,[r7,#8]
 5699 0032 1B6D     	 ldr r3,[r3,#80]
 5700 0034 5A1E     	 sub r2,r3,#1
 5701 0036 BB68     	 ldr r3,[r7,#8]
 5702 0038 1A65     	 str r2,[r3,#80]
4160:../Dave/Generated/FREERTOS/tasks.c **** 
4161:../Dave/Generated/FREERTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4162:../Dave/Generated/FREERTOS/tasks.c ****              * task? */
4163:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5703              	 .loc 1 4163 0
 5704 003a BB68     	 ldr r3,[r7,#8]
 5705 003c DA6A     	 ldr r2,[r3,#44]
 5706 003e BB68     	 ldr r3,[r7,#8]
 5707 0040 DB6C     	 ldr r3,[r3,#76]
 5708 0042 9A42     	 cmp r2,r3
 5709 0044 2CD0     	 beq .L436
4164:../Dave/Generated/FREERTOS/tasks.c ****             {
4165:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4166:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 5710              	 .loc 1 4166 0
 5711 0046 BB68     	 ldr r3,[r7,#8]
 5712 0048 1B6D     	 ldr r3,[r3,#80]
 5713 004a 002B     	 cmp r3,#0
 5714 004c 28D1     	 bne .L436
4167:../Dave/Generated/FREERTOS/tasks.c ****                 {
4168:../Dave/Generated/FREERTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4169:../Dave/Generated/FREERTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4170:../Dave/Generated/FREERTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4171:../Dave/Generated/FREERTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4172:../Dave/Generated/FREERTOS/tasks.c ****                      * the holding task from the ready list. */
4173:../Dave/Generated/FREERTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5715              	 .loc 1 4173 0
 5716 004e BB68     	 ldr r3,[r7,#8]
 5717 0050 0433     	 add r3,r3,#4
 5718 0052 181C     	 mov r0,r3
 5719 0054 FFF7FEFF 	 bl uxListRemove
4174:../Dave/Generated/FREERTOS/tasks.c ****                     {
4175:../Dave/Generated/FREERTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4176:../Dave/Generated/FREERTOS/tasks.c ****                     }
4177:../Dave/Generated/FREERTOS/tasks.c ****                     else
4178:../Dave/Generated/FREERTOS/tasks.c ****                     {
4179:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4180:../Dave/Generated/FREERTOS/tasks.c ****                     }
4181:../Dave/Generated/FREERTOS/tasks.c **** 
4182:../Dave/Generated/FREERTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4183:../Dave/Generated/FREERTOS/tasks.c ****                      * new  ready list. */
4184:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4185:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 5720              	 .loc 1 4185 0
 5721 0058 BB68     	 ldr r3,[r7,#8]
 5722 005a DA6C     	 ldr r2,[r3,#76]
 5723 005c BB68     	 ldr r3,[r7,#8]
 5724 005e DA62     	 str r2,[r3,#44]
4186:../Dave/Generated/FREERTOS/tasks.c **** 
4187:../Dave/Generated/FREERTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4188:../Dave/Generated/FREERTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4189:../Dave/Generated/FREERTOS/tasks.c ****                      * running to give back the mutex. */
4190:../Dave/Generated/FREERTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
 5725              	 .loc 1 4190 0
 5726 0060 BB68     	 ldr r3,[r7,#8]
 5727 0062 DB6A     	 ldr r3,[r3,#44]
 5728 0064 0522     	 mov r2,#5
 5729 0066 D21A     	 sub r2,r2,r3
 5730 0068 BB68     	 ldr r3,[r7,#8]
 5731 006a 9A61     	 str r2,[r3,#24]
4191:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 5732              	 .loc 1 4191 0
 5733 006c BB68     	 ldr r3,[r7,#8]
 5734 006e DA6A     	 ldr r2,[r3,#44]
 5735 0070 0F4B     	 ldr r3,.L443+4
 5736 0072 1B68     	 ldr r3,[r3]
 5737 0074 9A42     	 cmp r2,r3
 5738 0076 03D9     	 bls .L441
 5739              	 .loc 1 4191 0 is_stmt 0 discriminator 1
 5740 0078 BB68     	 ldr r3,[r7,#8]
 5741 007a DA6A     	 ldr r2,[r3,#44]
 5742 007c 0C4B     	 ldr r3,.L443+4
 5743 007e 1A60     	 str r2,[r3]
 5744              	.L441:
 5745              	 .loc 1 4191 0 discriminator 3
 5746 0080 BB68     	 ldr r3,[r7,#8]
 5747 0082 DA6A     	 ldr r2,[r3,#44]
 5748 0084 131C     	 mov r3,r2
 5749 0086 9B00     	 lsl r3,r3,#2
 5750 0088 9B18     	 add r3,r3,r2
 5751 008a 9B00     	 lsl r3,r3,#2
 5752 008c 094A     	 ldr r2,.L443+8
 5753 008e 9A18     	 add r2,r3,r2
 5754 0090 BB68     	 ldr r3,[r7,#8]
 5755 0092 0433     	 add r3,r3,#4
 5756 0094 101C     	 mov r0,r2
 5757 0096 191C     	 mov r1,r3
 5758 0098 FFF7FEFF 	 bl vListInsertEnd
4192:../Dave/Generated/FREERTOS/tasks.c **** 
4193:../Dave/Generated/FREERTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4194:../Dave/Generated/FREERTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4195:../Dave/Generated/FREERTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4196:../Dave/Generated/FREERTOS/tasks.c ****                      * in an order different to that in which they were taken.
4197:../Dave/Generated/FREERTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4198:../Dave/Generated/FREERTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4199:../Dave/Generated/FREERTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4200:../Dave/Generated/FREERTOS/tasks.c ****                      * a task is waiting on it or not. */
4201:../Dave/Generated/FREERTOS/tasks.c ****                     xReturn = pdTRUE;
 5759              	 .loc 1 4201 0 is_stmt 1 discriminator 3
 5760 009c 0123     	 mov r3,#1
 5761 009e FB60     	 str r3,[r7,#12]
 5762              	.L436:
4202:../Dave/Generated/FREERTOS/tasks.c ****                 }
4203:../Dave/Generated/FREERTOS/tasks.c ****                 else
4204:../Dave/Generated/FREERTOS/tasks.c ****                 {
4205:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4206:../Dave/Generated/FREERTOS/tasks.c ****                 }
4207:../Dave/Generated/FREERTOS/tasks.c ****             }
4208:../Dave/Generated/FREERTOS/tasks.c ****             else
4209:../Dave/Generated/FREERTOS/tasks.c ****             {
4210:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4211:../Dave/Generated/FREERTOS/tasks.c ****             }
4212:../Dave/Generated/FREERTOS/tasks.c ****         }
4213:../Dave/Generated/FREERTOS/tasks.c ****         else
4214:../Dave/Generated/FREERTOS/tasks.c ****         {
4215:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4216:../Dave/Generated/FREERTOS/tasks.c ****         }
4217:../Dave/Generated/FREERTOS/tasks.c **** 
4218:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 5763              	 .loc 1 4218 0
 5764 00a0 FB68     	 ldr r3,[r7,#12]
4219:../Dave/Generated/FREERTOS/tasks.c ****     }
 5765              	 .loc 1 4219 0
 5766 00a2 181C     	 mov r0,r3
 5767 00a4 BD46     	 mov sp,r7
 5768 00a6 04B0     	 add sp,sp,#16
 5769              	 
 5770 00a8 80BD     	 pop {r7,pc}
 5771              	.L444:
 5772 00aa C046     	 .align 2
 5773              	.L443:
 5774 00ac 00000000 	 .word pxCurrentTCB
 5775 00b0 00000000 	 .word uxTopReadyPriority
 5776 00b4 00000000 	 .word pxReadyTasksLists
 5777              	 .cfi_endproc
 5778              	.LFE97:
 5780              	 .section .text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5781              	 .align 2
 5782              	 .global vTaskPriorityDisinheritAfterTimeout
 5783              	 .code 16
 5784              	 .thumb_func
 5786              	vTaskPriorityDisinheritAfterTimeout:
 5787              	.LFB98:
4220:../Dave/Generated/FREERTOS/tasks.c **** 
4221:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4222:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4223:../Dave/Generated/FREERTOS/tasks.c **** 
4224:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4225:../Dave/Generated/FREERTOS/tasks.c **** 
4226:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4227:../Dave/Generated/FREERTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4228:../Dave/Generated/FREERTOS/tasks.c ****     {
 5788              	 .loc 1 4228 0
 5789              	 .cfi_startproc
 5790 0000 80B5     	 push {r7,lr}
 5791              	.LCFI162:
 5792              	 .cfi_def_cfa_offset 8
 5793              	 .cfi_offset 7,-8
 5794              	 .cfi_offset 14,-4
 5795 0002 86B0     	 sub sp,sp,#24
 5796              	.LCFI163:
 5797              	 .cfi_def_cfa_offset 32
 5798 0004 00AF     	 add r7,sp,#0
 5799              	.LCFI164:
 5800              	 .cfi_def_cfa_register 7
 5801 0006 7860     	 str r0,[r7,#4]
 5802 0008 3960     	 str r1,[r7]
4229:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 5803              	 .loc 1 4229 0
 5804 000a 7B68     	 ldr r3,[r7,#4]
 5805 000c 3B61     	 str r3,[r7,#16]
4230:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4231:../Dave/Generated/FREERTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5806              	 .loc 1 4231 0
 5807 000e 0123     	 mov r3,#1
 5808 0010 FB60     	 str r3,[r7,#12]
4232:../Dave/Generated/FREERTOS/tasks.c **** 
4233:../Dave/Generated/FREERTOS/tasks.c ****         if( pxMutexHolder != NULL )
 5809              	 .loc 1 4233 0
 5810 0012 7B68     	 ldr r3,[r7,#4]
 5811 0014 002B     	 cmp r3,#0
 5812 0016 58D0     	 beq .L445
4234:../Dave/Generated/FREERTOS/tasks.c ****         {
4235:../Dave/Generated/FREERTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4236:../Dave/Generated/FREERTOS/tasks.c ****              * one mutex. */
4237:../Dave/Generated/FREERTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
 5813              	 .loc 1 4237 0
 5814 0018 3B69     	 ldr r3,[r7,#16]
 5815 001a 1B6D     	 ldr r3,[r3,#80]
 5816 001c 002B     	 cmp r3,#0
 5817 001e 01D1     	 bne .L447
 5818              	 .loc 1 4237 0 is_stmt 0 discriminator 1
 5819              	
 5820 0020 72B6     	 cpsid i
 5821              	
 5822              	 .code 16
 5823              	.L448:
 5824 0022 FEE7     	 b .L448
 5825              	.L447:
4238:../Dave/Generated/FREERTOS/tasks.c **** 
4239:../Dave/Generated/FREERTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4240:../Dave/Generated/FREERTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4241:../Dave/Generated/FREERTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4242:../Dave/Generated/FREERTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4243:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 5826              	 .loc 1 4243 0 is_stmt 1
 5827 0024 3B69     	 ldr r3,[r7,#16]
 5828 0026 DA6C     	 ldr r2,[r3,#76]
 5829 0028 3B68     	 ldr r3,[r7]
 5830 002a 9A42     	 cmp r2,r3
 5831 002c 02D2     	 bcs .L449
4244:../Dave/Generated/FREERTOS/tasks.c ****             {
4245:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 5832              	 .loc 1 4245 0
 5833 002e 3B68     	 ldr r3,[r7]
 5834 0030 7B61     	 str r3,[r7,#20]
 5835 0032 02E0     	 b .L450
 5836              	.L449:
4246:../Dave/Generated/FREERTOS/tasks.c ****             }
4247:../Dave/Generated/FREERTOS/tasks.c ****             else
4248:../Dave/Generated/FREERTOS/tasks.c ****             {
4249:../Dave/Generated/FREERTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
 5837              	 .loc 1 4249 0
 5838 0034 3B69     	 ldr r3,[r7,#16]
 5839 0036 DB6C     	 ldr r3,[r3,#76]
 5840 0038 7B61     	 str r3,[r7,#20]
 5841              	.L450:
4250:../Dave/Generated/FREERTOS/tasks.c ****             }
4251:../Dave/Generated/FREERTOS/tasks.c **** 
4252:../Dave/Generated/FREERTOS/tasks.c ****             /* Does the priority need to change? */
4253:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
 5842              	 .loc 1 4253 0
 5843 003a 3B69     	 ldr r3,[r7,#16]
 5844 003c DA6A     	 ldr r2,[r3,#44]
 5845 003e 7B69     	 ldr r3,[r7,#20]
 5846 0040 9A42     	 cmp r2,r3
 5847 0042 42D0     	 beq .L445
4254:../Dave/Generated/FREERTOS/tasks.c ****             {
4255:../Dave/Generated/FREERTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4256:../Dave/Generated/FREERTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4257:../Dave/Generated/FREERTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4258:../Dave/Generated/FREERTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4259:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 5848              	 .loc 1 4259 0
 5849 0044 3B69     	 ldr r3,[r7,#16]
 5850 0046 1A6D     	 ldr r2,[r3,#80]
 5851 0048 FB68     	 ldr r3,[r7,#12]
 5852 004a 9A42     	 cmp r2,r3
 5853 004c 3DD1     	 bne .L445
4260:../Dave/Generated/FREERTOS/tasks.c ****                 {
4261:../Dave/Generated/FREERTOS/tasks.c ****                     /* If a task has timed out because it already holds the
4262:../Dave/Generated/FREERTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4263:../Dave/Generated/FREERTOS/tasks.c ****                      * its own priority. */
4264:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
 5854              	 .loc 1 4264 0
 5855 004e 204B     	 ldr r3,.L455
 5856 0050 1B68     	 ldr r3,[r3]
 5857 0052 3A69     	 ldr r2,[r7,#16]
 5858 0054 9A42     	 cmp r2,r3
 5859 0056 01D1     	 bne .L451
 5860              	 .loc 1 4264 0 is_stmt 0 discriminator 1
 5861              	
 5862 0058 72B6     	 cpsid i
 5863              	
 5864              	 .code 16
 5865              	.L452:
 5866              	 .loc 1 4264 0 discriminator 2
 5867 005a FEE7     	 b .L452
 5868              	.L451:
4265:../Dave/Generated/FREERTOS/tasks.c **** 
4266:../Dave/Generated/FREERTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4267:../Dave/Generated/FREERTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4268:../Dave/Generated/FREERTOS/tasks.c ****                      * state. */
4269:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4270:../Dave/Generated/FREERTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5869              	 .loc 1 4270 0 is_stmt 1
 5870 005c 3B69     	 ldr r3,[r7,#16]
 5871 005e DB6A     	 ldr r3,[r3,#44]
 5872 0060 BB60     	 str r3,[r7,#8]
4271:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
 5873              	 .loc 1 4271 0
 5874 0062 3B69     	 ldr r3,[r7,#16]
 5875 0064 7A69     	 ldr r2,[r7,#20]
 5876 0066 DA62     	 str r2,[r3,#44]
4272:../Dave/Generated/FREERTOS/tasks.c **** 
4273:../Dave/Generated/FREERTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4274:../Dave/Generated/FREERTOS/tasks.c ****                      * being used for anything else. */
4275:../Dave/Generated/FREERTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
 5877              	 .loc 1 4275 0
 5878 0068 3B69     	 ldr r3,[r7,#16]
 5879 006a 9B69     	 ldr r3,[r3,#24]
 5880 006c 002B     	 cmp r3,#0
 5881 006e 04DB     	 blt .L453
4276:../Dave/Generated/FREERTOS/tasks.c ****                     {
4277:../Dave/Generated/FREERTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
 5882              	 .loc 1 4277 0
 5883 0070 7B69     	 ldr r3,[r7,#20]
 5884 0072 0522     	 mov r2,#5
 5885 0074 D21A     	 sub r2,r2,r3
 5886 0076 3B69     	 ldr r3,[r7,#16]
 5887 0078 9A61     	 str r2,[r3,#24]
 5888              	.L453:
4278:../Dave/Generated/FREERTOS/tasks.c ****                     }
4279:../Dave/Generated/FREERTOS/tasks.c ****                     else
4280:../Dave/Generated/FREERTOS/tasks.c ****                     {
4281:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4282:../Dave/Generated/FREERTOS/tasks.c ****                     }
4283:../Dave/Generated/FREERTOS/tasks.c **** 
4284:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4285:../Dave/Generated/FREERTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4286:../Dave/Generated/FREERTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4287:../Dave/Generated/FREERTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4288:../Dave/Generated/FREERTOS/tasks.c ****                      * the task's priority is going to change and there is one
4289:../Dave/Generated/FREERTOS/tasks.c ****                      * Ready list per priority. */
4290:../Dave/Generated/FREERTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
 5889              	 .loc 1 4290 0
 5890 007a 3B69     	 ldr r3,[r7,#16]
 5891 007c 5969     	 ldr r1,[r3,#20]
 5892 007e BA68     	 ldr r2,[r7,#8]
 5893 0080 131C     	 mov r3,r2
 5894 0082 9B00     	 lsl r3,r3,#2
 5895 0084 9B18     	 add r3,r3,r2
 5896 0086 9B00     	 lsl r3,r3,#2
 5897 0088 124A     	 ldr r2,.L455+4
 5898 008a 9B18     	 add r3,r3,r2
 5899 008c 9942     	 cmp r1,r3
 5900 008e 1CD1     	 bne .L445
4291:../Dave/Generated/FREERTOS/tasks.c ****                     {
4292:../Dave/Generated/FREERTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5901              	 .loc 1 4292 0
 5902 0090 3B69     	 ldr r3,[r7,#16]
 5903 0092 0433     	 add r3,r3,#4
 5904 0094 181C     	 mov r0,r3
 5905 0096 FFF7FEFF 	 bl uxListRemove
4293:../Dave/Generated/FREERTOS/tasks.c ****                         {
4294:../Dave/Generated/FREERTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4295:../Dave/Generated/FREERTOS/tasks.c ****                              * there is no need to check again and the port level
4296:../Dave/Generated/FREERTOS/tasks.c ****                              * reset macro can be called directly. */
4297:../Dave/Generated/FREERTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4298:../Dave/Generated/FREERTOS/tasks.c ****                         }
4299:../Dave/Generated/FREERTOS/tasks.c ****                         else
4300:../Dave/Generated/FREERTOS/tasks.c ****                         {
4301:../Dave/Generated/FREERTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4302:../Dave/Generated/FREERTOS/tasks.c ****                         }
4303:../Dave/Generated/FREERTOS/tasks.c **** 
4304:../Dave/Generated/FREERTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
 5906              	 .loc 1 4304 0
 5907 009a 3B69     	 ldr r3,[r7,#16]
 5908 009c DA6A     	 ldr r2,[r3,#44]
 5909 009e 0E4B     	 ldr r3,.L455+8
 5910 00a0 1B68     	 ldr r3,[r3]
 5911 00a2 9A42     	 cmp r2,r3
 5912 00a4 03D9     	 bls .L454
 5913              	 .loc 1 4304 0 is_stmt 0 discriminator 1
 5914 00a6 3B69     	 ldr r3,[r7,#16]
 5915 00a8 DA6A     	 ldr r2,[r3,#44]
 5916 00aa 0B4B     	 ldr r3,.L455+8
 5917 00ac 1A60     	 str r2,[r3]
 5918              	.L454:
 5919              	 .loc 1 4304 0 discriminator 3
 5920 00ae 3B69     	 ldr r3,[r7,#16]
 5921 00b0 DA6A     	 ldr r2,[r3,#44]
 5922 00b2 131C     	 mov r3,r2
 5923 00b4 9B00     	 lsl r3,r3,#2
 5924 00b6 9B18     	 add r3,r3,r2
 5925 00b8 9B00     	 lsl r3,r3,#2
 5926 00ba 064A     	 ldr r2,.L455+4
 5927 00bc 9A18     	 add r2,r3,r2
 5928 00be 3B69     	 ldr r3,[r7,#16]
 5929 00c0 0433     	 add r3,r3,#4
 5930 00c2 101C     	 mov r0,r2
 5931 00c4 191C     	 mov r1,r3
 5932 00c6 FFF7FEFF 	 bl vListInsertEnd
 5933              	.L445:
4305:../Dave/Generated/FREERTOS/tasks.c ****                     }
4306:../Dave/Generated/FREERTOS/tasks.c ****                     else
4307:../Dave/Generated/FREERTOS/tasks.c ****                     {
4308:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4309:../Dave/Generated/FREERTOS/tasks.c ****                     }
4310:../Dave/Generated/FREERTOS/tasks.c ****                 }
4311:../Dave/Generated/FREERTOS/tasks.c ****                 else
4312:../Dave/Generated/FREERTOS/tasks.c ****                 {
4313:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4314:../Dave/Generated/FREERTOS/tasks.c ****                 }
4315:../Dave/Generated/FREERTOS/tasks.c ****             }
4316:../Dave/Generated/FREERTOS/tasks.c ****             else
4317:../Dave/Generated/FREERTOS/tasks.c ****             {
4318:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4319:../Dave/Generated/FREERTOS/tasks.c ****             }
4320:../Dave/Generated/FREERTOS/tasks.c ****         }
4321:../Dave/Generated/FREERTOS/tasks.c ****         else
4322:../Dave/Generated/FREERTOS/tasks.c ****         {
4323:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4324:../Dave/Generated/FREERTOS/tasks.c ****         }
4325:../Dave/Generated/FREERTOS/tasks.c ****     }
 5934              	 .loc 1 4325 0 is_stmt 1
 5935 00ca BD46     	 mov sp,r7
 5936 00cc 06B0     	 add sp,sp,#24
 5937              	 
 5938 00ce 80BD     	 pop {r7,pc}
 5939              	.L456:
 5940              	 .align 2
 5941              	.L455:
 5942 00d0 00000000 	 .word pxCurrentTCB
 5943 00d4 00000000 	 .word pxReadyTasksLists
 5944 00d8 00000000 	 .word uxTopReadyPriority
 5945              	 .cfi_endproc
 5946              	.LFE98:
 5948              	 .section .text.prvWriteNameToBuffer,"ax",%progbits
 5949              	 .align 2
 5950              	 .code 16
 5951              	 .thumb_func
 5953              	prvWriteNameToBuffer:
 5954              	.LFB99:
4326:../Dave/Generated/FREERTOS/tasks.c **** 
4327:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4328:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4329:../Dave/Generated/FREERTOS/tasks.c **** 
4330:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4331:../Dave/Generated/FREERTOS/tasks.c **** 
4332:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskEnterCritical( void )
4333:../Dave/Generated/FREERTOS/tasks.c ****     {
4334:../Dave/Generated/FREERTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4335:../Dave/Generated/FREERTOS/tasks.c **** 
4336:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4337:../Dave/Generated/FREERTOS/tasks.c ****         {
4338:../Dave/Generated/FREERTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4339:../Dave/Generated/FREERTOS/tasks.c **** 
4340:../Dave/Generated/FREERTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4341:../Dave/Generated/FREERTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4342:../Dave/Generated/FREERTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4343:../Dave/Generated/FREERTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4344:../Dave/Generated/FREERTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4345:../Dave/Generated/FREERTOS/tasks.c ****              * critical section. */
4346:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4347:../Dave/Generated/FREERTOS/tasks.c ****             {
4348:../Dave/Generated/FREERTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4349:../Dave/Generated/FREERTOS/tasks.c ****             }
4350:../Dave/Generated/FREERTOS/tasks.c ****         }
4351:../Dave/Generated/FREERTOS/tasks.c ****         else
4352:../Dave/Generated/FREERTOS/tasks.c ****         {
4353:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4354:../Dave/Generated/FREERTOS/tasks.c ****         }
4355:../Dave/Generated/FREERTOS/tasks.c ****     }
4356:../Dave/Generated/FREERTOS/tasks.c **** 
4357:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4358:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4359:../Dave/Generated/FREERTOS/tasks.c **** 
4360:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4361:../Dave/Generated/FREERTOS/tasks.c **** 
4362:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskExitCritical( void )
4363:../Dave/Generated/FREERTOS/tasks.c ****     {
4364:../Dave/Generated/FREERTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4365:../Dave/Generated/FREERTOS/tasks.c ****         {
4366:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4367:../Dave/Generated/FREERTOS/tasks.c ****             {
4368:../Dave/Generated/FREERTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4369:../Dave/Generated/FREERTOS/tasks.c **** 
4370:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4371:../Dave/Generated/FREERTOS/tasks.c ****                 {
4372:../Dave/Generated/FREERTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4373:../Dave/Generated/FREERTOS/tasks.c ****                 }
4374:../Dave/Generated/FREERTOS/tasks.c ****                 else
4375:../Dave/Generated/FREERTOS/tasks.c ****                 {
4376:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4377:../Dave/Generated/FREERTOS/tasks.c ****                 }
4378:../Dave/Generated/FREERTOS/tasks.c ****             }
4379:../Dave/Generated/FREERTOS/tasks.c ****             else
4380:../Dave/Generated/FREERTOS/tasks.c ****             {
4381:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4382:../Dave/Generated/FREERTOS/tasks.c ****             }
4383:../Dave/Generated/FREERTOS/tasks.c ****         }
4384:../Dave/Generated/FREERTOS/tasks.c ****         else
4385:../Dave/Generated/FREERTOS/tasks.c ****         {
4386:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4387:../Dave/Generated/FREERTOS/tasks.c ****         }
4388:../Dave/Generated/FREERTOS/tasks.c ****     }
4389:../Dave/Generated/FREERTOS/tasks.c **** 
4390:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4391:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4392:../Dave/Generated/FREERTOS/tasks.c **** 
4393:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4394:../Dave/Generated/FREERTOS/tasks.c **** 
4395:../Dave/Generated/FREERTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4396:../Dave/Generated/FREERTOS/tasks.c ****                                         const char * pcTaskName )
4397:../Dave/Generated/FREERTOS/tasks.c ****     {
 5955              	 .loc 1 4397 0
 5956              	 .cfi_startproc
 5957 0000 80B5     	 push {r7,lr}
 5958              	.LCFI165:
 5959              	 .cfi_def_cfa_offset 8
 5960              	 .cfi_offset 7,-8
 5961              	 .cfi_offset 14,-4
 5962 0002 84B0     	 sub sp,sp,#16
 5963              	.LCFI166:
 5964              	 .cfi_def_cfa_offset 24
 5965 0004 00AF     	 add r7,sp,#0
 5966              	.LCFI167:
 5967              	 .cfi_def_cfa_register 7
 5968 0006 7860     	 str r0,[r7,#4]
 5969 0008 3960     	 str r1,[r7]
4398:../Dave/Generated/FREERTOS/tasks.c ****         size_t x;
4399:../Dave/Generated/FREERTOS/tasks.c **** 
4400:../Dave/Generated/FREERTOS/tasks.c ****         /* Start by copying the entire string. */
4401:../Dave/Generated/FREERTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
 5970              	 .loc 1 4401 0
 5971 000a 7A68     	 ldr r2,[r7,#4]
 5972 000c 3B68     	 ldr r3,[r7]
 5973 000e 101C     	 mov r0,r2
 5974 0010 191C     	 mov r1,r3
 5975 0012 FFF7FEFF 	 bl strcpy
4402:../Dave/Generated/FREERTOS/tasks.c **** 
4403:../Dave/Generated/FREERTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4404:../Dave/Generated/FREERTOS/tasks.c ****          * printed out. */
4405:../Dave/Generated/FREERTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 5976              	 .loc 1 4405 0
 5977 0016 7B68     	 ldr r3,[r7,#4]
 5978 0018 181C     	 mov r0,r3
 5979 001a FFF7FEFF 	 bl strlen
 5980 001e 031C     	 mov r3,r0
 5981 0020 FB60     	 str r3,[r7,#12]
 5982 0022 07E0     	 b .L458
 5983              	.L459:
4406:../Dave/Generated/FREERTOS/tasks.c ****         {
4407:../Dave/Generated/FREERTOS/tasks.c ****             pcBuffer[ x ] = ' ';
 5984              	 .loc 1 4407 0 discriminator 3
 5985 0024 7A68     	 ldr r2,[r7,#4]
 5986 0026 FB68     	 ldr r3,[r7,#12]
 5987 0028 D318     	 add r3,r2,r3
 5988 002a 2022     	 mov r2,#32
 5989 002c 1A70     	 strb r2,[r3]
4405:../Dave/Generated/FREERTOS/tasks.c ****         {
 5990              	 .loc 1 4405 0 discriminator 3
 5991 002e FB68     	 ldr r3,[r7,#12]
 5992 0030 0133     	 add r3,r3,#1
 5993 0032 FB60     	 str r3,[r7,#12]
 5994              	.L458:
4405:../Dave/Generated/FREERTOS/tasks.c ****         {
 5995              	 .loc 1 4405 0 is_stmt 0 discriminator 1
 5996 0034 FB68     	 ldr r3,[r7,#12]
 5997 0036 0E2B     	 cmp r3,#14
 5998 0038 F4D9     	 bls .L459
4408:../Dave/Generated/FREERTOS/tasks.c ****         }
4409:../Dave/Generated/FREERTOS/tasks.c **** 
4410:../Dave/Generated/FREERTOS/tasks.c ****         /* Terminate. */
4411:../Dave/Generated/FREERTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
 5999              	 .loc 1 4411 0 is_stmt 1
 6000 003a 7A68     	 ldr r2,[r7,#4]
 6001 003c FB68     	 ldr r3,[r7,#12]
 6002 003e D318     	 add r3,r2,r3
 6003 0040 0022     	 mov r2,#0
 6004 0042 1A70     	 strb r2,[r3]
4412:../Dave/Generated/FREERTOS/tasks.c **** 
4413:../Dave/Generated/FREERTOS/tasks.c ****         /* Return the new end of string. */
4414:../Dave/Generated/FREERTOS/tasks.c ****         return &( pcBuffer[ x ] );
 6005              	 .loc 1 4414 0
 6006 0044 7A68     	 ldr r2,[r7,#4]
 6007 0046 FB68     	 ldr r3,[r7,#12]
 6008 0048 D318     	 add r3,r2,r3
4415:../Dave/Generated/FREERTOS/tasks.c ****     }
 6009              	 .loc 1 4415 0
 6010 004a 181C     	 mov r0,r3
 6011 004c BD46     	 mov sp,r7
 6012 004e 04B0     	 add sp,sp,#16
 6013              	 
 6014 0050 80BD     	 pop {r7,pc}
 6015              	 .cfi_endproc
 6016              	.LFE99:
 6018 0052 C046     	 .section .rodata
 6019 0005 000000   	 .align 2
 6020              	.LC153:
 6021 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 6021      25750925 
 6021      75092575 
 6021      0D0A00
 6022 0017 00       	 .section .text.vTaskList,"ax",%progbits
 6023              	 .align 2
 6024              	 .global vTaskList
 6025              	 .code 16
 6026              	 .thumb_func
 6028              	vTaskList:
 6029              	.LFB100:
4416:../Dave/Generated/FREERTOS/tasks.c **** 
4417:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4418:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4419:../Dave/Generated/FREERTOS/tasks.c **** 
4420:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4421:../Dave/Generated/FREERTOS/tasks.c **** 
4422:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4423:../Dave/Generated/FREERTOS/tasks.c ****     {
 6030              	 .loc 1 4423 0
 6031              	 .cfi_startproc
 6032 0000 B0B5     	 push {r4,r5,r7,lr}
 6033              	.LCFI168:
 6034              	 .cfi_def_cfa_offset 16
 6035              	 .cfi_offset 4,-16
 6036              	 .cfi_offset 5,-12
 6037              	 .cfi_offset 7,-8
 6038              	 .cfi_offset 14,-4
 6039 0002 88B0     	 sub sp,sp,#32
 6040              	.LCFI169:
 6041              	 .cfi_def_cfa_offset 48
 6042 0004 02AF     	 add r7,sp,#8
 6043              	.LCFI170:
 6044              	 .cfi_def_cfa 7,40
 6045 0006 7860     	 str r0,[r7,#4]
4424:../Dave/Generated/FREERTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4425:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4426:../Dave/Generated/FREERTOS/tasks.c ****         char cStatus;
4427:../Dave/Generated/FREERTOS/tasks.c **** 
4428:../Dave/Generated/FREERTOS/tasks.c ****         /*
4429:../Dave/Generated/FREERTOS/tasks.c ****          * PLEASE NOTE:
4430:../Dave/Generated/FREERTOS/tasks.c ****          *
4431:../Dave/Generated/FREERTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4432:../Dave/Generated/FREERTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4433:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler.
4434:../Dave/Generated/FREERTOS/tasks.c ****          *
4435:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4436:../Dave/Generated/FREERTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4437:../Dave/Generated/FREERTOS/tasks.c ****          * displays task names, states and stack usage.
4438:../Dave/Generated/FREERTOS/tasks.c ****          *
4439:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4440:../Dave/Generated/FREERTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4441:../Dave/Generated/FREERTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4442:../Dave/Generated/FREERTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4443:../Dave/Generated/FREERTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4444:../Dave/Generated/FREERTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4445:../Dave/Generated/FREERTOS/tasks.c ****          * snprintf() implementation!).
4446:../Dave/Generated/FREERTOS/tasks.c ****          *
4447:../Dave/Generated/FREERTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4448:../Dave/Generated/FREERTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4449:../Dave/Generated/FREERTOS/tasks.c ****          * through a call to vTaskList().
4450:../Dave/Generated/FREERTOS/tasks.c ****          */
4451:../Dave/Generated/FREERTOS/tasks.c **** 
4452:../Dave/Generated/FREERTOS/tasks.c **** 
4453:../Dave/Generated/FREERTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4454:../Dave/Generated/FREERTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
 6046              	 .loc 1 4454 0
 6047 0008 7B68     	 ldr r3,[r7,#4]
 6048 000a 0022     	 mov r2,#0
 6049 000c 1A70     	 strb r2,[r3]
4455:../Dave/Generated/FREERTOS/tasks.c **** 
4456:../Dave/Generated/FREERTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4457:../Dave/Generated/FREERTOS/tasks.c ****          * function is executing. */
4458:../Dave/Generated/FREERTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
 6050              	 .loc 1 4458 0
 6051 000e 4D4B     	 ldr r3,.L473
 6052 0010 1B68     	 ldr r3,[r3]
 6053 0012 FB60     	 str r3,[r7,#12]
4459:../Dave/Generated/FREERTOS/tasks.c **** 
4460:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4461:../Dave/Generated/FREERTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4462:../Dave/Generated/FREERTOS/tasks.c ****          * equate to NULL. */
4463:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
 6054              	 .loc 1 4463 0
 6055 0014 4B4B     	 ldr r3,.L473
 6056 0016 1A68     	 ldr r2,[r3]
 6057 0018 131C     	 mov r3,r2
 6058 001a DB00     	 lsl r3,r3,#3
 6059 001c 9B18     	 add r3,r3,r2
 6060 001e 9B00     	 lsl r3,r3,#2
 6061 0020 181C     	 mov r0,r3
 6062 0022 FFF7FEFF 	 bl pvPortMalloc
 6063 0026 031C     	 mov r3,r0
 6064 0028 BB60     	 str r3,[r7,#8]
4464:../Dave/Generated/FREERTOS/tasks.c **** 
4465:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
 6065              	 .loc 1 4465 0
 6066 002a BB68     	 ldr r3,[r7,#8]
 6067 002c 002B     	 cmp r3,#0
 6068 002e 00D1     	 bne .LCB5294
 6069 0030 85E0     	 b .L461
 6070              	.LCB5294:
4466:../Dave/Generated/FREERTOS/tasks.c ****         {
4467:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the (binary) data. */
4468:../Dave/Generated/FREERTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 6071              	 .loc 1 4468 0
 6072 0032 BA68     	 ldr r2,[r7,#8]
 6073 0034 FB68     	 ldr r3,[r7,#12]
 6074 0036 101C     	 mov r0,r2
 6075 0038 191C     	 mov r1,r3
 6076 003a 0022     	 mov r2,#0
 6077 003c FFF7FEFF 	 bl uxTaskGetSystemState
 6078 0040 031C     	 mov r3,r0
 6079 0042 FB60     	 str r3,[r7,#12]
4469:../Dave/Generated/FREERTOS/tasks.c **** 
4470:../Dave/Generated/FREERTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4471:../Dave/Generated/FREERTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
 6080              	 .loc 1 4471 0
 6081 0044 0023     	 mov r3,#0
 6082 0046 7B61     	 str r3,[r7,#20]
 6083 0048 71E0     	 b .L463
 6084              	.L472:
4472:../Dave/Generated/FREERTOS/tasks.c ****             {
4473:../Dave/Generated/FREERTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
 6085              	 .loc 1 4473 0
 6086 004a 7A69     	 ldr r2,[r7,#20]
 6087 004c 131C     	 mov r3,r2
 6088 004e DB00     	 lsl r3,r3,#3
 6089 0050 9B18     	 add r3,r3,r2
 6090 0052 9B00     	 lsl r3,r3,#2
 6091 0054 1A1C     	 mov r2,r3
 6092 0056 BB68     	 ldr r3,[r7,#8]
 6093 0058 9B18     	 add r3,r3,r2
 6094 005a 1B7B     	 ldrb r3,[r3,#12]
 6095 005c 042B     	 cmp r3,#4
 6096 005e 1DD8     	 bhi .L464
 6097 0060 9A00     	 lsl r2,r3,#2
 6098 0062 394B     	 ldr r3,.L473+4
 6099 0064 D318     	 add r3,r2,r3
 6100 0066 1B68     	 ldr r3,[r3]
 6101 0068 9F46     	 mov pc,r3
 6102              	 .section .rodata.vTaskList,"a",%progbits
 6103              	 .align 2
 6104              	.L466:
 6105 0000 6A000000 	 .word .L465
 6106 0004 74000000 	 .word .L467
 6107 0008 7E000000 	 .word .L468
 6108 000c 88000000 	 .word .L469
 6109 0010 92000000 	 .word .L470
 6110              	 .section .text.vTaskList
 6111              	.L465:
4474:../Dave/Generated/FREERTOS/tasks.c ****                 {
4475:../Dave/Generated/FREERTOS/tasks.c ****                     case eRunning:
4476:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
 6112              	 .loc 1 4476 0
 6113 006a 1323     	 mov r3,#19
 6114 006c FB18     	 add r3,r7,r3
 6115 006e 5822     	 mov r2,#88
 6116 0070 1A70     	 strb r2,[r3]
4477:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 6117              	 .loc 1 4477 0
 6118 0072 18E0     	 b .L471
 6119              	.L467:
4478:../Dave/Generated/FREERTOS/tasks.c **** 
4479:../Dave/Generated/FREERTOS/tasks.c ****                     case eReady:
4480:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
 6120              	 .loc 1 4480 0
 6121 0074 1323     	 mov r3,#19
 6122 0076 FB18     	 add r3,r7,r3
 6123 0078 5222     	 mov r2,#82
 6124 007a 1A70     	 strb r2,[r3]
4481:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 6125              	 .loc 1 4481 0
 6126 007c 13E0     	 b .L471
 6127              	.L468:
4482:../Dave/Generated/FREERTOS/tasks.c **** 
4483:../Dave/Generated/FREERTOS/tasks.c ****                     case eBlocked:
4484:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
 6128              	 .loc 1 4484 0
 6129 007e 1323     	 mov r3,#19
 6130 0080 FB18     	 add r3,r7,r3
 6131 0082 4222     	 mov r2,#66
 6132 0084 1A70     	 strb r2,[r3]
4485:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 6133              	 .loc 1 4485 0
 6134 0086 0EE0     	 b .L471
 6135              	.L469:
4486:../Dave/Generated/FREERTOS/tasks.c **** 
4487:../Dave/Generated/FREERTOS/tasks.c ****                     case eSuspended:
4488:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
 6136              	 .loc 1 4488 0
 6137 0088 1323     	 mov r3,#19
 6138 008a FB18     	 add r3,r7,r3
 6139 008c 5322     	 mov r2,#83
 6140 008e 1A70     	 strb r2,[r3]
4489:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 6141              	 .loc 1 4489 0
 6142 0090 09E0     	 b .L471
 6143              	.L470:
4490:../Dave/Generated/FREERTOS/tasks.c **** 
4491:../Dave/Generated/FREERTOS/tasks.c ****                     case eDeleted:
4492:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
 6144              	 .loc 1 4492 0
 6145 0092 1323     	 mov r3,#19
 6146 0094 FB18     	 add r3,r7,r3
 6147 0096 4422     	 mov r2,#68
 6148 0098 1A70     	 strb r2,[r3]
4493:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 6149              	 .loc 1 4493 0
 6150 009a 04E0     	 b .L471
 6151              	.L464:
4494:../Dave/Generated/FREERTOS/tasks.c **** 
4495:../Dave/Generated/FREERTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4496:../Dave/Generated/FREERTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4497:../Dave/Generated/FREERTOS/tasks.c ****                                     * to prevent static checking errors. */
4498:../Dave/Generated/FREERTOS/tasks.c ****                         cStatus = ( char ) 0x00;
 6152              	 .loc 1 4498 0
 6153 009c 1323     	 mov r3,#19
 6154 009e FB18     	 add r3,r7,r3
 6155 00a0 0022     	 mov r2,#0
 6156 00a2 1A70     	 strb r2,[r3]
4499:../Dave/Generated/FREERTOS/tasks.c ****                         break;
 6157              	 .loc 1 4499 0
 6158 00a4 C046     	 mov r8,r8
 6159              	.L471:
4500:../Dave/Generated/FREERTOS/tasks.c ****                 }
4501:../Dave/Generated/FREERTOS/tasks.c **** 
4502:../Dave/Generated/FREERTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4503:../Dave/Generated/FREERTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4504:../Dave/Generated/FREERTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
 6160              	 .loc 1 4504 0 discriminator 2
 6161 00a6 7A69     	 ldr r2,[r7,#20]
 6162 00a8 131C     	 mov r3,r2
 6163 00aa DB00     	 lsl r3,r3,#3
 6164 00ac 9B18     	 add r3,r3,r2
 6165 00ae 9B00     	 lsl r3,r3,#2
 6166 00b0 1A1C     	 mov r2,r3
 6167 00b2 BB68     	 ldr r3,[r7,#8]
 6168 00b4 9B18     	 add r3,r3,r2
 6169 00b6 5B68     	 ldr r3,[r3,#4]
 6170 00b8 7A68     	 ldr r2,[r7,#4]
 6171 00ba 101C     	 mov r0,r2
 6172 00bc 191C     	 mov r1,r3
 6173 00be FFF7FEFF 	 bl prvWriteNameToBuffer
 6174 00c2 031C     	 mov r3,r0
 6175 00c4 7B60     	 str r3,[r7,#4]
4505:../Dave/Generated/FREERTOS/tasks.c **** 
4506:../Dave/Generated/FREERTOS/tasks.c ****                 /* Write the rest of the string. */
4507:../Dave/Generated/FREERTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
 6176              	 .loc 1 4507 0 discriminator 2
 6177 00c6 1323     	 mov r3,#19
 6178 00c8 FB18     	 add r3,r7,r3
 6179 00ca 1D78     	 ldrb r5,[r3]
 6180 00cc 7A69     	 ldr r2,[r7,#20]
 6181 00ce 131C     	 mov r3,r2
 6182 00d0 DB00     	 lsl r3,r3,#3
 6183 00d2 9B18     	 add r3,r3,r2
 6184 00d4 9B00     	 lsl r3,r3,#2
 6185 00d6 1A1C     	 mov r2,r3
 6186 00d8 BB68     	 ldr r3,[r7,#8]
 6187 00da 9B18     	 add r3,r3,r2
 6188 00dc 1C69     	 ldr r4,[r3,#16]
 6189 00de 7A69     	 ldr r2,[r7,#20]
 6190 00e0 131C     	 mov r3,r2
 6191 00e2 DB00     	 lsl r3,r3,#3
 6192 00e4 9B18     	 add r3,r3,r2
 6193 00e6 9B00     	 lsl r3,r3,#2
 6194 00e8 1A1C     	 mov r2,r3
 6195 00ea BB68     	 ldr r3,[r7,#8]
 6196 00ec 9B18     	 add r3,r3,r2
 6197 00ee 1B8C     	 ldrh r3,[r3,#32]
 6198 00f0 181C     	 mov r0,r3
 6199 00f2 7A69     	 ldr r2,[r7,#20]
 6200 00f4 131C     	 mov r3,r2
 6201 00f6 DB00     	 lsl r3,r3,#3
 6202 00f8 9B18     	 add r3,r3,r2
 6203 00fa 9B00     	 lsl r3,r3,#2
 6204 00fc 1A1C     	 mov r2,r3
 6205 00fe BB68     	 ldr r3,[r7,#8]
 6206 0100 9B18     	 add r3,r3,r2
 6207 0102 9B68     	 ldr r3,[r3,#8]
 6208 0104 7968     	 ldr r1,[r7,#4]
 6209 0106 114A     	 ldr r2,.L473+8
 6210 0108 0090     	 str r0,[sp]
 6211 010a 0193     	 str r3,[sp,#4]
 6212 010c 081C     	 mov r0,r1
 6213 010e 111C     	 mov r1,r2
 6214 0110 2A1C     	 mov r2,r5
 6215 0112 231C     	 mov r3,r4
 6216 0114 FFF7FEFF 	 bl sprintf
4508:../Dave/Generated/FREERTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
 6217              	 .loc 1 4508 0 discriminator 2
 6218 0118 7B68     	 ldr r3,[r7,#4]
 6219 011a 181C     	 mov r0,r3
 6220 011c FFF7FEFF 	 bl strlen
 6221 0120 021C     	 mov r2,r0
 6222 0122 7B68     	 ldr r3,[r7,#4]
 6223 0124 9B18     	 add r3,r3,r2
 6224 0126 7B60     	 str r3,[r7,#4]
4471:../Dave/Generated/FREERTOS/tasks.c ****             {
 6225              	 .loc 1 4471 0 discriminator 2
 6226 0128 7B69     	 ldr r3,[r7,#20]
 6227 012a 0133     	 add r3,r3,#1
 6228 012c 7B61     	 str r3,[r7,#20]
 6229              	.L463:
4471:../Dave/Generated/FREERTOS/tasks.c ****             {
 6230              	 .loc 1 4471 0 is_stmt 0 discriminator 1
 6231 012e 7A69     	 ldr r2,[r7,#20]
 6232 0130 FB68     	 ldr r3,[r7,#12]
 6233 0132 9A42     	 cmp r2,r3
 6234 0134 89D3     	 bcc .L472
4509:../Dave/Generated/FREERTOS/tasks.c ****             }
4510:../Dave/Generated/FREERTOS/tasks.c **** 
4511:../Dave/Generated/FREERTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4512:../Dave/Generated/FREERTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4513:../Dave/Generated/FREERTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
 6235              	 .loc 1 4513 0 is_stmt 1
 6236 0136 BB68     	 ldr r3,[r7,#8]
 6237 0138 181C     	 mov r0,r3
 6238 013a FFF7FEFF 	 bl vPortFree
 6239              	.L461:
4514:../Dave/Generated/FREERTOS/tasks.c ****         }
4515:../Dave/Generated/FREERTOS/tasks.c ****         else
4516:../Dave/Generated/FREERTOS/tasks.c ****         {
4517:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4518:../Dave/Generated/FREERTOS/tasks.c ****         }
4519:../Dave/Generated/FREERTOS/tasks.c ****     }
 6240              	 .loc 1 4519 0
 6241 013e BD46     	 mov sp,r7
 6242 0140 06B0     	 add sp,sp,#24
 6243              	 
 6244 0142 B0BD     	 pop {r4,r5,r7,pc}
 6245              	.L474:
 6246              	 .align 2
 6247              	.L473:
 6248 0144 00000000 	 .word uxCurrentNumberOfTasks
 6249 0148 00000000 	 .word .L466
 6250 014c 08000000 	 .word .LC153
 6251              	 .cfi_endproc
 6252              	.LFE100:
 6254              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 6255              	 .align 2
 6256              	 .global uxTaskResetEventItemValue
 6257              	 .code 16
 6258              	 .thumb_func
 6260              	uxTaskResetEventItemValue:
 6261              	.LFB101:
4520:../Dave/Generated/FREERTOS/tasks.c **** 
4521:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4522:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4523:../Dave/Generated/FREERTOS/tasks.c **** 
4524:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4525:../Dave/Generated/FREERTOS/tasks.c **** 
4526:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4527:../Dave/Generated/FREERTOS/tasks.c ****     {
4528:../Dave/Generated/FREERTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4529:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4530:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4531:../Dave/Generated/FREERTOS/tasks.c **** 
4532:../Dave/Generated/FREERTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY != 1 )
4533:../Dave/Generated/FREERTOS/tasks.c ****             {
4534:../Dave/Generated/FREERTOS/tasks.c ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4535:../Dave/Generated/FREERTOS/tasks.c ****             }
4536:../Dave/Generated/FREERTOS/tasks.c ****         #endif
4537:../Dave/Generated/FREERTOS/tasks.c **** 
4538:../Dave/Generated/FREERTOS/tasks.c ****         /*
4539:../Dave/Generated/FREERTOS/tasks.c ****          * PLEASE NOTE:
4540:../Dave/Generated/FREERTOS/tasks.c ****          *
4541:../Dave/Generated/FREERTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4542:../Dave/Generated/FREERTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4543:../Dave/Generated/FREERTOS/tasks.c ****          * scheduler.
4544:../Dave/Generated/FREERTOS/tasks.c ****          *
4545:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4546:../Dave/Generated/FREERTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4547:../Dave/Generated/FREERTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4548:../Dave/Generated/FREERTOS/tasks.c ****          * in both absolute and percentage terms.
4549:../Dave/Generated/FREERTOS/tasks.c ****          *
4550:../Dave/Generated/FREERTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4551:../Dave/Generated/FREERTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4552:../Dave/Generated/FREERTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4553:../Dave/Generated/FREERTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4554:../Dave/Generated/FREERTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4555:../Dave/Generated/FREERTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4556:../Dave/Generated/FREERTOS/tasks.c ****          * a full snprintf() implementation!).
4557:../Dave/Generated/FREERTOS/tasks.c ****          *
4558:../Dave/Generated/FREERTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4559:../Dave/Generated/FREERTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4560:../Dave/Generated/FREERTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4561:../Dave/Generated/FREERTOS/tasks.c ****          */
4562:../Dave/Generated/FREERTOS/tasks.c **** 
4563:../Dave/Generated/FREERTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4564:../Dave/Generated/FREERTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4565:../Dave/Generated/FREERTOS/tasks.c **** 
4566:../Dave/Generated/FREERTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4567:../Dave/Generated/FREERTOS/tasks.c ****          * function is executing. */
4568:../Dave/Generated/FREERTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4569:../Dave/Generated/FREERTOS/tasks.c **** 
4570:../Dave/Generated/FREERTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4571:../Dave/Generated/FREERTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4572:../Dave/Generated/FREERTOS/tasks.c ****          * equate to NULL. */
4573:../Dave/Generated/FREERTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4574:../Dave/Generated/FREERTOS/tasks.c **** 
4575:../Dave/Generated/FREERTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4576:../Dave/Generated/FREERTOS/tasks.c ****         {
4577:../Dave/Generated/FREERTOS/tasks.c ****             /* Generate the (binary) data. */
4578:../Dave/Generated/FREERTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4579:../Dave/Generated/FREERTOS/tasks.c **** 
4580:../Dave/Generated/FREERTOS/tasks.c ****             /* For percentage calculations. */
4581:../Dave/Generated/FREERTOS/tasks.c ****             ulTotalTime /= 100UL;
4582:../Dave/Generated/FREERTOS/tasks.c **** 
4583:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid divide by zero errors. */
4584:../Dave/Generated/FREERTOS/tasks.c ****             if( ulTotalTime > 0UL )
4585:../Dave/Generated/FREERTOS/tasks.c ****             {
4586:../Dave/Generated/FREERTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4587:../Dave/Generated/FREERTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4588:../Dave/Generated/FREERTOS/tasks.c ****                 {
4589:../Dave/Generated/FREERTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4590:../Dave/Generated/FREERTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4591:../Dave/Generated/FREERTOS/tasks.c ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4592:../Dave/Generated/FREERTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4593:../Dave/Generated/FREERTOS/tasks.c **** 
4594:../Dave/Generated/FREERTOS/tasks.c ****                     /* Write the task name to the string, padding with
4595:../Dave/Generated/FREERTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4596:../Dave/Generated/FREERTOS/tasks.c ****                      * easily. */
4597:../Dave/Generated/FREERTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4598:../Dave/Generated/FREERTOS/tasks.c **** 
4599:../Dave/Generated/FREERTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4600:../Dave/Generated/FREERTOS/tasks.c ****                     {
4601:../Dave/Generated/FREERTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4602:../Dave/Generated/FREERTOS/tasks.c ****                             {
4603:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4604:../Dave/Generated/FREERTOS/tasks.c ****                             }
4605:../Dave/Generated/FREERTOS/tasks.c ****                         #else
4606:../Dave/Generated/FREERTOS/tasks.c ****                             {
4607:../Dave/Generated/FREERTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4608:../Dave/Generated/FREERTOS/tasks.c ****                                  * printf() library can be used. */
4609:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4610:../Dave/Generated/FREERTOS/tasks.c ****                             }
4611:../Dave/Generated/FREERTOS/tasks.c ****                         #endif
4612:../Dave/Generated/FREERTOS/tasks.c ****                     }
4613:../Dave/Generated/FREERTOS/tasks.c ****                     else
4614:../Dave/Generated/FREERTOS/tasks.c ****                     {
4615:../Dave/Generated/FREERTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4616:../Dave/Generated/FREERTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4617:../Dave/Generated/FREERTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4618:../Dave/Generated/FREERTOS/tasks.c ****                             {
4619:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4620:../Dave/Generated/FREERTOS/tasks.c ****                             }
4621:../Dave/Generated/FREERTOS/tasks.c ****                         #else
4622:../Dave/Generated/FREERTOS/tasks.c ****                             {
4623:../Dave/Generated/FREERTOS/tasks.c ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4624:../Dave/Generated/FREERTOS/tasks.c ****                                  * printf() library can be used. */
4625:../Dave/Generated/FREERTOS/tasks.c ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4626:../Dave/Generated/FREERTOS/tasks.c ****                             }
4627:../Dave/Generated/FREERTOS/tasks.c ****                         #endif
4628:../Dave/Generated/FREERTOS/tasks.c ****                     }
4629:../Dave/Generated/FREERTOS/tasks.c **** 
4630:../Dave/Generated/FREERTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4631:../Dave/Generated/FREERTOS/tasks.c ****                 }
4632:../Dave/Generated/FREERTOS/tasks.c ****             }
4633:../Dave/Generated/FREERTOS/tasks.c ****             else
4634:../Dave/Generated/FREERTOS/tasks.c ****             {
4635:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4636:../Dave/Generated/FREERTOS/tasks.c ****             }
4637:../Dave/Generated/FREERTOS/tasks.c **** 
4638:../Dave/Generated/FREERTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4639:../Dave/Generated/FREERTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4640:../Dave/Generated/FREERTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4641:../Dave/Generated/FREERTOS/tasks.c ****         }
4642:../Dave/Generated/FREERTOS/tasks.c ****         else
4643:../Dave/Generated/FREERTOS/tasks.c ****         {
4644:../Dave/Generated/FREERTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4645:../Dave/Generated/FREERTOS/tasks.c ****         }
4646:../Dave/Generated/FREERTOS/tasks.c ****     }
4647:../Dave/Generated/FREERTOS/tasks.c **** 
4648:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4649:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4650:../Dave/Generated/FREERTOS/tasks.c **** 
4651:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4652:../Dave/Generated/FREERTOS/tasks.c **** {
 6262              	 .loc 1 4652 0
 6263              	 .cfi_startproc
 6264 0000 80B5     	 push {r7,lr}
 6265              	.LCFI171:
 6266              	 .cfi_def_cfa_offset 8
 6267              	 .cfi_offset 7,-8
 6268              	 .cfi_offset 14,-4
 6269 0002 82B0     	 sub sp,sp,#8
 6270              	.LCFI172:
 6271              	 .cfi_def_cfa_offset 16
 6272 0004 00AF     	 add r7,sp,#0
 6273              	.LCFI173:
 6274              	 .cfi_def_cfa_register 7
4653:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t uxReturn;
4654:../Dave/Generated/FREERTOS/tasks.c **** 
4655:../Dave/Generated/FREERTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6275              	 .loc 1 4655 0
 6276 0006 084B     	 ldr r3,.L477
 6277 0008 1B68     	 ldr r3,[r3]
 6278 000a 9B69     	 ldr r3,[r3,#24]
 6279 000c 7B60     	 str r3,[r7,#4]
4656:../Dave/Generated/FREERTOS/tasks.c **** 
4657:../Dave/Generated/FREERTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4658:../Dave/Generated/FREERTOS/tasks.c ****      * queues and semaphores. */
4659:../Dave/Generated/FREERTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
 6280              	 .loc 1 4659 0
 6281 000e 064B     	 ldr r3,.L477
 6282 0010 1B68     	 ldr r3,[r3]
 6283 0012 054A     	 ldr r2,.L477
 6284 0014 1268     	 ldr r2,[r2]
 6285 0016 D26A     	 ldr r2,[r2,#44]
 6286 0018 0521     	 mov r1,#5
 6287 001a 8A1A     	 sub r2,r1,r2
 6288 001c 9A61     	 str r2,[r3,#24]
4660:../Dave/Generated/FREERTOS/tasks.c **** 
4661:../Dave/Generated/FREERTOS/tasks.c ****     return uxReturn;
 6289              	 .loc 1 4661 0
 6290 001e 7B68     	 ldr r3,[r7,#4]
4662:../Dave/Generated/FREERTOS/tasks.c **** }
 6291              	 .loc 1 4662 0
 6292 0020 181C     	 mov r0,r3
 6293 0022 BD46     	 mov sp,r7
 6294 0024 02B0     	 add sp,sp,#8
 6295              	 
 6296 0026 80BD     	 pop {r7,pc}
 6297              	.L478:
 6298              	 .align 2
 6299              	.L477:
 6300 0028 00000000 	 .word pxCurrentTCB
 6301              	 .cfi_endproc
 6302              	.LFE101:
 6304              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6305              	 .align 2
 6306              	 .global pvTaskIncrementMutexHeldCount
 6307              	 .code 16
 6308              	 .thumb_func
 6310              	pvTaskIncrementMutexHeldCount:
 6311              	.LFB102:
4663:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4664:../Dave/Generated/FREERTOS/tasks.c **** 
4665:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4666:../Dave/Generated/FREERTOS/tasks.c **** 
4667:../Dave/Generated/FREERTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4668:../Dave/Generated/FREERTOS/tasks.c ****     {
 6312              	 .loc 1 4668 0
 6313              	 .cfi_startproc
 6314 0000 80B5     	 push {r7,lr}
 6315              	.LCFI174:
 6316              	 .cfi_def_cfa_offset 8
 6317              	 .cfi_offset 7,-8
 6318              	 .cfi_offset 14,-4
 6319 0002 00AF     	 add r7,sp,#0
 6320              	.LCFI175:
 6321              	 .cfi_def_cfa_register 7
4669:../Dave/Generated/FREERTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4670:../Dave/Generated/FREERTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4671:../Dave/Generated/FREERTOS/tasks.c ****         if( pxCurrentTCB != NULL )
 6322              	 .loc 1 4671 0
 6323 0004 064B     	 ldr r3,.L482
 6324 0006 1B68     	 ldr r3,[r3]
 6325 0008 002B     	 cmp r3,#0
 6326 000a 04D0     	 beq .L480
4672:../Dave/Generated/FREERTOS/tasks.c ****         {
4673:../Dave/Generated/FREERTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
 6327              	 .loc 1 4673 0
 6328 000c 044B     	 ldr r3,.L482
 6329 000e 1B68     	 ldr r3,[r3]
 6330 0010 1A6D     	 ldr r2,[r3,#80]
 6331 0012 0132     	 add r2,r2,#1
 6332 0014 1A65     	 str r2,[r3,#80]
 6333              	.L480:
4674:../Dave/Generated/FREERTOS/tasks.c ****         }
4675:../Dave/Generated/FREERTOS/tasks.c **** 
4676:../Dave/Generated/FREERTOS/tasks.c ****         return pxCurrentTCB;
 6334              	 .loc 1 4676 0
 6335 0016 024B     	 ldr r3,.L482
 6336 0018 1B68     	 ldr r3,[r3]
4677:../Dave/Generated/FREERTOS/tasks.c ****     }
 6337              	 .loc 1 4677 0
 6338 001a 181C     	 mov r0,r3
 6339 001c BD46     	 mov sp,r7
 6340              	 
 6341 001e 80BD     	 pop {r7,pc}
 6342              	.L483:
 6343              	 .align 2
 6344              	.L482:
 6345 0020 00000000 	 .word pxCurrentTCB
 6346              	 .cfi_endproc
 6347              	.LFE102:
 6349              	 .section .text.ulTaskGenericNotifyTake,"ax",%progbits
 6350              	 .align 2
 6351              	 .global ulTaskGenericNotifyTake
 6352              	 .code 16
 6353              	 .thumb_func
 6355              	ulTaskGenericNotifyTake:
 6356              	.LFB103:
4678:../Dave/Generated/FREERTOS/tasks.c **** 
4679:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4680:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4681:../Dave/Generated/FREERTOS/tasks.c **** 
4682:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4683:../Dave/Generated/FREERTOS/tasks.c **** 
4684:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4685:../Dave/Generated/FREERTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4686:../Dave/Generated/FREERTOS/tasks.c ****                                       TickType_t xTicksToWait )
4687:../Dave/Generated/FREERTOS/tasks.c ****     {
 6357              	 .loc 1 4687 0
 6358              	 .cfi_startproc
 6359 0000 80B5     	 push {r7,lr}
 6360              	.LCFI176:
 6361              	 .cfi_def_cfa_offset 8
 6362              	 .cfi_offset 7,-8
 6363              	 .cfi_offset 14,-4
 6364 0002 86B0     	 sub sp,sp,#24
 6365              	.LCFI177:
 6366              	 .cfi_def_cfa_offset 32
 6367 0004 00AF     	 add r7,sp,#0
 6368              	.LCFI178:
 6369              	 .cfi_def_cfa_register 7
 6370 0006 F860     	 str r0,[r7,#12]
 6371 0008 B960     	 str r1,[r7,#8]
 6372 000a 7A60     	 str r2,[r7,#4]
4688:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulReturn;
4689:../Dave/Generated/FREERTOS/tasks.c **** 
4690:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6373              	 .loc 1 4690 0
 6374 000c FB68     	 ldr r3,[r7,#12]
 6375 000e 002B     	 cmp r3,#0
 6376 0010 01D0     	 beq .L485
 6377              	 .loc 1 4690 0 is_stmt 0 discriminator 1
 6378              	
 6379 0012 72B6     	 cpsid i
 6380              	
 6381              	 .code 16
 6382              	.L486:
 6383 0014 FEE7     	 b .L486
 6384              	.L485:
4691:../Dave/Generated/FREERTOS/tasks.c **** 
4692:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 6385              	 .loc 1 4692 0 is_stmt 1
 6386 0016 FFF7FEFF 	 bl vPortEnterCritical
4693:../Dave/Generated/FREERTOS/tasks.c ****         {
4694:../Dave/Generated/FREERTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4695:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 6387              	 .loc 1 4695 0
 6388 001a 254B     	 ldr r3,.L492
 6389 001c 1B68     	 ldr r3,[r3]
 6390 001e FA68     	 ldr r2,[r7,#12]
 6391 0020 1A32     	 add r2,r2,#26
 6392 0022 9200     	 lsl r2,r2,#2
 6393 0024 D358     	 ldr r3,[r2,r3]
 6394 0026 002B     	 cmp r3,#0
 6395 0028 11D1     	 bne .L487
4696:../Dave/Generated/FREERTOS/tasks.c ****             {
4697:../Dave/Generated/FREERTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4698:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 6396              	 .loc 1 4698 0
 6397 002a 214B     	 ldr r3,.L492
 6398 002c 1A68     	 ldr r2,[r3]
 6399 002e 6821     	 mov r1,#104
 6400 0030 FB68     	 ldr r3,[r7,#12]
 6401 0032 D318     	 add r3,r2,r3
 6402 0034 5B18     	 add r3,r3,r1
 6403 0036 0122     	 mov r2,#1
 6404 0038 1A71     	 strb r2,[r3,#4]
4699:../Dave/Generated/FREERTOS/tasks.c **** 
4700:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 6405              	 .loc 1 4700 0
 6406 003a 7B68     	 ldr r3,[r7,#4]
 6407 003c 002B     	 cmp r3,#0
 6408 003e 06D0     	 beq .L487
4701:../Dave/Generated/FREERTOS/tasks.c ****                 {
4702:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6409              	 .loc 1 4702 0
 6410 0040 7B68     	 ldr r3,[r7,#4]
 6411 0042 181C     	 mov r0,r3
 6412 0044 0121     	 mov r1,#1
 6413 0046 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4703:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4704:../Dave/Generated/FREERTOS/tasks.c **** 
4705:../Dave/Generated/FREERTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4706:../Dave/Generated/FREERTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4707:../Dave/Generated/FREERTOS/tasks.c ****                      * critical section exits) - but it is not something that
4708:../Dave/Generated/FREERTOS/tasks.c ****                      * application code should ever do. */
4709:../Dave/Generated/FREERTOS/tasks.c ****                     portYIELD_WITHIN_API();
 6414              	 .loc 1 4709 0
 6415 004a FFF7FEFF 	 bl vPortYield
 6416              	.L487:
4710:../Dave/Generated/FREERTOS/tasks.c ****                 }
4711:../Dave/Generated/FREERTOS/tasks.c ****                 else
4712:../Dave/Generated/FREERTOS/tasks.c ****                 {
4713:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4714:../Dave/Generated/FREERTOS/tasks.c ****                 }
4715:../Dave/Generated/FREERTOS/tasks.c ****             }
4716:../Dave/Generated/FREERTOS/tasks.c ****             else
4717:../Dave/Generated/FREERTOS/tasks.c ****             {
4718:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4719:../Dave/Generated/FREERTOS/tasks.c ****             }
4720:../Dave/Generated/FREERTOS/tasks.c ****         }
4721:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 6417              	 .loc 1 4721 0
 6418 004e FFF7FEFF 	 bl vPortExitCritical
4722:../Dave/Generated/FREERTOS/tasks.c **** 
4723:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 6419              	 .loc 1 4723 0
 6420 0052 FFF7FEFF 	 bl vPortEnterCritical
4724:../Dave/Generated/FREERTOS/tasks.c ****         {
4725:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4726:../Dave/Generated/FREERTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 6421              	 .loc 1 4726 0
 6422 0056 164B     	 ldr r3,.L492
 6423 0058 1B68     	 ldr r3,[r3]
 6424 005a FA68     	 ldr r2,[r7,#12]
 6425 005c 1A32     	 add r2,r2,#26
 6426 005e 9200     	 lsl r2,r2,#2
 6427 0060 D358     	 ldr r3,[r2,r3]
 6428 0062 7B61     	 str r3,[r7,#20]
4727:../Dave/Generated/FREERTOS/tasks.c **** 
4728:../Dave/Generated/FREERTOS/tasks.c ****             if( ulReturn != 0UL )
 6429              	 .loc 1 4728 0
 6430 0064 7B69     	 ldr r3,[r7,#20]
 6431 0066 002B     	 cmp r3,#0
 6432 0068 12D0     	 beq .L488
4729:../Dave/Generated/FREERTOS/tasks.c ****             {
4730:../Dave/Generated/FREERTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
 6433              	 .loc 1 4730 0
 6434 006a BB68     	 ldr r3,[r7,#8]
 6435 006c 002B     	 cmp r3,#0
 6436 006e 07D0     	 beq .L489
4731:../Dave/Generated/FREERTOS/tasks.c ****                 {
4732:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 6437              	 .loc 1 4732 0
 6438 0070 0F4B     	 ldr r3,.L492
 6439 0072 1B68     	 ldr r3,[r3]
 6440 0074 FA68     	 ldr r2,[r7,#12]
 6441 0076 1A32     	 add r2,r2,#26
 6442 0078 9200     	 lsl r2,r2,#2
 6443 007a 0021     	 mov r1,#0
 6444 007c D150     	 str r1,[r2,r3]
 6445 007e 07E0     	 b .L488
 6446              	.L489:
4733:../Dave/Generated/FREERTOS/tasks.c ****                 }
4734:../Dave/Generated/FREERTOS/tasks.c ****                 else
4735:../Dave/Generated/FREERTOS/tasks.c ****                 {
4736:../Dave/Generated/FREERTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 6447              	 .loc 1 4736 0
 6448 0080 0B4B     	 ldr r3,.L492
 6449 0082 1B68     	 ldr r3,[r3]
 6450 0084 7A69     	 ldr r2,[r7,#20]
 6451 0086 511E     	 sub r1,r2,#1
 6452 0088 FA68     	 ldr r2,[r7,#12]
 6453 008a 1A32     	 add r2,r2,#26
 6454 008c 9200     	 lsl r2,r2,#2
 6455 008e D150     	 str r1,[r2,r3]
 6456              	.L488:
4737:../Dave/Generated/FREERTOS/tasks.c ****                 }
4738:../Dave/Generated/FREERTOS/tasks.c ****             }
4739:../Dave/Generated/FREERTOS/tasks.c ****             else
4740:../Dave/Generated/FREERTOS/tasks.c ****             {
4741:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4742:../Dave/Generated/FREERTOS/tasks.c ****             }
4743:../Dave/Generated/FREERTOS/tasks.c **** 
4744:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 6457              	 .loc 1 4744 0
 6458 0090 074B     	 ldr r3,.L492
 6459 0092 1A68     	 ldr r2,[r3]
 6460 0094 6821     	 mov r1,#104
 6461 0096 FB68     	 ldr r3,[r7,#12]
 6462 0098 D318     	 add r3,r2,r3
 6463 009a 5B18     	 add r3,r3,r1
 6464 009c 0022     	 mov r2,#0
 6465 009e 1A71     	 strb r2,[r3,#4]
4745:../Dave/Generated/FREERTOS/tasks.c ****         }
4746:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 6466              	 .loc 1 4746 0
 6467 00a0 FFF7FEFF 	 bl vPortExitCritical
4747:../Dave/Generated/FREERTOS/tasks.c **** 
4748:../Dave/Generated/FREERTOS/tasks.c ****         return ulReturn;
 6468              	 .loc 1 4748 0
 6469 00a4 7B69     	 ldr r3,[r7,#20]
4749:../Dave/Generated/FREERTOS/tasks.c ****     }
 6470              	 .loc 1 4749 0
 6471 00a6 181C     	 mov r0,r3
 6472 00a8 BD46     	 mov sp,r7
 6473 00aa 06B0     	 add sp,sp,#24
 6474              	 
 6475 00ac 80BD     	 pop {r7,pc}
 6476              	.L493:
 6477 00ae C046     	 .align 2
 6478              	.L492:
 6479 00b0 00000000 	 .word pxCurrentTCB
 6480              	 .cfi_endproc
 6481              	.LFE103:
 6483              	 .section .text.xTaskGenericNotifyWait,"ax",%progbits
 6484              	 .align 2
 6485              	 .global xTaskGenericNotifyWait
 6486              	 .code 16
 6487              	 .thumb_func
 6489              	xTaskGenericNotifyWait:
 6490              	.LFB104:
4750:../Dave/Generated/FREERTOS/tasks.c **** 
4751:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4752:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4753:../Dave/Generated/FREERTOS/tasks.c **** 
4754:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4755:../Dave/Generated/FREERTOS/tasks.c **** 
4756:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4757:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4758:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4759:../Dave/Generated/FREERTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4760:../Dave/Generated/FREERTOS/tasks.c ****                                        TickType_t xTicksToWait )
4761:../Dave/Generated/FREERTOS/tasks.c ****     {
 6491              	 .loc 1 4761 0
 6492              	 .cfi_startproc
 6493 0000 80B5     	 push {r7,lr}
 6494              	.LCFI179:
 6495              	 .cfi_def_cfa_offset 8
 6496              	 .cfi_offset 7,-8
 6497              	 .cfi_offset 14,-4
 6498 0002 86B0     	 sub sp,sp,#24
 6499              	.LCFI180:
 6500              	 .cfi_def_cfa_offset 32
 6501 0004 00AF     	 add r7,sp,#0
 6502              	.LCFI181:
 6503              	 .cfi_def_cfa_register 7
 6504 0006 F860     	 str r0,[r7,#12]
 6505 0008 B960     	 str r1,[r7,#8]
 6506 000a 7A60     	 str r2,[r7,#4]
 6507 000c 3B60     	 str r3,[r7]
4762:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
4763:../Dave/Generated/FREERTOS/tasks.c **** 
4764:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6508              	 .loc 1 4764 0
 6509 000e FB68     	 ldr r3,[r7,#12]
 6510 0010 002B     	 cmp r3,#0
 6511 0012 01D0     	 beq .L495
 6512              	 .loc 1 4764 0 is_stmt 0 discriminator 1
 6513              	
 6514 0014 72B6     	 cpsid i
 6515              	
 6516              	 .code 16
 6517              	.L496:
 6518 0016 FEE7     	 b .L496
 6519              	.L495:
4765:../Dave/Generated/FREERTOS/tasks.c **** 
4766:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 6520              	 .loc 1 4766 0 is_stmt 1
 6521 0018 FFF7FEFF 	 bl vPortEnterCritical
4767:../Dave/Generated/FREERTOS/tasks.c ****         {
4768:../Dave/Generated/FREERTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4769:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 6522              	 .loc 1 4769 0
 6523 001c 314B     	 ldr r3,.L502
 6524 001e 1A68     	 ldr r2,[r3]
 6525 0020 6821     	 mov r1,#104
 6526 0022 FB68     	 ldr r3,[r7,#12]
 6527 0024 D318     	 add r3,r2,r3
 6528 0026 5B18     	 add r3,r3,r1
 6529 0028 1B79     	 ldrb r3,[r3,#4]
 6530 002a DBB2     	 uxtb r3,r3
 6531 002c 022B     	 cmp r3,#2
 6532 002e 1ED0     	 beq .L497
4770:../Dave/Generated/FREERTOS/tasks.c ****             {
4771:../Dave/Generated/FREERTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4772:../Dave/Generated/FREERTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4773:../Dave/Generated/FREERTOS/tasks.c ****                  * clear the value to zero. */
4774:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 6533              	 .loc 1 4774 0
 6534 0030 2C4B     	 ldr r3,.L502
 6535 0032 1B68     	 ldr r3,[r3]
 6536 0034 FA68     	 ldr r2,[r7,#12]
 6537 0036 1A32     	 add r2,r2,#26
 6538 0038 9200     	 lsl r2,r2,#2
 6539 003a D258     	 ldr r2,[r2,r3]
 6540 003c B968     	 ldr r1,[r7,#8]
 6541 003e C943     	 mvn r1,r1
 6542 0040 1140     	 and r1,r2
 6543 0042 FA68     	 ldr r2,[r7,#12]
 6544 0044 1A32     	 add r2,r2,#26
 6545 0046 9200     	 lsl r2,r2,#2
 6546 0048 D150     	 str r1,[r2,r3]
4775:../Dave/Generated/FREERTOS/tasks.c **** 
4776:../Dave/Generated/FREERTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4777:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 6547              	 .loc 1 4777 0
 6548 004a 264B     	 ldr r3,.L502
 6549 004c 1A68     	 ldr r2,[r3]
 6550 004e 6821     	 mov r1,#104
 6551 0050 FB68     	 ldr r3,[r7,#12]
 6552 0052 D318     	 add r3,r2,r3
 6553 0054 5B18     	 add r3,r3,r1
 6554 0056 0122     	 mov r2,#1
 6555 0058 1A71     	 strb r2,[r3,#4]
4778:../Dave/Generated/FREERTOS/tasks.c **** 
4779:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
 6556              	 .loc 1 4779 0
 6557 005a 3B6A     	 ldr r3,[r7,#32]
 6558 005c 002B     	 cmp r3,#0
 6559 005e 06D0     	 beq .L497
4780:../Dave/Generated/FREERTOS/tasks.c ****                 {
4781:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6560              	 .loc 1 4781 0
 6561 0060 3B6A     	 ldr r3,[r7,#32]
 6562 0062 181C     	 mov r0,r3
 6563 0064 0121     	 mov r1,#1
 6564 0066 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
4782:../Dave/Generated/FREERTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4783:../Dave/Generated/FREERTOS/tasks.c **** 
4784:../Dave/Generated/FREERTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4785:../Dave/Generated/FREERTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4786:../Dave/Generated/FREERTOS/tasks.c ****                      * critical section exits) - but it is not something that
4787:../Dave/Generated/FREERTOS/tasks.c ****                      * application code should ever do. */
4788:../Dave/Generated/FREERTOS/tasks.c ****                     portYIELD_WITHIN_API();
 6565              	 .loc 1 4788 0
 6566 006a FFF7FEFF 	 bl vPortYield
 6567              	.L497:
4789:../Dave/Generated/FREERTOS/tasks.c ****                 }
4790:../Dave/Generated/FREERTOS/tasks.c ****                 else
4791:../Dave/Generated/FREERTOS/tasks.c ****                 {
4792:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4793:../Dave/Generated/FREERTOS/tasks.c ****                 }
4794:../Dave/Generated/FREERTOS/tasks.c ****             }
4795:../Dave/Generated/FREERTOS/tasks.c ****             else
4796:../Dave/Generated/FREERTOS/tasks.c ****             {
4797:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4798:../Dave/Generated/FREERTOS/tasks.c ****             }
4799:../Dave/Generated/FREERTOS/tasks.c ****         }
4800:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 6568              	 .loc 1 4800 0
 6569 006e FFF7FEFF 	 bl vPortExitCritical
4801:../Dave/Generated/FREERTOS/tasks.c **** 
4802:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 6570              	 .loc 1 4802 0
 6571 0072 FFF7FEFF 	 bl vPortEnterCritical
4803:../Dave/Generated/FREERTOS/tasks.c ****         {
4804:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4805:../Dave/Generated/FREERTOS/tasks.c **** 
4806:../Dave/Generated/FREERTOS/tasks.c ****             if( pulNotificationValue != NULL )
 6572              	 .loc 1 4806 0
 6573 0076 3B68     	 ldr r3,[r7]
 6574 0078 002B     	 cmp r3,#0
 6575 007a 07D0     	 beq .L498
4807:../Dave/Generated/FREERTOS/tasks.c ****             {
4808:../Dave/Generated/FREERTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4809:../Dave/Generated/FREERTOS/tasks.c ****                  * have changed. */
4810:../Dave/Generated/FREERTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 6576              	 .loc 1 4810 0
 6577 007c 194B     	 ldr r3,.L502
 6578 007e 1B68     	 ldr r3,[r3]
 6579 0080 FA68     	 ldr r2,[r7,#12]
 6580 0082 1A32     	 add r2,r2,#26
 6581 0084 9200     	 lsl r2,r2,#2
 6582 0086 D258     	 ldr r2,[r2,r3]
 6583 0088 3B68     	 ldr r3,[r7]
 6584 008a 1A60     	 str r2,[r3]
 6585              	.L498:
4811:../Dave/Generated/FREERTOS/tasks.c ****             }
4812:../Dave/Generated/FREERTOS/tasks.c **** 
4813:../Dave/Generated/FREERTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4814:../Dave/Generated/FREERTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4815:../Dave/Generated/FREERTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4816:../Dave/Generated/FREERTOS/tasks.c ****              * unblocked because of a timeout. */
4817:../Dave/Generated/FREERTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 6586              	 .loc 1 4817 0
 6587 008c 154B     	 ldr r3,.L502
 6588 008e 1A68     	 ldr r2,[r3]
 6589 0090 6821     	 mov r1,#104
 6590 0092 FB68     	 ldr r3,[r7,#12]
 6591 0094 D318     	 add r3,r2,r3
 6592 0096 5B18     	 add r3,r3,r1
 6593 0098 1B79     	 ldrb r3,[r3,#4]
 6594 009a DBB2     	 uxtb r3,r3
 6595 009c 022B     	 cmp r3,#2
 6596 009e 02D0     	 beq .L499
4818:../Dave/Generated/FREERTOS/tasks.c ****             {
4819:../Dave/Generated/FREERTOS/tasks.c ****                 /* A notification was not received. */
4820:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFALSE;
 6597              	 .loc 1 4820 0
 6598 00a0 0023     	 mov r3,#0
 6599 00a2 7B61     	 str r3,[r7,#20]
 6600 00a4 0EE0     	 b .L500
 6601              	.L499:
4821:../Dave/Generated/FREERTOS/tasks.c ****             }
4822:../Dave/Generated/FREERTOS/tasks.c ****             else
4823:../Dave/Generated/FREERTOS/tasks.c ****             {
4824:../Dave/Generated/FREERTOS/tasks.c ****                 /* A notification was already pending or a notification was
4825:../Dave/Generated/FREERTOS/tasks.c ****                  * received while the task was waiting. */
4826:../Dave/Generated/FREERTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 6602              	 .loc 1 4826 0
 6603 00a6 0F4B     	 ldr r3,.L502
 6604 00a8 1B68     	 ldr r3,[r3]
 6605 00aa FA68     	 ldr r2,[r7,#12]
 6606 00ac 1A32     	 add r2,r2,#26
 6607 00ae 9200     	 lsl r2,r2,#2
 6608 00b0 D258     	 ldr r2,[r2,r3]
 6609 00b2 7968     	 ldr r1,[r7,#4]
 6610 00b4 C943     	 mvn r1,r1
 6611 00b6 1140     	 and r1,r2
 6612 00b8 FA68     	 ldr r2,[r7,#12]
 6613 00ba 1A32     	 add r2,r2,#26
 6614 00bc 9200     	 lsl r2,r2,#2
 6615 00be D150     	 str r1,[r2,r3]
4827:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdTRUE;
 6616              	 .loc 1 4827 0
 6617 00c0 0123     	 mov r3,#1
 6618 00c2 7B61     	 str r3,[r7,#20]
 6619              	.L500:
4828:../Dave/Generated/FREERTOS/tasks.c ****             }
4829:../Dave/Generated/FREERTOS/tasks.c **** 
4830:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 6620              	 .loc 1 4830 0
 6621 00c4 074B     	 ldr r3,.L502
 6622 00c6 1A68     	 ldr r2,[r3]
 6623 00c8 6821     	 mov r1,#104
 6624 00ca FB68     	 ldr r3,[r7,#12]
 6625 00cc D318     	 add r3,r2,r3
 6626 00ce 5B18     	 add r3,r3,r1
 6627 00d0 0022     	 mov r2,#0
 6628 00d2 1A71     	 strb r2,[r3,#4]
4831:../Dave/Generated/FREERTOS/tasks.c ****         }
4832:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 6629              	 .loc 1 4832 0
 6630 00d4 FFF7FEFF 	 bl vPortExitCritical
4833:../Dave/Generated/FREERTOS/tasks.c **** 
4834:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6631              	 .loc 1 4834 0
 6632 00d8 7B69     	 ldr r3,[r7,#20]
4835:../Dave/Generated/FREERTOS/tasks.c ****     }
 6633              	 .loc 1 4835 0
 6634 00da 181C     	 mov r0,r3
 6635 00dc BD46     	 mov sp,r7
 6636 00de 06B0     	 add sp,sp,#24
 6637              	 
 6638 00e0 80BD     	 pop {r7,pc}
 6639              	.L503:
 6640 00e2 C046     	 .align 2
 6641              	.L502:
 6642 00e4 00000000 	 .word pxCurrentTCB
 6643              	 .cfi_endproc
 6644              	.LFE104:
 6646              	 .section .text.xTaskGenericNotify,"ax",%progbits
 6647              	 .align 2
 6648              	 .global xTaskGenericNotify
 6649              	 .code 16
 6650              	 .thumb_func
 6652              	xTaskGenericNotify:
 6653              	.LFB105:
4836:../Dave/Generated/FREERTOS/tasks.c **** 
4837:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4838:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4839:../Dave/Generated/FREERTOS/tasks.c **** 
4840:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4841:../Dave/Generated/FREERTOS/tasks.c **** 
4842:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4843:../Dave/Generated/FREERTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4844:../Dave/Generated/FREERTOS/tasks.c ****                                    uint32_t ulValue,
4845:../Dave/Generated/FREERTOS/tasks.c ****                                    eNotifyAction eAction,
4846:../Dave/Generated/FREERTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4847:../Dave/Generated/FREERTOS/tasks.c ****     {
 6654              	 .loc 1 4847 0
 6655              	 .cfi_startproc
 6656 0000 80B5     	 push {r7,lr}
 6657              	.LCFI182:
 6658              	 .cfi_def_cfa_offset 8
 6659              	 .cfi_offset 7,-8
 6660              	 .cfi_offset 14,-4
 6661 0002 88B0     	 sub sp,sp,#32
 6662              	.LCFI183:
 6663              	 .cfi_def_cfa_offset 40
 6664 0004 00AF     	 add r7,sp,#0
 6665              	.LCFI184:
 6666              	 .cfi_def_cfa_register 7
 6667 0006 F860     	 str r0,[r7,#12]
 6668 0008 B960     	 str r1,[r7,#8]
 6669 000a 7A60     	 str r2,[r7,#4]
 6670 000c 1A1C     	 mov r2,r3
 6671 000e FB1C     	 add r3,r7,#3
 6672 0010 1A70     	 strb r2,[r3]
4848:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
4849:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 6673              	 .loc 1 4849 0
 6674 0012 0123     	 mov r3,#1
 6675 0014 FB61     	 str r3,[r7,#28]
4850:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4851:../Dave/Generated/FREERTOS/tasks.c **** 
4852:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6676              	 .loc 1 4852 0
 6677 0016 BB68     	 ldr r3,[r7,#8]
 6678 0018 002B     	 cmp r3,#0
 6679 001a 01D0     	 beq .L505
 6680              	 .loc 1 4852 0 is_stmt 0 discriminator 1
 6681              	
 6682 001c 72B6     	 cpsid i
 6683              	
 6684              	 .code 16
 6685              	.L506:
 6686 001e FEE7     	 b .L506
 6687              	.L505:
4853:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6688              	 .loc 1 4853 0 is_stmt 1
 6689 0020 FB68     	 ldr r3,[r7,#12]
 6690 0022 002B     	 cmp r3,#0
 6691 0024 01D1     	 bne .L507
 6692              	 .loc 1 4853 0 is_stmt 0 discriminator 1
 6693              	
 6694 0026 72B6     	 cpsid i
 6695              	
 6696              	 .code 16
 6697              	.L508:
 6698              	 .loc 1 4853 0 discriminator 2
 6699 0028 FEE7     	 b .L508
 6700              	.L507:
4854:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 6701              	 .loc 1 4854 0 is_stmt 1
 6702 002a FB68     	 ldr r3,[r7,#12]
 6703 002c BB61     	 str r3,[r7,#24]
4855:../Dave/Generated/FREERTOS/tasks.c **** 
4856:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 6704              	 .loc 1 4856 0
 6705 002e FFF7FEFF 	 bl vPortEnterCritical
4857:../Dave/Generated/FREERTOS/tasks.c ****         {
4858:../Dave/Generated/FREERTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 6706              	 .loc 1 4858 0
 6707 0032 BB6A     	 ldr r3,[r7,#40]
 6708 0034 002B     	 cmp r3,#0
 6709 0036 06D0     	 beq .L509
4859:../Dave/Generated/FREERTOS/tasks.c ****             {
4860:../Dave/Generated/FREERTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 6710              	 .loc 1 4860 0
 6711 0038 BB69     	 ldr r3,[r7,#24]
 6712 003a BA68     	 ldr r2,[r7,#8]
 6713 003c 1A32     	 add r2,r2,#26
 6714 003e 9200     	 lsl r2,r2,#2
 6715 0040 D258     	 ldr r2,[r2,r3]
 6716 0042 BB6A     	 ldr r3,[r7,#40]
 6717 0044 1A60     	 str r2,[r3]
 6718              	.L509:
4861:../Dave/Generated/FREERTOS/tasks.c ****             }
4862:../Dave/Generated/FREERTOS/tasks.c **** 
4863:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 6719              	 .loc 1 4863 0
 6720 0046 1723     	 mov r3,#23
 6721 0048 FB18     	 add r3,r7,r3
 6722 004a B969     	 ldr r1,[r7,#24]
 6723 004c 6820     	 mov r0,#104
 6724 004e BA68     	 ldr r2,[r7,#8]
 6725 0050 8A18     	 add r2,r1,r2
 6726 0052 1218     	 add r2,r2,r0
 6727 0054 1279     	 ldrb r2,[r2,#4]
 6728 0056 1A70     	 strb r2,[r3]
4864:../Dave/Generated/FREERTOS/tasks.c **** 
4865:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6729              	 .loc 1 4865 0
 6730 0058 BA69     	 ldr r2,[r7,#24]
 6731 005a 6821     	 mov r1,#104
 6732 005c BB68     	 ldr r3,[r7,#8]
 6733 005e D318     	 add r3,r2,r3
 6734 0060 5B18     	 add r3,r3,r1
 6735 0062 0222     	 mov r2,#2
 6736 0064 1A71     	 strb r2,[r3,#4]
4866:../Dave/Generated/FREERTOS/tasks.c **** 
4867:../Dave/Generated/FREERTOS/tasks.c ****             switch( eAction )
 6737              	 .loc 1 4867 0
 6738 0066 FB1C     	 add r3,r7,#3
 6739 0068 1B78     	 ldrb r3,[r3]
 6740 006a 042B     	 cmp r3,#4
 6741 006c 34D8     	 bhi .L510
 6742 006e 9A00     	 lsl r2,r3,#2
 6743 0070 394B     	 ldr r3,.L528
 6744 0072 D318     	 add r3,r2,r3
 6745 0074 1B68     	 ldr r3,[r3]
 6746 0076 9F46     	 mov pc,r3
 6747              	 .section .rodata.xTaskGenericNotify,"a",%progbits
 6748              	 .align 2
 6749              	.L512:
 6750 0000 E6000000 	 .word .L527
 6751 0004 78000000 	 .word .L513
 6752 0008 94000000 	 .word .L514
 6753 000c AC000000 	 .word .L515
 6754 0010 BA000000 	 .word .L516
 6755              	 .section .text.xTaskGenericNotify
 6756              	.L513:
4868:../Dave/Generated/FREERTOS/tasks.c ****             {
4869:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetBits:
4870:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 6757              	 .loc 1 4870 0
 6758 0078 BB69     	 ldr r3,[r7,#24]
 6759 007a BA68     	 ldr r2,[r7,#8]
 6760 007c 1A32     	 add r2,r2,#26
 6761 007e 9200     	 lsl r2,r2,#2
 6762 0080 D258     	 ldr r2,[r2,r3]
 6763 0082 7B68     	 ldr r3,[r7,#4]
 6764 0084 1A43     	 orr r2,r3
 6765 0086 111C     	 mov r1,r2
 6766 0088 BB69     	 ldr r3,[r7,#24]
 6767 008a BA68     	 ldr r2,[r7,#8]
 6768 008c 1A32     	 add r2,r2,#26
 6769 008e 9200     	 lsl r2,r2,#2
 6770 0090 D150     	 str r1,[r2,r3]
4871:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 6771              	 .loc 1 4871 0
 6772 0092 29E0     	 b .L517
 6773              	.L514:
4872:../Dave/Generated/FREERTOS/tasks.c **** 
4873:../Dave/Generated/FREERTOS/tasks.c ****                 case eIncrement:
4874:../Dave/Generated/FREERTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 6774              	 .loc 1 4874 0
 6775 0094 BB69     	 ldr r3,[r7,#24]
 6776 0096 BA68     	 ldr r2,[r7,#8]
 6777 0098 1A32     	 add r2,r2,#26
 6778 009a 9200     	 lsl r2,r2,#2
 6779 009c D358     	 ldr r3,[r2,r3]
 6780 009e 591C     	 add r1,r3,#1
 6781 00a0 BB69     	 ldr r3,[r7,#24]
 6782 00a2 BA68     	 ldr r2,[r7,#8]
 6783 00a4 1A32     	 add r2,r2,#26
 6784 00a6 9200     	 lsl r2,r2,#2
 6785 00a8 D150     	 str r1,[r2,r3]
4875:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 6786              	 .loc 1 4875 0
 6787 00aa 1DE0     	 b .L517
 6788              	.L515:
4876:../Dave/Generated/FREERTOS/tasks.c **** 
4877:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithOverwrite:
4878:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 6789              	 .loc 1 4878 0
 6790 00ac BB69     	 ldr r3,[r7,#24]
 6791 00ae BA68     	 ldr r2,[r7,#8]
 6792 00b0 1A32     	 add r2,r2,#26
 6793 00b2 9200     	 lsl r2,r2,#2
 6794 00b4 7968     	 ldr r1,[r7,#4]
 6795 00b6 D150     	 str r1,[r2,r3]
4879:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 6796              	 .loc 1 4879 0
 6797 00b8 16E0     	 b .L517
 6798              	.L516:
4880:../Dave/Generated/FREERTOS/tasks.c **** 
4881:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4882:../Dave/Generated/FREERTOS/tasks.c **** 
4883:../Dave/Generated/FREERTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 6799              	 .loc 1 4883 0
 6800 00ba 1723     	 mov r3,#23
 6801 00bc FB18     	 add r3,r7,r3
 6802 00be 1B78     	 ldrb r3,[r3]
 6803 00c0 022B     	 cmp r3,#2
 6804 00c2 06D0     	 beq .L518
4884:../Dave/Generated/FREERTOS/tasks.c ****                     {
4885:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 6805              	 .loc 1 4885 0
 6806 00c4 BB69     	 ldr r3,[r7,#24]
 6807 00c6 BA68     	 ldr r2,[r7,#8]
 6808 00c8 1A32     	 add r2,r2,#26
 6809 00ca 9200     	 lsl r2,r2,#2
 6810 00cc 7968     	 ldr r1,[r7,#4]
 6811 00ce D150     	 str r1,[r2,r3]
4886:../Dave/Generated/FREERTOS/tasks.c ****                     }
4887:../Dave/Generated/FREERTOS/tasks.c ****                     else
4888:../Dave/Generated/FREERTOS/tasks.c ****                     {
4889:../Dave/Generated/FREERTOS/tasks.c ****                         /* The value could not be written to the task. */
4890:../Dave/Generated/FREERTOS/tasks.c ****                         xReturn = pdFAIL;
4891:../Dave/Generated/FREERTOS/tasks.c ****                     }
4892:../Dave/Generated/FREERTOS/tasks.c **** 
4893:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 6812              	 .loc 1 4893 0
 6813 00d0 0AE0     	 b .L517
 6814              	.L518:
4890:../Dave/Generated/FREERTOS/tasks.c ****                     }
 6815              	 .loc 1 4890 0
 6816 00d2 0023     	 mov r3,#0
 6817 00d4 FB61     	 str r3,[r7,#28]
 6818              	 .loc 1 4893 0
 6819 00d6 07E0     	 b .L517
 6820              	.L510:
4894:../Dave/Generated/FREERTOS/tasks.c **** 
4895:../Dave/Generated/FREERTOS/tasks.c ****                 case eNoAction:
4896:../Dave/Generated/FREERTOS/tasks.c **** 
4897:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is being notified without its notify value being
4898:../Dave/Generated/FREERTOS/tasks.c ****                      * updated. */
4899:../Dave/Generated/FREERTOS/tasks.c ****                     break;
4900:../Dave/Generated/FREERTOS/tasks.c **** 
4901:../Dave/Generated/FREERTOS/tasks.c ****                 default:
4902:../Dave/Generated/FREERTOS/tasks.c **** 
4903:../Dave/Generated/FREERTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4904:../Dave/Generated/FREERTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4905:../Dave/Generated/FREERTOS/tasks.c ****                      * compiler can't assume is const. */
4906:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 6821              	 .loc 1 4906 0
 6822 00d8 204B     	 ldr r3,.L528+4
 6823 00da 1B68     	 ldr r3,[r3]
 6824 00dc 002B     	 cmp r3,#0
 6825 00de 01D0     	 beq .L520
 6826              	 .loc 1 4906 0 is_stmt 0 discriminator 1
 6827              	
 6828 00e0 72B6     	 cpsid i
 6829              	
 6830              	 .code 16
 6831              	.L521:
 6832              	 .loc 1 4906 0 discriminator 3
 6833 00e2 FEE7     	 b .L521
 6834              	.L520:
4907:../Dave/Generated/FREERTOS/tasks.c **** 
4908:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 6835              	 .loc 1 4908 0 is_stmt 1
 6836 00e4 00E0     	 b .L517
 6837              	.L527:
4899:../Dave/Generated/FREERTOS/tasks.c **** 
 6838              	 .loc 1 4899 0
 6839 00e6 C046     	 mov r8,r8
 6840              	.L517:
4909:../Dave/Generated/FREERTOS/tasks.c ****             }
4910:../Dave/Generated/FREERTOS/tasks.c **** 
4911:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4912:../Dave/Generated/FREERTOS/tasks.c **** 
4913:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4914:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
4915:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 6841              	 .loc 1 4915 0
 6842 00e8 1723     	 mov r3,#23
 6843 00ea FB18     	 add r3,r7,r3
 6844 00ec 1B78     	 ldrb r3,[r3]
 6845 00ee 012B     	 cmp r3,#1
 6846 00f0 2BD1     	 bne .L522
4916:../Dave/Generated/FREERTOS/tasks.c ****             {
4917:../Dave/Generated/FREERTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 6847              	 .loc 1 4917 0
 6848 00f2 BB69     	 ldr r3,[r7,#24]
 6849 00f4 0433     	 add r3,r3,#4
 6850 00f6 181C     	 mov r0,r3
 6851 00f8 FFF7FEFF 	 bl uxListRemove
4918:../Dave/Generated/FREERTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 6852              	 .loc 1 4918 0
 6853 00fc BB69     	 ldr r3,[r7,#24]
 6854 00fe DA6A     	 ldr r2,[r3,#44]
 6855 0100 174B     	 ldr r3,.L528+8
 6856 0102 1B68     	 ldr r3,[r3]
 6857 0104 9A42     	 cmp r2,r3
 6858 0106 03D9     	 bls .L523
 6859              	 .loc 1 4918 0 is_stmt 0 discriminator 1
 6860 0108 BB69     	 ldr r3,[r7,#24]
 6861 010a DA6A     	 ldr r2,[r3,#44]
 6862 010c 144B     	 ldr r3,.L528+8
 6863 010e 1A60     	 str r2,[r3]
 6864              	.L523:
 6865              	 .loc 1 4918 0 discriminator 3
 6866 0110 BB69     	 ldr r3,[r7,#24]
 6867 0112 DA6A     	 ldr r2,[r3,#44]
 6868 0114 131C     	 mov r3,r2
 6869 0116 9B00     	 lsl r3,r3,#2
 6870 0118 9B18     	 add r3,r3,r2
 6871 011a 9B00     	 lsl r3,r3,#2
 6872 011c 114A     	 ldr r2,.L528+12
 6873 011e 9A18     	 add r2,r3,r2
 6874 0120 BB69     	 ldr r3,[r7,#24]
 6875 0122 0433     	 add r3,r3,#4
 6876 0124 101C     	 mov r0,r2
 6877 0126 191C     	 mov r1,r3
 6878 0128 FFF7FEFF 	 bl vListInsertEnd
4919:../Dave/Generated/FREERTOS/tasks.c **** 
4920:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
4921:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 6879              	 .loc 1 4921 0 is_stmt 1 discriminator 3
 6880 012c BB69     	 ldr r3,[r7,#24]
 6881 012e 9B6A     	 ldr r3,[r3,#40]
 6882 0130 002B     	 cmp r3,#0
 6883 0132 01D0     	 beq .L524
 6884              	 .loc 1 4921 0 is_stmt 0 discriminator 1
 6885              	
 6886 0134 72B6     	 cpsid i
 6887              	
 6888              	 .code 16
 6889              	.L525:
 6890              	 .loc 1 4921 0 discriminator 4
 6891 0136 FEE7     	 b .L525
 6892              	.L524:
4922:../Dave/Generated/FREERTOS/tasks.c **** 
4923:../Dave/Generated/FREERTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4924:../Dave/Generated/FREERTOS/tasks.c ****                     {
4925:../Dave/Generated/FREERTOS/tasks.c ****                         /* If a task is blocked waiting for a notification then
4926:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4927:../Dave/Generated/FREERTOS/tasks.c ****                          * out time.  If the task is unblocked for a reason other than
4928:../Dave/Generated/FREERTOS/tasks.c ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4929:../Dave/Generated/FREERTOS/tasks.c ****                          * because it will automatically get reset to a new value when
4930:../Dave/Generated/FREERTOS/tasks.c ****                          * the tick count equals xNextTaskUnblockTime.  However if
4931:../Dave/Generated/FREERTOS/tasks.c ****                          * tickless idling is used it might be more important to enter
4932:../Dave/Generated/FREERTOS/tasks.c ****                          * sleep mode at the earliest possible time - so reset
4933:../Dave/Generated/FREERTOS/tasks.c ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4934:../Dave/Generated/FREERTOS/tasks.c ****                          * earliest possible time. */
4935:../Dave/Generated/FREERTOS/tasks.c ****                         prvResetNextTaskUnblockTime();
4936:../Dave/Generated/FREERTOS/tasks.c ****                     }
4937:../Dave/Generated/FREERTOS/tasks.c ****                 #endif
4938:../Dave/Generated/FREERTOS/tasks.c **** 
4939:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 6893              	 .loc 1 4939 0 is_stmt 1
 6894 0138 BB69     	 ldr r3,[r7,#24]
 6895 013a DA6A     	 ldr r2,[r3,#44]
 6896 013c 0A4B     	 ldr r3,.L528+16
 6897 013e 1B68     	 ldr r3,[r3]
 6898 0140 DB6A     	 ldr r3,[r3,#44]
 6899 0142 9A42     	 cmp r2,r3
 6900 0144 01D9     	 bls .L522
4940:../Dave/Generated/FREERTOS/tasks.c ****                 {
4941:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
4942:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
4943:../Dave/Generated/FREERTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
 6901              	 .loc 1 4943 0
 6902 0146 FFF7FEFF 	 bl vPortYield
 6903              	.L522:
4944:../Dave/Generated/FREERTOS/tasks.c ****                 }
4945:../Dave/Generated/FREERTOS/tasks.c ****                 else
4946:../Dave/Generated/FREERTOS/tasks.c ****                 {
4947:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4948:../Dave/Generated/FREERTOS/tasks.c ****                 }
4949:../Dave/Generated/FREERTOS/tasks.c ****             }
4950:../Dave/Generated/FREERTOS/tasks.c ****             else
4951:../Dave/Generated/FREERTOS/tasks.c ****             {
4952:../Dave/Generated/FREERTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4953:../Dave/Generated/FREERTOS/tasks.c ****             }
4954:../Dave/Generated/FREERTOS/tasks.c ****         }
4955:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 6904              	 .loc 1 4955 0
 6905 014a FFF7FEFF 	 bl vPortExitCritical
4956:../Dave/Generated/FREERTOS/tasks.c **** 
4957:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 6906              	 .loc 1 4957 0
 6907 014e FB69     	 ldr r3,[r7,#28]
4958:../Dave/Generated/FREERTOS/tasks.c ****     }
 6908              	 .loc 1 4958 0
 6909 0150 181C     	 mov r0,r3
 6910 0152 BD46     	 mov sp,r7
 6911 0154 08B0     	 add sp,sp,#32
 6912              	 
 6913 0156 80BD     	 pop {r7,pc}
 6914              	.L529:
 6915              	 .align 2
 6916              	.L528:
 6917 0158 00000000 	 .word .L512
 6918 015c 00000000 	 .word xTickCount
 6919 0160 00000000 	 .word uxTopReadyPriority
 6920 0164 00000000 	 .word pxReadyTasksLists
 6921 0168 00000000 	 .word pxCurrentTCB
 6922              	 .cfi_endproc
 6923              	.LFE105:
 6925              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 6926              	 .align 2
 6927              	 .global xTaskGenericNotifyFromISR
 6928              	 .code 16
 6929              	 .thumb_func
 6931              	xTaskGenericNotifyFromISR:
 6932              	.LFB106:
4959:../Dave/Generated/FREERTOS/tasks.c **** 
4960:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4961:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4962:../Dave/Generated/FREERTOS/tasks.c **** 
4963:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4964:../Dave/Generated/FREERTOS/tasks.c **** 
4965:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4966:../Dave/Generated/FREERTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4967:../Dave/Generated/FREERTOS/tasks.c ****                                           uint32_t ulValue,
4968:../Dave/Generated/FREERTOS/tasks.c ****                                           eNotifyAction eAction,
4969:../Dave/Generated/FREERTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4970:../Dave/Generated/FREERTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4971:../Dave/Generated/FREERTOS/tasks.c ****     {
 6933              	 .loc 1 4971 0
 6934              	 .cfi_startproc
 6935 0000 80B5     	 push {r7,lr}
 6936              	.LCFI185:
 6937              	 .cfi_def_cfa_offset 8
 6938              	 .cfi_offset 7,-8
 6939              	 .cfi_offset 14,-4
 6940 0002 88B0     	 sub sp,sp,#32
 6941              	.LCFI186:
 6942              	 .cfi_def_cfa_offset 40
 6943 0004 00AF     	 add r7,sp,#0
 6944              	.LCFI187:
 6945              	 .cfi_def_cfa_register 7
 6946 0006 F860     	 str r0,[r7,#12]
 6947 0008 B960     	 str r1,[r7,#8]
 6948 000a 7A60     	 str r2,[r7,#4]
 6949 000c 1A1C     	 mov r2,r3
 6950 000e FB1C     	 add r3,r7,#3
 6951 0010 1A70     	 strb r2,[r3]
4972:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
4973:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4974:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 6952              	 .loc 1 4974 0
 6953 0012 0123     	 mov r3,#1
 6954 0014 FB61     	 str r3,[r7,#28]
4975:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4976:../Dave/Generated/FREERTOS/tasks.c **** 
4977:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 6955              	 .loc 1 4977 0
 6956 0016 FB68     	 ldr r3,[r7,#12]
 6957 0018 002B     	 cmp r3,#0
 6958 001a 01D1     	 bne .L531
 6959              	 .loc 1 4977 0 is_stmt 0 discriminator 1
 6960              	
 6961 001c 72B6     	 cpsid i
 6962              	
 6963              	 .code 16
 6964              	.L532:
 6965 001e FEE7     	 b .L532
 6966              	.L531:
4978:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6967              	 .loc 1 4978 0 is_stmt 1
 6968 0020 BB68     	 ldr r3,[r7,#8]
 6969 0022 002B     	 cmp r3,#0
 6970 0024 01D0     	 beq .L533
 6971              	 .loc 1 4978 0 is_stmt 0 discriminator 1
 6972              	
 6973 0026 72B6     	 cpsid i
 6974              	
 6975              	 .code 16
 6976              	.L534:
 6977              	 .loc 1 4978 0 discriminator 2
 6978 0028 FEE7     	 b .L534
 6979              	.L533:
4979:../Dave/Generated/FREERTOS/tasks.c **** 
4980:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4981:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4982:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4983:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4984:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4985:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4986:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4987:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4988:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4989:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4990:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4991:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4992:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
4993:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
4994:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
4995:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4996:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4997:../Dave/Generated/FREERTOS/tasks.c **** 
4998:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 6980              	 .loc 1 4998 0 is_stmt 1
 6981 002a FB68     	 ldr r3,[r7,#12]
 6982 002c BB61     	 str r3,[r7,#24]
4999:../Dave/Generated/FREERTOS/tasks.c **** 
5000:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 6983              	 .loc 1 5000 0
 6984 002e FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 6985 0032 031C     	 mov r3,r0
 6986 0034 7B61     	 str r3,[r7,#20]
5001:../Dave/Generated/FREERTOS/tasks.c ****         {
5002:../Dave/Generated/FREERTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
 6987              	 .loc 1 5002 0
 6988 0036 BB6A     	 ldr r3,[r7,#40]
 6989 0038 002B     	 cmp r3,#0
 6990 003a 06D0     	 beq .L535
5003:../Dave/Generated/FREERTOS/tasks.c ****             {
5004:../Dave/Generated/FREERTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 6991              	 .loc 1 5004 0
 6992 003c BB69     	 ldr r3,[r7,#24]
 6993 003e BA68     	 ldr r2,[r7,#8]
 6994 0040 1A32     	 add r2,r2,#26
 6995 0042 9200     	 lsl r2,r2,#2
 6996 0044 D258     	 ldr r2,[r2,r3]
 6997 0046 BB6A     	 ldr r3,[r7,#40]
 6998 0048 1A60     	 str r2,[r3]
 6999              	.L535:
5005:../Dave/Generated/FREERTOS/tasks.c ****             }
5006:../Dave/Generated/FREERTOS/tasks.c **** 
5007:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7000              	 .loc 1 5007 0
 7001 004a 1323     	 mov r3,#19
 7002 004c FB18     	 add r3,r7,r3
 7003 004e B969     	 ldr r1,[r7,#24]
 7004 0050 6820     	 mov r0,#104
 7005 0052 BA68     	 ldr r2,[r7,#8]
 7006 0054 8A18     	 add r2,r1,r2
 7007 0056 1218     	 add r2,r2,r0
 7008 0058 1279     	 ldrb r2,[r2,#4]
 7009 005a 1A70     	 strb r2,[r3]
5008:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7010              	 .loc 1 5008 0
 7011 005c BA69     	 ldr r2,[r7,#24]
 7012 005e 6821     	 mov r1,#104
 7013 0060 BB68     	 ldr r3,[r7,#8]
 7014 0062 D318     	 add r3,r2,r3
 7015 0064 5B18     	 add r3,r3,r1
 7016 0066 0222     	 mov r2,#2
 7017 0068 1A71     	 strb r2,[r3,#4]
5009:../Dave/Generated/FREERTOS/tasks.c **** 
5010:../Dave/Generated/FREERTOS/tasks.c ****             switch( eAction )
 7018              	 .loc 1 5010 0
 7019 006a FB1C     	 add r3,r7,#3
 7020 006c 1B78     	 ldrb r3,[r3]
 7021 006e 042B     	 cmp r3,#4
 7022 0070 34D8     	 bhi .L536
 7023 0072 9A00     	 lsl r2,r3,#2
 7024 0074 444B     	 ldr r3,.L557
 7025 0076 D318     	 add r3,r2,r3
 7026 0078 1B68     	 ldr r3,[r3]
 7027 007a 9F46     	 mov pc,r3
 7028              	 .section .rodata.xTaskGenericNotifyFromISR,"a",%progbits
 7029              	 .align 2
 7030              	.L538:
 7031 0000 EA000000 	 .word .L556
 7032 0004 7C000000 	 .word .L539
 7033 0008 98000000 	 .word .L540
 7034 000c B0000000 	 .word .L541
 7035 0010 BE000000 	 .word .L542
 7036              	 .section .text.xTaskGenericNotifyFromISR
 7037              	.L539:
5011:../Dave/Generated/FREERTOS/tasks.c ****             {
5012:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetBits:
5013:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 7038              	 .loc 1 5013 0
 7039 007c BB69     	 ldr r3,[r7,#24]
 7040 007e BA68     	 ldr r2,[r7,#8]
 7041 0080 1A32     	 add r2,r2,#26
 7042 0082 9200     	 lsl r2,r2,#2
 7043 0084 D258     	 ldr r2,[r2,r3]
 7044 0086 7B68     	 ldr r3,[r7,#4]
 7045 0088 1A43     	 orr r2,r3
 7046 008a 111C     	 mov r1,r2
 7047 008c BB69     	 ldr r3,[r7,#24]
 7048 008e BA68     	 ldr r2,[r7,#8]
 7049 0090 1A32     	 add r2,r2,#26
 7050 0092 9200     	 lsl r2,r2,#2
 7051 0094 D150     	 str r1,[r2,r3]
5014:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7052              	 .loc 1 5014 0
 7053 0096 29E0     	 b .L543
 7054              	.L540:
5015:../Dave/Generated/FREERTOS/tasks.c **** 
5016:../Dave/Generated/FREERTOS/tasks.c ****                 case eIncrement:
5017:../Dave/Generated/FREERTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 7055              	 .loc 1 5017 0
 7056 0098 BB69     	 ldr r3,[r7,#24]
 7057 009a BA68     	 ldr r2,[r7,#8]
 7058 009c 1A32     	 add r2,r2,#26
 7059 009e 9200     	 lsl r2,r2,#2
 7060 00a0 D358     	 ldr r3,[r2,r3]
 7061 00a2 591C     	 add r1,r3,#1
 7062 00a4 BB69     	 ldr r3,[r7,#24]
 7063 00a6 BA68     	 ldr r2,[r7,#8]
 7064 00a8 1A32     	 add r2,r2,#26
 7065 00aa 9200     	 lsl r2,r2,#2
 7066 00ac D150     	 str r1,[r2,r3]
5018:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7067              	 .loc 1 5018 0
 7068 00ae 1DE0     	 b .L543
 7069              	.L541:
5019:../Dave/Generated/FREERTOS/tasks.c **** 
5020:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithOverwrite:
5021:../Dave/Generated/FREERTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7070              	 .loc 1 5021 0
 7071 00b0 BB69     	 ldr r3,[r7,#24]
 7072 00b2 BA68     	 ldr r2,[r7,#8]
 7073 00b4 1A32     	 add r2,r2,#26
 7074 00b6 9200     	 lsl r2,r2,#2
 7075 00b8 7968     	 ldr r1,[r7,#4]
 7076 00ba D150     	 str r1,[r2,r3]
5022:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7077              	 .loc 1 5022 0
 7078 00bc 16E0     	 b .L543
 7079              	.L542:
5023:../Dave/Generated/FREERTOS/tasks.c **** 
5024:../Dave/Generated/FREERTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5025:../Dave/Generated/FREERTOS/tasks.c **** 
5026:../Dave/Generated/FREERTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7080              	 .loc 1 5026 0
 7081 00be 1323     	 mov r3,#19
 7082 00c0 FB18     	 add r3,r7,r3
 7083 00c2 1B78     	 ldrb r3,[r3]
 7084 00c4 022B     	 cmp r3,#2
 7085 00c6 06D0     	 beq .L544
5027:../Dave/Generated/FREERTOS/tasks.c ****                     {
5028:../Dave/Generated/FREERTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 7086              	 .loc 1 5028 0
 7087 00c8 BB69     	 ldr r3,[r7,#24]
 7088 00ca BA68     	 ldr r2,[r7,#8]
 7089 00cc 1A32     	 add r2,r2,#26
 7090 00ce 9200     	 lsl r2,r2,#2
 7091 00d0 7968     	 ldr r1,[r7,#4]
 7092 00d2 D150     	 str r1,[r2,r3]
5029:../Dave/Generated/FREERTOS/tasks.c ****                     }
5030:../Dave/Generated/FREERTOS/tasks.c ****                     else
5031:../Dave/Generated/FREERTOS/tasks.c ****                     {
5032:../Dave/Generated/FREERTOS/tasks.c ****                         /* The value could not be written to the task. */
5033:../Dave/Generated/FREERTOS/tasks.c ****                         xReturn = pdFAIL;
5034:../Dave/Generated/FREERTOS/tasks.c ****                     }
5035:../Dave/Generated/FREERTOS/tasks.c **** 
5036:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7093              	 .loc 1 5036 0
 7094 00d4 0AE0     	 b .L543
 7095              	.L544:
5033:../Dave/Generated/FREERTOS/tasks.c ****                     }
 7096              	 .loc 1 5033 0
 7097 00d6 0023     	 mov r3,#0
 7098 00d8 FB61     	 str r3,[r7,#28]
 7099              	 .loc 1 5036 0
 7100 00da 07E0     	 b .L543
 7101              	.L536:
5037:../Dave/Generated/FREERTOS/tasks.c **** 
5038:../Dave/Generated/FREERTOS/tasks.c ****                 case eNoAction:
5039:../Dave/Generated/FREERTOS/tasks.c **** 
5040:../Dave/Generated/FREERTOS/tasks.c ****                     /* The task is being notified without its notify value being
5041:../Dave/Generated/FREERTOS/tasks.c ****                      * updated. */
5042:../Dave/Generated/FREERTOS/tasks.c ****                     break;
5043:../Dave/Generated/FREERTOS/tasks.c **** 
5044:../Dave/Generated/FREERTOS/tasks.c ****                 default:
5045:../Dave/Generated/FREERTOS/tasks.c **** 
5046:../Dave/Generated/FREERTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5047:../Dave/Generated/FREERTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5048:../Dave/Generated/FREERTOS/tasks.c ****                      * compiler can't assume is const. */
5049:../Dave/Generated/FREERTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
 7102              	 .loc 1 5049 0
 7103 00dc 2B4B     	 ldr r3,.L557+4
 7104 00de 1B68     	 ldr r3,[r3]
 7105 00e0 002B     	 cmp r3,#0
 7106 00e2 01D0     	 beq .L546
 7107              	 .loc 1 5049 0 is_stmt 0 discriminator 1
 7108              	
 7109 00e4 72B6     	 cpsid i
 7110              	
 7111              	 .code 16
 7112              	.L547:
 7113              	 .loc 1 5049 0 discriminator 3
 7114 00e6 FEE7     	 b .L547
 7115              	.L546:
5050:../Dave/Generated/FREERTOS/tasks.c ****                     break;
 7116              	 .loc 1 5050 0 is_stmt 1
 7117 00e8 00E0     	 b .L543
 7118              	.L556:
5042:../Dave/Generated/FREERTOS/tasks.c **** 
 7119              	 .loc 1 5042 0
 7120 00ea C046     	 mov r8,r8
 7121              	.L543:
5051:../Dave/Generated/FREERTOS/tasks.c ****             }
5052:../Dave/Generated/FREERTOS/tasks.c **** 
5053:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5054:../Dave/Generated/FREERTOS/tasks.c **** 
5055:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5056:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
5057:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7122              	 .loc 1 5057 0
 7123 00ec 1323     	 mov r3,#19
 7124 00ee FB18     	 add r3,r7,r3
 7125 00f0 1B78     	 ldrb r3,[r3]
 7126 00f2 012B     	 cmp r3,#1
 7127 00f4 3ED1     	 bne .L548
5058:../Dave/Generated/FREERTOS/tasks.c ****             {
5059:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
5060:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7128              	 .loc 1 5060 0
 7129 00f6 BB69     	 ldr r3,[r7,#24]
 7130 00f8 9B6A     	 ldr r3,[r3,#40]
 7131 00fa 002B     	 cmp r3,#0
 7132 00fc 01D0     	 beq .L549
 7133              	 .loc 1 5060 0 is_stmt 0 discriminator 1
 7134              	
 7135 00fe 72B6     	 cpsid i
 7136              	
 7137              	 .code 16
 7138              	.L550:
 7139              	 .loc 1 5060 0 discriminator 4
 7140 0100 FEE7     	 b .L550
 7141              	.L549:
5061:../Dave/Generated/FREERTOS/tasks.c **** 
5062:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7142              	 .loc 1 5062 0 is_stmt 1
 7143 0102 234B     	 ldr r3,.L557+8
 7144 0104 1B68     	 ldr r3,[r3]
 7145 0106 002B     	 cmp r3,#0
 7146 0108 1DD1     	 bne .L551
5063:../Dave/Generated/FREERTOS/tasks.c ****                 {
5064:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7147              	 .loc 1 5064 0
 7148 010a BB69     	 ldr r3,[r7,#24]
 7149 010c 0433     	 add r3,r3,#4
 7150 010e 181C     	 mov r0,r3
 7151 0110 FFF7FEFF 	 bl uxListRemove
5065:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7152              	 .loc 1 5065 0
 7153 0114 BB69     	 ldr r3,[r7,#24]
 7154 0116 DA6A     	 ldr r2,[r3,#44]
 7155 0118 1E4B     	 ldr r3,.L557+12
 7156 011a 1B68     	 ldr r3,[r3]
 7157 011c 9A42     	 cmp r2,r3
 7158 011e 03D9     	 bls .L552
 7159              	 .loc 1 5065 0 is_stmt 0 discriminator 1
 7160 0120 BB69     	 ldr r3,[r7,#24]
 7161 0122 DA6A     	 ldr r2,[r3,#44]
 7162 0124 1B4B     	 ldr r3,.L557+12
 7163 0126 1A60     	 str r2,[r3]
 7164              	.L552:
 7165              	 .loc 1 5065 0 discriminator 3
 7166 0128 BB69     	 ldr r3,[r7,#24]
 7167 012a DA6A     	 ldr r2,[r3,#44]
 7168 012c 131C     	 mov r3,r2
 7169 012e 9B00     	 lsl r3,r3,#2
 7170 0130 9B18     	 add r3,r3,r2
 7171 0132 9B00     	 lsl r3,r3,#2
 7172 0134 184A     	 ldr r2,.L557+16
 7173 0136 9A18     	 add r2,r3,r2
 7174 0138 BB69     	 ldr r3,[r7,#24]
 7175 013a 0433     	 add r3,r3,#4
 7176 013c 101C     	 mov r0,r2
 7177 013e 191C     	 mov r1,r3
 7178 0140 FFF7FEFF 	 bl vListInsertEnd
 7179 0144 06E0     	 b .L553
 7180              	.L551:
5066:../Dave/Generated/FREERTOS/tasks.c ****                 }
5067:../Dave/Generated/FREERTOS/tasks.c ****                 else
5068:../Dave/Generated/FREERTOS/tasks.c ****                 {
5069:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5070:../Dave/Generated/FREERTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5071:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7181              	 .loc 1 5071 0 is_stmt 1
 7182 0146 BB69     	 ldr r3,[r7,#24]
 7183 0148 1833     	 add r3,r3,#24
 7184 014a 144A     	 ldr r2,.L557+20
 7185 014c 101C     	 mov r0,r2
 7186 014e 191C     	 mov r1,r3
 7187 0150 FFF7FEFF 	 bl vListInsertEnd
 7188              	.L553:
5072:../Dave/Generated/FREERTOS/tasks.c ****                 }
5073:../Dave/Generated/FREERTOS/tasks.c **** 
5074:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7189              	 .loc 1 5074 0
 7190 0154 BB69     	 ldr r3,[r7,#24]
 7191 0156 DA6A     	 ldr r2,[r3,#44]
 7192 0158 114B     	 ldr r3,.L557+24
 7193 015a 1B68     	 ldr r3,[r3]
 7194 015c DB6A     	 ldr r3,[r3,#44]
 7195 015e 9A42     	 cmp r2,r3
 7196 0160 08D9     	 bls .L548
5075:../Dave/Generated/FREERTOS/tasks.c ****                 {
5076:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
5077:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
5078:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 7197              	 .loc 1 5078 0
 7198 0162 FB6A     	 ldr r3,[r7,#44]
 7199 0164 002B     	 cmp r3,#0
 7200 0166 02D0     	 beq .L554
5079:../Dave/Generated/FREERTOS/tasks.c ****                     {
5080:../Dave/Generated/FREERTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 7201              	 .loc 1 5080 0
 7202 0168 FB6A     	 ldr r3,[r7,#44]
 7203 016a 0122     	 mov r2,#1
 7204 016c 1A60     	 str r2,[r3]
 7205              	.L554:
5081:../Dave/Generated/FREERTOS/tasks.c ****                     }
5082:../Dave/Generated/FREERTOS/tasks.c **** 
5083:../Dave/Generated/FREERTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5084:../Dave/Generated/FREERTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5085:../Dave/Generated/FREERTOS/tasks.c ****                      * safe FreeRTOS function. */
5086:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldPending = pdTRUE;
 7206              	 .loc 1 5086 0
 7207 016e 0D4B     	 ldr r3,.L557+28
 7208 0170 0122     	 mov r2,#1
 7209 0172 1A60     	 str r2,[r3]
 7210              	.L548:
5087:../Dave/Generated/FREERTOS/tasks.c ****                 }
5088:../Dave/Generated/FREERTOS/tasks.c ****                 else
5089:../Dave/Generated/FREERTOS/tasks.c ****                 {
5090:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5091:../Dave/Generated/FREERTOS/tasks.c ****                 }
5092:../Dave/Generated/FREERTOS/tasks.c ****             }
5093:../Dave/Generated/FREERTOS/tasks.c ****         }
5094:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 7211              	 .loc 1 5094 0
 7212 0174 7B69     	 ldr r3,[r7,#20]
 7213 0176 181C     	 mov r0,r3
 7214 0178 FFF7FEFF 	 bl vClearInterruptMaskFromISR
5095:../Dave/Generated/FREERTOS/tasks.c **** 
5096:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 7215              	 .loc 1 5096 0
 7216 017c FB69     	 ldr r3,[r7,#28]
5097:../Dave/Generated/FREERTOS/tasks.c ****     }
 7217              	 .loc 1 5097 0
 7218 017e 181C     	 mov r0,r3
 7219 0180 BD46     	 mov sp,r7
 7220 0182 08B0     	 add sp,sp,#32
 7221              	 
 7222 0184 80BD     	 pop {r7,pc}
 7223              	.L558:
 7224 0186 C046     	 .align 2
 7225              	.L557:
 7226 0188 00000000 	 .word .L538
 7227 018c 00000000 	 .word xTickCount
 7228 0190 00000000 	 .word uxSchedulerSuspended
 7229 0194 00000000 	 .word uxTopReadyPriority
 7230 0198 00000000 	 .word pxReadyTasksLists
 7231 019c 00000000 	 .word xPendingReadyList
 7232 01a0 00000000 	 .word pxCurrentTCB
 7233 01a4 00000000 	 .word xYieldPending
 7234              	 .cfi_endproc
 7235              	.LFE106:
 7237              	 .section .text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 7238              	 .align 2
 7239              	 .global vTaskGenericNotifyGiveFromISR
 7240              	 .code 16
 7241              	 .thumb_func
 7243              	vTaskGenericNotifyGiveFromISR:
 7244              	.LFB107:
5098:../Dave/Generated/FREERTOS/tasks.c **** 
5099:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5100:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5101:../Dave/Generated/FREERTOS/tasks.c **** 
5102:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5103:../Dave/Generated/FREERTOS/tasks.c **** 
5104:../Dave/Generated/FREERTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5105:../Dave/Generated/FREERTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5106:../Dave/Generated/FREERTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5107:../Dave/Generated/FREERTOS/tasks.c ****     {
 7245              	 .loc 1 5107 0
 7246              	 .cfi_startproc
 7247 0000 80B5     	 push {r7,lr}
 7248              	.LCFI188:
 7249              	 .cfi_def_cfa_offset 8
 7250              	 .cfi_offset 7,-8
 7251              	 .cfi_offset 14,-4
 7252 0002 88B0     	 sub sp,sp,#32
 7253              	.LCFI189:
 7254              	 .cfi_def_cfa_offset 40
 7255 0004 00AF     	 add r7,sp,#0
 7256              	.LCFI190:
 7257              	 .cfi_def_cfa_register 7
 7258 0006 F860     	 str r0,[r7,#12]
 7259 0008 B960     	 str r1,[r7,#8]
 7260 000a 7A60     	 str r2,[r7,#4]
5108:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5109:../Dave/Generated/FREERTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5110:../Dave/Generated/FREERTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5111:../Dave/Generated/FREERTOS/tasks.c **** 
5112:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( xTaskToNotify );
 7261              	 .loc 1 5112 0
 7262 000c FB68     	 ldr r3,[r7,#12]
 7263 000e 002B     	 cmp r3,#0
 7264 0010 01D1     	 bne .L560
 7265              	 .loc 1 5112 0 is_stmt 0 discriminator 1
 7266              	
 7267 0012 72B6     	 cpsid i
 7268              	
 7269              	 .code 16
 7270              	.L561:
 7271 0014 FEE7     	 b .L561
 7272              	.L560:
5113:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7273              	 .loc 1 5113 0 is_stmt 1
 7274 0016 BB68     	 ldr r3,[r7,#8]
 7275 0018 002B     	 cmp r3,#0
 7276 001a 01D0     	 beq .L562
 7277              	 .loc 1 5113 0 is_stmt 0 discriminator 1
 7278              	
 7279 001c 72B6     	 cpsid i
 7280              	
 7281              	 .code 16
 7282              	.L563:
 7283              	 .loc 1 5113 0 discriminator 2
 7284 001e FEE7     	 b .L563
 7285              	.L562:
5114:../Dave/Generated/FREERTOS/tasks.c **** 
5115:../Dave/Generated/FREERTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5116:../Dave/Generated/FREERTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5117:../Dave/Generated/FREERTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5118:../Dave/Generated/FREERTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5119:../Dave/Generated/FREERTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5120:../Dave/Generated/FREERTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
5121:../Dave/Generated/FREERTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5122:../Dave/Generated/FREERTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5123:../Dave/Generated/FREERTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5124:../Dave/Generated/FREERTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5125:../Dave/Generated/FREERTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5126:../Dave/Generated/FREERTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5127:../Dave/Generated/FREERTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5128:../Dave/Generated/FREERTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5129:../Dave/Generated/FREERTOS/tasks.c ****          * provided on the following link:
5130:../Dave/Generated/FREERTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5131:../Dave/Generated/FREERTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5132:../Dave/Generated/FREERTOS/tasks.c **** 
5133:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = xTaskToNotify;
 7286              	 .loc 1 5133 0 is_stmt 1
 7287 0020 FB68     	 ldr r3,[r7,#12]
 7288 0022 FB61     	 str r3,[r7,#28]
5134:../Dave/Generated/FREERTOS/tasks.c **** 
5135:../Dave/Generated/FREERTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7289              	 .loc 1 5135 0
 7290 0024 FFF7FEFF 	 bl ulSetInterruptMaskFromISR
 7291 0028 031C     	 mov r3,r0
 7292 002a BB61     	 str r3,[r7,#24]
5136:../Dave/Generated/FREERTOS/tasks.c ****         {
5137:../Dave/Generated/FREERTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 7293              	 .loc 1 5137 0
 7294 002c 1723     	 mov r3,#23
 7295 002e FB18     	 add r3,r7,r3
 7296 0030 F969     	 ldr r1,[r7,#28]
 7297 0032 6820     	 mov r0,#104
 7298 0034 BA68     	 ldr r2,[r7,#8]
 7299 0036 8A18     	 add r2,r1,r2
 7300 0038 1218     	 add r2,r2,r0
 7301 003a 1279     	 ldrb r2,[r2,#4]
 7302 003c 1A70     	 strb r2,[r3]
5138:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7303              	 .loc 1 5138 0
 7304 003e FA69     	 ldr r2,[r7,#28]
 7305 0040 6821     	 mov r1,#104
 7306 0042 BB68     	 ldr r3,[r7,#8]
 7307 0044 D318     	 add r3,r2,r3
 7308 0046 5B18     	 add r3,r3,r1
 7309 0048 0222     	 mov r2,#2
 7310 004a 1A71     	 strb r2,[r3,#4]
5139:../Dave/Generated/FREERTOS/tasks.c **** 
5140:../Dave/Generated/FREERTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5141:../Dave/Generated/FREERTOS/tasks.c ****              * semaphore. */
5142:../Dave/Generated/FREERTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 7311              	 .loc 1 5142 0
 7312 004c FB69     	 ldr r3,[r7,#28]
 7313 004e BA68     	 ldr r2,[r7,#8]
 7314 0050 1A32     	 add r2,r2,#26
 7315 0052 9200     	 lsl r2,r2,#2
 7316 0054 D358     	 ldr r3,[r2,r3]
 7317 0056 591C     	 add r1,r3,#1
 7318 0058 FB69     	 ldr r3,[r7,#28]
 7319 005a BA68     	 ldr r2,[r7,#8]
 7320 005c 1A32     	 add r2,r2,#26
 7321 005e 9200     	 lsl r2,r2,#2
 7322 0060 D150     	 str r1,[r2,r3]
5143:../Dave/Generated/FREERTOS/tasks.c **** 
5144:../Dave/Generated/FREERTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5145:../Dave/Generated/FREERTOS/tasks.c **** 
5146:../Dave/Generated/FREERTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5147:../Dave/Generated/FREERTOS/tasks.c ****              * notification then unblock it now. */
5148:../Dave/Generated/FREERTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7323              	 .loc 1 5148 0
 7324 0062 1723     	 mov r3,#23
 7325 0064 FB18     	 add r3,r7,r3
 7326 0066 1B78     	 ldrb r3,[r3]
 7327 0068 012B     	 cmp r3,#1
 7328 006a 3ED1     	 bne .L564
5149:../Dave/Generated/FREERTOS/tasks.c ****             {
5150:../Dave/Generated/FREERTOS/tasks.c ****                 /* The task should not have been on an event list. */
5151:../Dave/Generated/FREERTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7329              	 .loc 1 5151 0
 7330 006c FB69     	 ldr r3,[r7,#28]
 7331 006e 9B6A     	 ldr r3,[r3,#40]
 7332 0070 002B     	 cmp r3,#0
 7333 0072 01D0     	 beq .L565
 7334              	 .loc 1 5151 0 is_stmt 0 discriminator 1
 7335              	
 7336 0074 72B6     	 cpsid i
 7337              	
 7338              	 .code 16
 7339              	.L566:
 7340              	 .loc 1 5151 0 discriminator 3
 7341 0076 FEE7     	 b .L566
 7342              	.L565:
5152:../Dave/Generated/FREERTOS/tasks.c **** 
5153:../Dave/Generated/FREERTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7343              	 .loc 1 5153 0 is_stmt 1
 7344 0078 1F4B     	 ldr r3,.L571
 7345 007a 1B68     	 ldr r3,[r3]
 7346 007c 002B     	 cmp r3,#0
 7347 007e 1DD1     	 bne .L567
5154:../Dave/Generated/FREERTOS/tasks.c ****                 {
5155:../Dave/Generated/FREERTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7348              	 .loc 1 5155 0
 7349 0080 FB69     	 ldr r3,[r7,#28]
 7350 0082 0433     	 add r3,r3,#4
 7351 0084 181C     	 mov r0,r3
 7352 0086 FFF7FEFF 	 bl uxListRemove
5156:../Dave/Generated/FREERTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 7353              	 .loc 1 5156 0
 7354 008a FB69     	 ldr r3,[r7,#28]
 7355 008c DA6A     	 ldr r2,[r3,#44]
 7356 008e 1B4B     	 ldr r3,.L571+4
 7357 0090 1B68     	 ldr r3,[r3]
 7358 0092 9A42     	 cmp r2,r3
 7359 0094 03D9     	 bls .L568
 7360              	 .loc 1 5156 0 is_stmt 0 discriminator 1
 7361 0096 FB69     	 ldr r3,[r7,#28]
 7362 0098 DA6A     	 ldr r2,[r3,#44]
 7363 009a 184B     	 ldr r3,.L571+4
 7364 009c 1A60     	 str r2,[r3]
 7365              	.L568:
 7366              	 .loc 1 5156 0 discriminator 3
 7367 009e FB69     	 ldr r3,[r7,#28]
 7368 00a0 DA6A     	 ldr r2,[r3,#44]
 7369 00a2 131C     	 mov r3,r2
 7370 00a4 9B00     	 lsl r3,r3,#2
 7371 00a6 9B18     	 add r3,r3,r2
 7372 00a8 9B00     	 lsl r3,r3,#2
 7373 00aa 154A     	 ldr r2,.L571+8
 7374 00ac 9A18     	 add r2,r3,r2
 7375 00ae FB69     	 ldr r3,[r7,#28]
 7376 00b0 0433     	 add r3,r3,#4
 7377 00b2 101C     	 mov r0,r2
 7378 00b4 191C     	 mov r1,r3
 7379 00b6 FFF7FEFF 	 bl vListInsertEnd
 7380 00ba 06E0     	 b .L569
 7381              	.L567:
5157:../Dave/Generated/FREERTOS/tasks.c ****                 }
5158:../Dave/Generated/FREERTOS/tasks.c ****                 else
5159:../Dave/Generated/FREERTOS/tasks.c ****                 {
5160:../Dave/Generated/FREERTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5161:../Dave/Generated/FREERTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5162:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7382              	 .loc 1 5162 0 is_stmt 1
 7383 00bc FB69     	 ldr r3,[r7,#28]
 7384 00be 1833     	 add r3,r3,#24
 7385 00c0 104A     	 ldr r2,.L571+12
 7386 00c2 101C     	 mov r0,r2
 7387 00c4 191C     	 mov r1,r3
 7388 00c6 FFF7FEFF 	 bl vListInsertEnd
 7389              	.L569:
5163:../Dave/Generated/FREERTOS/tasks.c ****                 }
5164:../Dave/Generated/FREERTOS/tasks.c **** 
5165:../Dave/Generated/FREERTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7390              	 .loc 1 5165 0
 7391 00ca FB69     	 ldr r3,[r7,#28]
 7392 00cc DA6A     	 ldr r2,[r3,#44]
 7393 00ce 0E4B     	 ldr r3,.L571+16
 7394 00d0 1B68     	 ldr r3,[r3]
 7395 00d2 DB6A     	 ldr r3,[r3,#44]
 7396 00d4 9A42     	 cmp r2,r3
 7397 00d6 08D9     	 bls .L564
5166:../Dave/Generated/FREERTOS/tasks.c ****                 {
5167:../Dave/Generated/FREERTOS/tasks.c ****                     /* The notified task has a priority above the currently
5168:../Dave/Generated/FREERTOS/tasks.c ****                      * executing task so a yield is required. */
5169:../Dave/Generated/FREERTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
 7398              	 .loc 1 5169 0
 7399 00d8 7B68     	 ldr r3,[r7,#4]
 7400 00da 002B     	 cmp r3,#0
 7401 00dc 02D0     	 beq .L570
5170:../Dave/Generated/FREERTOS/tasks.c ****                     {
5171:../Dave/Generated/FREERTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
 7402              	 .loc 1 5171 0
 7403 00de 7B68     	 ldr r3,[r7,#4]
 7404 00e0 0122     	 mov r2,#1
 7405 00e2 1A60     	 str r2,[r3]
 7406              	.L570:
5172:../Dave/Generated/FREERTOS/tasks.c ****                     }
5173:../Dave/Generated/FREERTOS/tasks.c **** 
5174:../Dave/Generated/FREERTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5175:../Dave/Generated/FREERTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5176:../Dave/Generated/FREERTOS/tasks.c ****                      * safe FreeRTOS function. */
5177:../Dave/Generated/FREERTOS/tasks.c ****                     xYieldPending = pdTRUE;
 7407              	 .loc 1 5177 0
 7408 00e4 094B     	 ldr r3,.L571+20
 7409 00e6 0122     	 mov r2,#1
 7410 00e8 1A60     	 str r2,[r3]
 7411              	.L564:
5178:../Dave/Generated/FREERTOS/tasks.c ****                 }
5179:../Dave/Generated/FREERTOS/tasks.c ****                 else
5180:../Dave/Generated/FREERTOS/tasks.c ****                 {
5181:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5182:../Dave/Generated/FREERTOS/tasks.c ****                 }
5183:../Dave/Generated/FREERTOS/tasks.c ****             }
5184:../Dave/Generated/FREERTOS/tasks.c ****         }
5185:../Dave/Generated/FREERTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 7412              	 .loc 1 5185 0
 7413 00ea BB69     	 ldr r3,[r7,#24]
 7414 00ec 181C     	 mov r0,r3
 7415 00ee FFF7FEFF 	 bl vClearInterruptMaskFromISR
5186:../Dave/Generated/FREERTOS/tasks.c ****     }
 7416              	 .loc 1 5186 0
 7417 00f2 BD46     	 mov sp,r7
 7418 00f4 08B0     	 add sp,sp,#32
 7419              	 
 7420 00f6 80BD     	 pop {r7,pc}
 7421              	.L572:
 7422              	 .align 2
 7423              	.L571:
 7424 00f8 00000000 	 .word uxSchedulerSuspended
 7425 00fc 00000000 	 .word uxTopReadyPriority
 7426 0100 00000000 	 .word pxReadyTasksLists
 7427 0104 00000000 	 .word xPendingReadyList
 7428 0108 00000000 	 .word pxCurrentTCB
 7429 010c 00000000 	 .word xYieldPending
 7430              	 .cfi_endproc
 7431              	.LFE107:
 7433              	 .section .text.xTaskGenericNotifyStateClear,"ax",%progbits
 7434              	 .align 2
 7435              	 .global xTaskGenericNotifyStateClear
 7436              	 .code 16
 7437              	 .thumb_func
 7439              	xTaskGenericNotifyStateClear:
 7440              	.LFB108:
5187:../Dave/Generated/FREERTOS/tasks.c **** 
5188:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5189:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5190:../Dave/Generated/FREERTOS/tasks.c **** 
5191:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5192:../Dave/Generated/FREERTOS/tasks.c **** 
5193:../Dave/Generated/FREERTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5194:../Dave/Generated/FREERTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5195:../Dave/Generated/FREERTOS/tasks.c ****     {
 7441              	 .loc 1 5195 0
 7442              	 .cfi_startproc
 7443 0000 80B5     	 push {r7,lr}
 7444              	.LCFI191:
 7445              	 .cfi_def_cfa_offset 8
 7446              	 .cfi_offset 7,-8
 7447              	 .cfi_offset 14,-4
 7448 0002 84B0     	 sub sp,sp,#16
 7449              	.LCFI192:
 7450              	 .cfi_def_cfa_offset 24
 7451 0004 00AF     	 add r7,sp,#0
 7452              	.LCFI193:
 7453              	 .cfi_def_cfa_register 7
 7454 0006 7860     	 str r0,[r7,#4]
 7455 0008 3960     	 str r1,[r7]
5196:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5197:../Dave/Generated/FREERTOS/tasks.c ****         BaseType_t xReturn;
5198:../Dave/Generated/FREERTOS/tasks.c **** 
5199:../Dave/Generated/FREERTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7456              	 .loc 1 5199 0
 7457 000a 3B68     	 ldr r3,[r7]
 7458 000c 002B     	 cmp r3,#0
 7459 000e 01D0     	 beq .L574
 7460              	 .loc 1 5199 0 is_stmt 0 discriminator 1
 7461              	
 7462 0010 72B6     	 cpsid i
 7463              	
 7464              	 .code 16
 7465              	.L575:
 7466 0012 FEE7     	 b .L575
 7467              	.L574:
5200:../Dave/Generated/FREERTOS/tasks.c **** 
5201:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5202:../Dave/Generated/FREERTOS/tasks.c ****          * its notification state cleared. */
5203:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 7468              	 .loc 1 5203 0 is_stmt 1
 7469 0014 7B68     	 ldr r3,[r7,#4]
 7470 0016 002B     	 cmp r3,#0
 7471 0018 02D1     	 bne .L576
 7472              	 .loc 1 5203 0 is_stmt 0 discriminator 1
 7473 001a 114B     	 ldr r3,.L581
 7474 001c 1B68     	 ldr r3,[r3]
 7475 001e 00E0     	 b .L577
 7476              	.L576:
 7477              	 .loc 1 5203 0 discriminator 2
 7478 0020 7B68     	 ldr r3,[r7,#4]
 7479              	.L577:
 7480              	 .loc 1 5203 0 discriminator 4
 7481 0022 BB60     	 str r3,[r7,#8]
5204:../Dave/Generated/FREERTOS/tasks.c **** 
5205:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7482              	 .loc 1 5205 0 is_stmt 1 discriminator 4
 7483 0024 FFF7FEFF 	 bl vPortEnterCritical
5206:../Dave/Generated/FREERTOS/tasks.c ****         {
5207:../Dave/Generated/FREERTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 7484              	 .loc 1 5207 0 discriminator 4
 7485 0028 BA68     	 ldr r2,[r7,#8]
 7486 002a 6821     	 mov r1,#104
 7487 002c 3B68     	 ldr r3,[r7]
 7488 002e D318     	 add r3,r2,r3
 7489 0030 5B18     	 add r3,r3,r1
 7490 0032 1B79     	 ldrb r3,[r3,#4]
 7491 0034 DBB2     	 uxtb r3,r3
 7492 0036 022B     	 cmp r3,#2
 7493 0038 09D1     	 bne .L578
5208:../Dave/Generated/FREERTOS/tasks.c ****             {
5209:../Dave/Generated/FREERTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 7494              	 .loc 1 5209 0
 7495 003a BA68     	 ldr r2,[r7,#8]
 7496 003c 6821     	 mov r1,#104
 7497 003e 3B68     	 ldr r3,[r7]
 7498 0040 D318     	 add r3,r2,r3
 7499 0042 5B18     	 add r3,r3,r1
 7500 0044 0022     	 mov r2,#0
 7501 0046 1A71     	 strb r2,[r3,#4]
5210:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdPASS;
 7502              	 .loc 1 5210 0
 7503 0048 0123     	 mov r3,#1
 7504 004a FB60     	 str r3,[r7,#12]
 7505 004c 01E0     	 b .L579
 7506              	.L578:
5211:../Dave/Generated/FREERTOS/tasks.c ****             }
5212:../Dave/Generated/FREERTOS/tasks.c ****             else
5213:../Dave/Generated/FREERTOS/tasks.c ****             {
5214:../Dave/Generated/FREERTOS/tasks.c ****                 xReturn = pdFAIL;
 7507              	 .loc 1 5214 0
 7508 004e 0023     	 mov r3,#0
 7509 0050 FB60     	 str r3,[r7,#12]
 7510              	.L579:
5215:../Dave/Generated/FREERTOS/tasks.c ****             }
5216:../Dave/Generated/FREERTOS/tasks.c ****         }
5217:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7511              	 .loc 1 5217 0
 7512 0052 FFF7FEFF 	 bl vPortExitCritical
5218:../Dave/Generated/FREERTOS/tasks.c **** 
5219:../Dave/Generated/FREERTOS/tasks.c ****         return xReturn;
 7513              	 .loc 1 5219 0
 7514 0056 FB68     	 ldr r3,[r7,#12]
5220:../Dave/Generated/FREERTOS/tasks.c ****     }
 7515              	 .loc 1 5220 0
 7516 0058 181C     	 mov r0,r3
 7517 005a BD46     	 mov sp,r7
 7518 005c 04B0     	 add sp,sp,#16
 7519              	 
 7520 005e 80BD     	 pop {r7,pc}
 7521              	.L582:
 7522              	 .align 2
 7523              	.L581:
 7524 0060 00000000 	 .word pxCurrentTCB
 7525              	 .cfi_endproc
 7526              	.LFE108:
 7528              	 .section .text.ulTaskGenericNotifyValueClear,"ax",%progbits
 7529              	 .align 2
 7530              	 .global ulTaskGenericNotifyValueClear
 7531              	 .code 16
 7532              	 .thumb_func
 7534              	ulTaskGenericNotifyValueClear:
 7535              	.LFB109:
5221:../Dave/Generated/FREERTOS/tasks.c **** 
5222:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5223:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5224:../Dave/Generated/FREERTOS/tasks.c **** 
5225:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5226:../Dave/Generated/FREERTOS/tasks.c **** 
5227:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5228:../Dave/Generated/FREERTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5229:../Dave/Generated/FREERTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5230:../Dave/Generated/FREERTOS/tasks.c ****     {
 7536              	 .loc 1 5230 0
 7537              	 .cfi_startproc
 7538 0000 80B5     	 push {r7,lr}
 7539              	.LCFI194:
 7540              	 .cfi_def_cfa_offset 8
 7541              	 .cfi_offset 7,-8
 7542              	 .cfi_offset 14,-4
 7543 0002 86B0     	 sub sp,sp,#24
 7544              	.LCFI195:
 7545              	 .cfi_def_cfa_offset 32
 7546 0004 00AF     	 add r7,sp,#0
 7547              	.LCFI196:
 7548              	 .cfi_def_cfa_register 7
 7549 0006 F860     	 str r0,[r7,#12]
 7550 0008 B960     	 str r1,[r7,#8]
 7551 000a 7A60     	 str r2,[r7,#4]
5231:../Dave/Generated/FREERTOS/tasks.c ****         TCB_t * pxTCB;
5232:../Dave/Generated/FREERTOS/tasks.c ****         uint32_t ulReturn;
5233:../Dave/Generated/FREERTOS/tasks.c **** 
5234:../Dave/Generated/FREERTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5235:../Dave/Generated/FREERTOS/tasks.c ****          * its notification state cleared. */
5236:../Dave/Generated/FREERTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
 7552              	 .loc 1 5236 0
 7553 000c FB68     	 ldr r3,[r7,#12]
 7554 000e 002B     	 cmp r3,#0
 7555 0010 02D1     	 bne .L584
 7556              	 .loc 1 5236 0 is_stmt 0 discriminator 1
 7557 0012 114B     	 ldr r3,.L587
 7558 0014 1B68     	 ldr r3,[r3]
 7559 0016 00E0     	 b .L585
 7560              	.L584:
 7561              	 .loc 1 5236 0 discriminator 2
 7562 0018 FB68     	 ldr r3,[r7,#12]
 7563              	.L585:
 7564              	 .loc 1 5236 0 discriminator 4
 7565 001a 7B61     	 str r3,[r7,#20]
5237:../Dave/Generated/FREERTOS/tasks.c **** 
5238:../Dave/Generated/FREERTOS/tasks.c ****         taskENTER_CRITICAL();
 7566              	 .loc 1 5238 0 is_stmt 1 discriminator 4
 7567 001c FFF7FEFF 	 bl vPortEnterCritical
5239:../Dave/Generated/FREERTOS/tasks.c ****         {
5240:../Dave/Generated/FREERTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5241:../Dave/Generated/FREERTOS/tasks.c ****              * then clear the bit mask. */
5242:../Dave/Generated/FREERTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 7568              	 .loc 1 5242 0 discriminator 4
 7569 0020 7B69     	 ldr r3,[r7,#20]
 7570 0022 BA68     	 ldr r2,[r7,#8]
 7571 0024 1A32     	 add r2,r2,#26
 7572 0026 9200     	 lsl r2,r2,#2
 7573 0028 D358     	 ldr r3,[r2,r3]
 7574 002a 3B61     	 str r3,[r7,#16]
5243:../Dave/Generated/FREERTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 7575              	 .loc 1 5243 0 discriminator 4
 7576 002c 7B69     	 ldr r3,[r7,#20]
 7577 002e BA68     	 ldr r2,[r7,#8]
 7578 0030 1A32     	 add r2,r2,#26
 7579 0032 9200     	 lsl r2,r2,#2
 7580 0034 D358     	 ldr r3,[r2,r3]
 7581 0036 7A68     	 ldr r2,[r7,#4]
 7582 0038 D243     	 mvn r2,r2
 7583 003a 1A40     	 and r2,r3
 7584 003c 111C     	 mov r1,r2
 7585 003e 7B69     	 ldr r3,[r7,#20]
 7586 0040 BA68     	 ldr r2,[r7,#8]
 7587 0042 1A32     	 add r2,r2,#26
 7588 0044 9200     	 lsl r2,r2,#2
 7589 0046 D150     	 str r1,[r2,r3]
5244:../Dave/Generated/FREERTOS/tasks.c ****         }
5245:../Dave/Generated/FREERTOS/tasks.c ****         taskEXIT_CRITICAL();
 7590              	 .loc 1 5245 0 discriminator 4
 7591 0048 FFF7FEFF 	 bl vPortExitCritical
5246:../Dave/Generated/FREERTOS/tasks.c **** 
5247:../Dave/Generated/FREERTOS/tasks.c ****         return ulReturn;
 7592              	 .loc 1 5247 0 discriminator 4
 7593 004c 3B69     	 ldr r3,[r7,#16]
5248:../Dave/Generated/FREERTOS/tasks.c ****     }
 7594              	 .loc 1 5248 0 discriminator 4
 7595 004e 181C     	 mov r0,r3
 7596 0050 BD46     	 mov sp,r7
 7597 0052 06B0     	 add sp,sp,#24
 7598              	 
 7599 0054 80BD     	 pop {r7,pc}
 7600              	.L588:
 7601 0056 C046     	 .align 2
 7602              	.L587:
 7603 0058 00000000 	 .word pxCurrentTCB
 7604              	 .cfi_endproc
 7605              	.LFE109:
 7607              	 .section .text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7608              	 .align 2
 7609              	 .code 16
 7610              	 .thumb_func
 7612              	prvAddCurrentTaskToDelayedList:
 7613              	.LFB110:
5249:../Dave/Generated/FREERTOS/tasks.c **** 
5250:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5251:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5252:../Dave/Generated/FREERTOS/tasks.c **** 
5253:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5254:../Dave/Generated/FREERTOS/tasks.c **** 
5255:../Dave/Generated/FREERTOS/tasks.c ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5256:../Dave/Generated/FREERTOS/tasks.c ****     {
5257:../Dave/Generated/FREERTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5258:../Dave/Generated/FREERTOS/tasks.c ****     }
5259:../Dave/Generated/FREERTOS/tasks.c **** 
5260:../Dave/Generated/FREERTOS/tasks.c **** #endif
5261:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
5262:../Dave/Generated/FREERTOS/tasks.c **** 
5263:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5264:../Dave/Generated/FREERTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5265:../Dave/Generated/FREERTOS/tasks.c **** {
 7614              	 .loc 1 5265 0
 7615              	 .cfi_startproc
 7616 0000 80B5     	 push {r7,lr}
 7617              	.LCFI197:
 7618              	 .cfi_def_cfa_offset 8
 7619              	 .cfi_offset 7,-8
 7620              	 .cfi_offset 14,-4
 7621 0002 84B0     	 sub sp,sp,#16
 7622              	.LCFI198:
 7623              	 .cfi_def_cfa_offset 24
 7624 0004 00AF     	 add r7,sp,#0
 7625              	.LCFI199:
 7626              	 .cfi_def_cfa_register 7
 7627 0006 7860     	 str r0,[r7,#4]
 7628 0008 3960     	 str r1,[r7]
5266:../Dave/Generated/FREERTOS/tasks.c ****     TickType_t xTimeToWake;
5267:../Dave/Generated/FREERTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 7629              	 .loc 1 5267 0
 7630 000a 234B     	 ldr r3,.L593
 7631 000c 1B68     	 ldr r3,[r3]
 7632 000e FB60     	 str r3,[r7,#12]
5268:../Dave/Generated/FREERTOS/tasks.c **** 
5269:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5270:../Dave/Generated/FREERTOS/tasks.c ****         {
5271:../Dave/Generated/FREERTOS/tasks.c ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5272:../Dave/Generated/FREERTOS/tasks.c ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5273:../Dave/Generated/FREERTOS/tasks.c ****              * when the task leaves the Blocked state. */
5274:../Dave/Generated/FREERTOS/tasks.c ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
 7633              	 .loc 1 5274 0
 7634 0010 224B     	 ldr r3,.L593+4
 7635 0012 1B68     	 ldr r3,[r3]
 7636 0014 6D22     	 mov r2,#109
 7637 0016 0021     	 mov r1,#0
 7638 0018 9954     	 strb r1,[r3,r2]
5275:../Dave/Generated/FREERTOS/tasks.c ****         }
5276:../Dave/Generated/FREERTOS/tasks.c ****     #endif
5277:../Dave/Generated/FREERTOS/tasks.c **** 
5278:../Dave/Generated/FREERTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5279:../Dave/Generated/FREERTOS/tasks.c ****      * as the same list item is used for both lists. */
5280:../Dave/Generated/FREERTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7639              	 .loc 1 5280 0
 7640 001a 204B     	 ldr r3,.L593+4
 7641 001c 1B68     	 ldr r3,[r3]
 7642 001e 0433     	 add r3,r3,#4
 7643 0020 181C     	 mov r0,r3
 7644 0022 FFF7FEFF 	 bl uxListRemove
5281:../Dave/Generated/FREERTOS/tasks.c ****     {
5282:../Dave/Generated/FREERTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5283:../Dave/Generated/FREERTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5284:../Dave/Generated/FREERTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5285:../Dave/Generated/FREERTOS/tasks.c ****     }
5286:../Dave/Generated/FREERTOS/tasks.c ****     else
5287:../Dave/Generated/FREERTOS/tasks.c ****     {
5288:../Dave/Generated/FREERTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5289:../Dave/Generated/FREERTOS/tasks.c ****     }
5290:../Dave/Generated/FREERTOS/tasks.c **** 
5291:../Dave/Generated/FREERTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5292:../Dave/Generated/FREERTOS/tasks.c ****         {
5293:../Dave/Generated/FREERTOS/tasks.c ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 7645              	 .loc 1 5293 0
 7646 0026 7B68     	 ldr r3,[r7,#4]
 7647 0028 0133     	 add r3,r3,#1
 7648 002a 0BD1     	 bne .L590
 7649              	 .loc 1 5293 0 is_stmt 0 discriminator 1
 7650 002c 3B68     	 ldr r3,[r7]
 7651 002e 002B     	 cmp r3,#0
 7652 0030 08D0     	 beq .L590
5294:../Dave/Generated/FREERTOS/tasks.c ****             {
5295:../Dave/Generated/FREERTOS/tasks.c ****                 /* Add the task to the suspended task list instead of a delayed task
5296:../Dave/Generated/FREERTOS/tasks.c ****                  * list to ensure it is not woken by a timing event.  It will block
5297:../Dave/Generated/FREERTOS/tasks.c ****                  * indefinitely. */
5298:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7653              	 .loc 1 5298 0 is_stmt 1
 7654 0032 1A4B     	 ldr r3,.L593+4
 7655 0034 1B68     	 ldr r3,[r3]
 7656 0036 0433     	 add r3,r3,#4
 7657 0038 194A     	 ldr r2,.L593+8
 7658 003a 101C     	 mov r0,r2
 7659 003c 191C     	 mov r1,r3
 7660 003e FFF7FEFF 	 bl vListInsertEnd
 7661 0042 26E0     	 b .L589
 7662              	.L590:
5299:../Dave/Generated/FREERTOS/tasks.c ****             }
5300:../Dave/Generated/FREERTOS/tasks.c ****             else
5301:../Dave/Generated/FREERTOS/tasks.c ****             {
5302:../Dave/Generated/FREERTOS/tasks.c ****                 /* Calculate the time at which the task should be woken if the event
5303:../Dave/Generated/FREERTOS/tasks.c ****                  * does not occur.  This may overflow but this doesn't matter, the
5304:../Dave/Generated/FREERTOS/tasks.c ****                  * kernel will manage it correctly. */
5305:../Dave/Generated/FREERTOS/tasks.c ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 7663              	 .loc 1 5305 0
 7664 0044 FA68     	 ldr r2,[r7,#12]
 7665 0046 7B68     	 ldr r3,[r7,#4]
 7666 0048 D318     	 add r3,r2,r3
 7667 004a BB60     	 str r3,[r7,#8]
5306:../Dave/Generated/FREERTOS/tasks.c **** 
5307:../Dave/Generated/FREERTOS/tasks.c ****                 /* The list item will be inserted in wake time order. */
5308:../Dave/Generated/FREERTOS/tasks.c ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 7668              	 .loc 1 5308 0
 7669 004c 134B     	 ldr r3,.L593+4
 7670 004e 1B68     	 ldr r3,[r3]
 7671 0050 BA68     	 ldr r2,[r7,#8]
 7672 0052 5A60     	 str r2,[r3,#4]
5309:../Dave/Generated/FREERTOS/tasks.c **** 
5310:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTimeToWake < xConstTickCount )
 7673              	 .loc 1 5310 0
 7674 0054 BA68     	 ldr r2,[r7,#8]
 7675 0056 FB68     	 ldr r3,[r7,#12]
 7676 0058 9A42     	 cmp r2,r3
 7677 005a 09D2     	 bcs .L592
5311:../Dave/Generated/FREERTOS/tasks.c ****                 {
5312:../Dave/Generated/FREERTOS/tasks.c ****                     /* Wake time has overflowed.  Place this item in the overflow
5313:../Dave/Generated/FREERTOS/tasks.c ****                      * list. */
5314:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7678              	 .loc 1 5314 0
 7679 005c 114B     	 ldr r3,.L593+12
 7680 005e 1A68     	 ldr r2,[r3]
 7681 0060 0E4B     	 ldr r3,.L593+4
 7682 0062 1B68     	 ldr r3,[r3]
 7683 0064 0433     	 add r3,r3,#4
 7684 0066 101C     	 mov r0,r2
 7685 0068 191C     	 mov r1,r3
 7686 006a FFF7FEFF 	 bl vListInsert
 7687 006e 10E0     	 b .L589
 7688              	.L592:
5315:../Dave/Generated/FREERTOS/tasks.c ****                 }
5316:../Dave/Generated/FREERTOS/tasks.c ****                 else
5317:../Dave/Generated/FREERTOS/tasks.c ****                 {
5318:../Dave/Generated/FREERTOS/tasks.c ****                     /* The wake time has not overflowed, so the current block list
5319:../Dave/Generated/FREERTOS/tasks.c ****                      * is used. */
5320:../Dave/Generated/FREERTOS/tasks.c ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 7689              	 .loc 1 5320 0
 7690 0070 0D4B     	 ldr r3,.L593+16
 7691 0072 1A68     	 ldr r2,[r3]
 7692 0074 094B     	 ldr r3,.L593+4
 7693 0076 1B68     	 ldr r3,[r3]
 7694 0078 0433     	 add r3,r3,#4
 7695 007a 101C     	 mov r0,r2
 7696 007c 191C     	 mov r1,r3
 7697 007e FFF7FEFF 	 bl vListInsert
5321:../Dave/Generated/FREERTOS/tasks.c **** 
5322:../Dave/Generated/FREERTOS/tasks.c ****                     /* If the task entering the blocked state was placed at the
5323:../Dave/Generated/FREERTOS/tasks.c ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5324:../Dave/Generated/FREERTOS/tasks.c ****                      * needs to be updated too. */
5325:../Dave/Generated/FREERTOS/tasks.c ****                     if( xTimeToWake < xNextTaskUnblockTime )
 7698              	 .loc 1 5325 0
 7699 0082 0A4B     	 ldr r3,.L593+20
 7700 0084 1B68     	 ldr r3,[r3]
 7701 0086 BA68     	 ldr r2,[r7,#8]
 7702 0088 9A42     	 cmp r2,r3
 7703 008a 02D2     	 bcs .L589
5326:../Dave/Generated/FREERTOS/tasks.c ****                     {
5327:../Dave/Generated/FREERTOS/tasks.c ****                         xNextTaskUnblockTime = xTimeToWake;
 7704              	 .loc 1 5327 0
 7705 008c 074B     	 ldr r3,.L593+20
 7706 008e BA68     	 ldr r2,[r7,#8]
 7707 0090 1A60     	 str r2,[r3]
 7708              	.L589:
5328:../Dave/Generated/FREERTOS/tasks.c ****                     }
5329:../Dave/Generated/FREERTOS/tasks.c ****                     else
5330:../Dave/Generated/FREERTOS/tasks.c ****                     {
5331:../Dave/Generated/FREERTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
5332:../Dave/Generated/FREERTOS/tasks.c ****                     }
5333:../Dave/Generated/FREERTOS/tasks.c ****                 }
5334:../Dave/Generated/FREERTOS/tasks.c ****             }
5335:../Dave/Generated/FREERTOS/tasks.c ****         }
5336:../Dave/Generated/FREERTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5337:../Dave/Generated/FREERTOS/tasks.c ****         {
5338:../Dave/Generated/FREERTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5339:../Dave/Generated/FREERTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5340:../Dave/Generated/FREERTOS/tasks.c ****              * will manage it correctly. */
5341:../Dave/Generated/FREERTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
5342:../Dave/Generated/FREERTOS/tasks.c **** 
5343:../Dave/Generated/FREERTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5344:../Dave/Generated/FREERTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5345:../Dave/Generated/FREERTOS/tasks.c **** 
5346:../Dave/Generated/FREERTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
5347:../Dave/Generated/FREERTOS/tasks.c ****             {
5348:../Dave/Generated/FREERTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5349:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5350:../Dave/Generated/FREERTOS/tasks.c ****             }
5351:../Dave/Generated/FREERTOS/tasks.c ****             else
5352:../Dave/Generated/FREERTOS/tasks.c ****             {
5353:../Dave/Generated/FREERTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list is used. */
5354:../Dave/Generated/FREERTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:../Dave/Generated/FREERTOS/tasks.c **** 
5356:../Dave/Generated/FREERTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the head of the
5357:../Dave/Generated/FREERTOS/tasks.c ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5358:../Dave/Generated/FREERTOS/tasks.c ****                  * too. */
5359:../Dave/Generated/FREERTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:../Dave/Generated/FREERTOS/tasks.c ****                 {
5361:../Dave/Generated/FREERTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:../Dave/Generated/FREERTOS/tasks.c ****                 }
5363:../Dave/Generated/FREERTOS/tasks.c ****                 else
5364:../Dave/Generated/FREERTOS/tasks.c ****                 {
5365:../Dave/Generated/FREERTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:../Dave/Generated/FREERTOS/tasks.c ****                 }
5367:../Dave/Generated/FREERTOS/tasks.c ****             }
5368:../Dave/Generated/FREERTOS/tasks.c **** 
5369:../Dave/Generated/FREERTOS/tasks.c ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5370:../Dave/Generated/FREERTOS/tasks.c ****             ( void ) xCanBlockIndefinitely;
5371:../Dave/Generated/FREERTOS/tasks.c ****         }
5372:../Dave/Generated/FREERTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5373:../Dave/Generated/FREERTOS/tasks.c **** }
 7709              	 .loc 1 5373 0
 7710 0092 BD46     	 mov sp,r7
 7711 0094 04B0     	 add sp,sp,#16
 7712              	 
 7713 0096 80BD     	 pop {r7,pc}
 7714              	.L594:
 7715              	 .align 2
 7716              	.L593:
 7717 0098 00000000 	 .word xTickCount
 7718 009c 00000000 	 .word pxCurrentTCB
 7719 00a0 00000000 	 .word xSuspendedTaskList
 7720 00a4 00000000 	 .word pxOverflowDelayedTaskList
 7721 00a8 00000000 	 .word pxDelayedTaskList
 7722 00ac 00000000 	 .word xNextTaskUnblockTime
 7723              	 .cfi_endproc
 7724              	.LFE110:
 7726              	 .text
 7727              	.Letext0:
 7728              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 7729              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 7730              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 7731              	 .file 5 "../Dave/Generated/FREERTOS/projdefs.h"
 7732              	 .file 6 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Dave/Generated/FREERTOS/portable/GCC/portmacro.h"
 7733              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 7734              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 7735              	 .file 9 "C:/Users/sankar/Desktop/DAVE ide/Uart_demo/RTOS_Demo/Libraries/CMSIS/Include/cmsis_gcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:22     .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:19     .bss.pxCurrentTCB:00000000 $d
    {standard input}:25     .bss.pxReadyTasksLists:00000000 $d
    {standard input}:28     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:31     .bss.xDelayedTaskList1:00000000 $d
    {standard input}:34     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:37     .bss.xDelayedTaskList2:00000000 $d
    {standard input}:40     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:43     .bss.pxDelayedTaskList:00000000 $d
    {standard input}:46     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:49     .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:52     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:55     .bss.xPendingReadyList:00000000 $d
    {standard input}:58     .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:61     .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:64     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:67     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:70     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:73     .bss.xSuspendedTaskList:00000000 $d
    {standard input}:76     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:79     .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:82     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:85     .bss.xTickCount:00000000 $d
    {standard input}:88     .bss.xTickCount:00000000 xTickCount
    {standard input}:91     .bss.uxTopReadyPriority:00000000 $d
    {standard input}:94     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:97     .bss.xSchedulerRunning:00000000 $d
    {standard input}:100    .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:103    .bss.xPendedTicks:00000000 $d
    {standard input}:106    .bss.xPendedTicks:00000000 xPendedTicks
    {standard input}:109    .bss.xYieldPending:00000000 $d
    {standard input}:112    .bss.xYieldPending:00000000 xYieldPending
    {standard input}:115    .bss.xNumOfOverflows:00000000 $d
    {standard input}:118    .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:121    .bss.uxTaskNumber:00000000 $d
    {standard input}:124    .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:127    .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:130    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:133    .bss.xIdleTaskHandle:00000000 $d
    {standard input}:136    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:143    .data.uxTopUsedPriority:00000000 uxTopUsedPriority
    {standard input}:140    .data.uxTopUsedPriority:00000000 $d
    {standard input}:146    .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:149    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:152    .text.xTaskCreate:00000000 $t
    {standard input}:157    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:268    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
    {standard input}:485    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
    {standard input}:264    .text.prvInitialiseNewTask:00000000 $t
    {standard input}:476    .text.prvInitialiseNewTask:00000134 $d
    {standard input}:481    .text.prvAddNewTaskToReadyList:00000000 $t
    {standard input}:4736   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
    {standard input}:609    .text.prvAddNewTaskToReadyList:000000b4 $d
    {standard input}:619    .text.vTaskDelete:00000000 $t
    {standard input}:624    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:5305   .text.prvDeleteTCB:00000000 prvDeleteTCB
    {standard input}:5343   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:749    .text.vTaskDelete:000000a8 $d
    {standard input}:760    .text.xTaskDelayUntil:00000000 $t
    {standard input}:765    .text.xTaskDelayUntil:00000000 xTaskDelayUntil
    {standard input}:2157   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:7612   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:2193   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:914    .text.xTaskDelayUntil:000000b0 $d
    {standard input}:920    .text.vTaskDelay:00000000 $t
    {standard input}:925    .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:988    .text.vTaskDelay:00000044 $d
    {standard input}:993    .text.eTaskGetState:00000000 $t
    {standard input}:998    .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1171   .text.eTaskGetState:000000e0 $d
    {standard input}:1180   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1185   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1234   .text.uxTaskPriorityGet:00000030 $d
    {standard input}:1239   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1244   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1297   .text.uxTaskPriorityGetFromISR:00000038 $d
    {standard input}:1302   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1307   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1499   .text.vTaskPrioritySet:0000010c $d
    {standard input}:1506   .text.vTaskSuspend:00000000 $t
    {standard input}:1511   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:3556   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:1667   .text.vTaskSuspend:000000d4 $d
    {standard input}:1676   .text.prvTaskIsTaskSuspended:00000000 $t
    {standard input}:1680   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
    {standard input}:1746   .text.prvTaskIsTaskSuspended:00000044 $d
    {standard input}:1752   .text.vTaskResume:00000000 $t
    {standard input}:1757   .text.vTaskResume:00000000 vTaskResume
    {standard input}:1860   .text.vTaskResume:0000008c $d
    {standard input}:1867   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:1872   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:1994   .text.xTaskResumeFromISR:000000ac $d
    {standard input}:2004   .rodata:00000000 $d
    {standard input}:2008   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2013   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2101   .text.vTaskStartScheduler:00000068 $d
    {standard input}:4547   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2112   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2117   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2147   .text.vTaskEndScheduler:00000014 $d
    {standard input}:2152   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2183   .text.vTaskSuspendAll:00000014 $d
    {standard input}:2188   .text.xTaskResumeAll:00000000 $t
    {standard input}:3316   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2372   .text.xTaskResumeAll:000000f8 $d
    {standard input}:2384   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2389   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2419   .text.xTaskGetTickCount:00000018 $d
    {standard input}:2424   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2429   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:2462   .text.xTaskGetTickCountFromISR:0000001c $d
    {standard input}:2467   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:2472   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:2495   .text.uxTaskGetNumberOfTasks:00000010 $d
    {standard input}:2500   .text.pcTaskGetName:00000000 $t
    {standard input}:2505   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:2559   .text.pcTaskGetName:00000030 $d
    {standard input}:2564   .text.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:2568   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:2739   .text.xTaskGetHandle:00000000 $t
    {standard input}:2744   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:2878   .text.xTaskGetHandle:000000bc $d
    {standard input}:2887   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:2892   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:5061   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
    {standard input}:3052   .text.uxTaskGetSystemState:0000010c $d
    {standard input}:3062   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:3067   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:3103   .text.xTaskGetIdleTaskHandle:0000001c $d
    {standard input}:3108   .text.xTaskCatchUpTicks:00000000 $t
    {standard input}:3113   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
    {standard input}:3166   .text.xTaskCatchUpTicks:00000038 $d
    {standard input}:3172   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3177   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3303   .text.xTaskAbortDelay:000000b0 $d
    {standard input}:3311   .text.xTaskIncrementTick:00000000 $t
    {standard input}:3536   .text.xTaskIncrementTick:00000134 $d
    {standard input}:3551   .text.vTaskSwitchContext:00000000 $t
    {standard input}:3669   .text.vTaskSwitchContext:0000008c $d
    {standard input}:3678   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:3683   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:3733   .text.vTaskPlaceOnEventList:00000034 $d
    {standard input}:3738   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:3743   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:3816   .text.vTaskPlaceOnUnorderedEventList:00000050 $d
    {standard input}:3822   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:3827   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:3888   .text.vTaskPlaceOnEventListRestricted:00000044 $d
    {standard input}:3893   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:3898   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:4015   .text.xTaskRemoveFromEventList:000000a0 $d
    {standard input}:4025   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:4030   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
    {standard input}:4141   .text.vTaskRemoveFromUnorderedEventList:00000090 $d
    {standard input}:4150   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:4155   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:4205   .text.vTaskSetTimeOutState:00000030 $d
    {standard input}:4211   .text.vTaskInternalSetTimeOutState:00000000 $t
    {standard input}:4216   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
    {standard input}:4250   .text.vTaskInternalSetTimeOutState:00000020 $d
    {standard input}:4256   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:4261   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:4410   .text.xTaskCheckForTimeOut:000000bc $d
    {standard input}:4417   .text.vTaskMissedYield:00000000 $t
    {standard input}:4422   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:4445   .text.vTaskMissedYield:00000010 $d
    {standard input}:4450   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:4455   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:4500   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:4505   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:4543   .text.prvIdleTask:00000000 $t
    {standard input}:4827   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
    {standard input}:4579   .text.prvIdleTask:0000001c $d
    {standard input}:4584   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:4589   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:4654   .text.vTaskSetThreadLocalStoragePointer:00000040 $d
    {standard input}:4659   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:4664   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:4727   .text.pvTaskGetThreadLocalStoragePointer:00000044 $d
    {standard input}:4732   .text.prvInitialiseTaskLists:00000000 $t
    {standard input}:4811   .text.prvInitialiseTaskLists:00000068 $d
    {standard input}:4823   .text.prvCheckTasksWaitingTermination:00000000 $t
    {standard input}:4891   .text.prvCheckTasksWaitingTermination:0000004c $d
    {standard input}:4898   .text.vTaskGetInfo:00000000 $t
    {standard input}:4903   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:5187   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
    {standard input}:5052   .text.vTaskGetInfo:000000d0 $d
    {standard input}:5057   .text.prvListTasksWithinSingleList:00000000 $t
    {standard input}:5183   .text.prvTaskCheckFreeStackSpace:00000000 $t
    {standard input}:5240   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:5245   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:5296   .text.uxTaskGetStackHighWaterMark:00000034 $d
    {standard input}:5301   .text.prvDeleteTCB:00000000 $t
    {standard input}:5339   .text.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:5383   .text.prvResetNextTaskUnblockTime:00000028 $d
    {standard input}:5389   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:5394   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:5424   .text.xTaskGetCurrentTaskHandle:00000018 $d
    {standard input}:5429   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:5434   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:5484   .text.xTaskGetSchedulerState:00000030 $d
    {standard input}:5490   .text.xTaskPriorityInherit:00000000 $t
    {standard input}:5495   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
    {standard input}:5631   .text.xTaskPriorityInherit:000000c4 $d
    {standard input}:5638   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:5643   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:5774   .text.xTaskPriorityDisinherit:000000ac $d
    {standard input}:5781   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
    {standard input}:5786   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
    {standard input}:5942   .text.vTaskPriorityDisinheritAfterTimeout:000000d0 $d
    {standard input}:5949   .text.prvWriteNameToBuffer:00000000 $t
    {standard input}:5953   .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
    {standard input}:6023   .text.vTaskList:00000000 $t
    {standard input}:6028   .text.vTaskList:00000000 vTaskList
    {standard input}:6103   .rodata.vTaskList:00000000 $d
    {standard input}:6248   .text.vTaskList:00000144 $d
    {standard input}:6255   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:6260   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:6300   .text.uxTaskResetEventItemValue:00000028 $d
    {standard input}:6305   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:6310   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:6345   .text.pvTaskIncrementMutexHeldCount:00000020 $d
    {standard input}:6350   .text.ulTaskGenericNotifyTake:00000000 $t
    {standard input}:6355   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
    {standard input}:6479   .text.ulTaskGenericNotifyTake:000000b0 $d
    {standard input}:6484   .text.xTaskGenericNotifyWait:00000000 $t
    {standard input}:6489   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
    {standard input}:6642   .text.xTaskGenericNotifyWait:000000e4 $d
    {standard input}:6647   .text.xTaskGenericNotify:00000000 $t
    {standard input}:6652   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:6748   .rodata.xTaskGenericNotify:00000000 $d
    {standard input}:6917   .text.xTaskGenericNotify:00000158 $d
    {standard input}:6926   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:6931   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:7029   .rodata.xTaskGenericNotifyFromISR:00000000 $d
    {standard input}:7226   .text.xTaskGenericNotifyFromISR:00000188 $d
    {standard input}:7238   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
    {standard input}:7243   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
    {standard input}:7424   .text.vTaskGenericNotifyGiveFromISR:000000f8 $d
    {standard input}:7434   .text.xTaskGenericNotifyStateClear:00000000 $t
    {standard input}:7439   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
    {standard input}:7524   .text.xTaskGenericNotifyStateClear:00000060 $d
    {standard input}:7529   .text.ulTaskGenericNotifyValueClear:00000000 $t
    {standard input}:7534   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
    {standard input}:7603   .text.ulTaskGenericNotifyValueClear:00000058 $d
    {standard input}:7608   .text.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:7717   .text.prvAddCurrentTaskToDelayedList:00000098 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
ulSetInterruptMaskFromISR
vClearInterruptMaskFromISR
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
